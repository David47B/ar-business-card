var mG=Object.defineProperty;var ik=Object.getOwnPropertySymbols;var gG=Object.prototype.hasOwnProperty,yG=Object.prototype.propertyIsEnumerable;var sk=(E,i,u)=>i in E?mG(E,i,{enumerable:!0,configurable:!0,writable:!0,value:u}):E[i]=u,MT=(E,i)=>{for(var u in i||(i={}))gG.call(i,u)&&sk(E,u,i[u]);if(ik)for(var u of ik(i))yG.call(i,u)&&sk(E,u,i[u]);return E};const xG=function(){const i=document.createElement("link").relList;if(i&&i.supports&&i.supports("modulepreload"))return;for(const v of document.querySelectorAll('link[rel="modulepreload"]'))g(v);new MutationObserver(v=>{for(const b of v)if(b.type==="childList")for(const M of b.addedNodes)M.tagName==="LINK"&&M.rel==="modulepreload"&&g(M)}).observe(document,{childList:!0,subtree:!0});function u(v){const b={};return v.integrity&&(b.integrity=v.integrity),v.referrerpolicy&&(b.referrerPolicy=v.referrerpolicy),v.crossorigin==="use-credentials"?b.credentials="include":v.crossorigin==="anonymous"?b.credentials="omit":b.credentials="same-origin",b}function g(v){if(v.ep)return;v.ep=!0;const b=u(v);fetch(v.href,b)}};xG();/*! For license information please see mindar-image-three.prod.js.LICENSE.txt */(()=>{var E={61113:function(g){g.exports=function(v){var b={};function M(N){if(b[N])return b[N].exports;var F=b[N]={i:N,l:!1,exports:{}};return v[N].call(F.exports,F,F.exports,M),F.l=!0,F.exports}return M.m=v,M.c=b,M.d=function(N,F,D){M.o(N,F)||Object.defineProperty(N,F,{enumerable:!0,get:D})},M.r=function(N){typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(N,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(N,"__esModule",{value:!0})},M.t=function(N,F){if(1&F&&(N=M(N)),8&F||4&F&&typeof N=="object"&&N&&N.__esModule)return N;var D=Object.create(null);if(M.r(D),Object.defineProperty(D,"default",{enumerable:!0,value:N}),2&F&&typeof N!="string")for(var O in N)M.d(D,O,function(z){return N[z]}.bind(null,O));return D},M.n=function(N){var F=N&&N.__esModule?function(){return N.default}:function(){return N};return M.d(F,"a",F),F},M.o=function(N,F){return Object.prototype.hasOwnProperty.call(N,F)},M.p="",M(M.s=0)}([function(v,b,M){M.r(b),M.d(b,"encode",function(){return et}),M.d(b,"decode",function(){return Nn}),M.d(b,"decodeAsync",function(){return vn}),M.d(b,"decodeArrayStream",function(){return Re}),M.d(b,"decodeStream",function(){return Ce}),M.d(b,"Decoder",function(){return Bn}),M.d(b,"Encoder",function(){return je}),M.d(b,"ExtensionCodec",function(){return xe}),M.d(b,"ExtData",function(){return V}),M.d(b,"EXT_TIMESTAMP",function(){return fe}),M.d(b,"encodeDateToTimeSpec",function(){return Me}),M.d(b,"encodeTimeSpecToTimestamp",function(){return be}),M.d(b,"decodeTimestampToTimeSpec",function(){return We}),M.d(b,"encodeTimestampExtension",function(){return ce}),M.d(b,"decodeTimestampExtension",function(){return Ke});var N=function(ye,se){var we=typeof Symbol=="function"&&ye[Symbol.iterator];if(!we)return ye;var Fe,Q,Ze=we.call(ye),Je=[];try{for(;(se===void 0||se-- >0)&&!(Fe=Ze.next()).done;)Je.push(Fe.value)}catch(at){Q={error:at}}finally{try{Fe&&!Fe.done&&(we=Ze.return)&&we.call(Ze)}finally{if(Q)throw Q.error}}return Je},F=function(){for(var ye=[],se=0;se<arguments.length;se++)ye=ye.concat(N(arguments[se]));return ye},D=typeof process!="undefined"&&typeof TextEncoder!="undefined"&&typeof TextDecoder!="undefined";function O(ye){for(var se=ye.length,we=0,Fe=0;Fe<se;){var Q=ye.charCodeAt(Fe++);if((4294967168&Q)!=0)if((4294965248&Q)==0)we+=2;else{if(Q>=55296&&Q<=56319&&Fe<se){var Ze=ye.charCodeAt(Fe);(64512&Ze)==56320&&(++Fe,Q=((1023&Q)<<10)+(1023&Ze)+65536)}we+=(4294901760&Q)==0?3:4}else we++}return we}var z=D?new TextEncoder:void 0,B=typeof process!="undefined"?200:0,W=z!=null&&z.encodeInto?function(ye,se,we){z.encodeInto(ye,se.subarray(we))}:function(ye,se,we){se.set(z.encode(ye),we)};function G(ye,se,we){for(var Fe=se,Q=Fe+we,Ze=[],Je="";Fe<Q;){var at=ye[Fe++];if((128&at)==0)Ze.push(at);else if((224&at)==192){var he=63&ye[Fe++];Ze.push((31&at)<<6|he)}else if((240&at)==224){he=63&ye[Fe++];var It=63&ye[Fe++];Ze.push((31&at)<<12|he<<6|It)}else if((248&at)==240){var Le=(7&at)<<18|(he=63&ye[Fe++])<<12|(It=63&ye[Fe++])<<6|63&ye[Fe++];Le>65535&&(Le-=65536,Ze.push(Le>>>10&1023|55296),Le=56320|1023&Le),Ze.push(Le)}else Ze.push(at);Ze.length>=4096&&(Je+=String.fromCharCode.apply(String,F(Ze)),Ze.length=0)}return Ze.length>0&&(Je+=String.fromCharCode.apply(String,F(Ze))),Je}var K=D?new TextDecoder:null,J=typeof process!="undefined"?200:0,V=function(ye,se){this.type=ye,this.data=se};function Z(ye,se,we){var Fe=Math.floor(we/4294967296),Q=we;ye.setUint32(se,Fe),ye.setUint32(se+4,Q)}function le(ye,se){return 4294967296*ye.getInt32(se)+ye.getUint32(se+4)}var fe=-1;function be(ye){var se,we=ye.sec,Fe=ye.nsec;if(we>=0&&Fe>=0&&we<=17179869183){if(Fe===0&&we<=4294967295){var Q=new Uint8Array(4);return(se=new DataView(Q.buffer)).setUint32(0,we),Q}var Ze=we/4294967296,Je=4294967295&we;return Q=new Uint8Array(8),(se=new DataView(Q.buffer)).setUint32(0,Fe<<2|3&Ze),se.setUint32(4,Je),Q}return Q=new Uint8Array(12),(se=new DataView(Q.buffer)).setUint32(0,Fe),Z(se,4,we),Q}function Me(ye){var se=ye.getTime(),we=Math.floor(se/1e3),Fe=1e6*(se-1e3*we),Q=Math.floor(Fe/1e9);return{sec:we+Q,nsec:Fe-1e9*Q}}function ce(ye){return ye instanceof Date?be(Me(ye)):null}function We(ye){var se=new DataView(ye.buffer,ye.byteOffset,ye.byteLength);switch(ye.byteLength){case 4:return{sec:se.getUint32(0),nsec:0};case 8:var we=se.getUint32(0);return{sec:4294967296*(3&we)+se.getUint32(4),nsec:we>>>2};case 12:return{sec:le(se,4),nsec:se.getUint32(0)};default:throw new Error("Unrecognized data size for timestamp: "+ye.length)}}function Ke(ye){var se=We(ye);return new Date(1e3*se.sec+se.nsec/1e6)}var Ye={type:fe,encode:ce,decode:Ke},xe=function(){function ye(){this.builtInEncoders=[],this.builtInDecoders=[],this.encoders=[],this.decoders=[],this.register(Ye)}return ye.prototype.register=function(se){var we=se.type,Fe=se.encode,Q=se.decode;if(we>=0)this.encoders[we]=Fe,this.decoders[we]=Q;else{var Ze=1+we;this.builtInEncoders[Ze]=Fe,this.builtInDecoders[Ze]=Q}},ye.prototype.tryToEncode=function(se,we){for(var Fe=0;Fe<this.builtInEncoders.length;Fe++)if((Q=this.builtInEncoders[Fe])!=null&&(Ze=Q(se,we))!=null)return new V(-1-Fe,Ze);for(Fe=0;Fe<this.encoders.length;Fe++){var Q,Ze;if((Q=this.encoders[Fe])!=null&&(Ze=Q(se,we))!=null)return new V(Fe,Ze)}return se instanceof V?se:null},ye.prototype.decode=function(se,we,Fe){var Q=we<0?this.builtInDecoders[-1-we]:this.decoders[we];return Q?Q(se,we,Fe):new V(we,se)},ye.defaultCodec=new ye,ye}();function ue(ye){return ye instanceof Uint8Array?ye:ArrayBuffer.isView(ye)?new Uint8Array(ye.buffer,ye.byteOffset,ye.byteLength):ye instanceof ArrayBuffer?new Uint8Array(ye):Uint8Array.from(ye)}var Se=function(ye){var se=typeof Symbol=="function"&&Symbol.iterator,we=se&&ye[se],Fe=0;if(we)return we.call(ye);if(ye&&typeof ye.length=="number")return{next:function(){return ye&&Fe>=ye.length&&(ye=void 0),{value:ye&&ye[Fe++],done:!ye}}};throw new TypeError(se?"Object is not iterable.":"Symbol.iterator is not defined.")},je=function(){function ye(se,we,Fe,Q,Ze,Je,at){se===void 0&&(se=xe.defaultCodec),Fe===void 0&&(Fe=100),Q===void 0&&(Q=2048),Ze===void 0&&(Ze=!1),Je===void 0&&(Je=!1),at===void 0&&(at=!1),this.extensionCodec=se,this.context=we,this.maxDepth=Fe,this.initialBufferSize=Q,this.sortKeys=Ze,this.forceFloat32=Je,this.ignoreUndefined=at,this.pos=0,this.view=new DataView(new ArrayBuffer(this.initialBufferSize)),this.bytes=new Uint8Array(this.view.buffer)}return ye.prototype.encode=function(se,we){if(we>this.maxDepth)throw new Error("Too deep objects in depth "+we);se==null?this.encodeNil():typeof se=="boolean"?this.encodeBoolean(se):typeof se=="number"?this.encodeNumber(se):typeof se=="string"?this.encodeString(se):this.encodeObject(se,we)},ye.prototype.getUint8Array=function(){return this.bytes.subarray(0,this.pos)},ye.prototype.ensureBufferSizeToWrite=function(se){var we=this.pos+se;this.view.byteLength<we&&this.resizeBuffer(2*we)},ye.prototype.resizeBuffer=function(se){var we=new ArrayBuffer(se),Fe=new Uint8Array(we),Q=new DataView(we);Fe.set(this.bytes),this.view=Q,this.bytes=Fe},ye.prototype.encodeNil=function(){this.writeU8(192)},ye.prototype.encodeBoolean=function(se){se===!1?this.writeU8(194):this.writeU8(195)},ye.prototype.encodeNumber=function(se){Number.isSafeInteger(se)?se>=0?se<128?this.writeU8(se):se<256?(this.writeU8(204),this.writeU8(se)):se<65536?(this.writeU8(205),this.writeU16(se)):se<4294967296?(this.writeU8(206),this.writeU32(se)):(this.writeU8(207),this.writeU64(se)):se>=-32?this.writeU8(224|se+32):se>=-128?(this.writeU8(208),this.writeI8(se)):se>=-32768?(this.writeU8(209),this.writeI16(se)):se>=-2147483648?(this.writeU8(210),this.writeI32(se)):(this.writeU8(211),this.writeI64(se)):this.forceFloat32?(this.writeU8(202),this.writeF32(se)):(this.writeU8(203),this.writeF64(se))},ye.prototype.writeStringHeader=function(se){if(se<32)this.writeU8(160+se);else if(se<256)this.writeU8(217),this.writeU8(se);else if(se<65536)this.writeU8(218),this.writeU16(se);else{if(!(se<4294967296))throw new Error("Too long string: "+se+" bytes in UTF-8");this.writeU8(219),this.writeU32(se)}},ye.prototype.encodeString=function(se){var we=se.length;if(D&&we>B){var Fe=O(se);this.ensureBufferSizeToWrite(5+Fe),this.writeStringHeader(Fe),W(se,this.bytes,this.pos),this.pos+=Fe}else Fe=O(se),this.ensureBufferSizeToWrite(5+Fe),this.writeStringHeader(Fe),function(Q,Ze,Je){for(var at=Q.length,he=Je,It=0;It<at;){var Le=Q.charCodeAt(It++);if((4294967168&Le)!=0){if((4294965248&Le)==0)Ze[he++]=Le>>6&31|192;else{if(Le>=55296&&Le<=56319&&It<at){var _t=Q.charCodeAt(It);(64512&_t)==56320&&(++It,Le=((1023&Le)<<10)+(1023&_t)+65536)}(4294901760&Le)==0?(Ze[he++]=Le>>12&15|224,Ze[he++]=Le>>6&63|128):(Ze[he++]=Le>>18&7|240,Ze[he++]=Le>>12&63|128,Ze[he++]=Le>>6&63|128)}Ze[he++]=63&Le|128}else Ze[he++]=Le}}(se,this.bytes,this.pos),this.pos+=Fe},ye.prototype.encodeObject=function(se,we){var Fe=this.extensionCodec.tryToEncode(se,this.context);if(Fe!=null)this.encodeExtension(Fe);else if(Array.isArray(se))this.encodeArray(se,we);else if(ArrayBuffer.isView(se))this.encodeBinary(se);else{if(typeof se!="object")throw new Error("Unrecognized object: "+Object.prototype.toString.apply(se));this.encodeMap(se,we)}},ye.prototype.encodeBinary=function(se){var we=se.byteLength;if(we<256)this.writeU8(196),this.writeU8(we);else if(we<65536)this.writeU8(197),this.writeU16(we);else{if(!(we<4294967296))throw new Error("Too large binary: "+we);this.writeU8(198),this.writeU32(we)}var Fe=ue(se);this.writeU8a(Fe)},ye.prototype.encodeArray=function(se,we){var Fe,Q,Ze=se.length;if(Ze<16)this.writeU8(144+Ze);else if(Ze<65536)this.writeU8(220),this.writeU16(Ze);else{if(!(Ze<4294967296))throw new Error("Too large array: "+Ze);this.writeU8(221),this.writeU32(Ze)}try{for(var Je=Se(se),at=Je.next();!at.done;at=Je.next()){var he=at.value;this.encode(he,we+1)}}catch(It){Fe={error:It}}finally{try{at&&!at.done&&(Q=Je.return)&&Q.call(Je)}finally{if(Fe)throw Fe.error}}},ye.prototype.countWithoutUndefined=function(se,we){var Fe,Q,Ze=0;try{for(var Je=Se(we),at=Je.next();!at.done;at=Je.next())se[at.value]!==void 0&&Ze++}catch(he){Fe={error:he}}finally{try{at&&!at.done&&(Q=Je.return)&&Q.call(Je)}finally{if(Fe)throw Fe.error}}return Ze},ye.prototype.encodeMap=function(se,we){var Fe,Q,Ze=Object.keys(se);this.sortKeys&&Ze.sort();var Je=this.ignoreUndefined?this.countWithoutUndefined(se,Ze):Ze.length;if(Je<16)this.writeU8(128+Je);else if(Je<65536)this.writeU8(222),this.writeU16(Je);else{if(!(Je<4294967296))throw new Error("Too large map object: "+Je);this.writeU8(223),this.writeU32(Je)}try{for(var at=Se(Ze),he=at.next();!he.done;he=at.next()){var It=he.value,Le=se[It];this.ignoreUndefined&&Le===void 0||(this.encodeString(It),this.encode(Le,we+1))}}catch(_t){Fe={error:_t}}finally{try{he&&!he.done&&(Q=at.return)&&Q.call(at)}finally{if(Fe)throw Fe.error}}},ye.prototype.encodeExtension=function(se){var we=se.data.length;if(we===1)this.writeU8(212);else if(we===2)this.writeU8(213);else if(we===4)this.writeU8(214);else if(we===8)this.writeU8(215);else if(we===16)this.writeU8(216);else if(we<256)this.writeU8(199),this.writeU8(we);else if(we<65536)this.writeU8(200),this.writeU16(we);else{if(!(we<4294967296))throw new Error("Too large extension object: "+we);this.writeU8(201),this.writeU32(we)}this.writeI8(se.type),this.writeU8a(se.data)},ye.prototype.writeU8=function(se){this.ensureBufferSizeToWrite(1),this.view.setUint8(this.pos,se),this.pos++},ye.prototype.writeU8a=function(se){var we=se.length;this.ensureBufferSizeToWrite(we),this.bytes.set(se,this.pos),this.pos+=we},ye.prototype.writeI8=function(se){this.ensureBufferSizeToWrite(1),this.view.setInt8(this.pos,se),this.pos++},ye.prototype.writeU16=function(se){this.ensureBufferSizeToWrite(2),this.view.setUint16(this.pos,se),this.pos+=2},ye.prototype.writeI16=function(se){this.ensureBufferSizeToWrite(2),this.view.setInt16(this.pos,se),this.pos+=2},ye.prototype.writeU32=function(se){this.ensureBufferSizeToWrite(4),this.view.setUint32(this.pos,se),this.pos+=4},ye.prototype.writeI32=function(se){this.ensureBufferSizeToWrite(4),this.view.setInt32(this.pos,se),this.pos+=4},ye.prototype.writeF32=function(se){this.ensureBufferSizeToWrite(4),this.view.setFloat32(this.pos,se),this.pos+=4},ye.prototype.writeF64=function(se){this.ensureBufferSizeToWrite(8),this.view.setFloat64(this.pos,se),this.pos+=8},ye.prototype.writeU64=function(se){this.ensureBufferSizeToWrite(8),function(we,Fe,Q){var Ze=Q/4294967296,Je=Q;we.setUint32(Fe,Ze),we.setUint32(Fe+4,Je)}(this.view,this.pos,se),this.pos+=8},ye.prototype.writeI64=function(se){this.ensureBufferSizeToWrite(8),Z(this.view,this.pos,se),this.pos+=8},ye}(),rt={};function et(ye,se){se===void 0&&(se=rt);var we=new je(se.extensionCodec,se.context,se.maxDepth,se.initialBufferSize,se.sortKeys,se.forceFloat32,se.ignoreUndefined);return we.encode(ye,1),we.getUint8Array()}function ot(ye){return(ye<0?"-":"")+"0x"+Math.abs(ye).toString(16).padStart(2,"0")}var Et=function(){function ye(se,we){se===void 0&&(se=16),we===void 0&&(we=16),this.maxKeyLength=se,this.maxLengthPerKey=we,this.caches=[];for(var Fe=0;Fe<this.maxKeyLength;Fe++)this.caches.push([])}return ye.prototype.canBeCached=function(se){return se>0&&se<=this.maxKeyLength},ye.prototype.get=function(se,we,Fe){var Q=this.caches[Fe-1],Ze=Q.length;e:for(var Je=0;Je<Ze;Je++){for(var at=Q[Je],he=at.bytes,It=0;It<Fe;It++)if(he[It]!==se[we+It])continue e;return at.value}return null},ye.prototype.store=function(se,we){var Fe=this.caches[se.length-1],Q={bytes:se,value:we};Fe.length>=this.maxLengthPerKey?Fe[Math.random()*Fe.length|0]=Q:Fe.push(Q)},ye.prototype.decode=function(se,we,Fe){var Q=this.get(se,we,Fe);if(Q!=null)return Q;var Ze=G(se,we,Fe),Je=Uint8Array.prototype.slice.call(se,we,we+Fe);return this.store(Je,Ze),Ze},ye}(),tn=function(ye,se){var we,Fe,Q,Ze,Je={label:0,sent:function(){if(1&Q[0])throw Q[1];return Q[1]},trys:[],ops:[]};return Ze={next:at(0),throw:at(1),return:at(2)},typeof Symbol=="function"&&(Ze[Symbol.iterator]=function(){return this}),Ze;function at(he){return function(It){return function(Le){if(we)throw new TypeError("Generator is already executing.");for(;Je;)try{if(we=1,Fe&&(Q=2&Le[0]?Fe.return:Le[0]?Fe.throw||((Q=Fe.return)&&Q.call(Fe),0):Fe.next)&&!(Q=Q.call(Fe,Le[1])).done)return Q;switch(Fe=0,Q&&(Le=[2&Le[0],Q.value]),Le[0]){case 0:case 1:Q=Le;break;case 4:return Je.label++,{value:Le[1],done:!1};case 5:Je.label++,Fe=Le[1],Le=[0];continue;case 7:Le=Je.ops.pop(),Je.trys.pop();continue;default:if(!((Q=(Q=Je.trys).length>0&&Q[Q.length-1])||Le[0]!==6&&Le[0]!==2)){Je=0;continue}if(Le[0]===3&&(!Q||Le[1]>Q[0]&&Le[1]<Q[3])){Je.label=Le[1];break}if(Le[0]===6&&Je.label<Q[1]){Je.label=Q[1],Q=Le;break}if(Q&&Je.label<Q[2]){Je.label=Q[2],Je.ops.push(Le);break}Q[2]&&Je.ops.pop(),Je.trys.pop();continue}Le=se.call(ye,Je)}catch(_t){Le=[6,_t],Fe=0}finally{we=Q=0}if(5&Le[0])throw Le[1];return{value:Le[0]?Le[1]:void 0,done:!0}}([he,It])}}},ln=function(ye){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var se,we=ye[Symbol.asyncIterator];return we?we.call(ye):(ye=typeof __values=="function"?__values(ye):ye[Symbol.iterator](),se={},Fe("next"),Fe("throw"),Fe("return"),se[Symbol.asyncIterator]=function(){return this},se);function Fe(Q){se[Q]=ye[Q]&&function(Ze){return new Promise(function(Je,at){(function(he,It,Le,_t){Promise.resolve(_t).then(function(Wt){he({value:Wt,done:Le})},It)})(Je,at,(Ze=ye[Q](Ze)).done,Ze.value)})}}},Vt=function(ye){return this instanceof Vt?(this.v=ye,this):new Vt(ye)},En=function(ye,se,we){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var Fe,Q=we.apply(ye,se||[]),Ze=[];return Fe={},Je("next"),Je("throw"),Je("return"),Fe[Symbol.asyncIterator]=function(){return this},Fe;function Je(_t){Q[_t]&&(Fe[_t]=function(Wt){return new Promise(function(on,qn){Ze.push([_t,Wt,on,qn])>1||at(_t,Wt)})})}function at(_t,Wt){try{(on=Q[_t](Wt)).value instanceof Vt?Promise.resolve(on.value.v).then(he,It):Le(Ze[0][2],on)}catch(qn){Le(Ze[0][3],qn)}var on}function he(_t){at("next",_t)}function It(_t){at("throw",_t)}function Le(_t,Wt){_t(Wt),Ze.shift(),Ze.length&&at(Ze[0][0],Ze[0][1])}},Bt=new DataView(new ArrayBuffer(0)),sn=new Uint8Array(Bt.buffer),Mn=function(){try{Bt.getInt8(0)}catch(ye){return ye.constructor}throw new Error("never reached")}(),St=new Mn("Insufficient data"),zn=new Et,Bn=function(){function ye(se,we,Fe,Q,Ze,Je,at,he){se===void 0&&(se=xe.defaultCodec),Fe===void 0&&(Fe=4294967295),Q===void 0&&(Q=4294967295),Ze===void 0&&(Ze=4294967295),Je===void 0&&(Je=4294967295),at===void 0&&(at=4294967295),he===void 0&&(he=zn),this.extensionCodec=se,this.context=we,this.maxStrLength=Fe,this.maxBinLength=Q,this.maxArrayLength=Ze,this.maxMapLength=Je,this.maxExtLength=at,this.cachedKeyDecoder=he,this.totalPos=0,this.pos=0,this.view=Bt,this.bytes=sn,this.headByte=-1,this.stack=[]}return ye.prototype.setBuffer=function(se){this.bytes=ue(se),this.view=function(we){if(we instanceof ArrayBuffer)return new DataView(we);var Fe=ue(we);return new DataView(Fe.buffer,Fe.byteOffset,Fe.byteLength)}(this.bytes),this.pos=0},ye.prototype.appendBuffer=function(se){if(this.headByte!==-1||this.hasRemaining()){var we=this.bytes.subarray(this.pos),Fe=ue(se),Q=new Uint8Array(we.length+Fe.length);Q.set(we),Q.set(Fe,we.length),this.setBuffer(Q)}else this.setBuffer(se)},ye.prototype.hasRemaining=function(se){return se===void 0&&(se=1),this.view.byteLength-this.pos>=se},ye.prototype.createNoExtraBytesError=function(se){var we=this.view,Fe=this.pos;return new RangeError("Extra "+(we.byteLength-Fe)+" byte(s) found at buffer["+se+"]")},ye.prototype.decodeSingleSync=function(){var se=this.decodeSync();if(this.hasRemaining())throw this.createNoExtraBytesError(this.pos);return se},ye.prototype.decodeSingleAsync=function(se){var we,Fe,Q,Ze;return function(Je,at,he,It){return new(he||(he=Promise))(function(Le,_t){function Wt(Ir){try{qn(It.next(Ir))}catch(Sr){_t(Sr)}}function on(Ir){try{qn(It.throw(Ir))}catch(Sr){_t(Sr)}}function qn(Ir){var Sr;Ir.done?Le(Ir.value):(Sr=Ir.value,Sr instanceof he?Sr:new he(function(Kr){Kr(Sr)})).then(Wt,on)}qn((It=It.apply(Je,at||[])).next())})}(this,void 0,void 0,function(){var Je,at,he,It,Le,_t,Wt,on;return tn(this,function(qn){switch(qn.label){case 0:Je=!1,qn.label=1;case 1:qn.trys.push([1,6,7,12]),we=ln(se),qn.label=2;case 2:return[4,we.next()];case 3:if((Fe=qn.sent()).done)return[3,5];if(he=Fe.value,Je)throw this.createNoExtraBytesError(this.totalPos);this.appendBuffer(he);try{at=this.decodeSync(),Je=!0}catch(Ir){if(!(Ir instanceof Mn))throw Ir}this.totalPos+=this.pos,qn.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return It=qn.sent(),Q={error:It},[3,12];case 7:return qn.trys.push([7,,10,11]),Fe&&!Fe.done&&(Ze=we.return)?[4,Ze.call(we)]:[3,9];case 8:qn.sent(),qn.label=9;case 9:return[3,11];case 10:if(Q)throw Q.error;return[7];case 11:return[7];case 12:if(Je){if(this.hasRemaining())throw this.createNoExtraBytesError(this.totalPos);return[2,at]}throw _t=(Le=this).headByte,Wt=Le.pos,on=Le.totalPos,new RangeError("Insufficient data in parcing "+ot(_t)+" at "+on+" ("+Wt+" in the current buffer)")}})})},ye.prototype.decodeArrayStream=function(se){return this.decodeMultiAsync(se,!0)},ye.prototype.decodeStream=function(se){return this.decodeMultiAsync(se,!1)},ye.prototype.decodeMultiAsync=function(se,we){return En(this,arguments,function(){var Fe,Q,Ze,Je,at,he,It,Le,_t;return tn(this,function(Wt){switch(Wt.label){case 0:Fe=we,Q=-1,Wt.label=1;case 1:Wt.trys.push([1,13,14,19]),Ze=ln(se),Wt.label=2;case 2:return[4,Vt(Ze.next())];case 3:if((Je=Wt.sent()).done)return[3,12];if(at=Je.value,we&&Q===0)throw this.createNoExtraBytesError(this.totalPos);this.appendBuffer(at),Fe&&(Q=this.readArraySize(),Fe=!1,this.complete()),Wt.label=4;case 4:Wt.trys.push([4,9,,10]),Wt.label=5;case 5:return[4,Vt(this.decodeSync())];case 6:return[4,Wt.sent()];case 7:return Wt.sent(),--Q==0?[3,8]:[3,5];case 8:return[3,10];case 9:if(!((he=Wt.sent())instanceof Mn))throw he;return[3,10];case 10:this.totalPos+=this.pos,Wt.label=11;case 11:return[3,2];case 12:return[3,19];case 13:return It=Wt.sent(),Le={error:It},[3,19];case 14:return Wt.trys.push([14,,17,18]),Je&&!Je.done&&(_t=Ze.return)?[4,Vt(_t.call(Ze))]:[3,16];case 15:Wt.sent(),Wt.label=16;case 16:return[3,18];case 17:if(Le)throw Le.error;return[7];case 18:return[7];case 19:return[2]}})})},ye.prototype.decodeSync=function(){e:for(;;){var se=this.readHeadByte(),we=void 0;if(se>=224)we=se-256;else if(se<192)if(se<128)we=se;else if(se<144){if((Q=se-128)!=0){this.pushMapState(Q),this.complete();continue e}we={}}else if(se<160){if((Q=se-144)!=0){this.pushArrayState(Q),this.complete();continue e}we=[]}else{var Fe=se-160;we=this.decodeUtf8String(Fe,0)}else if(se===192)we=null;else if(se===194)we=!1;else if(se===195)we=!0;else if(se===202)we=this.readF32();else if(se===203)we=this.readF64();else if(se===204)we=this.readU8();else if(se===205)we=this.readU16();else if(se===206)we=this.readU32();else if(se===207)we=this.readU64();else if(se===208)we=this.readI8();else if(se===209)we=this.readI16();else if(se===210)we=this.readI32();else if(se===211)we=this.readI64();else if(se===217)Fe=this.lookU8(),we=this.decodeUtf8String(Fe,1);else if(se===218)Fe=this.lookU16(),we=this.decodeUtf8String(Fe,2);else if(se===219)Fe=this.lookU32(),we=this.decodeUtf8String(Fe,4);else if(se===220){if((Q=this.readU16())!==0){this.pushArrayState(Q),this.complete();continue e}we=[]}else if(se===221){if((Q=this.readU32())!==0){this.pushArrayState(Q),this.complete();continue e}we=[]}else if(se===222){if((Q=this.readU16())!==0){this.pushMapState(Q),this.complete();continue e}we={}}else if(se===223){if((Q=this.readU32())!==0){this.pushMapState(Q),this.complete();continue e}we={}}else if(se===196){var Q=this.lookU8();we=this.decodeBinary(Q,1)}else if(se===197)Q=this.lookU16(),we=this.decodeBinary(Q,2);else if(se===198)Q=this.lookU32(),we=this.decodeBinary(Q,4);else if(se===212)we=this.decodeExtension(1,0);else if(se===213)we=this.decodeExtension(2,0);else if(se===214)we=this.decodeExtension(4,0);else if(se===215)we=this.decodeExtension(8,0);else if(se===216)we=this.decodeExtension(16,0);else if(se===199)Q=this.lookU8(),we=this.decodeExtension(Q,1);else if(se===200)Q=this.lookU16(),we=this.decodeExtension(Q,2);else{if(se!==201)throw new Error("Unrecognized type byte: "+ot(se));Q=this.lookU32(),we=this.decodeExtension(Q,4)}this.complete();for(var Ze=this.stack;Ze.length>0;){var Je=Ze[Ze.length-1];if(Je.type===0){if(Je.array[Je.position]=we,Je.position++,Je.position!==Je.size)continue e;Ze.pop(),we=Je.array}else{if(Je.type===1){if((at=typeof we)!="string"&&at!=="number")throw new Error("The type of key must be string or number but "+typeof we);Je.key=we,Je.type=2;continue e}if(Je.map[Je.key]=we,Je.readCount++,Je.readCount!==Je.size){Je.key=null,Je.type=1;continue e}Ze.pop(),we=Je.map}}return we}var at},ye.prototype.readHeadByte=function(){return this.headByte===-1&&(this.headByte=this.readU8()),this.headByte},ye.prototype.complete=function(){this.headByte=-1},ye.prototype.readArraySize=function(){var se=this.readHeadByte();switch(se){case 220:return this.readU16();case 221:return this.readU32();default:if(se<160)return se-144;throw new Error("Unrecognized array type byte: "+ot(se))}},ye.prototype.pushMapState=function(se){if(se>this.maxMapLength)throw new Error("Max length exceeded: map length ("+se+") > maxMapLengthLength ("+this.maxMapLength+")");this.stack.push({type:1,size:se,key:null,readCount:0,map:{}})},ye.prototype.pushArrayState=function(se){if(se>this.maxArrayLength)throw new Error("Max length exceeded: array length ("+se+") > maxArrayLength ("+this.maxArrayLength+")");this.stack.push({type:0,size:se,array:new Array(se),position:0})},ye.prototype.decodeUtf8String=function(se,we){var Fe;if(se>this.maxStrLength)throw new Error("Max length exceeded: UTF-8 byte length ("+se+") > maxStrLength ("+this.maxStrLength+")");if(this.bytes.byteLength<this.pos+we+se)throw St;var Q,Ze=this.pos+we;return Q=this.stateIsMapKey()&&((Fe=this.cachedKeyDecoder)===null||Fe===void 0?void 0:Fe.canBeCached(se))?this.cachedKeyDecoder.decode(this.bytes,Ze,se):D&&se>J?function(Je,at,he){var It=Je.subarray(at,at+he);return K.decode(It)}(this.bytes,Ze,se):G(this.bytes,Ze,se),this.pos+=we+se,Q},ye.prototype.stateIsMapKey=function(){return this.stack.length>0&&this.stack[this.stack.length-1].type===1},ye.prototype.decodeBinary=function(se,we){if(se>this.maxBinLength)throw new Error("Max length exceeded: bin length ("+se+") > maxBinLength ("+this.maxBinLength+")");if(!this.hasRemaining(se+we))throw St;var Fe=this.pos+we,Q=this.bytes.subarray(Fe,Fe+se);return this.pos+=we+se,Q},ye.prototype.decodeExtension=function(se,we){if(se>this.maxExtLength)throw new Error("Max length exceeded: ext length ("+se+") > maxExtLength ("+this.maxExtLength+")");var Fe=this.view.getInt8(this.pos+we),Q=this.decodeBinary(se,we+1);return this.extensionCodec.decode(Q,Fe,this.context)},ye.prototype.lookU8=function(){return this.view.getUint8(this.pos)},ye.prototype.lookU16=function(){return this.view.getUint16(this.pos)},ye.prototype.lookU32=function(){return this.view.getUint32(this.pos)},ye.prototype.readU8=function(){var se=this.view.getUint8(this.pos);return this.pos++,se},ye.prototype.readI8=function(){var se=this.view.getInt8(this.pos);return this.pos++,se},ye.prototype.readU16=function(){var se=this.view.getUint16(this.pos);return this.pos+=2,se},ye.prototype.readI16=function(){var se=this.view.getInt16(this.pos);return this.pos+=2,se},ye.prototype.readU32=function(){var se=this.view.getUint32(this.pos);return this.pos+=4,se},ye.prototype.readI32=function(){var se=this.view.getInt32(this.pos);return this.pos+=4,se},ye.prototype.readU64=function(){var se,we,Fe=(se=this.view,we=this.pos,4294967296*se.getUint32(we)+se.getUint32(we+4));return this.pos+=8,Fe},ye.prototype.readI64=function(){var se=le(this.view,this.pos);return this.pos+=8,se},ye.prototype.readF32=function(){var se=this.view.getFloat32(this.pos);return this.pos+=4,se},ye.prototype.readF64=function(){var se=this.view.getFloat64(this.pos);return this.pos+=8,se},ye}(),wn={};function Nn(ye,se){se===void 0&&(se=wn);var we=new Bn(se.extensionCodec,se.context,se.maxStrLength,se.maxBinLength,se.maxArrayLength,se.maxMapLength,se.maxExtLength);return we.setBuffer(ye),we.decodeSingleSync()}var $n=function(ye,se){var we,Fe,Q,Ze,Je={label:0,sent:function(){if(1&Q[0])throw Q[1];return Q[1]},trys:[],ops:[]};return Ze={next:at(0),throw:at(1),return:at(2)},typeof Symbol=="function"&&(Ze[Symbol.iterator]=function(){return this}),Ze;function at(he){return function(It){return function(Le){if(we)throw new TypeError("Generator is already executing.");for(;Je;)try{if(we=1,Fe&&(Q=2&Le[0]?Fe.return:Le[0]?Fe.throw||((Q=Fe.return)&&Q.call(Fe),0):Fe.next)&&!(Q=Q.call(Fe,Le[1])).done)return Q;switch(Fe=0,Q&&(Le=[2&Le[0],Q.value]),Le[0]){case 0:case 1:Q=Le;break;case 4:return Je.label++,{value:Le[1],done:!1};case 5:Je.label++,Fe=Le[1],Le=[0];continue;case 7:Le=Je.ops.pop(),Je.trys.pop();continue;default:if(!((Q=(Q=Je.trys).length>0&&Q[Q.length-1])||Le[0]!==6&&Le[0]!==2)){Je=0;continue}if(Le[0]===3&&(!Q||Le[1]>Q[0]&&Le[1]<Q[3])){Je.label=Le[1];break}if(Le[0]===6&&Je.label<Q[1]){Je.label=Q[1],Q=Le;break}if(Q&&Je.label<Q[2]){Je.label=Q[2],Je.ops.push(Le);break}Q[2]&&Je.ops.pop(),Je.trys.pop();continue}Le=se.call(ye,Je)}catch(_t){Le=[6,_t],Fe=0}finally{we=Q=0}if(5&Le[0])throw Le[1];return{value:Le[0]?Le[1]:void 0,done:!0}}([he,It])}}},Ft=function(ye){return this instanceof Ft?(this.v=ye,this):new Ft(ye)},Jt=function(ye,se,we){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var Fe,Q=we.apply(ye,se||[]),Ze=[];return Fe={},Je("next"),Je("throw"),Je("return"),Fe[Symbol.asyncIterator]=function(){return this},Fe;function Je(_t){Q[_t]&&(Fe[_t]=function(Wt){return new Promise(function(on,qn){Ze.push([_t,Wt,on,qn])>1||at(_t,Wt)})})}function at(_t,Wt){try{(on=Q[_t](Wt)).value instanceof Ft?Promise.resolve(on.value.v).then(he,It):Le(Ze[0][2],on)}catch(qn){Le(Ze[0][3],qn)}var on}function he(_t){at("next",_t)}function It(_t){at("throw",_t)}function Le(_t,Wt){_t(Wt),Ze.shift(),Ze.length&&at(Ze[0][0],Ze[0][1])}};function nn(ye){if(ye==null)throw new Error("Assertion Failure: value must not be null nor undefined")}function Dn(ye){return ye[Symbol.asyncIterator]!=null?ye:function(se){return Jt(this,arguments,function(){var we,Fe,Q,Ze;return $n(this,function(Je){switch(Je.label){case 0:we=se.getReader(),Je.label=1;case 1:Je.trys.push([1,,9,10]),Je.label=2;case 2:return[4,Ft(we.read())];case 3:return Fe=Je.sent(),Q=Fe.done,Ze=Fe.value,Q?[4,Ft(void 0)]:[3,5];case 4:return[2,Je.sent()];case 5:return nn(Ze),[4,Ft(Ze)];case 6:return[4,Je.sent()];case 7:return Je.sent(),[3,2];case 8:return[3,10];case 9:return we.releaseLock(),[7];case 10:return[2]}})})}(ye)}function vn(ye,se){return se===void 0&&(se=wn),function(we,Fe,Q,Ze){return new(Q||(Q=Promise))(function(Je,at){function he(_t){try{Le(Ze.next(_t))}catch(Wt){at(Wt)}}function It(_t){try{Le(Ze.throw(_t))}catch(Wt){at(Wt)}}function Le(_t){var Wt;_t.done?Je(_t.value):(Wt=_t.value,Wt instanceof Q?Wt:new Q(function(on){on(Wt)})).then(he,It)}Le((Ze=Ze.apply(we,Fe||[])).next())})}(this,void 0,void 0,function(){var we;return function(Fe,Q){var Ze,Je,at,he,It={label:0,sent:function(){if(1&at[0])throw at[1];return at[1]},trys:[],ops:[]};return he={next:Le(0),throw:Le(1),return:Le(2)},typeof Symbol=="function"&&(he[Symbol.iterator]=function(){return this}),he;function Le(_t){return function(Wt){return function(on){if(Ze)throw new TypeError("Generator is already executing.");for(;It;)try{if(Ze=1,Je&&(at=2&on[0]?Je.return:on[0]?Je.throw||((at=Je.return)&&at.call(Je),0):Je.next)&&!(at=at.call(Je,on[1])).done)return at;switch(Je=0,at&&(on=[2&on[0],at.value]),on[0]){case 0:case 1:at=on;break;case 4:return It.label++,{value:on[1],done:!1};case 5:It.label++,Je=on[1],on=[0];continue;case 7:on=It.ops.pop(),It.trys.pop();continue;default:if(!((at=(at=It.trys).length>0&&at[at.length-1])||on[0]!==6&&on[0]!==2)){It=0;continue}if(on[0]===3&&(!at||on[1]>at[0]&&on[1]<at[3])){It.label=on[1];break}if(on[0]===6&&It.label<at[1]){It.label=at[1],at=on;break}if(at&&It.label<at[2]){It.label=at[2],It.ops.push(on);break}at[2]&&It.ops.pop(),It.trys.pop();continue}on=Q.call(Fe,It)}catch(qn){on=[6,qn],Je=0}finally{Ze=at=0}if(5&on[0])throw on[1];return{value:on[0]?on[1]:void 0,done:!0}}([_t,Wt])}}}(this,function(Fe){return we=Dn(ye),[2,new Bn(se.extensionCodec,se.context,se.maxStrLength,se.maxBinLength,se.maxArrayLength,se.maxMapLength,se.maxExtLength).decodeSingleAsync(we)]})})}function Re(ye,se){se===void 0&&(se=wn);var we=Dn(ye);return new Bn(se.extensionCodec,se.context,se.maxStrLength,se.maxBinLength,se.maxArrayLength,se.maxMapLength,se.maxExtLength).decodeArrayStream(we)}function Ce(ye,se){se===void 0&&(se=wn);var we=Dn(ye);return new Bn(se.extensionCodec,se.context,se.maxStrLength,se.maxBinLength,se.maxArrayLength,se.maxMapLength,se.maxExtLength).decodeStream(we)}}])},75042:(g,v,b)=>{b.r(v),b.d(v,{Abs:()=>Us,Acos:()=>oi,Acosh:()=>ds,AdadeltaOptimizer:()=>np,AdagradOptimizer:()=>bg,AdamOptimizer:()=>wg,AdamaxOptimizer:()=>Tl,Add:()=>li,AddN:()=>Lc,All:()=>td,Any:()=>nd,ArgMax:()=>rd,ArgMin:()=>Dc,Asin:()=>Lu,Asinh:()=>Pc,Atan:()=>Fc,Atan2:()=>zc,Atanh:()=>Oc,AvgPool:()=>id,AvgPool3D:()=>sd,AvgPool3DGrad:()=>af,AvgPoolGrad:()=>sf,BatchMatMul:()=>ad,BatchToSpaceND:()=>od,Bincount:()=>of,BroadcastArgs:()=>Hm,BroadcastTo:()=>v0,Callback:()=>sA,CallbackList:()=>t2,Cast:()=>Bc,Ceil:()=>$c,ClipByValue:()=>Uc,Complex:()=>lf,ComplexAbs:()=>ld,Concat:()=>ud,Conv2D:()=>cd,Conv2DBackpropFilter:()=>uf,Conv2DBackpropInput:()=>hd,Conv3D:()=>dd,Conv3DBackpropFilterV2:()=>cf,Conv3DBackpropInputV2:()=>hf,Cos:()=>Vc,Cosh:()=>Wc,CropAndResize:()=>df,Cumsum:()=>pd,CustomCallback:()=>r2,DataStorage:()=>Ft,DenseBincount:()=>pf,DepthToSpace:()=>ff,DepthwiseConv2dNative:()=>fd,DepthwiseConv2dNativeBackpropFilter:()=>Du,DepthwiseConv2dNativeBackpropInput:()=>Pu,Diag:()=>Gc,Dilation2D:()=>Fo,Dilation2DBackpropFilter:()=>Fu,Dilation2DBackpropInput:()=>gl,ENV:()=>Ha,EarlyStopping:()=>aA,Einsum:()=>md,Elu:()=>Hc,EluGrad:()=>jm,Environment:()=>zr,Equal:()=>ps,Erf:()=>gd,Exp:()=>yl,ExpandDims:()=>Ou,Expm1:()=>Vl,FFT:()=>mf,Fill:()=>yd,FlipLeftRight:()=>xd,Floor:()=>zu,FloorDiv:()=>jc,FromPixels:()=>Zl,FusedBatchNorm:()=>vd,FusedConv2D:()=>Jl,FusedDepthwiseConv2D:()=>Nf,GatherNd:()=>gf,GatherV2:()=>Oo,GraphModel:()=>vA,Greater:()=>yf,GreaterEqual:()=>Wl,History:()=>n2,IFFT:()=>qm,Identity:()=>bd,Imag:()=>Xm,InputSpec:()=>bs,IsFinite:()=>wd,IsInf:()=>_d,IsNan:()=>Sd,KernelBackend:()=>Jt,LRN:()=>_f,LRNGrad:()=>Km,LayerVariable:()=>KE,LayersModel:()=>Wh,LeakyRelu:()=>xf,Less:()=>vf,LessEqual:()=>bf,LinSpace:()=>Ym,Log:()=>Md,Log1p:()=>Td,LogSoftmax:()=>qc,LogicalAnd:()=>wf,LogicalNot:()=>Ed,LogicalOr:()=>xl,Max:()=>Sf,MaxPool:()=>Mf,MaxPool3D:()=>Tf,MaxPool3DGrad:()=>Jm,MaxPoolGrad:()=>Zm,MaxPoolWithArgmax:()=>Id,Maximum:()=>Ad,Mean:()=>co,Min:()=>Ki,Minimum:()=>Gl,MirrorPad:()=>zo,Mod:()=>vl,MomentumOptimizer:()=>Qo,Multinomial:()=>Vs,Multiply:()=>Vi,Neg:()=>Xc,NonMaxSuppressionV3:()=>Cd,NonMaxSuppressionV4:()=>Ef,NonMaxSuppressionV5:()=>Af,NotEqual:()=>Hl,OP_SCOPE_SUFFIX:()=>lh,OneHot:()=>Qt,OnesLike:()=>kd,Optimizer:()=>Ml,Pack:()=>Ni,PadV2:()=>bl,Pool:()=>Yc,Pow:()=>Nd,Prelu:()=>Ri,Prod:()=>Rd,RMSPropOptimizer:()=>yh,RNN:()=>Mu,Range:()=>Xr,Rank:()=>Ia,Real:()=>Ea,RealDiv:()=>Ul,Reciprocal:()=>Kc,Reduction:()=>ys,Relu:()=>Bu,Relu6:()=>Aa,Reshape:()=>Zi,ResizeBilinear:()=>Dd,ResizeBilinearGrad:()=>Ws,ResizeNearestNeighbor:()=>Te,ResizeNearestNeighborGrad:()=>Ld,Reverse:()=>jl,RotateWithOffset:()=>go,Round:()=>$u,Rsqrt:()=>Bo,SGDOptimizer:()=>vi,ScatterNd:()=>ql,Select:()=>wl,Selu:()=>qa,Sequential:()=>Cm,Sigmoid:()=>Yl,Sign:()=>Xl,Sin:()=>po,Sinh:()=>_l,Slice:()=>ho,Softmax:()=>Jc,Softplus:()=>fo,SpaceToBatchND:()=>Pd,SparseFillEmptyRows:()=>$o,SparseReshape:()=>mo,SparseSegmentMean:()=>Fd,SparseSegmentSum:()=>Qc,SparseToDense:()=>Uo,SplitV:()=>Zc,Sqrt:()=>Uu,Square:()=>eh,SquaredDifference:()=>Vu,Step:()=>rh,StridedSlice:()=>Od,StringNGrams:()=>Vo,StringSplit:()=>Gn,StringToHashBucketFast:()=>Kl,Sub:()=>Gs,Sum:()=>If,SymbolicTensor:()=>bu,Tan:()=>zd,Tanh:()=>Bd,Tensor:()=>Ur,TensorBuffer:()=>pn,Tile:()=>Xa,TopK:()=>th,Transform:()=>Hs,Transpose:()=>$d,Unique:()=>Cf,Unpack:()=>Wo,UnsortedSegmentSum:()=>nh,Variable:()=>Df,ZerosLike:()=>kf,_FusedMatMul:()=>Wu,abs:()=>ur,acos:()=>ec,acosh:()=>xh,add:()=>jt,addN:()=>vh,all:()=>au,any:()=>El,argMax:()=>el,argMin:()=>_g,asin:()=>rp,asinh:()=>bh,atan:()=>ip,atan2:()=>Sg,atanh:()=>Xf,avgPool:()=>ap,avgPool3d:()=>U0,backend:()=>bb,backend_util:()=>le,basicLSTMCell:()=>Eg,batchNorm:()=>nc,batchNorm2d:()=>fs,batchNorm3d:()=>V0,batchNorm4d:()=>W0,batchToSpaceND:()=>uu,bincount:()=>Ag,booleanMaskAsync:()=>gm,broadcastArgs:()=>Ig,broadcastTo:()=>cu,browser:()=>z,buffer:()=>Er,callbacks:()=>FL,cast:()=>un,ceil:()=>tl,clipByValue:()=>Ks,clone:()=>iu,complex:()=>nu,concat:()=>bi,concat1d:()=>G0,concat2d:()=>ga,concat3d:()=>Cg,concat4d:()=>rc,constraints:()=>be,conv1d:()=>op,conv2d:()=>Al,conv2dTranspose:()=>Sh,conv3d:()=>Mh,conv3dTranspose:()=>j0,copyRegisteredKernels:()=>b0,cos:()=>Th,cosh:()=>Kf,cosineWindow:()=>Vg,cumsum:()=>Zf,customGrad:()=>Zo,data:()=>Nn,denseBincount:()=>Eh,deprecationWarn:()=>tp,depthToSpace:()=>Il,depthwiseConv2d:()=>nl,deregisterOp:()=>zL,device_util:()=>F,diag:()=>Cl,dilation2d:()=>ic,disableDeprecationWarnings:()=>mb,dispose:()=>pr,disposeVariables:()=>y_,div:()=>Un,divNoNan:()=>Jf,dot:()=>Qf,dropout:()=>ox,einsum:()=>kg,elu:()=>Es,enableDebugMode:()=>fb,enableProdMode:()=>g_,enclosingPowerOfTwo:()=>lx,engine:()=>Ju,env:()=>At,equal:()=>Ls,erf:()=>Ah,exp:()=>Zs,expandDims:()=>Ds,expm1:()=>up,eye:()=>em,fft:()=>vp,fill:()=>vo,findBackend:()=>xb,findBackendFactory:()=>vb,floor:()=>sc,floorDiv:()=>jf,fused:()=>V,gather:()=>hu,gatherND:()=>Ib,gather_util:()=>B,getBackend:()=>yb,getGradient:()=>Qm,getKernel:()=>Rf,getKernelsForBackend:()=>eg,grad:()=>S_,grads:()=>wb,greater:()=>Js,greaterEqual:()=>_o,ifft:()=>Lh,imag:()=>ac,image:()=>no,inTopKAsync:()=>Cb,initializers:()=>Me,input:()=>T2,io:()=>D,irfft:()=>hm,isFinite:()=>tm,isInf:()=>Ng,isNaN:()=>Ih,keep:()=>Qi,kernel_impls:()=>fe,layers:()=>ce,leakyRelu:()=>cp,less:()=>Ch,lessEqual:()=>kl,linalg:()=>yx,linspace:()=>nm,loadGraphModel:()=>pD,loadLayersModel:()=>s3,localResponseNormalization:()=>rm,log:()=>xa,log1p:()=>So,logSigmoid:()=>_b,logSoftmax:()=>Rg,logSumExp:()=>Lg,logicalAnd:()=>va,logicalNot:()=>oc,logicalOr:()=>lc,logicalXor:()=>X0,losses:()=>z_,matMul:()=>wr,math:()=>O,max:()=>Mo,maxPool:()=>hp,maxPool3d:()=>Nh,maxPoolWithArgmax:()=>Dg,maximum:()=>Qa,mean:()=>Wr,memory:()=>Qu,meshgrid:()=>rl,metrics:()=>We,min:()=>im,minimum:()=>il,mirrorPad:()=>uc,mod:()=>du,model:()=>r3,models:()=>Ke,moments:()=>Rh,movingAverage:()=>ix,mul:()=>qe,multiRNNCell:()=>dp,multinomial:()=>cc,neg:()=>ti,nextFrame:()=>Kg,norm:()=>Ph,notEqual:()=>eo,oneHot:()=>Jd,ones:()=>ba,onesLike:()=>ms,op:()=>$e,outerProduct:()=>Pg,pad:()=>Na,pad1d:()=>pp,pad2d:()=>fp,pad3d:()=>Y0,pad4d:()=>Mb,pool:()=>Fg,pow:()=>Jo,prelu:()=>hc,print:()=>qv,prod:()=>gp,profile:()=>gb,rand:()=>K0,randomGamma:()=>Q0,randomNormal:()=>Tb,randomUniform:()=>Zr,range:()=>Ra,ready:()=>b_,real:()=>yp,reciprocal:()=>am,registerBackend:()=>$0,registerCallbackConstructor:()=>a3,registerGradient:()=>Cr,registerKernel:()=>Lf,registerOp:()=>OL,regularizers:()=>Ye,relu:()=>To,relu6:()=>La,removeBackend:()=>w_,reshape:()=>Xe,reverse:()=>os,reverse1d:()=>ex,reverse2d:()=>om,reverse3d:()=>Eb,reverse4d:()=>xp,rfft:()=>fu,round:()=>Nl,rsqrt:()=>pc,scalar:()=>Yn,scatterND:()=>sx,scatter_util:()=>W,selu:()=>fc,separableConv2d:()=>tx,sequential:()=>i3,serialization:()=>K,setBackend:()=>v_,setPlatform:()=>__,setdiff1dAsync:()=>mc,sigmoid:()=>Rs,sign:()=>lm,signal:()=>gx,sin:()=>um,sinh:()=>gs,slice:()=>Nr,slice1d:()=>Da,slice2d:()=>to,slice3d:()=>Og,slice4d:()=>cm,slice_util:()=>G,softmax:()=>pu,softplus:()=>kh,spaceToBatchND:()=>mp,sparse:()=>bm,sparseToDense:()=>ax,spectral:()=>Yg,split:()=>Qs,sqrt:()=>Ts,square:()=>ei,squaredDifference:()=>sl,squeeze:()=>ls,stack:()=>ea,step:()=>Dh,stridedSlice:()=>zg,string:()=>wm,sub:()=>kn,sum:()=>Ln,sumOutType:()=>Ff,tan:()=>Bg,tanh:()=>tc,tensor:()=>Xs,tensor1d:()=>us,tensor2d:()=>gc,tensor3d:()=>Zv,tensor4d:()=>nx,tensor5d:()=>Ab,tensor6d:()=>dm,tensor_util:()=>N,test_util:()=>J,tidy:()=>st,tile:()=>ya,time:()=>x_,topk:()=>pm,train:()=>$h,transpose:()=>Pr,truncatedNormal:()=>fm,unique:()=>bp,unregisterGradient:()=>Ql,unregisterKernel:()=>Go,unsortedSegmentSum:()=>$g,unstack:()=>Pa,upcastType:()=>On,util:()=>M,valueAndGrad:()=>M_,valueAndGrads:()=>xg,variable:()=>Ug,variableGrads:()=>qf,version:()=>hG,version_converter:()=>bA,version_core:()=>B0,version_layers:()=>Ew,where:()=>as,whereAsync:()=>mm,zeros:()=>ji,zerosLike:()=>Fr});var M={};b.r(M),b.d(M,{arraysEqual:()=>Le,assert:()=>Q,assertNonNegativeIntegerDimensions:()=>Xn,assertNonNull:()=>Je,assertShapesMatch:()=>Ze,bytesFromStringArray:()=>rf,bytesPerElement:()=>Wa,checkConversionForErrors:()=>Rc,clamp:()=>Re,computeStrides:()=>Hn,createScalarValue:()=>qo,createShuffledIndices:()=>qn,decodeString:()=>Mr,distSquared:()=>Fe,encodeString:()=>Ya,fetch:()=>ui,fingerPrint64:()=>ng,flatten:()=>at,getArrayFromDType:()=>Or,getTypedArrayFromDType:()=>Ti,hasEncodingLoss:()=>Ns,hexToLong:()=>Wd,indexToLoc:()=>Zn,inferDtype:()=>Ga,inferFromImplicitShape:()=>Kr,isBoolean:()=>Ru,isFunction:()=>hs,isInt:()=>_t,isNumber:()=>$l,isPromise:()=>dr,isScalarShape:()=>It,isString:()=>$s,isTypedArray:()=>Yi,isValidDtype:()=>nf,locToIndex:()=>Wn,makeOnesTypedArray:()=>lt,makeZerosNestedTypedArray:()=>Xt,makeZerosTypedArray:()=>xt,nearestDivisor:()=>uo,nearestLargerEven:()=>Ce,now:()=>di,parseAxisParam:()=>ir,randUniform:()=>we,repeatedTry:()=>Sr,rightPad:()=>Ir,shuffle:()=>Dn,shuffleCombo:()=>vn,sizeFromShape:()=>he,sizeToSquarishShape:()=>on,squeezeShape:()=>Ui,sum:()=>se,swap:()=>ye,tanh:()=>Wt,toNestedArray:()=>ht,toTypedArray:()=>yn});var N={};b.r(N),b.d(N,{assertTypesMatch:()=>rg,getTensorsInContainer:()=>js,isTensorInList:()=>Yo,makeTypesMatch:()=>Qr});var F={};b.r(F),b.d(F,{isBrowser:()=>qd,isMobile:()=>jd});var D={};b.r(D),b.d(D,{browserFiles:()=>I0,browserHTTPRequest:()=>Gf,concatenateArrayBuffers:()=>og,copyModel:()=>Hv,decodeWeights:()=>uh,encodeWeights:()=>qu,fromMemory:()=>fa,getLoadHandlers:()=>_n,getModelArtifactsForJSON:()=>Xu,getModelArtifactsInfoForJSON:()=>Yu,getSaveHandlers:()=>Tr,http:()=>pg,isHTTPScheme:()=>dg,listModels:()=>Gv,loadWeights:()=>Yv,moveModel:()=>jv,registerLoadRouter:()=>ch,registerSaveRouter:()=>o_,removeModel:()=>ug,weightsLoaderFactory:()=>Kv,withSaveHandler:()=>Ys});var O={};b.r(O),b.d(O,{confusionMatrix:()=>c_});var z={};b.r(z),b.d(z,{fromPixels:()=>Qv,fromPixelsAsync:()=>h_,toPixels:()=>d_});var B={};b.r(B),b.d(B,{prepareAndValidate:()=>mg});var W={};b.r(W),b.d(W,{calculateShapes:()=>ep,validateInput:()=>R0,validateUpdateShape:()=>N0});var G={};b.r(G),b.d(G,{assertParamsValid:()=>L0,computeFlatOffset:()=>P0,computeOutShape:()=>eb,getNormalizedAxes:()=>ib,isSliceContinous:()=>D0,maskToAxes:()=>gg,parseSliceParams:()=>yg,sliceInfo:()=>F0,startForAxis:()=>lb,startIndicesWithElidedDims:()=>sb,stopForAxis:()=>ub,stopIndicesWithElidedDims:()=>ab,stridesForAxis:()=>ob,stridesWithElidedDims:()=>tb});var K={};b.r(K),b.d(K,{Serializable:()=>mh,SerializationMap:()=>Ja,registerClass:()=>Ht});var J={};b.r(J),b.d(J,{TEST_EPSILON_FLOAT16:()=>cb,encodeStrings:()=>su,expectArrayBuffersEqual:()=>m_,expectArraysClose:()=>p_,expectArraysEqual:()=>hb,expectNumbersClose:()=>db,expectPromiseToFail:()=>f_,expectValuesInRange:()=>pb,testEpsilon:()=>O0});var V={};b.r(V),b.d(V,{conv2d:()=>Hg,depthwiseConv2d:()=>hx,matMul:()=>xm});var Z={};b.r(Z),b.d(Z,{collectGatherOpShapeInfo:()=>Ex,computeOutShape:()=>Qb,segOpComputeOptimalWindowSize:()=>Jb});var le={};b.r(le),b.d(le,{ERF_A1:()=>Ep,ERF_A2:()=>Sm,ERF_A3:()=>xx,ERF_A4:()=>iy,ERF_A5:()=>sy,ERF_P:()=>ry,PARALLELIZE_THRESHOLD:()=>Jg,SELU_SCALE:()=>ny,SELU_SCALEALPHA:()=>ty,applyActivation:()=>Fh,assertAndGetBroadcastShape:()=>mr,assertAxesAreInnerMostDims:()=>Di,assertParamsConsistent:()=>Zg,assignToTypedArray:()=>Yb,axesAreInnerMostDims:()=>q0,calculateShapes:()=>ep,checkEinsumDimSizes:()=>_x,combineLocations:()=>Sb,complexWithEvenIndex:()=>qb,complexWithOddIndex:()=>Xb,computeConv2DInfo:()=>Wi,computeConv3DInfo:()=>ou,computeDefaultPad:()=>Mg,computeDilation2DInfo:()=>sp,computeOptimalWindowSize:()=>Qg,computeOutAndReduceShapes:()=>ts,computeOutShape:()=>ro,computePool2DInfo:()=>ma,computePool3DInfo:()=>bo,convertConv2DDataFormat:()=>wo,decodeEinsumEquation:()=>bx,eitherStridesOrDilationsAreOne:()=>es,expandShapeToKeepDim:()=>Gi,exponent:()=>Zb,exponents:()=>Kb,fromStringArrayToUint8:()=>ew,fromUint8ToStringArray:()=>Uh,getAxesPermutation:()=>Hi,getBroadcastDims:()=>gh,getComplexWithIndex:()=>vx,getEinsumComputePath:()=>Sx,getEinsumPermutation:()=>wx,getFusedBiasGradient:()=>Gg,getFusedDyActivation:()=>Wg,getImageCenter:()=>Mp,getInnerMostAxes:()=>Ai,getPermuted:()=>_m,getReductionAxes:()=>Ei,getReshaped:()=>pi,getReshapedPermuted:()=>wi,getSliceBeginCoords:()=>Tp,getSliceSize:()=>ey,getUndoAxesPermutation:()=>ni,isIdentityPermutation:()=>Mx,log:()=>br,mergeRealAndImagArrays:()=>mu,prepareAndValidate:()=>mg,prepareSplitSize:()=>Tx,segment_util:()=>Z,shouldFuse:()=>_p,slice_util:()=>G,splitRealAndImagArrays:()=>jb,tupleValuesAreOne:()=>lu,upcastType:()=>On,validateInput:()=>R0,validateUpdateShape:()=>N0,warn:()=>sr});var fe={};b.r(fe),b.d(fe,{nonMaxSuppressionV3Impl:()=>Rl,nonMaxSuppressionV4Impl:()=>jg,nonMaxSuppressionV5Impl:()=>vm,whereImpl:()=>wp});var be={};b.r(be),b.d(be,{maxNorm:()=>pt,minMaxNorm:()=>hr,nonNeg:()=>rn,unitNorm:()=>Ot});var Me={};b.r(Me),b.d(Me,{constant:()=>LR,glorotNormal:()=>$R,glorotUniform:()=>BR,heNormal:()=>UR,heUniform:()=>VR,identity:()=>OR,leCunNormal:()=>WR,leCunUniform:()=>GR,ones:()=>RR,orthogonal:()=>HR,randomNormal:()=>PR,randomUniform:()=>DR,truncatedNormal:()=>FR,varianceScaling:()=>zR,zeros:()=>NR});var ce={};b.r(ce),b.d(ce,{Layer:()=>Vr,RNN:()=>Mu,RNNCell:()=>$x,activation:()=>S3,add:()=>R3,alphaDropout:()=>mL,average:()=>L3,averagePooling1d:()=>IM,averagePooling2d:()=>CM,averagePooling3d:()=>kM,avgPool1d:()=>V3,avgPool2d:()=>G3,avgPool3d:()=>j3,avgPooling1d:()=>W3,avgPooling2d:()=>H3,avgPooling3d:()=>q3,batchNormalization:()=>B3,bidirectional:()=>oL,concatenate:()=>D3,conv1d:()=>f3,conv2d:()=>m3,conv2dTranspose:()=>g3,conv3d:()=>y3,conv3dTranspose:()=>x3,convLstm2d:()=>rL,convLstm2dCell:()=>iL,cropping2D:()=>b3,dense:()=>M3,depthwiseConv2d:()=>_3,dot:()=>z3,dropout:()=>T3,elu:()=>l3,embedding:()=>N3,flatten:()=>A3,gaussianDropout:()=>fL,gaussianNoise:()=>pL,globalAveragePooling1d:()=>X3,globalAveragePooling2d:()=>Y3,globalMaxPool1d:()=>uL,globalMaxPool2d:()=>cL,globalMaxPooling1d:()=>tA,globalMaxPooling2d:()=>nA,gru:()=>Z3,gruCell:()=>J3,input:()=>T2,inputLayer:()=>o3,layerNormalization:()=>$3,leakyReLU:()=>c3,lstm:()=>Q3,lstmCell:()=>eL,masking:()=>gL,maxPool1d:()=>hL,maxPool2d:()=>dL,maxPooling1d:()=>rA,maxPooling2d:()=>iA,maxPooling3d:()=>K3,maximum:()=>P3,minimum:()=>F3,multiply:()=>O3,permute:()=>k3,prelu:()=>h3,reLU:()=>u3,repeatVector:()=>I3,reshape:()=>C3,rnn:()=>sL,separableConv2d:()=>v3,simpleRNN:()=>tL,simpleRNNCell:()=>nL,softmax:()=>d3,spatialDropout1d:()=>E3,stackedRNNCells:()=>aL,thresholdedReLU:()=>p3,timeDistributed:()=>lL,upSampling2d:()=>w3,zeroPadding2d:()=>U3});var We={};b.r(We),b.d(We,{MAPE:()=>AL,MSE:()=>kL,binaryAccuracy:()=>yL,binaryCrossentropy:()=>xL,categoricalAccuracy:()=>bL,categoricalCrossentropy:()=>wL,cosineProximity:()=>ML,mape:()=>IL,meanAbsoluteError:()=>TL,meanAbsolutePercentageError:()=>EL,meanSquaredError:()=>CL,mse:()=>NL,precision:()=>_L,recall:()=>SL,sparseCategoricalAccuracy:()=>vL});var Ke={};b.r(Ke),b.d(Ke,{modelFromJSON:()=>n3});var Ye={};b.r(Ye),b.d(Ye,{l1:()=>LL,l1l2:()=>RL,l2:()=>DL});var xe={};b.r(xe),b.d(xe,{json:()=>BL});var ue={};b.r(ue),b.d(ue,{json:()=>$L});var Se={};b.r(Se),b.d(Se,{json:()=>UL});var je={};b.r(je),b.d(je,{json:()=>VL});var rt={};b.r(rt),b.d(rt,{json:()=>WL});var et={};b.r(et),b.d(et,{json:()=>GL});var ot={};b.r(ot),b.d(ot,{json:()=>HL});var Et={};b.r(Et),b.d(Et,{json:()=>jL});var tn={};b.r(tn),b.d(tn,{json:()=>qL});var ln={};b.r(ln),b.d(ln,{json:()=>XL});var Vt={};b.r(Vt),b.d(Vt,{json:()=>YL});var En={};b.r(En),b.d(En,{json:()=>KL});var Bt={};b.r(Bt),b.d(Bt,{json:()=>ZL});var sn={};b.r(sn),b.d(sn,{json:()=>JL});var Mn={};b.r(Mn),b.d(Mn,{json:()=>QL});var St={};b.r(St),b.d(St,{json:()=>eD});var zn={};b.r(zn),b.d(zn,{json:()=>tD});var Bn={};b.r(Bn),b.d(Bn,{json:()=>nD});var wn={};b.r(wn),b.d(wn,{json:()=>rD});var Nn={};b.r(Nn),b.d(Nn,{CSVDataset:()=>RA,Dataset:()=>yy,FileDataSource:()=>OA,TextLineDataset:()=>CA,URLDataSource:()=>zA,array:()=>ID,csv:()=>FD,func:()=>OD,generator:()=>zD,microphone:()=>$D,version_data:()=>BA,webcam:()=>BD,zip:()=>CD});var $n={};b.r($n),b.d($n,{addImpl:()=>jA,bincountImpl:()=>eT,bincountReduceImpl:()=>JA,ceilImpl:()=>QA,concatImpl:()=>eI,equalImpl:()=>rI,expImpl:()=>sI,expm1Impl:()=>oI,floorImpl:()=>cI,gatherNdImpl:()=>hI,gatherV2Impl:()=>dI,greaterEqualImpl:()=>fI,greaterImpl:()=>pI,lessEqualImpl:()=>gI,lessImpl:()=>mI,linSpaceImpl:()=>yI,logImpl:()=>xI,maxImpl:()=>vI,maximumImpl:()=>wI,minimumImpl:()=>_I,multiplyImpl:()=>tT,negImpl:()=>MI,notEqualImpl:()=>TI,prodImpl:()=>II,rangeImpl:()=>CI,rsqrtImpl:()=>kI,sigmoidImpl:()=>YD,simpleAbsImpl:()=>XA,sliceImpl:()=>ZA,sparseFillEmptyRowsImpl:()=>LI,sparseReshapeImpl:()=>DI,sparseSegmentReductionImpl:()=>oT,sqrtImpl:()=>Pz,squaredDifferenceImpl:()=>PI,stridedSliceImpl:()=>FI,stringNGramsImpl:()=>OI,stringSplitImpl:()=>zI,stringToHashBucketFastImpl:()=>BI,subImpl:()=>lI,tileImpl:()=>$I,topKImpl:()=>VI,transposeImpl:()=>JM,uniqueImpl:()=>GI});class Ft{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class Jt{refCount(e){return nn("refCount")}incRef(e){return nn("incRef")}timerAvailable(){return!0}time(e){return nn("time")}read(e){return nn("read")}readSync(e){return nn("readSync")}numDataIds(){return nn("numDataIds")}disposeData(e,t){return nn("disposeData")}write(e,t,s){return nn("write")}move(e,t,s,a,l){return nn("move")}memory(){return nn("memory")}floatPrecision(){return nn("floatPrecision")}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}dispose(){return nn("dispose")}}function nn(r){throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Dn(r){let e=r.length,t=0;for(;e>0;)t=Math.random()*e|0,e--,ye(r,e,t)}function vn(r,e){if(r.length!==e.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${e.length}`);let t=r.length,s=0;for(;t>0;)s=Math.random()*t|0,t--,ye(r,t,s),ye(e,t,s)}function Re(r,e,t){return Math.max(r,Math.min(e,t))}function Ce(r){return r%2==0?r:r+1}function ye(r,e,t){const s=r[e];r[e]=r[t],r[t]=s}function se(r){let e=0;for(let t=0;t<r.length;t++)e+=r[t];return e}function we(r,e){const t=Math.random();return e*t+(1-t)*r}function Fe(r,e){let t=0;for(let s=0;s<r.length;s++){const a=Number(r[s])-Number(e[s]);t+=a*a}return t}function Q(r,e){if(!r)throw new Error(typeof e=="string"?e:e())}function Ze(r,e,t=""){Q(Le(r,e),()=>t+` Shapes ${r} and ${e} must match`)}function Je(r){Q(r!=null,()=>"The input to the tensor constructor must be a non-null value.")}function at(r,e=[],t=!1){if(e==null&&(e=[]),Array.isArray(r)||Yi(r)&&!t)for(let s=0;s<r.length;++s)at(r[s],e,t);else e.push(r);return e}function he(r){if(r.length===0)return 1;let e=r[0];for(let t=1;t<r.length;t++)e*=r[t];return e}function It(r){return r.length===0}function Le(r,e){if(r===e)return!0;if(r==null||e==null||r.length!==e.length)return!1;for(let t=0;t<r.length;t++)if(r[t]!==e[t])return!1;return!0}function _t(r){return r%1==0}function Wt(r){if(Math.tanh!=null)return Math.tanh(r);if(r===1/0)return 1;if(r===-1/0)return-1;{const e=Math.exp(2*r);return(e-1)/(e+1)}}function on(r){const e=Math.ceil(Math.sqrt(r));return[e,Math.ceil(r/e)]}function qn(r){const e=new Uint32Array(r);for(let t=0;t<r;++t)e[t]=t;return Dn(e),e}function Ir(r,e){return e<=r.length?r:r+" ".repeat(e-r.length)}function Sr(r,e=s=>0,t){return new Promise((s,a)=>{let l=0;const c=()=>{if(r())return void s();l++;const d=e(l);t!=null&&l>=t?a():setTimeout(c,d)};c()})}function Kr(r,e){let t=1,s=-1;for(let l=0;l<r.length;++l)if(r[l]>=0)t*=r[l];else if(r[l]===-1){if(s!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${l}`);s=l}else if(r[l]<0)throw Error(`Shapes can not be < 0. Found ${r[l]} at dim ${l}`);if(s===-1){if(e>0&&e!==t)throw Error(`Size(${e}) must match the product of shape ${r}`);return r}if(t===0)throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);if(e%t!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);const a=r.slice();return a[s]=e/t,a}function ir(r,e){const t=e.length;return Q((r=r==null?e.map((s,a)=>a):[].concat(r)).every(s=>s>=-t&&s<t),()=>`All values in axis param must be in range [-${t}, ${t}) but got axis ${r}`),Q(r.every(s=>_t(s)),()=>`All values in axis param must be integers but got axis ${r}`),r.map(s=>s<0?t+s:s)}function Ui(r,e){const t=[],s=[],a=e!=null&&Array.isArray(e)&&e.length===0,l=e==null||a?null:ir(e,r).sort();let c=0;for(let d=0;d<r.length;++d){if(l!=null){if(l[c]===d&&r[d]!==1)throw new Error(`Can't squeeze axis ${d} since its dim '${r[d]}' is not 1`);(l[c]==null||l[c]>d)&&r[d]===1&&(t.push(r[d]),s.push(d)),l[c]<=d&&c++}r[d]!==1&&(t.push(r[d]),s.push(d))}return{newShape:t,keptDims:s}}function Ti(r,e){let t=null;if(r==null||r==="float32")t=new Float32Array(e);else if(r==="int32")t=new Int32Array(e);else{if(r!=="bool")throw new Error(`Unknown data type ${r}`);t=new Uint8Array(e)}return t}function Or(r,e){let t=null;if(r==null||r==="float32")t=new Float32Array(e);else if(r==="int32")t=new Int32Array(e);else if(r==="bool")t=new Uint8Array(e);else{if(r!=="string")throw new Error(`Unknown data type ${r}`);t=new Array(e)}return t}function Rc(r,e){for(let t=0;t<r.length;t++){const s=r[t];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${e} being uploaded contains ${s}.`)}}function nf(r){return r==="bool"||r==="complex64"||r==="float32"||r==="int32"||r==="string"}function Ns(r,e){return!(e==="complex64"||e==="float32"&&r!=="complex64"||e==="int32"&&r!=="float32"&&r!=="complex64"||e==="bool"&&r==="bool")}function Yi(r){return r instanceof Float32Array||r instanceof Int32Array||r instanceof Uint8Array}function Wa(r){if(r==="float32"||r==="int32")return 4;if(r==="complex64")return 8;if(r==="bool")return 1;throw new Error(`Unknown dtype ${r}`)}function rf(r){if(r==null)return 0;let e=0;return r.forEach(t=>e+=t.length),e}function $s(r){return typeof r=="string"||r instanceof String}function Ru(r){return typeof r=="boolean"}function $l(r){return typeof r=="number"}function Ga(r){return Array.isArray(r)?Ga(r[0]):r instanceof Float32Array?"float32":r instanceof Int32Array||r instanceof Uint8Array?"int32":$l(r)?"float32":$s(r)?"string":Ru(r)?"bool":"float32"}function hs(r){return!!(r&&r.constructor&&r.call&&r.apply)}function uo(r,e){for(let t=e;t<r;++t)if(r%t==0)return t;return r}function Hn(r){const e=r.length;if(e<2)return[];const t=new Array(e-1);t[e-2]=r[e-1];for(let s=e-3;s>=0;--s)t[s]=t[s+1]*r[s+1];return t}function Ee(r,e,t,s=!1){const a=new Array;if(e.length===1){const l=e[0]*(s?2:1);for(let c=0;c<l;c++)a[c]=t[r+c]}else{const l=e[0],c=e.slice(1),d=c.reduce((m,f)=>m*f)*(s?2:1);for(let m=0;m<l;m++)a[m]=Ee(r+m*d,c,t,s)}return a}function ht(r,e,t=!1){if(r.length===0)return e[0];const s=r.reduce((a,l)=>a*l)*(t?2:1);if(s===0)return[];if(s!==e.length)throw new Error(`[${r}] does not match the input size ${e.length}${t?" for a complex tensor":""}.`);return Ee(0,r,e,t)}function lt(r,e){const t=xt(r,e);for(let s=0;s<t.length;s++)t[s]=1;return t}function xt(r,e){if(e==null||e==="float32"||e==="complex64")return new Float32Array(r);if(e==="int32")return new Int32Array(r);if(e==="bool")return new Uint8Array(r);throw new Error(`Unknown data type ${e}`)}function Xt(r,e){const t=r.reduce((s,a)=>s*a,1);if(e==null||e==="float32")return ht(r,new Float32Array(t));if(e==="int32")return ht(r,new Int32Array(t));if(e==="bool")return ht(r,new Uint8Array(t));throw new Error(`Unknown data type ${e}`)}function Xn(r){r.forEach(e=>{Q(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${r}].`)})}function Wn(r,e,t){if(e===0)return 0;if(e===1)return r[0];let s=r[r.length-1];for(let a=0;a<r.length-1;++a)s+=t[a]*r[a];return s}function Zn(r,e,t){if(e===0)return[];if(e===1)return[r];const s=new Array(e);for(let a=0;a<s.length-1;++a)s[a]=Math.floor(r/t[a]),r-=s[a]*t[a];return s[s.length-1]=r,s}function dr(r){return r&&r.then&&typeof r.then=="function"}function sr(...r){At().getBool("IS_TEST")||At().getBool("PROD")||console.warn(...r)}function br(...r){At().getBool("IS_TEST")||At().getBool("PROD")||console.log(...r)}class zr{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=or,this.populateURLFlags()}setPlatform(e,t){this.platform!=null&&sr(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,s){if(this.flagRegistry[e]={evaluationFn:t,setHook:s},this.urlFlags[e]!=null){const a=this.urlFlags[e];sr(`Setting feature override from URL ${e}: ${a}.`),this.set(e,a)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(dr(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(this.flagRegistry[e]==null)throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,this.flagRegistry[e].setHook!=null&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(this.flagRegistry[e]==null)throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(this.global===void 0||this.global.location===void 0||this.global.location.search===void 0)return;const e=this.getQueryParams(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach(t=>{const[s,a]=t.split(":");this.urlFlags[s]=function(l,c){if((c=c.toLowerCase())==="true"||c==="false")return c==="true";if(""+ +c===c)return+c;throw new Error(`Could not parse value flag value ${c} for flag ${l}.`)}(s,a)})}}function or(r){const e={};return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...s)=>(function(a,l,c){a[decodeURIComponent(l)]=decodeURIComponent(c||"")}(e,s[0],s[1]),s.join("="))),e}function At(){return Ha}let yi,Ha=null;function ca(){if(yi==null){let r;if(typeof window!="undefined")r=window;else if(b.g!==void 0)r=b.g;else if(typeof process!="undefined")r=process;else{if(typeof self=="undefined")throw new Error("Could not find a global object");r=self}yi=r}return yi}function ja(r,e){const t=function(){const s=ca();return s._tfGlobals==null&&(s._tfGlobals=new Map),s._tfGlobals}();if(t.has(r))return t.get(r);{const s=e();return t.set(r,s),t.get(r)}}const Us="Abs",oi="Acos",ds="Acosh",li="Add",Lc="AddN",td="All",nd="Any",rd="ArgMax",Dc="ArgMin",Lu="Asin",Pc="Asinh",Fc="Atan",Oc="Atanh",zc="Atan2",id="AvgPool",sf="AvgPoolGrad",sd="AvgPool3D",af="AvgPool3DGrad",ad="BatchMatMul",od="BatchToSpaceND",of="Bincount",v0="BroadcastTo",Hm="BroadcastArgs",Bc="Cast",$c="Ceil",Uc="ClipByValue",lf="Complex",ld="ComplexAbs",ud="Concat",cd="Conv2D",uf="Conv2DBackpropFilter",hd="Conv2DBackpropInput",dd="Conv3D",cf="Conv3DBackpropFilterV2",hf="Conv3DBackpropInputV2",Vc="Cos",Wc="Cosh",pd="Cumsum",df="CropAndResize",pf="DenseBincount",ff="DepthToSpace",fd="DepthwiseConv2dNative",Du="DepthwiseConv2dNativeBackpropFilter",Pu="DepthwiseConv2dNativeBackpropInput",Gc="Diag",Fo="Dilation2D",gl="Dilation2DBackpropInput",Fu="Dilation2DBackpropFilter",Ul="RealDiv",md="Einsum",Hc="Elu",jm="EluGrad",gd="Erf",ps="Equal",yl="Exp",Ou="ExpandDims",Vl="Expm1",mf="FFT",yd="Fill",xd="FlipLeftRight",zu="Floor",jc="FloorDiv",vd="FusedBatchNorm",Oo="GatherV2",gf="GatherNd",yf="Greater",Wl="GreaterEqual",bd="Identity",qm="IFFT",Xm="Imag",wd="IsFinite",_d="IsInf",Sd="IsNan",xf="LeakyRelu",vf="Less",bf="LessEqual",Ym="LinSpace",Md="Log",Td="Log1p",wf="LogicalAnd",Ed="LogicalNot",xl="LogicalOr",qc="LogSoftmax",_f="LRN",Km="LRNGrad",Sf="Max",Ad="Maximum",Mf="MaxPool",Zm="MaxPoolGrad",Tf="MaxPool3D",Jm="MaxPool3DGrad",Id="MaxPoolWithArgmax",co="Mean",Ki="Min",Gl="Minimum",zo="MirrorPad",vl="Mod",Vs="Multinomial",Vi="Multiply",Xc="Neg",Hl="NotEqual",Cd="NonMaxSuppressionV3",Ef="NonMaxSuppressionV4",Af="NonMaxSuppressionV5",kd="OnesLike",Qt="OneHot",Ni="Pack",bl="PadV2",Yc="Pool",Nd="Pow",Ri="Prelu",Rd="Prod",Xr="Range",Ea="Real",Kc="Reciprocal",Bu="Relu",Zi="Reshape",Te="ResizeNearestNeighbor",Ld="ResizeNearestNeighborGrad",Dd="ResizeBilinear",Ws="ResizeBilinearGrad",Aa="Relu6",jl="Reverse",$u="Round",Bo="Rsqrt",ql="ScatterNd",wl="Select",qa="Selu",ho="Slice",po="Sin",_l="Sinh",Xl="Sign",Yl="Sigmoid",fo="Softplus",Uu="Sqrt",If="Sum",Pd="SpaceToBatchND",Zc="SplitV",Jc="Softmax",$o="SparseFillEmptyRows",mo="SparseReshape",Fd="SparseSegmentMean",Qc="SparseSegmentSum",Uo="SparseToDense",Vu="SquaredDifference",eh="Square",Od="StridedSlice",Vo="StringNGrams",Gn="StringSplit",Kl="StringToHashBucketFast",Gs="Sub",zd="Tan",Bd="Tanh",Xa="Tile",th="TopK",Hs="Transform",$d="Transpose",Cf="Unique",Wo="Unpack",nh="UnsortedSegmentSum",kf="ZerosLike",rh="Step",Zl="FromPixels",go="RotateWithOffset",Wu="_FusedMatMul",Jl="FusedConv2D",Nf="FusedDepthwiseConv2D",Ud=ja("kernelRegistry",()=>new Map),Vd=ja("gradRegistry",()=>new Map);function Rf(r,e){const t=Ho(r,e);return Ud.get(t)}function Qm(r){return Vd.get(r)}function eg(r){const e=Ud.entries(),t=[];for(;;){const{done:s,value:a}=e.next();if(s)break;const[l,c]=a,[d]=l.split("_");d===r&&t.push(c)}return t}function Lf(r){const{kernelName:e,backendName:t}=r,s=Ho(e,t);Ud.has(s)&&sr(`The kernel '${e}' for backend '${t}' is already registered`),Ud.set(s,r)}function Cr(r){const{kernelName:e}=r;Vd.has(e)&&At().getBool("DEBUG")&&sr(`Overriding the gradient for '${e}'`),Vd.set(e,r)}function Go(r,e){const t=Ho(r,e);if(!Ud.has(t))throw new Error(`The kernel '${r}' for backend '${e}' is not registered`);Ud.delete(t)}function Ql(r){if(!Vd.has(r))throw new Error(`The gradient '${r}' for backend is not registered`);Vd.delete(r)}function b0(r,e){eg(r).forEach(t=>{Lf(Object.assign({},t,{backendName:e}))})}function Ho(r,e){return`${e}_${r}`}var ih=b(43720);const yo=b.n(ih)()||ih;function Wd(r){return yo.fromString(r,!0,16)}const tg=Wd("c3a5c85c97cb3127"),eu=Wd("b492b66fbe98f273"),Ss=Wd("9ae16a3b2f90404f");function Li(r){return r.xor(r.shru(47))}function Lv(r,e,t){const s=r.slice(e,e+t);return yo.fromBytes(Array.from(s),!0,!0)}function fr(r,e){return Lv(r,e,8)}function w0(r,e){return Lv(r,e,4)}function Jr(r,e){return e===0?r:r.shru(e).or(r.shl(64-e))}function jo(r,e,t=Wd("9ddfea08eb382d69")){let s=r.xor(e).mul(t);s=s.xor(s.shru(47));let a=e.xor(s).mul(t);return a=a.xor(a.shru(47)),a=a.mul(t),a}function Gd(r,e,t,s){return function(a,l,c,d,m,f){m=m.add(a),f=Jr(f.add(m).add(d),21);const y=m;return m=(m=m.add(l)).add(c),f=f.add(Jr(m,44)),[m.add(d),f.add(y)]}(fr(r,e),fr(r,e+8),fr(r,e+16),fr(r,e+24),t,s)}function ng(r,e=r.length){const t=yo.fromNumber(81,!0);if(e<=32)return e<=16?function(_,A=_.length){if(A>=8){const C=Ss.add(2*A),L=fr(_,0).add(Ss),P=fr(_,A-8);return jo(Jr(P,37).mul(C).add(L),Jr(L,25).add(P).mul(C),C)}if(A>=4){const C=Ss.add(2*A);return jo(w0(_,0).shl(3).add(A),w0(_,A-4),C)}if(A>0){const C=_[0]+(_[A>>1]<<8),L=A+(_[A-1]<<2);return Li(Ss.mul(C).xor(tg.mul(L))).mul(Ss)}return Ss}(r,e):function(_,A=_.length){const C=Ss.add(2*A),L=fr(_,0).mul(eu),P=fr(_,8),U=fr(_,A-8).mul(C),q=fr(_,A-16).mul(Ss);return jo(Jr(L.add(P),43).add(Jr(U,30)).add(q),L.add(Jr(P.add(Ss),18)).add(U),C)}(r,e);if(e<=64)return function(_,A=_.length){const C=Ss.add(2*A),L=fr(_,0).mul(Ss),P=fr(_,8),U=fr(_,A-8).mul(C),q=fr(_,A-16).mul(Ss),X=Jr(L.add(P),43).add(Jr(U,30)).add(q),re=jo(X,L.add(Jr(P.add(Ss),18)).add(U),C),oe=fr(_,16).mul(C),de=fr(_,24),Ie=X.add(fr(_,A-32)).mul(C),pe=re.add(fr(_,A-24)).mul(C);return jo(Jr(oe.add(de),43).add(Jr(Ie,30)).add(pe),oe.add(Jr(de.add(L),18)).add(Ie),C)}(r,e);let s=t,a=t.mul(eu).add(113),l=Li(a.mul(Ss).add(113)).mul(Ss),c=[yo.UZERO,yo.UZERO],d=[yo.UZERO,yo.UZERO];s=s.mul(Ss).add(fr(r,0));let m=0;const f=64*(e-1>>6),y=f+(e-1&63)-63;do s=Jr(s.add(a).add(c[0]).add(fr(r,m+8)),37).mul(eu),a=Jr(a.add(c[1]).add(fr(r,m+48)),42).mul(eu),s=s.xor(d[1]),a=a.add(c[0]).add(fr(r,m+40)),l=Jr(l.add(d[0]),33).mul(eu),c=Gd(r,m,c[1].mul(eu),s.add(d[0])),d=Gd(r,m+32,l.add(d[1]),a.add(fr(r,m+16))),[l,s]=[s,l],m+=64;while(m!==f);const x=eu.add(l.and(255).shl(1));return m=y,d[0]=d[0].add(e-1&63),c[0]=c[0].add(d[0]),d[0]=d[0].add(c[0]),s=Jr(s.add(a).add(c[0]).add(fr(r,m+8)),37).mul(x),a=Jr(a.add(c[1]).add(fr(r,m+48)),42).mul(x),s=s.xor(d[1].mul(9)),a=a.add(c[0].mul(9).add(fr(r,m+40))),l=Jr(l.add(d[0]),33).mul(x),c=Gd(r,m,c[1].mul(x),s.add(d[0])),d=Gd(r,m+32,l.add(d[1]),a.add(fr(r,m+16))),[l,s]=[s,l],jo(jo(c[0],d[0],x).add(Li(a).mul(tg)).add(l),jo(c[1],d[1],x).add(s),x)}function qo(r,e){return e==="string"?Ya(r):yn([r],e)}function yn(r,e){if(e==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(r)&&(r=at(r)),At().getBool("DEBUG")&&Rc(r,e),function(t,s){return t instanceof Float32Array&&s==="float32"||t instanceof Int32Array&&s==="int32"||t instanceof Uint8Array&&s==="bool"}(r,e))return r;if(e==null||e==="float32"||e==="complex64")return new Float32Array(r);if(e==="int32")return new Int32Array(r);if(e==="bool"){const t=new Uint8Array(r.length);for(let s=0;s<t.length;++s)Math.round(r[s])!==0&&(t[s]=1);return t}throw new Error(`Unknown data type ${e}`)}function di(){return At().platform.now()}function ui(r,e){return At().platform.fetch(r,e)}function Ya(r,e="utf-8"){return e=e||"utf-8",At().platform.encode(r,e)}function Mr(r,e="utf-8"){return e=e||"utf-8",At().platform.decode(r,e)}class Dv{constructor(e,t){this.backendTimer=e,this.logger=t,t==null&&(this.logger=new Fv)}profileKernel(e,t,s){let a;const l=()=>{a=s()};let c;const d=di();if(this.backendTimer.timerAvailable())c=this.backendTimer.time(l);else{l();for(const m of a)m.dataSync();c=Promise.resolve({kernelMs:di()-d})}if(At().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let m=0;m<a.length;m++){const f=a[m];f.data().then(y=>{Pv(y,f.dtype,e)})}return{kernelName:e,outputs:a,inputs:t,timeMs:c.then(m=>m.kernelMs),extraInfo:c.then(m=>m.getExtraProfileInfo!=null?m.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:s,timeMs:a,inputs:l,extraInfo:c}=e;s.forEach(d=>{Promise.all([d.data(),a,c]).then(m=>{this.logger.logKernelProfile(t,d,m[0],m[1],l,m[2])})})}}function Pv(r,e,t){if(e!=="float32")return!1;for(let s=0;s<r.length;s++){const a=r[s];if(isNaN(a)||!isFinite(a))return console.warn(`Found ${a} in the result of '${t}'`),!0}return!1}class Fv{logKernelProfile(e,t,s,a,l,c){const d=typeof a=="number"?Ir(`${a}ms`,9):a.error,m=Ir(e,25),f=t.rank,y=t.size,x=Ir(t.shape.toString(),14);let _="";for(const A in l){const C=l[A];if(C!=null){const L=C.shape||t.shape,P=L.length;_+=`${A}: ${P}D ${P>0?L:""} `}}console.log(`%c${m}	%c${d}	%c${f}D ${x}	%c${y}	%c${_}	%c${c}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Ov(r,e,t,s){const a=Hn(e),l=function(f,y,x,_){const A=he(y),C=_[_.length-1],L=new Array(C).fill(0),P=y.length,U=x==="complex64"?Hd(f):f;if(P>1)for(let q=0;q<A/C;q++){const X=q*C;for(let re=0;re<C;re++)L[re]=Math.max(L[re],Gu(U[X+re],0,x).length)}return L}(r,e,t,a),c=e.length,d=sh(r,e,t,a,l),m=["Tensor"];return s&&(m.push(`  dtype: ${t}`),m.push(`  rank: ${c}`),m.push(`  shape: [${e}]`),m.push("  values:")),m.push(d.map(f=>"    "+f).join(`
`)),m.join(`
`)}function Gu(r,e,t){let s;return s=Array.isArray(r)?`${parseFloat(r[0].toFixed(7))} + ${parseFloat(r[1].toFixed(7))}j`:$s(r)?`'${r}'`:t==="bool"?_0(r):parseFloat(r.toFixed(7)).toString(),Ir(s,e)}function _0(r){return r===0?"false":"true"}function sh(r,e,t,s,a,l=!0){const c=t==="complex64"?2:1,d=e[0],m=e.length;if(m===0)return t==="complex64"?[Gu(Hd(r)[0],0,t)]:t==="bool"?[_0(r[0])]:[r[0].toString()];if(m===1){if(d>20){const L=3*c;let P=Array.from(r.slice(0,L)),U=Array.from(r.slice((d-3)*c,d*c));return t==="complex64"&&(P=Hd(P),U=Hd(U)),["["+P.map((q,X)=>Gu(q,a[X],t)).join(", ")+", ..., "+U.map((q,X)=>Gu(q,a[d-3+X],t)).join(", ")+"]"]}return["["+(t==="complex64"?Hd(r):Array.from(r)).map((L,P)=>Gu(L,a[P],t)).join(", ")+"]"]}const f=e.slice(1),y=s.slice(1),x=s[0]*c,_=[];if(d>20){for(let L=0;L<3;L++){const P=L*x,U=P+x;_.push(...sh(r.slice(P,U),f,t,y,a,!1))}_.push("...");for(let L=d-3;L<d;L++){const P=L*x,U=P+x;_.push(...sh(r.slice(P,U),f,t,y,a,L===d-1))}}else for(let L=0;L<d;L++){const P=L*x,U=P+x;_.push(...sh(r.slice(P,U),f,t,y,a,L===d-1))}const A=m===2?",":"";_[0]="["+_[0]+A;for(let L=1;L<_.length-1;L++)_[L]=" "+_[L]+A;let C=`,
`;for(let L=2;L<m;L++)C+=`
`;return _[_.length-1]=" "+_[_.length-1]+"]"+(l?"":C),_}function Hd(r){const e=[];for(let t=0;t<r.length;t+=2)e.push([r[t],r[t+1]]);return e}class pn{constructor(e,t,s){if(this.dtype=t,this.shape=e.slice(),this.size=he(e),s!=null){const a=s.length;Q(a===this.size,()=>`Length of values '${a}' does not match the size inferred by the shape '${this.size}'.`)}if(t==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||Or(t,this.size),this.strides=Hn(e)}set(e,...t){t.length===0&&(t=[0]),Q(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const s=this.locToIndex(t);this.values[s]=e}get(...e){e.length===0&&(e=[0]);let t=0;for(const a of e){if(a<0||a>=this.shape[t]){const l=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(l)}t++}let s=e[e.length-1];for(let a=0;a<e.length-1;++a)s+=this.strides[a]*e[a];return this.values[s]}locToIndex(e){if(this.rank===0)return 0;if(this.rank===1)return e[0];let t=e[e.length-1];for(let s=0;s<e.length-1;++s)t+=this.strides[s]*e[s];return t}indexToLoc(e){if(this.rank===0)return[];if(this.rank===1)return[e];const t=new Array(this.shape.length);for(let s=0;s<t.length-1;++s)t[s]=Math.floor(e/this.strides[s]),e-=t[s]*this.strides[s];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Xo().makeTensor(this.values,this.shape,this.dtype)}}let Xo=null,ah=null;class Ur{constructor(e,t,s,a){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=he(e),this.strides=Hn(e),this.dataId=s,this.id=a,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return ah.buffer(this.shape,this.dtype,e)}bufferSync(){return ah.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return ht(this.shape,e,this.dtype==="complex64")}arraySync(){return ht(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();const e=Xo().read(this.dataId);if(this.dtype==="string"){const t=await e;try{return t.map(s=>Mr(s))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=Xo().readSync(this.dataId);if(this.dtype==="string")try{return e.map(t=>Mr(t))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Xo().read(this.dataId);return this.dtype==="string"?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Xo().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return ah.print(this,e)}clone(){return this.throwIfDisposed(),ah.clone(this)}toString(e=!1){return Ov(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ah.cast(this,e)}variable(e=!0,t,s){return this.throwIfDisposed(),Xo().makeVariable(this,e,t,s)}}function Tt(){return ja("Tensor",()=>Ur)}Object.defineProperty(Ur,Symbol.hasInstance,{value:r=>!!r&&r.data!=null&&r.dataSync!=null&&r.throwIfDisposed!=null}),Tt();class Df extends Ur{constructor(e,t,s,a){super(e.shape,e.dtype,e.dataId,a),this.trainable=t,this.name=s}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!Le(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Xo().disposeTensor(this),this.dataId=e.dataId,Xo().incRef(this,null)}dispose(){Xo().disposeVariable(this),this.isDisposedInternal=!0}}var Ia,Pf,Hu,ha,oh;Object.defineProperty(Df,Symbol.hasInstance,{value:r=>r instanceof Ur&&r.assign!=null&&r.assign instanceof Function}),function(r){r.R0="R0",r.R1="R1",r.R2="R2",r.R3="R3",r.R4="R4",r.R5="R5",r.R6="R6"}(Ia||(Ia={})),function(r){r.float32="float32",r.int32="int32",r.bool="int32",r.complex64="complex64"}(Pf||(Pf={})),function(r){r.float32="float32",r.int32="int32",r.bool="bool",r.complex64="complex64"}(Hu||(Hu={})),function(r){r.float32="float32",r.int32="float32",r.bool="float32",r.complex64="complex64"}(ha||(ha={})),function(r){r.float32="complex64",r.int32="complex64",r.bool="complex64",r.complex64="complex64"}(oh||(oh={}));const Ms={float32:ha,int32:Pf,bool:Hu,complex64:oh};function On(r,e){if(r==="string"||e==="string"){if(r==="string"&&e==="string")return"string";throw new Error(`Can not upcast ${r} with ${e}`)}return Ms[r][e]}function Ff(r){return On(r,"int32")}function Qr(r,e){if(r.dtype===e.dtype)return[r,e];const t=On(r.dtype,e.dtype);return[r.cast(t),e.cast(t)]}function rg(r,e){Q(r.dtype===e.dtype,()=>`The dtypes of the first(${r.dtype}) and second(${e.dtype}) input must match`)}function Yo(r,e){return e.some(t=>t.id===r.id)}function js(r){const e=[];return tu(r,e,new Set),e}function tu(r,e,t){if(r==null)return;if(r instanceof Ur)return void e.push(r);if(s=r,!Array.isArray(s)&&typeof s!="object")return;var s;const a=r;for(const l in a){const c=a[l];t.has(c)||(t.add(c),tu(c,e,t))}}function Of(r){return r.kernelName!=null}class ig{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class ju{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ig}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const s=e[t];if(await this.initializeBackend(s).success)return void await this.setBackend(s)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,s=1){return e in this.registryFactory?(sr(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:s},!0)}async setBackend(e){if(this.registryFactory[e]==null)throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,this.registry[e]==null){this.backendInstance=null;const{success:t,asyncInit:s}=this.initializeBackend(e);if(!(s?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Dv(this.backendInstance),!0}setupRegisteredKernels(){eg(this.backendName).forEach(e=>{e.setupFunc!=null&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){eg(e).forEach(t=>{t.disposeFunc!=null&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(t==null)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const s=t.factory();if(!s||s instanceof Jt||typeof s.then!="function")return this.registry[e]=s,{success:!0,asyncInit:!1};{const a=++this.pendingBackendInitId,l=s.then(c=>!(a<this.pendingBackendInitId||(this.registry[e]=c,this.pendingBackendInit=null,0))).catch(c=>(a<this.pendingBackendInitId||(this.pendingBackendInit=null,sr(`Initialization of backend ${e} failed`),sr(c.stack||c.message)),!1));return this.pendingBackendInit=l,{success:l,asyncInit:!0}}}catch(s){return sr(`Initialization of backend ${e} failed`),sr(s.stack||s.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const s=e[t],{success:a,asyncInit:l}=this.initializeBackend(s);if(l||a)return{name:s,asyncInit:l}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const s=this.state.tensorInfo.get(t),a=s.backend,l=this.readSync(t),c=a.refCount(t);a.disposeData(t,!0),s.backend=e,e.move(t,l,s.shape,s.dtype,c),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let s,a=null;if(t==null){if(typeof e!="function")throw new Error("Please provide a function to tidy()");t=e}else{if(typeof e!="string"&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof t!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");a=e}return this.scopedRun(()=>this.startScope(a),()=>this.endScope(s),()=>(s=t(),s instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),s))}scopedRun(e,t,s){e();try{const a=s();return t(),a}catch(a){throw t(),a}}nextTensorId(){return ju.nextTensorId++}nextVariableId(){return ju.nextVariableId++}clone(e){const t=Ge.runKernel(bd,{x:e}),s={x:e};return this.addTapeNode(this.state.activeScope.name,s,[t],a=>({x:()=>{const l={x:a};return Ge.runKernel(Bc,l,{dtype:"float32"})}}),[],{}),t}runKernel(e,t,s){if(this.backendName==null&&this.backend,Rf(e,this.backendName)==null)throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:s})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,s){const a=this.backend.numDataIds();let l=0;s.forEach(m=>{l+=m.dtype==="complex64"?3:1});const c=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],d=a-t-l-c;if(d>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${d} data ids) after running '${e}'`)}runKernelFunc(e){let t,s=[];const a=this.isTapeOn(),l=this.state.numBytes,c=this.state.numTensors;let d,m;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),this.backendName==null&&this.backend;const f=Of(e)?e.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(Of(e)){const{kernelName:C,inputs:L,attrs:P}=e;this.backendName==null&&this.backend;const U=Rf(C,this.backendName);Q(U!=null,()=>`Cannot find registered kernel '${C}' for backend '${this.backendName}'`),d=()=>{const q=this.backend.numDataIds();m=U.kernelFunc({inputs:L,attrs:P,backend:this.backend});const X=Array.isArray(m)?m:[m];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(C,q,X);const re=X.map(oe=>{if(oe.rank!=null)return oe;const{dataId:de,shape:Ie,dtype:pe}=oe;return this.makeTensorFromDataId(de,Ie,pe)});if(a){const oe=this.getTensorsForGradient(C,L,re);s=this.saveTensorsForBackwardMode(oe)}return re}}else{const{forwardFunc:C}=e,L=P=>{a&&(s=P.map(U=>this.keep(this.clone(U))))};d=()=>{const P=this.backend.numDataIds();m=this.tidy(()=>C(this.backend,L));const U=Array.isArray(m)?m:[m];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(f,P,U),U}}const{inputs:y,attrs:x}=e,_=Of(e)?null:e.backwardsFunc;let A;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(A=this.profiler.profileKernel(f,y,()=>d()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(A),t=A.outputs):t=d()}),a&&this.addTapeNode(f,y,t,_,s,x),this.state.profiling&&this.state.activeProfile.kernels.push({name:f,bytesAdded:this.state.numBytes-l,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-c,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(y).map(C=>y[C]!=null?y[C].shape:null),outputShapes:t.map(C=>C.shape),kernelTimeMs:A.timeMs,extraInfo:A.extraInfo}),Array.isArray(m)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(e,t,s){const a=Qm(e);if(a!=null){const l=a.inputsToSave||[],c=a.outputsToSave||[];let d;a.saveAllInputs?(Q(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),d=Object.keys(t).map(f=>t[f])):d=l.map(f=>t[f]);const m=s.filter((f,y)=>c[y]);return d.concat(m)}return[]}makeTensor(e,t,s,a){if(e==null)throw new Error("Values passed to engine.makeTensor() are null");s=s||"float32",a=a||this.backend;let l=e;s==="string"&&$s(e[0])&&(l=e.map(m=>Ya(m)));const c=a.write(l,t,s),d=new Ur(t,s,c,this.nextTensorId());if(this.trackTensor(d,a),s==="string"){const m=this.state.tensorInfo.get(c),f=rf(l);this.state.numBytes+=f-m.bytes,m.bytes=f}return d}makeTensorFromDataId(e,t,s,a){const l=new Ur(t,s=s||"float32",e,this.nextTensorId());return this.trackTensor(l,a),l}makeVariable(e,t=!0,s,a){s=s||this.nextVariableId().toString(),a!=null&&a!==e.dtype&&(e=e.cast(a));const l=new Df(e,t,s,this.nextTensorId());if(this.state.registeredVariables[l.name]!=null)throw new Error(`Variable with name ${l.name} was already registered`);return this.state.registeredVariables[l.name]=l,this.incRef(l,this.backend),l}trackTensor(e,t){this.state.numTensors++,e.dtype==="string"&&this.state.numStringTensors++;let s=0;e.dtype!=="complex64"&&e.dtype!=="string"&&(s=e.size*Wa(e.dtype)),this.state.numBytes+=s,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:s})),e instanceof Df||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,e.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),e.dtype!=="complex64"&&e.dtype!=="string"){const s=e.size*Wa(e.dtype);this.state.numBytes-=s}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),this.state.registeredVariables[e.name]!=null&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,e.reasons==null&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,s=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(a=>a.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-s;for(const a of this.state.activeProfile.kernels)a.kernelTimeMs=await a.kernelTimeMs,a.extraInfo=await a.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(e,t,s,a,l,c){const d={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:s,saved:l},m=Qm(e);m!=null&&(a=m.gradFunc),a!=null&&(d.gradient=f=>(f=f.map((y,x)=>{if(y==null){const _=s[x],A=xt(_.size,_.dtype);return this.makeTensor(A,_.shape,_.dtype)}return y}),a(f.length>1?f:f[0],l,c))),this.state.activeTape.push(d)}keep(e){return e.kept=!0,e}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=js(e),s=new Set(t.map(l=>l.id));for(let l=0;l<this.state.activeScope.track.length;l++){const c=this.state.activeScope.track[l];c.kept||s.has(c.id)||c.dispose()}const a=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(l=>{l.kept||l.scopeId!==a.id||this.track(l)})}gradients(e,t,s,a=!1){if(Q(t.length>0,()=>"gradients() received an empty list of xs."),s!=null&&s.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);const l=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));Q(l instanceof Ur,()=>"The result y returned by f() must be a tensor.");const c=function(d,m,f){const y={},x={};for(let L=0;L<m.length;L++)y[m[L].id]=!0;for(let L=0;L<d.length;L++){const P=d[L],U=P.inputs;for(const q in U){const X=U[q];let re=!1;for(let oe=0;oe<m.length;oe++)if(y[X.id]){P.outputs.forEach(de=>y[de.id]=!0),re=!0,x[P.id]=!0;break}if(re)break}}const _={};_[f.id]=!0;const A={};for(let L=d.length-1;L>=0;L--){const P=d[L],U=P.inputs;for(let q=0;q<P.outputs.length;q++)if(_[P.outputs[q].id]){for(const X in U)_[U[X].id]=!0,A[P.id]=!0;break}}const C=[];for(let L=0;L<d.length;L++){const P=d[L];if(x[P.id]&&A[P.id]){const U={};for(const X in P.inputs){const re=P.inputs[X];y[re.id]&&(U[X]=re)}const q=Object.assign({},P);q.inputs=U,q.outputs=P.outputs,C.push(q)}}return C}(this.state.activeTape,t,l);if(!a&&c.length===0&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const d={};d[l.id]=s==null?function(f){const y=lt(he(f),"float32");return Ge.makeTensor(y,f,"float32")}(l.shape):s,function(f,y,x,_){for(let A=y.length-1;A>=0;A--){const C=y[A],L=[];if(C.outputs.forEach(U=>{const q=f[U.id];q!=null?L.push(q):L.push(null)}),C.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${C.kernelName}.`);const P=C.gradient(L);for(const U in C.inputs){if(!(U in P))throw new Error(`Cannot backprop through input ${U}. Available gradients found: ${Object.keys(P)}.`);const q=x(()=>P[U]());if(q.dtype!=="float32")throw new Error(`Error in gradient for op ${C.kernelName}. The gradient of input ${U} must have 'float32' dtype, but has '${q.dtype}'`);const X=C.inputs[U];if(!Le(q.shape,X.shape))throw new Error(`Error in gradient for op ${C.kernelName}. The gradient of input '${U}' has shape '${q.shape}', which does not match the shape of the input '${X.shape}'`);if(f[X.id]==null)f[X.id]=q;else{const re=f[X.id];f[X.id]=_(re,q),re.dispose()}}}}(d,c,f=>this.tidy(f),sg);const m=t.map(f=>d[f.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(f=>{for(const y of f.saved)y.dispose()}),this.state.activeTape=null),{value:l,grads:m}})}customGrad(e){return Q(hs(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let s;Q(t.every(l=>l instanceof Ur),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const a={};return t.forEach((l,c)=>{a[c]=l}),this.runKernelFunc({forwardFunc:(l,c)=>(s=e(...t,c),Q(s.value instanceof Ur,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),Q(hs(s.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),s.value),backwardsFunc:(l,c)=>{const d=s.gradFunc(l,c),m=Array.isArray(d)?d:[d];Q(m.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),Q(m.every(y=>y instanceof Ur),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const f={};return m.forEach((y,x)=>{f[x]=()=>y}),f},inputs:a})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=di(),s=await this.backend.time(e);return s.wallMs=di()-t,s}track(e){return this.state.activeScope!=null&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ig;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function zf(){const r=ca();if(r._tfengine==null){const t=new zr(r);r._tfengine=new ju(t)}var e;return e=r._tfengine.ENV,Ha=e,Xo=()=>r._tfengine,r._tfengine}ju.nextTensorId=0,ju.nextVariableId=0;const Ge=zf();function sg(r,e){const t={a:r,b:e};return Ge.runKernel(li,t)}function jd(r){if(r||typeof navigator!="undefined"&&navigator!=null){if(r||(r=navigator),r.product==="ReactNative")return!0;const e=r.userAgent||r.vendor||(typeof window!="undefined"?window.opera:"");if(!e){const t=r;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function qd(){return typeof window!="undefined"&&window.document!=null||typeof WorkerGlobalScope!="undefined"}const Ca=At();function xo(r,e){let t=r;if(Yi(r))return e==="string"?[]:[r.length];if(!Array.isArray(r))return[];const s=[];for(;Array.isArray(t)||Yi(t)&&e!=="string";)s.push(t.length),t=t[0];return Array.isArray(r)&&At().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Bf(r,s,[]),s}function Bf(r,e,t){if(t=t||[],!Array.isArray(r)&&!Yi(r))return void Q(e.length===0,()=>`Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);Q(e.length>0,()=>`Element arr[${t.join("][")}] should be a primitive, but is an array of ${r.length} elements`),Q(r.length===e[0],()=>`Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${r.length} elements`);const s=e.slice(1);for(let a=0;a<r.length;++a)Bf(r[a],s,t.concat(a))}function Ji(r,e,t,s){if(r!=="string_or_numeric"){if(r==null)throw new Error("Expected dtype cannot be null.");if(r!=="numeric"&&r!==e||r==="numeric"&&e==="string")throw new Error(`Argument '${t}' passed to '${s}' must be ${r} tensor, but got ${e} tensor`)}}function ge(r,e,t,s="numeric"){if(r instanceof Ur)return Ji(s,r.dtype,e,t),r;let a=Ga(r);if(a!=="string"&&["bool","int32","float32"].indexOf(s)>=0&&(a=s),Ji(s,a,e,t),r==null||!Yi(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string"){const d=r==null?"null":r.constructor.name;throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${d}'`)}const l=xo(r,a);Yi(r)||Array.isArray(r)||(r=[r]);const c=a!=="string"?yn(r,a):at(r,[],!0);return Ge.makeTensor(c,l,a)}function Ka(r,e,t,s="numeric"){if(!Array.isArray(r))throw new Error(`Argument ${e} passed to ${t} must be a \`Tensor[]\` or \`TensorLike[]\``);return r.map((a,l)=>ge(a,`${e}[${l}]`,t,s))}Ca.registerFlag("DEBUG",()=>!1,r=>{r&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Ca.registerFlag("IS_BROWSER",()=>qd()),Ca.registerFlag("IS_NODE",()=>typeof process!="undefined"&&process.versions!==void 0&&process.versions.node!==void 0),Ca.registerFlag("IS_CHROME",()=>typeof navigator!="undefined"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Ca.registerFlag("PROD",()=>!1),Ca.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Ca.getBool("DEBUG")),Ca.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Ca.registerFlag("IS_TEST",()=>!1),Ca.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),Ca.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);const lh="__op";function $e(r){const e=Object.keys(r);if(e.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let t=e[0];const s=r[t];t.endsWith("_")&&(t=t.substring(0,t.length-1)),t+=lh;const a=(...l)=>{Ge.startScope(t);try{const c=s(...l);return dr(c)&&console.error("Cannot return a Promise inside of tidy."),Ge.endScope(c),c}catch(c){throw Ge.endScope(null),c}};return Object.defineProperty(a,"name",{value:t,configurable:!0}),a}const nu=$e({complex_:function(r,e){const t=ge(r,"real","complex"),s=ge(e,"imag","complex");Ze(t.shape,s.shape,`real and imag shapes, ${t.shape} and ${s.shape}, must match in call to tf.complex().`);const a={real:t,imag:s};return Ge.runKernel(lf,a)}});function qs(r,e,t,s){if(s==null&&(s=Ga(r)),s==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Yi(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(e!=null){Xn(e);const a=he(e),l=he(t);Q(a===l,()=>`Based on the provided shape, [${e}], the tensor should have ${a} values but has ${l}`);for(let c=0;c<t.length;++c){const d=t[c],m=c!==t.length-1||d!==he(e.slice(c));Q(t[c]===e[c]||!m,()=>`Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `)}}return Yi(r)||Array.isArray(r)||(r=[r]),e=e||t,r=s!=="string"?yn(r,s):at(r,[],!0),Ge.makeTensor(r,e,s)}function Xs(r,e,t){return qs(r,e,xo(r,t),t)}const ss={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function qu(r,e){const t=[],s=[],a=Array.isArray(r)?r.map(l=>l.name):Object.keys(r);for(let l=0;l<a.length;++l){const c=a[l],d=Array.isArray(r)?r[l].tensor:r[c];if(d.dtype!=="float32"&&d.dtype!=="int32"&&d.dtype!=="bool"&&d.dtype!=="string"&&d.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${c}': ${d.dtype}`);const m={name:c,shape:d.shape,dtype:d.dtype};if(d.dtype==="string"){const f=new Promise(async y=>{const x=await d.bytes(),_=x.reduce((L,P)=>L+P.length,0)+4*x.length,A=new Uint8Array(_);let C=0;for(let L=0;L<x.length;L++){const P=x[L],U=new Uint8Array(new Uint32Array([P.length]).buffer);A.set(U,C),C+=4,A.set(P,C),C+=P.length}y(A)});s.push(f)}else s.push(d.data());e!=null&&(m.group=e),t.push(m)}return{data:Xd(await Promise.all(s)),specs:t}}function uh(r,e){const t={};let s,a=0;for(const l of e){const c=l.name,d=l.dtype,m=l.shape,f=he(m);let y;if("quantization"in l){const x=l.quantization;if(x.dtype==="uint8"||x.dtype==="uint16"){if(!("min"in x)||!("scale"in x))throw new Error(`Weight ${l.name} with quantization ${x.dtype} doesn't have corresponding metadata min and scale.`)}else{if(x.dtype!=="float16")throw new Error(`Weight ${l.name} has unknown quantization dtype ${x.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if(d!=="float32")throw new Error(`Weight ${l.name} is quantized with ${x.dtype} which only supports weights of type float32 not ${d}.`)}const _=ss[x.dtype],A=r.slice(a,a+f*_),C=x.dtype==="uint8"?new Uint8Array(A):new Uint16Array(A);if(d==="float32")if(x.dtype==="uint8"||x.dtype==="uint16"){y=new Float32Array(C.length);for(let L=0;L<C.length;L++){const P=C[L];y[L]=P*x.scale+x.min}}else{if(x.dtype!=="float16")throw new Error(`Unsupported quantization type ${x.dtype} for weight type float32.`);s===void 0&&(s=$f()),y=s(C)}else{if(d!=="int32")throw new Error(`Unsupported dtype in weight '${c}': ${d}`);if(x.dtype!=="uint8"&&x.dtype!=="uint16")throw new Error(`Unsupported quantization type ${x.dtype} for weight type int32.`);y=new Int32Array(C.length);for(let L=0;L<C.length;L++){const P=C[L];y[L]=Math.round(P*x.scale+x.min)}}a+=f*_}else if(d==="string"){const x=he(l.shape);y=[];for(let _=0;_<x;_++){const A=new Uint32Array(r.slice(a,a+4))[0];a+=4;const C=new Uint8Array(r.slice(a,a+A));y.push(C),a+=A}}else{const x=ss[d],_=r.slice(a,a+f*x);if(d==="float32")y=new Float32Array(_);else if(d==="int32")y=new Int32Array(_);else if(d==="bool")y=new Uint8Array(_);else{if(d!=="complex64")throw new Error(`Unsupported dtype in weight '${c}': ${d}`);{y=new Float32Array(_);const A=new Float32Array(y.length/2),C=new Float32Array(y.length/2);for(let U=0;U<A.length;U++)A[U]=y[2*U],C[U]=y[2*U+1];const L=Xs(A,m,"float32"),P=Xs(C,m,"float32");t[c]=nu(L,P),L.dispose(),P.dispose()}}a+=f*x}d!=="complex64"&&(t[c]=Xs(y,m,d))}return t}function Xd(r){if(r===null)throw new Error(`Invalid input value: ${JSON.stringify(r)}`);let e=0;const t=[];r.forEach(l=>{if(e+=l.byteLength,t.push(l.byteLength===l.buffer.byteLength?l:new l.constructor(l)),!(l instanceof Float32Array||l instanceof Int32Array||l instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${l.constructor.name}`)});const s=new Uint8Array(e);let a=0;return t.forEach(l=>{s.set(new Uint8Array(l.buffer),a),a+=l.byteLength}),s.buffer}const Yd=typeof Buffer!="undefined"&&(typeof Blob=="undefined"||typeof atob=="undefined"||typeof btoa=="undefined");function ag(r){return Yd?Buffer.byteLength(r):new Blob([r]).size}function og(r){if(r.length===1)return r[0];let e=0;r.forEach(a=>{e+=a.byteLength});const t=new Uint8Array(e);let s=0;return r.forEach(a=>{t.set(new Uint8Array(a),s),s+=a.byteLength}),t.buffer}function zv(r){for(r=r.trim();r.endsWith("/");)r=r.slice(0,r.length-1);const e=r.split("/");return e[e.length-1]}function Ko(r,e){const t={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy,weightsManifest:e};return r.signature!=null&&(t.signature=r.signature),r.userDefinedMetadata!=null&&(t.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(t.modelInitializer=r.modelInitializer),r.trainingConfig!=null&&(t.trainingConfig=r.trainingConfig),t}async function Xu(r,e){const t={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};if(r.trainingConfig!=null&&(t.trainingConfig=r.trainingConfig),r.weightsManifest!=null){const[s,a]=await e(r.weightsManifest);t.weightSpecs=s,t.weightData=a}return r.signature!=null&&(t.signature=r.signature),r.userDefinedMetadata!=null&&(t.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(t.modelInitializer=r.modelInitializer),t}function Yu(r){if(r.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:r.modelTopology==null?0:ag(JSON.stringify(r.modelTopology)),weightSpecsBytes:r.weightSpecs==null?0:ag(JSON.stringify(r.weightSpecs)),weightDataBytes:r.weightData==null?0:r.weightData.byteLength}}function $f(){const r=function(){const s=l=>{let c=l<<13,d=0;for(;(8388608&c)==0;)d-=8388608,c<<=1;return c&=-8388609,d+=947912704,c|d},a=new Uint32Array(2048);a[0]=0;for(let l=1;l<1024;l++)a[l]=s(l);for(let l=1024;l<2048;l++)a[l]=939524096+(l-1024<<13);return a}(),e=function(){const s=new Uint32Array(64);s[0]=0,s[31]=1199570944,s[32]=2147483648,s[63]=3347054592;for(let a=1;a<31;a++)s[a]=a<<23;for(let a=33;a<63;a++)s[a]=2147483648+(a-32<<23);return s}(),t=function(){const s=new Uint32Array(64);for(let a=0;a<64;a++)s[a]=1024;return s[0]=s[32]=0,s}();return s=>{const a=new ArrayBuffer(4*s.length),l=new Uint32Array(a);for(let c=0;c<s.length;c++){const d=s[c],m=r[t[d>>10]+(1023&d)]+e[d>>10];l[c]=m}return new Float32Array(a)}}class xi{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return xi.instance==null&&(xi.instance=new xi),xi.instance}static registerSaveRouter(e){xi.getInstance().saveRouters.push(e)}static registerLoadRouter(e){xi.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return xi.getHandlers(e,"save")}static getLoadHandlers(e,t){return xi.getHandlers(e,"load",t)}static getHandlers(e,t,s){const a=[];return(t==="load"?xi.getInstance().loadRouters:xi.getInstance().saveRouters).forEach(l=>{const c=l(e,s);c!==null&&a.push(c)}),a}}const o_=r=>xi.registerSaveRouter(r),ch=r=>xi.registerLoadRouter(r),Tr=r=>xi.getSaveHandlers(r),_n=(r,e)=>xi.getLoadHandlers(r,e),Za="tensorflowjs",hh="models_store",Ku="model_info_store";function Bv(){if(!At().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const r=typeof window=="undefined"?self:window,e=r.indexedDB||r.mozIndexedDB||r.webkitIndexedDB||r.msIndexedDB||r.shimIndexedDB;if(e==null)throw new Error("The current browser does not appear to support IndexedDB.");return e}function S0(r){const e=r.result;e.createObjectStore(hh,{keyPath:"modelPath"}),e.createObjectStore(Ku,{keyPath:"modelPath"})}class dh{constructor(e){if(this.indexedDB=Bv(),e==null||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((s,a)=>{const l=this.indexedDB.open(Za,1);l.onupgradeneeded=()=>S0(l),l.onsuccess=()=>{const c=l.result;if(t==null){const d=c.transaction(hh,"readonly"),m=d.objectStore(hh).get(this.modelPath);m.onsuccess=()=>{if(m.result==null)return c.close(),a(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));s(m.result.modelArtifacts)},m.onerror=f=>(c.close(),a(m.error)),d.oncomplete=()=>c.close()}else{const d=Yu(t),m=c.transaction(Ku,"readwrite");let f=m.objectStore(Ku);const y=f.put({modelPath:this.modelPath,modelArtifactsInfo:d});let x;y.onsuccess=()=>{x=c.transaction(hh,"readwrite");const _=x.objectStore(hh).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:d});_.onsuccess=()=>s({modelArtifactsInfo:d}),_.onerror=A=>{f=m.objectStore(Ku);const C=f.delete(this.modelPath);C.onsuccess=()=>(c.close(),a(_.error)),C.onerror=L=>(c.close(),a(_.error))}},y.onerror=_=>(c.close(),a(y.error)),m.oncomplete=()=>{x==null?c.close():x.oncomplete=()=>c.close()}}},l.onerror=c=>a(l.error)})}}dh.URL_SCHEME="indexeddb://";const $v=r=>{return At().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(dh.URL_SCHEME)?(e=r.slice(dh.URL_SCHEME.length),new dh(e)):null;var e};xi.registerSaveRouter($v),xi.registerLoadRouter($v);class Uf{constructor(){this.indexedDB=Bv()}async listModels(){return new Promise((e,t)=>{const s=this.indexedDB.open(Za,1);s.onupgradeneeded=()=>S0(s),s.onsuccess=()=>{const a=s.result,l=a.transaction(Ku,"readonly"),c=l.objectStore(Ku).getAll();c.onsuccess=()=>{const d={};for(const m of c.result)d[m.modelPath]=m.modelArtifactsInfo;e(d)},c.onerror=d=>(a.close(),t(c.error)),l.oncomplete=()=>a.close()},s.onerror=a=>t(s.error)})}async removeModel(e){var t;return e=(t=e).startsWith(dh.URL_SCHEME)?t.slice(dh.URL_SCHEME.length):t,new Promise((s,a)=>{const l=this.indexedDB.open(Za,1);l.onupgradeneeded=()=>S0(l),l.onsuccess=()=>{const c=l.result,d=c.transaction(Ku,"readwrite"),m=d.objectStore(Ku),f=m.get(e);let y;f.onsuccess=()=>{if(f.result==null)return c.close(),a(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const x=m.delete(e),_=()=>{y=c.transaction(hh,"readwrite");const A=y.objectStore(hh).delete(e);A.onsuccess=()=>s(f.result.modelArtifactsInfo),A.onerror=C=>a(f.error)};x.onsuccess=_,x.onerror=A=>(_(),c.close(),a(f.error))}},f.onerror=x=>(c.close(),a(f.error)),d.oncomplete=()=>{y==null?c.close():y.oncomplete=()=>c.close()}},l.onerror=c=>a(l.error)})}}const ka="/",da="tensorflowjs_models",M0="info",Uv="model_topology",Sl="weight_specs",T0="weight_data",Vf="model_metadata";function E0(r){return{info:[da,r,M0].join(ka),topology:[da,r,Uv].join(ka),weightSpecs:[da,r,Sl].join(ka),weightData:[da,r,T0].join(ka),modelMetadata:[da,r,Vf].join(ka)}}function Wf(r){for(const e of Object.values(r))window.localStorage.removeItem(e)}function Vv(r){const e=r.split(ka);if(e.length<3)throw new Error(`Invalid key format: ${r}`);return e.slice(1,e.length-1).join(ka)}class ru{constructor(e){if(!At().getBool("IS_BROWSER")||typeof window=="undefined"||window.localStorage===void 0)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,e==null||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=E0(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),s=JSON.stringify(e.weightSpecs),a=Yu(e);try{this.LS.setItem(this.keys.info,JSON.stringify(a)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,s),this.LS.setItem(this.keys.weightData,function(c){if(Yd)return Buffer.from(c).toString("base64");const d=new Uint8Array(c);let m="";for(let f=0,y=d.length;f<y;f++)m+=String.fromCharCode(d[f]);return btoa(m)}(e.weightData));const l={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:e.signature!=null?e.signature:void 0,userDefinedMetadata:e.userDefinedMetadata!=null?e.userDefinedMetadata:void 0,modelInitializer:e.modelInitializer!=null?e.modelInitializer:void 0,trainingConfig:e.trainingConfig!=null?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(l)),{modelArtifactsInfo:a}}catch{throw Wf(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(e==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(e.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},s=JSON.parse(this.LS.getItem(this.keys.topology));if(s==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=s;const a=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(a==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=a;const l=this.LS.getItem(this.keys.modelMetadata);if(l!=null){const d=JSON.parse(l);t.format=d.format,t.generatedBy=d.generatedBy,t.convertedBy=d.convertedBy,d.signature!=null&&(t.signature=d.signature),d.userDefinedMetadata!=null&&(t.userDefinedMetadata=d.userDefinedMetadata),d.modelInitializer!=null&&(t.modelInitializer=d.modelInitializer),d.trainingConfig!=null&&(t.trainingConfig=d.trainingConfig)}const c=this.LS.getItem(this.keys.weightData);if(c==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(d){if(Yd){const y=Buffer.from(d,"base64");return y.buffer.slice(y.byteOffset,y.byteOffset+y.byteLength)}const m=atob(d),f=new Uint8Array(m.length);for(let y=0;y<m.length;++y)f.set([m.charCodeAt(y)],y);return f.buffer}(c),t}}ru.URL_SCHEME="localstorage://";const Zu=r=>{return At().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(ru.URL_SCHEME)?(e=r.slice(ru.URL_SCHEME.length),new ru(e)):null;var e};xi.registerSaveRouter(Zu),xi.registerLoadRouter(Zu);class Kd{constructor(){Q(At().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),Q(typeof window=="undefined"||window.localStorage!==void 0,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=da+ka,s=ka+M0;for(let a=0;a<this.LS.length;++a){const l=this.LS.key(a);l.startsWith(t)&&l.endsWith(s)&&(e[Vv(l)]=JSON.parse(this.LS.getItem(l)))}return e}async removeModel(e){var t;const s=E0(e=(t=e).startsWith(ru.URL_SCHEME)?t.slice(ru.URL_SCHEME.length):t);if(this.LS.getItem(s.info)==null)throw new Error(`Cannot find model at path '${e}'`);const a=JSON.parse(this.LS.getItem(s.info));return Wf(s),a}}const ph="://";class pa{constructor(){this.managers={}}static getInstance(){return pa.instance==null&&(pa.instance=new pa),pa.instance}static registerManager(e,t){Q(e!=null,()=>"scheme must not be undefined or null."),e.endsWith(ph)&&(e=e.slice(0,e.indexOf(ph))),Q(e.length>0,()=>"scheme must not be an empty string.");const s=pa.getInstance();Q(s.managers[e]==null,()=>`A model store manager is already registered for scheme '${e}'.`),s.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(t==null)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function lg(r){if(r.indexOf(ph)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${pa.getSchemes().join(",")}`);return{scheme:r.split(ph)[0],path:r.split(ph)[1]}}async function Wv(r,e,t=!1){Q(r!==e,()=>`Old path and new path are the same: '${r}'`);const s=xi.getLoadHandlers(r);Q(s.length>0,()=>`Copying failed because no load handler is found for source URL ${r}.`),Q(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${r}.`);const a=s[0],l=xi.getSaveHandlers(e);Q(l.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),Q(l.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${e}.`);const c=l[0],d=lg(r).scheme,m=lg(r).path,f=d===lg(r).scheme,y=await a.load();t&&f&&await pa.getManager(d).removeModel(m);const x=await c.save(y);return t&&!f&&await pa.getManager(d).removeModel(m),x.modelArtifactsInfo}async function Gv(){const r=pa.getSchemes(),e={};for(const t of r){const s=await pa.getManager(t).listModels();for(const a in s)e[t+ph+a]=s[a]}return e}async function ug(r){const e=lg(r);return pa.getManager(e.scheme).removeModel(e.path)}async function Hv(r,e){return Wv(r,e,!1)}async function jv(r,e){return Wv(r,e,!0)}class l_{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(At().get("IS_BROWSER")){At().setPlatform("browser",new l_);try{pa.registerManager(ru.URL_SCHEME,new Kd)}catch{}try{pa.registerManager(dh.URL_SCHEME,new Uf)}catch{}}let A0;function Er(r,e="float32",t){return e=e||"float32",Xn(r),new pn(r,e,t)}At().get("IS_NODE")&&At().setPlatform("node",new class{constructor(){this.util=b(61758),this.textEncoder=new this.util.TextEncoder}fetch(r,e){return At().global.fetch!=null?At().global.fetch(r,e):(A0==null&&(A0=b(78352)),A0(r,e))}now(){const r=process.hrtime();return 1e3*r[0]+r[1]/1e6}encode(r,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(r)}decode(r,e){return r.length===0?"":new this.util.TextDecoder(e).decode(r)}});const un=$e({cast_:function(r,e){const t=ge(r,"x","cast");if(!nf(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if(e==="string"&&t.dtype!=="string"||e!=="string"&&t.dtype==="string")throw new Error("Only strings can be casted to strings");const s={x:t},a={dtype:e};return Ge.runKernel(Bc,s,a)}}),iu=$e({clone_:function(r){const e={x:ge(r,"x","clone","string_or_numeric")};return Ge.runKernel(bd,e)}});function qv(r,e=!1){console.log(r.toString(e))}function Xv(r){return new Promise(e=>setTimeout(e)).then(r)}zf(),ah={buffer:Er,cast:un,clone:iu,print:qv};class fh{constructor(e){if(!At().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(fh.URL_SCHEME)&&(e=e.slice(fh.URL_SCHEME.length)),e!=null&&e.length!==0||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if(typeof document=="undefined")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const s=Ko(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),a=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),l=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(l.download=this.modelJsonFileName,l.href=a,await Xv(()=>l.dispatchEvent(new MouseEvent("click"))),e.weightData!=null){const c=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;c.download=this.weightDataFileName,c.href=t,await Xv(()=>c.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Yu(e)}}}}fh.URL_SCHEME="downloads://";class u_{constructor(e){if(e==null||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{const s=new FileReader;s.onload=a=>{const l=JSON.parse(a.target.result),c=l.modelTopology;if(c==null)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(l.weightsManifest==null)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(this.weightsFiles.length===0)return void e({modelTopology:c});const d=Xu(l,m=>this.loadWeights(m));e(d)},s.onerror=a=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(this.jsonFile)})}loadWeights(e){const t=[],s=[];for(const c of e)t.push(...c.weights),s.push(...c.paths);const a=this.checkManifestAndWeightFiles(e),l=s.map(c=>this.loadWeightsFile(c,a[c]));return Promise.all(l).then(c=>[t,og(c)])}loadWeightsFile(e,t){return new Promise((s,a)=>{const l=new FileReader;l.onload=c=>{const d=c.target.result;s(d)},l.onerror=c=>a(`Failed to weights data from file of path '${e}'.`),l.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],s=this.weightsFiles.map(l=>zv(l.name)),a={};for(const l of e)l.paths.forEach(c=>{const d=zv(c);if(t.indexOf(d)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${d}'`);if(t.push(d),s.indexOf(d)===-1)throw new Error(`Weight file with basename '${d}' is not provided.`);a[c]=this.weightsFiles[s.indexOf(d)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return a}}function I0(r){return new u_(r)}function cg(r,e,t,s){(function(l){Q(l!=null&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(r),function(l,c){Q(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),Q(c>=0&&c<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${c}`),Q(c>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${c}`)}(t=t==null?0:t,s=s==null?1:s);let a=0;return Promise.all(r.map(l=>(l.then(c=>{const d=t+ ++a/r.length*(s-t);return e(d),c}),l)))}async function C0(r,e){e==null&&(e={});const t=e.fetchFunc==null?At().platform.fetch:e.fetchFunc,s=r.map(l=>t(l,e.requestInit,{isBinary:!0})),a=(e.onProgress==null?await Promise.all(s):await cg(s,e.onProgress,0,.5)).map(l=>l.arrayBuffer());return e.onProgress==null?await Promise.all(a):await cg(a,e.onProgress,.5,1)}async function Yv(r,e="",t,s){return Kv(a=>C0(a,{requestInit:s}))(r,e,t)}function Kv(r){return async(e,t="",s)=>{const a=e.map(()=>!1),l={},c=s!=null?s.map(()=>!1):[],d=[];if(e.forEach((A,C)=>{let L=0;A.weights.forEach(P=>{const U="quantization"in P?P.quantization.dtype:P.dtype,q=ss[U]*he(P.shape),X=()=>{a[C]=!0,l[C]==null&&(l[C]=[]),l[C].push({manifestEntry:P,groupOffset:L,sizeBytes:q})};s!=null?s.forEach((re,oe)=>{re===P.name&&(X(),c[oe]=!0)}):X(),d.push(P.name),L+=q})}),!c.every(A=>A)){const A=s.filter((C,L)=>!c[L]);throw new Error(`Could not find weights in manifest with names: ${A.join(", ")}. 
Manifest JSON has weights with names: ${d.join(", ")}.`)}const m=a.reduce((A,C,L)=>(C&&A.push(L),A),[]),f=[];m.forEach(A=>{e[A].paths.forEach(C=>{const L=t+(t.endsWith("/")?"":"/")+C;f.push(L)})});const y=await r(f),x={};let _=0;return m.forEach(A=>{const C=e[A].paths.length;let L=0;for(let X=0;X<C;X++)L+=y[_+X].byteLength;const P=new ArrayBuffer(L),U=new Uint8Array(P);let q=0;for(let X=0;X<C;X++){const re=new Uint8Array(y[_+X]);U.set(re,q),q+=re.byteLength}l[A].forEach(X=>{const re=uh(P.slice(X.groupOffset,X.groupOffset+X.sizeBytes),[X.manifestEntry]);for(const oe in re)x[oe]=re[oe]}),_+=C}),x}}xi.registerSaveRouter(r=>At().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(fh.URL_SCHEME)?function(e="model"){return new fh(e)}(r.slice(fh.URL_SCHEME.length)):null);class hg{constructor(e,t){if(this.DEFAULT_METHOD="POST",t==null&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,t.fetchFunc!=null?(Q(typeof t.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=At().platform.fetch,Q(e!=null&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&Q(e.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,t.requestInit!=null&&t.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const s=Ko(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),e.weightData!=null&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:Yu(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch{let c=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?c+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":c+=" Please make sure the server is serving valid JSON for this request.",new Error(c)}const s=t.modelTopology,a=t.weightsManifest;if(s==null&&a==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Xu(t,l=>this.loadWeights(l))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[s,a]=function(f){const y=f.lastIndexOf("/"),x=f.lastIndexOf("?");return[f.substring(0,y)+"/",x>y?f.substring(x):""]}(t),l=this.weightPathPrefix||s,c=[];for(const f of e)c.push(...f.weights);const d=[],m=[];for(const f of e)for(const y of f.paths)this.weightUrlConverter!=null?m.push(this.weightUrlConverter(y)):d.push(l+y+a);return this.weightUrlConverter&&d.push(...await Promise.all(m)),[c,og(await C0(d,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function dg(r){return r.match(hg.URL_SCHEME_REGEX)!=null}hg.URL_SCHEME_REGEX=/^https?:\/\//;const k0=(r,e)=>{if(typeof fetch=="undefined"&&(e==null||e.fetchFunc==null))return null;{let t=!0;if(t=Array.isArray(r)?r.every(s=>dg(s)):dg(r),t)return pg(r,e)}return null};function pg(r,e){return new hg(r,e)}function Gf(r,e){return pg(r,e)}xi.registerSaveRouter(k0),xi.registerLoadRouter(k0);class fg{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class Zd{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function fa(r,e,t,s){return arguments.length===1?r.modelTopology!=null||r.weightSpecs!=null?new fg(r):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new fg({modelTopology:r})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new fg({modelTopology:r,weightSpecs:e,weightData:t,trainingConfig:s}))}function Ys(r){return new Zd(r)}const wr=$e({matMul_:function(r,e,t=!1,s=!1){let a=ge(r,"a","matMul"),l=ge(e,"b","matMul");[a,l]=Qr(a,l);const c={a,b:l},d={transposeA:t,transposeB:s};return Ge.runKernel(ad,c,d)}}),Jd=$e({oneHot_:function(r,e,t=1,s=0){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const a={indices:ge(r,"indices","oneHot","int32")},l={depth:e,onValue:t,offValue:s};return Ge.runKernel(Qt,a,l)}}),Pr=$e({transpose_:function(r,e){const t=ge(r,"x","transpose");if(e==null&&(e=t.shape.map((l,c)=>c).reverse()),Q(t.rank===e.length,()=>`Error in transpose: rank of input ${t.rank} must match length of perm ${e}.`),e.forEach(l=>{Q(l>=0&&l<t.rank,()=>"All entries in 'perm' must be between 0 and "+(t.rank-1)+` but got ${e}`)}),t.rank<=1)return t.clone();const s={x:t},a={perm:e};return Ge.runKernel($d,s,a)}}),c_=$e({confusionMatrix_:function(r,e,t){const s=ge(r,"labels","confusionMatrix"),a=ge(e,"predictions","confusionMatrix");Q(t==null||t>0&&Number.isInteger(t),()=>`If provided, numClasses must be a positive integer, but got ${t}`),Q(s.rank===1,()=>`Expected the rank of labels to be 1, but got ${s.rank}`),Q(a.rank===1,()=>`Expected the rank of predictions to be 1, but got ${a.rank}`),Q(s.shape[0]===a.shape[0],()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`),Q(t>0&&Number.isInteger(t),()=>`numClasses is required to be a positive integer, but got ${t}`);const l=Jd(un(s,"int32"),t),c=Jd(un(a,"int32"),t),d=Pr(l),m=wr(d,c);return un(m,"int32")}});function Zv(r,e,t){if(Je(r),e!=null&&e.length!==3)throw new Error("tensor3d() requires shape to have three numbers");const s=xo(r,t);if(s.length!==3&&s.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(s.length===1&&e==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return qs(r,e,s,t)}let Qd;function Jv(r,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(r==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let t=!1,s=!1,a=!1,l=!1,c=!1,d=!1;if(r.data instanceof Uint8Array)t=!0;else if(typeof ImageData!="undefined"&&r instanceof ImageData)s=!0;else if(typeof HTMLVideoElement!="undefined"&&r instanceof HTMLVideoElement)a=!0;else if(typeof HTMLImageElement!="undefined"&&r instanceof HTMLImageElement)l=!0;else if(r.getContext!=null)c=!0;else{if(!(typeof ImageBitmap!="undefined"&&r instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);d=!0}if(a&&a&&r.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");if(Rf(Zl,Ge.backendName)!=null){const _={pixels:r},A={numChannels:e};return Ge.runKernel(Zl,_,A)}const[m,f]=a?[r.videoWidth,r.videoHeight]:[r.width,r.height];let y,x;if(c?y=r.getContext("2d").getImageData(0,0,m,f).data:s||t?y=r.data:(l||a||d)&&(Qd==null&&(Qd=document.createElement("canvas").getContext("2d")),Qd.canvas.width=m,Qd.canvas.height=f,Qd.drawImage(r,0,0,m,f),y=Qd.getImageData(0,0,m,f).data),e===4)x=new Int32Array(y);else{const _=m*f;x=new Int32Array(_*e);for(let A=0;A<_;A++)for(let C=0;C<e;++C)x[A*e+C]=y[4*A+C]}return Zv(x,[f,m,e],"int32")}async function h_(r,e=3){let t=null;if(At().getBool("WRAP_TO_IMAGEBITMAP")&&function(s){return typeof window!="undefined"&&typeof ImageBitmap!="undefined"&&window.hasOwnProperty("createImageBitmap")&&!(s instanceof ImageBitmap)&&function(a){return a!=null&&a.width!==0&&a.height!==0}(s)&&!function(a){return a!=null&&a.data instanceof Uint8Array}(s)}(r)){let s;try{s=await createImageBitmap(r,{premultiplyAlpha:"none"})}catch{s=null}t=s!=null&&s.width===r.width&&s.height===r.height?s:r}else t=r;return Jv(t,e)}async function d_(r,e){let t=ge(r,"img","toPixels");if(!(r instanceof Ur)){const f=t;t=un(f,"int32"),f.dispose()}if(t.rank!==2&&t.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${t.rank}.`);const[s,a]=t.shape.slice(0,2),l=t.rank===2?1:t.shape[2];if(l>4||l===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${l}`);if(t.dtype!=="float32"&&t.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${t.dtype}. Please use float32 or int32 tensors.`);const c=await t.data(),d=t.dtype==="float32"?255:1,m=new Uint8ClampedArray(a*s*4);for(let f=0;f<s*a;++f){const y=[0,0,0,255];for(let _=0;_<l;_++){const A=c[f*l+_];if(t.dtype==="float32"){if(A<0||A>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${A}.`)}else if(t.dtype==="int32"&&(A<0||A>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${A}.`);l===1?(y[0]=A*d,y[1]=A*d,y[2]=A*d):y[_]=A*d}const x=4*f;m[x+0]=Math.round(y[0]),m[x+1]=Math.round(y[1]),m[x+2]=Math.round(y[2]),m[x+3]=Math.round(y[3])}if(e!=null){e.width=a,e.height=s;const f=e.getContext("2d"),y=new ImageData(m,a,s);f.putImageData(y,0,0)}return t!==r&&t.dispose(),m}const Qv=$e({fromPixels_:Jv});function mg(r,e){const t=r.shape.length,s=e.shape.length;if(t<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if(e.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[s-1]>t)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[s-1]} vs. ${t}`);if(he(r.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);const a=e.shape,l=a[a.length-1];let c=1;for(let x=0;x<a.length-1;++x)c*=a[x];const d=r.shape,m=a.slice();m.pop();let f=1;for(let x=l;x<t;++x)f*=d[x],m.push(d[x]);const y=[...Hn(r.shape).map(x=>x/f),1].slice(0,l);return[m,c,f,y]}function N0(r,e,t){const s=e.rank>1?e.shape[e.rank-1]:1,a=e.rank>1?e.rank-1:1,l=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t.shape}, indices.shape: ${e.shape}, shape: ${r}, sliceDim: ${s}, and batchDim: ${a}.`;if(t.rank<a)throw new Error(l+` update.rank < ${a}. `);if(r.length<s+(t.rank-a))throw new Error(l+` Output shape length < ${s+(t.rank-a)}`);if(t.rank!==a+r.length-s)throw new Error(l+" update.rank != "+(a+r.length-s));for(let c=0;c<a;++c)if(t.shape[c]!==e.shape[c])throw new Error(l+` updates.shape[${c}] (${t.shape[c]}) != indices.shape[${c}] (${e.shape[c]}).`);for(let c=0;c<t.rank-a;++c)if(t.shape[c+a]!==r[c+s])throw new Error(l+` updates.shape[${c+a}] (${t.shape[c+a]}) != shape[${c+a}] (${r[c+a]})`)}function R0(r,e,t){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(r.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);if(e.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(t.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t}`);if(t.length===0){if(e.size===0)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(r.size===0)throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`)}N0(t,e,r)}function ep(r,e,t){const s=e.shape.length,a=s>1?e.shape[s-1]:1,l=t.length;let c=1;for(let m=a;m<l;++m)c*=t[m];const d=a<1?1:a;return{sliceRank:a,numUpdates:he(e.shape)/d,sliceSize:c,strides:[...Hn(t.slice(0,a)),1],outputSize:he(t)}}function L0(r,e,t){const s=r.shape.length;Q(s===e.length,()=>`Error in slice${s}D: Length of begin ${e} must match the rank of the array (${s}).`),Q(s===t.length,()=>`Error in slice${s}D: Length of size ${t} must match the rank of the array (${s}).`);for(let a=0;a<s;++a)Q(e[a]+t[a]<=r.shape[a],()=>`Error in slice${s}D: begin[${a}] + size[${a}] (${e[a]+t[a]}) would overflow input.shape[${a}] (${r.shape[a]})`)}function gg(r){const e=[];let t=0;for(;r>0;)1&r&&e.push(t),r/=2,t++;return e}function eb(r,e,t){const s=[];for(let a=0;a<r.length;a++)s[a]=Math.ceil((e[a]-r[a])/t[a]);return s}function tb(r,e,t,s){const a=[...r];for(let l=a.length;l<s.length;l++)a.push(1);for(let l=0;l<t;l++)l===0?a[e]=1:(a.splice(e,0,1),a.pop());return a}function nb(r,e,t){return t<=r?t:t-(e-1)}function rb(r,e){const t=[];for(let s=0;s<r;s++)t.push(e+s);return t}function ib(r,e,t,s,a,l,c,d,m){const f=r.length;let y=new Array(f),x=new Array(f),_=new Array(f);if(e.length&&t>0){const A=e[0],C=t+1;y=sb(c,A,C,s,r),x=ab(d,A,C,a,r),_=tb(l,A,C,r)}else for(let A=0;A<f;A++)y[A]=lb(c,s,l,r,A,m),x[A]=ub(d,a,l,r,A,m),_[A]=ob(l,A,m);return{begin:y,end:x,strides:_}}function sb(r,e,t,s,a){const l=[...a],c=rb(t,e);for(let d=0;d<l.length;d++)if(c.indexOf(d)>-1)l[d]=0;else{const m=nb(e,t,d);let f=s[m];r&1<<m&&(f=0),l[d]=f}return l}function ab(r,e,t,s,a){const l=[...a],c=rb(t,e);for(let d=0;d<l.length;d++)if(c.indexOf(d)>-1)l[d]=Number.MAX_SAFE_INTEGER;else{const m=nb(e,t,d);let f=s[m];r&1<<m&&(f=Number.MAX_SAFE_INTEGER),l[d]=f}for(let d=0;d<l.length;d++){const m=a[d];l[d]<0&&(l[d]+=m),l[d]=Re(0,l[d],a[d])}return l}function ob(r,e,t){let s=r[e];return(t&1<<e||s==null)&&(s=1),s}function lb(r,e,t,s,a,l){let c=e[a];const d=t[a]||1;(r&1<<a||l&1<<a||c==null)&&(c=d>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const m=s[a];return c<0&&(c+=m),c=Re(0,c,m-1),c}function ub(r,e,t,s,a,l){let c=e[a];const d=t[a]||1;(r&1<<a||l&1<<a||c==null)&&(c=d>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const m=s[a];return c<0&&(c+=m),c=d>0?Re(0,c,m):Re(-1,c,m-1),c}function D0(r,e,t){let s=t.length;for(let a=0;a<t.length;a++)if(t[a]>1){s=a;break}for(let a=s+1;a<t.length;a++)if(e[a]>0||t[a]!==r[a])return!1;return!0}function P0(r,e){let t=r.length>0?r[r.length-1]:1;for(let s=0;s<r.length-1;s++)t+=r[s]*e[s];return t}function yg(r,e,t){let s;const a=r.shape.length;let l;return s=typeof e=="number"?[e,...new Array(a-1).fill(0)]:e.length<a?e.concat(new Array(a-e.length).fill(0)):e.slice(),s.forEach(c=>{Q(c!==-1,()=>"slice() does not support negative begin indexing.")}),l=t==null?new Array(a).fill(-1):typeof t=="number"?[t,...new Array(a-1).fill(-1)]:t.length<a?t.concat(new Array(a-t.length).fill(-1)):t,l=l.map((c,d)=>c>=0?c:(Q(c===-1,()=>`Negative size values should be exactly -1 but got ${c} for the slice() size at index ${d}.`),r.shape[d]-s[d])),[s,l]}function F0(r,e,t,s,a,l,c,d,m){let f=e.slice(),y=t.slice(),x=s;s==null&&(x=new Array(f.length));const _=gg(c);if(_.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(c!==0&&d!==0)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(c!==0&&m!==0)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const A=r.length-f.length,C=gg(d),L=r.slice();C.forEach(de=>{f[de]=0,y[de]=1,L.splice(de,0,1)});const{begin:P,end:U,strides:q}=ib(L,_,A,f,y,x,a,l,c);f=P,y=U,x=q;const X=gg(m);X.forEach(de=>{y[de]=f[de]+1,x[de]=1});const re=eb(f,y,x),oe=re.filter((de,Ie)=>X.indexOf(Ie)===-1);return{nonStrided:x.every(de=>de===1),$begin:f,$end:y,$strides:x,size:re,newShape:L,outShape:oe}}class mh{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ja{constructor(){this.classNameMap={}}static getMap(){return Ja.instance==null&&(Ja.instance=new Ja),Ja.instance}static register(e){Ja.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ht(r){Q(r.className!=null,()=>"Class being registered does not have the static className property defined."),Q(typeof r.className=="string",()=>"className is required to be a string, but got type "+typeof r.className),Q(r.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Ja.register(r)}const cb=.1;function p_(r,e,t){return t==null&&(t=O0()),z0(r,e,(s,a)=>Hf(s,a,t))}function O0(){return Ge.backend.floatPrecision()===32?.001:cb}function z0(r,e,t){let s=!0;if((Yi(r)||Yi(e))&&(s=!1),Yi(r)&&Yi(e)&&(s=!0),s){const c=r.constructor.name,d=e.constructor.name;if(c!==d)throw new Error(`Arrays are of different type. Actual: ${c}. Expected: ${d}`)}if(Array.isArray(r)&&Array.isArray(e)){const c=xo(r),d=xo(e);if(!Le(c,d))throw new Error(`Arrays have different shapes. Actual: [${c}]. Expected: [${d}]`)}const a=Yi(r)?r:at(r),l=Yi(e)?e:at(e);if(a.length!==l.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${l.length}.
Actual:   ${a}.
Expected: ${l}.`);for(let c=0;c<l.length;++c){const d=a[c],m=l[c];if(!t(d,m))throw new Error(`Arrays differ: actual[${c}] = ${d}, expected[${c}] = ${m}.
Actual:   ${a}.
Expected: ${l}.`)}}function f_(r,e){r().then(()=>e.fail(),()=>e())}function hb(r,e){const t=typeof e=="string"||typeof e=="number"||typeof e=="boolean"?[e]:e;return $s(r)||$s(r[0])||$s(e)||$s(e[0])?z0(r,t,(s,a)=>s==a):z0(r,e,(s,a)=>Hf(s,a,0))}function db(r,e,t){if(t==null&&(t=O0()),!Hf(r,e,t))throw new Error(`Numbers differ: actual === ${r}, expected === ${e}`)}function Hf(r,e,t){return!isFinite(r)&&!isFinite(e)||!(isNaN(r)||isNaN(e)||Math.abs(r-e)>t)}function pb(r,e,t){for(let s=0;s<r.length;s++)if(r[s]<e||r[s]>t)throw new Error(`Value out of range:${r[s]} low: ${e}, high: ${t}`)}function m_(r,e){expect(new Float32Array(r)).toEqual(new Float32Array(e))}function su(r){for(let e=0;e<r.length;e++){const t=r[e];Array.isArray(t)?su(t):r[e]=Ya(t)}return r}const B0="3.9.0";function g_(){At().set("PROD",!0)}function fb(){At().set("DEBUG",!0)}function mb(){At().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function tp(r){At().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(r+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function y_(){Ge.disposeVariables()}function Ju(){return Ge}function Qu(){return Ge.memory()}function gb(r){return Ge.profile(r)}function st(r,e){return Ge.tidy(r,e)}function pr(r){js(r).forEach(e=>e.dispose())}function Qi(r){return Ge.keep(r)}function x_(r){return Ge.time(r)}function v_(r){return Ge.setBackend(r)}function b_(){return Ge.ready()}function yb(){return Ge.backendName}function w_(r){Ge.removeBackend(r)}function xb(r){return Ge.findBackend(r)}function vb(r){return Ge.findBackendFactory(r)}function $0(r,e,t=1){return Ge.registerBackend(r,e,t)}function bb(){return Ge.backend}function __(r,e){At().setPlatform(r,e)}const jt=$e({add_:function(r,e){let t=ge(r,"a","add"),s=ge(e,"b","add");[t,s]=Qr(t,s);const a={a:t,b:s};return Ge.runKernel(li,a)}}),jf=$e({floorDiv_:function(r,e){let t=ge(r,"a","floorDiv"),s=ge(e,"b","floorDiv");[t,s]=Qr(t,s);const a={a:t,b:s};return Ge.runKernel(jc,a)}}),Un=$e({div_:function(r,e){let t=ge(r,"a","div"),s=ge(e,"b","div");if([t,s]=Qr(t,s),t.dtype==="int32"&&s.dtype==="int32")return jf(t,s);const a={a:t,b:s};return Ge.runKernel(Ul,a,{})}}),qe=$e({mul_:function(r,e){let t=ge(r,"a","mul"),s=ge(e,"b","mul");[t,s]=Qr(t,s);const a={a:t,b:s};return Ge.runKernel(Vi,a)}}),Ts=$e({sqrt_:function(r){const e={x:ge(r,"x","sqrt")};return Ge.runKernel(Uu,e)}}),ei=$e({square_:function(r){const e=ge(r,"x","square");return Ge.runKernel("Square",{x:e},{})}}),Fr=$e({zerosLike_:function(r){const e={x:ge(r,"x","zerosLike")};return Ge.runKernel(kf,e)}});function S_(r){return Q(hs(r),()=>"The f passed in grad(f) must be a function"),(e,t)=>{const s=ge(e,"x","tf.grad","string_or_numeric"),a=t!=null?ge(t,"dy","tf.grad"):null;return Ge.tidy(()=>{const{value:l,grads:c}=Ge.gradients(()=>r(s),[s],a);return a!=null&&Ze(l.shape,a.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),vg(c),c[0]})}}function wb(r){return Q(hs(r),()=>"The f passed in grads(f) must be a function"),(e,t)=>{Q(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const s=Ka(e,"args","tf.grads","string_or_numeric"),a=t!=null?ge(t,"dy","tf.grads"):null;return Ge.tidy(()=>{const{value:l,grads:c}=Ge.gradients(()=>r(...s),s,a);return a!=null&&Ze(l.shape,a.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),vg(c),c})}}function M_(r){return Q(hs(r),()=>"The f passed in valueAndGrad(f) must be a function"),(e,t)=>{Q(e instanceof Ur,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),Q(t==null||t instanceof Ur,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:s,value:a}=Ge.gradients(()=>r(e),[e],t);return vg(s),{grad:s[0],value:a}}}function xg(r){return Q(hs(r),()=>"The f passed in valueAndGrads(f) must be a function"),(e,t)=>{Q(Array.isArray(e)&&e.every(a=>a instanceof Ur),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),Q(t==null||t instanceof Ur,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const s=Ge.gradients(()=>r(...e),e,t);return t!=null&&Ze(s.value.shape,t.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),vg(s.grads),s}}function qf(r,e){Q(hs(r),()=>"The f passed in variableGrads(f) must be a function"),Q(e==null||Array.isArray(e)&&e.every(m=>m instanceof Df),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const t=e!=null;if(!t){e=[];for(const m in Ge.registeredVariables)e.push(Ge.registeredVariables[m])}const s=t?e.filter(m=>!m.trainable):null,a=e.length;Q((e=e.filter(m=>m.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`);const{value:l,grads:c}=Ge.gradients(r,e,null,!0);Q(c.some(m=>m!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),Q(l.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${l.rank} tensor`);const d={};return e.forEach((m,f)=>{c[f]!=null&&(d[m.name]=c[f])}),s!=null&&s.forEach(m=>d[m.name]=null),{value:l,grads:d}}function Zo(r){return Ge.customGrad(r)}function vg(r){if(r.filter(e=>e==null).length>0)throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`)}function Yn(r,e){if((Yi(r)&&e!=="string"||Array.isArray(r))&&e!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(e==="string"&&Yi(r)&&!(r instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return qs(r,[],[],e)}class Ml extends mh{minimize(e,t=!1,s){const{value:a,grads:l}=this.computeGradients(e,s);if(s!=null){const c=s.map(d=>({name:d.name,tensor:l[d.name]}));this.applyGradients(c)}else this.applyGradients(l);return pr(l),t?a:(a.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return qf(e,t)}dispose(){this.iterations_!=null&&pr(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:Yn(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ml,Symbol.hasInstance,{value:r=>r.minimize!=null&&r.computeGradients!=null&&r.applyGradients!=null});class np extends Ml{constructor(e,t,s=null){super(),this.learningRate=e,this.rho=t,this.epsilon=s,this.accumulatedGrads=[],this.accumulatedUpdates=[],s==null&&(this.epsilon=Ge.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(t=>t.name):Object.keys(e)).forEach((t,s)=>{const a=Ge.registeredVariables[t];this.accumulatedGrads[s]==null&&(this.accumulatedGrads[s]={originalName:`${t}/accum_grad`,variable:st(()=>Fr(a).variable(!1))}),this.accumulatedUpdates[s]==null&&(this.accumulatedUpdates[s]={originalName:`${t}/accum_var`,variable:st(()=>Fr(a).variable(!1))});const l=Array.isArray(e)?e[s].tensor:e[t];if(l==null)return;const c=this.accumulatedGrads[s].variable,d=this.accumulatedUpdates[s].variable;st(()=>{const m=jt(qe(c,this.rho),qe(ei(l),1-this.rho)),f=qe(Un(Ts(jt(d,this.epsilon)),Ts(jt(c,this.epsilon))),l),y=jt(qe(d,this.rho),qe(ei(f),1-this.rho));c.assign(m),d.assign(y);const x=jt(qe(f,-this.learningRate),a);a.assign(x)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(pr(this.accumulatedGrads.map(e=>e.variable)),pr(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(s=>({originalName:s.name,variable:s.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function vo(r,e,t){const s={shape:r,value:e,dtype:t};return Ge.runKernel(yd,{},s)}np.className="Adadelta",Ht(np);class bg extends Ml{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(t=>t.name):Object.keys(e)).forEach((t,s)=>{const a=Ge.registeredVariables[t];this.accumulatedGrads[s]==null&&(this.accumulatedGrads[s]={originalName:`${t}/accumulator`,variable:st(()=>vo(a.shape,this.initialAccumulatorValue).variable(!1))});const l=Array.isArray(e)?e[s].tensor:e[t];if(l==null)return;const c=this.accumulatedGrads[s].variable;st(()=>{const d=jt(c,ei(l));c.assign(d);const m=jt(qe(Un(l,Ts(jt(d,Ge.backend.epsilon()))),-this.learningRate),a);a.assign(m)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&pr(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}bg.className="Adagrad",Ht(bg);const Jo=$e({pow_:function(r,e){let t=ge(r,"base","pow"),s=ge(e,"exp","pow");[t,s]=Qr(t,s);const a={a:t,b:s};return Ge.runKernel(Nd,a)}}),kn=$e({sub_:function(r,e){let t=ge(r,"a","sub"),s=ge(e,"b","sub");[t,s]=Qr(t,s);const a={a:t,b:s};return Ge.runKernel(Gs,a)}});class wg extends Ml{constructor(e,t,s,a=null){super(),this.learningRate=e,this.beta1=t,this.beta2=s,this.epsilon=a,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],st(()=>{this.accBeta1=Yn(t).variable(),this.accBeta2=Yn(s).variable()}),a==null&&(this.epsilon=Ge.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(s=>s.name):Object.keys(e);st(()=>{const s=kn(1,this.accBeta1),a=kn(1,this.accBeta2);t.forEach((l,c)=>{const d=Ge.registeredVariables[l];this.accumulatedFirstMoment[c]==null&&(this.accumulatedFirstMoment[c]={originalName:`${l}/m`,variable:st(()=>Fr(d).variable(!1))}),this.accumulatedSecondMoment[c]==null&&(this.accumulatedSecondMoment[c]={originalName:`${l}/v`,variable:st(()=>Fr(d).variable(!1))});const m=Array.isArray(e)?e[c].tensor:e[l];if(m==null)return;const f=this.accumulatedFirstMoment[c].variable,y=this.accumulatedSecondMoment[c].variable,x=jt(qe(f,this.beta1),qe(m,1-this.beta1)),_=jt(qe(y,this.beta2),qe(ei(m),1-this.beta2)),A=Un(x,s),C=Un(_,a);f.assign(x),y.assign(_);const L=jt(qe(Un(A,jt(Ts(C),this.epsilon)),-this.learningRate),d);d.assign(L)}),this.accBeta1.assign(qe(this.accBeta1,this.beta1)),this.accBeta2.assign(qe(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&pr(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedSecondMoment!=null&&pr(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e),st(()=>{this.accBeta1.assign(Jo(this.beta1,this.iterations_+1)),this.accBeta2.assign(Jo(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(s=>({originalName:s.name,variable:s.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(s=>({originalName:s.name,variable:s.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}wg.className="Adam",Ht(wg);const ur=$e({abs_:function(r){const e=ge(r,"x","abs");if(e.dtype==="complex64"){const t={x:e};return Ge.runKernel(ld,t)}{const t={x:e};return Ge.runKernel(Us,t)}}});function gh(r,e){const t=r.length,s=[];for(let a=0;a<t;a++){const l=t-1-a,c=r[l]||1;(e[e.length-1-a]||1)>1&&c===1&&s.unshift(l)}return s}function Ei(r,e){const t=[];for(let s=0;s<e.length;s++){const a=r[r.length-s-1],l=e.length-s-1,c=e[l];(a==null||a===1&&c>1)&&t.unshift(l)}return t}function mr(r,e){const t=[],s=Math.max(r.length,e.length);for(let a=0;a<s;a++){let l=r[r.length-a-1];l==null&&(l=1);let c=e[e.length-a-1];if(c==null&&(c=1),l===1)t.unshift(c);else if(c===1)t.unshift(l);else{if(l!==c)throw Error(`Operands could not be broadcast together with shapes ${r} and ${e}.`);t.unshift(l)}}return t}const Qa=$e({maximum_:function(r,e){let t=ge(r,"a","maximum"),s=ge(e,"b","maximum");[t,s]=Qr(t,s),t.dtype==="bool"&&(t=un(t,"int32"),s=un(s,"int32")),mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(Ad,a)}});class Tl extends Ml{constructor(e,t,s,a=null,l=0){super(),this.learningRate=e,this.beta1=t,this.beta2=s,this.epsilon=a,this.decay=l,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],st(()=>{this.iteration=Yn(0).variable(),this.accBeta1=Yn(t).variable()}),a==null&&(this.epsilon=Ge.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(s=>s.name):Object.keys(e);st(()=>{const s=kn(1,this.accBeta1),a=Un(-this.learningRate,jt(qe(this.iteration,this.decay),1));t.forEach((l,c)=>{const d=Ge.registeredVariables[l];this.accumulatedFirstMoment[c]==null&&(this.accumulatedFirstMoment[c]={originalName:`${l}/m`,variable:Fr(d).variable(!1)}),this.accumulatedWeightedInfNorm[c]==null&&(this.accumulatedWeightedInfNorm[c]={originalName:`${l}/v`,variable:Fr(d).variable(!1)});const m=Array.isArray(e)?e[c].tensor:e[l];if(m==null)return;const f=this.accumulatedFirstMoment[c].variable,y=this.accumulatedWeightedInfNorm[c].variable,x=jt(qe(f,this.beta1),qe(m,1-this.beta1)),_=qe(y,this.beta2),A=ur(m),C=Qa(_,A);f.assign(x),y.assign(C);const L=jt(qe(Un(a,s),Un(x,jt(C,this.epsilon))),d);d.assign(L)}),this.iteration.assign(jt(this.iteration,1)),this.accBeta1.assign(qe(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&pr(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedWeightedInfNorm!=null&&pr(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Tl.className="Adamax",Ht(Tl);class vi extends Ml{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(t=>t.name):Object.keys(e)).forEach((t,s)=>{const a=Array.isArray(e)?e[s].tensor:e[t];if(a==null)return;const l=Ge.registeredVariables[t];st(()=>{const c=jt(qe(this.c,a),l);l.assign(c)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,this.c!=null&&this.c.dispose(),this.c=Qi(Yn(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if((e=await this.extractIterations(e)).length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}vi.className="SGD",Ht(vi);class Qo extends vi{constructor(e,t,s=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=s,this.accumulations=[],this.m=Yn(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(t=>t.name):Object.keys(e)).forEach((t,s)=>{const a=Ge.registeredVariables[t];this.accumulations[s]==null&&(this.accumulations[s]={originalName:`${t}/momentum`,variable:st(()=>Fr(a).variable(!1))});const l=this.accumulations[s].variable,c=Array.isArray(e)?e[s].tensor:e[t];c!=null&&st(()=>{let d;const m=jt(qe(this.m,l),c);d=this.useNesterov?jt(qe(this.c,jt(c,qe(m,this.m))),a):jt(qe(this.c,m),a),l.assign(m),a.assign(d)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&pr(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Qo.className="Momentum",Ht(Qo);class yh extends Ml{constructor(e,t=.9,s=0,a=null,l=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=s,this.epsilon=a,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=l,a==null&&(this.epsilon=Ge.backend.epsilon()),e==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(t=>t.name):Object.keys(e)).forEach((t,s)=>{const a=Ge.registeredVariables[t],l=!1;this.accumulatedMeanSquares[s]==null&&(this.accumulatedMeanSquares[s]={originalName:`${t}/rms`,variable:st(()=>Fr(a).variable(l))}),this.accumulatedMoments[s]==null&&(this.accumulatedMoments[s]={originalName:`${t}/momentum`,variable:st(()=>Fr(a).variable(l))}),this.accumulatedMeanGrads[s]==null&&this.centered&&(this.accumulatedMeanGrads[s]={originalName:`${t}/mg`,variable:st(()=>Fr(a).variable(l))});const c=Array.isArray(e)?e[s].tensor:e[t];if(c==null)return;const d=this.accumulatedMeanSquares[s].variable,m=this.accumulatedMoments[s].variable;st(()=>{const f=jt(qe(d,this.decay),qe(ei(c),1-this.decay));if(this.centered){const y=this.accumulatedMeanGrads[s].variable,x=jt(qe(y,this.decay),qe(c,1-this.decay)),_=Un(qe(c,this.learningRate),Ts(kn(f,jt(ei(x),this.epsilon)))),A=jt(qe(m,this.momentum),_);d.assign(f),y.assign(x),m.assign(A);const C=kn(a,A);a.assign(C)}else{const y=jt(qe(d,this.decay),qe(ei(c),1-this.decay)),x=jt(qe(m,this.momentum),Un(qe(c,this.learningRate),Ts(jt(y,this.epsilon))));d.assign(y),m.assign(x);const _=kn(a,x);a.assign(_)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&pr(this.accumulatedMeanSquares.map(e=>e.variable)),this.accumulatedMeanGrads!=null&&this.centered&&pr(this.accumulatedMeanGrads.map(e=>e.variable)),this.accumulatedMoments!=null&&pr(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,s=!1;this.accumulatedMeanSquares=e.slice(0,t).map(a=>({originalName:a.name,variable:a.tensor.variable(s)})),this.accumulatedMoments=e.slice(t,2*t).map(a=>({originalName:a.name,variable:a.tensor.variable(s)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(a=>({originalName:a.name,variable:a.tensor.variable(s)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}yh.className="RMSProp",Ht(yh);const ec=$e({acos_:function(r){const e={x:ge(r,"x","acos")};return Ge.runKernel(oi,e)}}),xh=$e({acosh_:function(r){const e={x:ge(r,"x","acosh")};return Ge.runKernel(ds,e)}}),vh=$e({addN_:function(r){Q(Array.isArray(r),()=>"The argument passed to tf.addN() must be a list of tensors"),Q(r.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${r.length}`);const e=r.map((a,l)=>ge(a,`tensors${l}`,"addN")),t=e[0];e.forEach(a=>{if(a.dtype!==t.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(a=>{if(!Le(a.shape,t.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const s=e;return Ge.runKernel(Lc,s)}}),au=$e({all_:function(r,e=null,t=!1){const s={x:ge(r,"x","all","bool")},a={axis:e,keepDims:t};return Ge.runKernel(td,s,a)}}),El=$e({any_:function(r,e=null,t=!1){const s={x:ge(r,"x","any","bool")},a={axis:e,keepDims:t};return Ge.runKernel(nd,s,a)}}),el=$e({argMax_:function(r,e=0){const t={x:ge(r,"x","argMax")},s={axis:e};return Ge.runKernel(rd,t,s)}}),_g=$e({argMin_:function(r,e=0){const t={x:ge(r,"x","argMin")},s={axis:e};return Ge.runKernel(Dc,t,s)}}),rp=$e({asin_:function(r){const e={x:ge(r,"x","asin")};return Ge.runKernel(Lu,e)}}),bh=$e({asinh_:function(r){const e={x:ge(r,"x","asinh")};return Ge.runKernel(Pc,e)}}),ip=$e({atan_:function(r){const e={x:ge(r,"x","atan")};return Ge.runKernel(Fc,e)}}),Sg=$e({atan2_:function(r,e){let t=ge(r,"a","atan2"),s=ge(e,"b","atan2");[t,s]=Qr(t,s);const a={a:t,b:s};return Ge.runKernel(zc,a)}}),Xf=$e({atanh_:function(r){const e={x:ge(r,"x","atanh")};return Ge.runKernel(Oc,e)}});function sp(r,e,t,s,a="NHWC",l){return Wi(r,[...e,r[3]],t,l,s,null,null,wo(a))}function ma(r,e,t,s,a,l,c="channelsLast"){const[d,m]=Yf(e);let f;if(c==="channelsLast")f=[d,m,r[3],r[3]];else{if(c!=="channelsFirst")throw new Error(`Unknown dataFormat ${c}`);f=[d,m,r[1],r[1]]}return Wi(r,f,t,s,a,l,!1,c)}function bo(r,e,t,s,a,l,c="NDHWC"){const[d,m,f]=Tg(e);let y,x;if(c==="NDHWC")x="channelsLast",y=[d,m,f,r[4],r[4]];else{if(c!=="NCDHW")throw new Error(`Unknown dataFormat ${c}`);x="channelsFirst",y=[d,m,f,r[1],r[1]]}return ou(r,y,t,s,a,!1,x,l)}function Wi(r,e,t,s,a,l,c=!1,d="channelsLast"){let[m,f,y,x]=[-1,-1,-1,-1];if(d==="channelsLast")[m,f,y,x]=r;else{if(d!=="channelsFirst")throw new Error(`Unknown dataFormat ${d}`);[m,x,f,y]=r}const[_,A,,C]=e,[L,P]=Yf(t),[U,q]=Yf(s),X=wh(_,U),re=wh(A,q),{padInfo:oe,outHeight:de,outWidth:Ie}=function(ze,Ve,Qe,nt,ft,yt,Mt,vt,Ct){let bt,Rt,Ut;if(typeof ze=="number"){bt={top:ze,bottom:ze,left:ze,right:ze,type:ze===0?"VALID":"NUMBER"};const Zt=function(qt,cn,hn,Sn,Cn){Sn==null&&(Sn=Mg(qt,cn,hn));const jn=qt[1];return[_h((qt[0]-cn+2*Sn)/hn+1,Cn),_h((jn-cn+2*Sn)/hn+1,Cn)]}([Ve,Qe],yt,nt,ze,vt);Rt=Zt[0],Ut=Zt[1]}else if(ze==="same"){Rt=Math.ceil(Ve/nt),Ut=Math.ceil(Qe/ft);const Zt=Math.max(0,(Rt-1)*nt+yt-Ve),qt=Math.max(0,(Ut-1)*ft+Mt-Qe),cn=Math.floor(Zt/2),hn=Zt-cn,Sn=Math.floor(qt/2);bt={top:cn,bottom:hn,left:Sn,right:qt-Sn,type:"SAME"}}else if(ze==="valid")bt={top:0,bottom:0,left:0,right:0,type:"VALID"},Rt=Math.ceil((Ve-yt+1)/nt),Ut=Math.ceil((Qe-Mt+1)/ft);else{if(typeof ze!="object")throw Error(`Unknown padding parameter: ${ze}`);{const Zt=Ct==="channelsLast"?ze[1][0]:ze[2][0],qt=Ct==="channelsLast"?ze[1][1]:ze[2][1],cn=Ct==="channelsLast"?ze[2][0]:ze[3][0],hn=Ct==="channelsLast"?ze[2][1]:ze[3][1];bt={top:Zt,bottom:qt,left:cn,right:hn,type:Zt===0&&qt===0&&cn===0&&hn===0?"VALID":"EXPLICIT"},Rt=_h((Ve-yt+Zt+qt)/nt+1,vt),Ut=_h((Qe-Mt+cn+hn)/ft+1,vt)}}return{padInfo:bt,outHeight:Rt,outWidth:Ut}}(a,f,y,L,P,X,re,l,d),pe=c?C*x:C;let Be;return d==="channelsFirst"?Be=[m,pe,de,Ie]:d==="channelsLast"&&(Be=[m,de,Ie,pe]),{batchSize:m,dataFormat:d,inHeight:f,inWidth:y,inChannels:x,outHeight:de,outWidth:Ie,outChannels:pe,padInfo:oe,strideHeight:L,strideWidth:P,filterHeight:_,filterWidth:A,effectiveFilterHeight:X,effectiveFilterWidth:re,dilationHeight:U,dilationWidth:q,inShape:r,outShape:Be,filterShape:e}}function ou(r,e,t,s,a,l=!1,c="channelsLast",d){let[m,f,y,x,_]=[-1,-1,-1,-1,-1];if(c==="channelsLast")[m,f,y,x,_]=r;else{if(c!=="channelsFirst")throw new Error(`Unknown dataFormat ${c}`);[m,_,f,y,x]=r}const[A,C,L,,P]=e,[U,q,X]=Tg(t),[re,oe,de]=Tg(s),Ie=wh(A,re),pe=wh(C,oe),Be=wh(L,de),{padInfo:ze,outDepth:Ve,outHeight:Qe,outWidth:nt}=function(Mt,vt,Ct,bt,Rt,Ut,Zt,qt,cn,hn,Sn){let Cn,jn,ar,lr;if(typeof Mt=="number"){Cn={top:Mt,bottom:Mt,left:Mt,right:Mt,front:Mt,back:Mt,type:Mt===0?"VALID":"NUMBER"};const Qn=function(vr,Ar,Dr,yr,kr,qr){kr==null&&(kr=Mg(vr,Ar,yr));const Cs=vr[1],_a=vr[2];return[_h((vr[0]-Ar+2*kr)/yr+1,qr),_h((Cs-Ar+2*kr)/yr+1,qr),_h((_a-Ar+2*kr)/yr+1,qr),1]}([vt,Ct,bt,1],qt,0,Rt,Mt,Sn);jn=Qn[0],ar=Qn[1],lr=Qn[2]}else if(Mt==="same"){jn=Math.ceil(vt/Rt),ar=Math.ceil(Ct/Ut),lr=Math.ceil(bt/Zt);const Qn=(jn-1)*Rt+qt-vt,vr=(ar-1)*Ut+cn-Ct,Ar=(lr-1)*Zt+hn-bt,Dr=Math.floor(Qn/2),yr=Qn-Dr,kr=Math.floor(vr/2),qr=vr-kr,Cs=Math.floor(Ar/2);Cn={top:kr,bottom:qr,left:Cs,right:Ar-Cs,front:Dr,back:yr,type:"SAME"}}else{if(Mt!=="valid")throw Error(`Unknown padding parameter: ${Mt}`);Cn={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},jn=Math.ceil((vt-qt+1)/Rt),ar=Math.ceil((Ct-cn+1)/Ut),lr=Math.ceil((bt-hn+1)/Zt)}return{padInfo:Cn,outDepth:jn,outHeight:ar,outWidth:lr}}(a,f,y,x,U,q,X,Ie,pe,Be,d),ft=l?P*_:P;let yt;return c==="channelsFirst"?yt=[m,ft,Ve,Qe,nt]:c==="channelsLast"&&(yt=[m,Ve,Qe,nt,ft]),{batchSize:m,dataFormat:c,inDepth:f,inHeight:y,inWidth:x,inChannels:_,outDepth:Ve,outHeight:Qe,outWidth:nt,outChannels:ft,padInfo:ze,strideDepth:U,strideHeight:q,strideWidth:X,filterDepth:A,filterHeight:C,filterWidth:L,effectiveFilterDepth:Ie,effectiveFilterHeight:pe,effectiveFilterWidth:Be,dilationDepth:re,dilationHeight:oe,dilationWidth:de,inShape:r,outShape:yt,filterShape:e}}function Mg(r,e,t,s=1){const a=wh(e,s);return Math.floor((r[0]*(t-1)-t+a)/2)}function Yf(r){return typeof r=="number"?[r,r,r]:r.length===2?[r[0],r[1],1]:r}function Tg(r){return typeof r=="number"?[r,r,r]:r}function wh(r,e){return e<=1?r:r+(r-1)*(e-1)}function _h(r,e){if(!e)return Math.trunc(r);switch(e){case"round":return Math.round(r);case"ceil":return Math.ceil(r);case"floor":return Math.floor(r);default:throw new Error(`Unknown roundingMode ${e}`)}}function lu(r){const[e,t,s]=Yf(r);return e===1&&t===1&&s===1}function es(r,e){return lu(r)||lu(e)}function wo(r){if(r==="NHWC")return"channelsLast";if(r==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${r}`)}const Xe=$e({reshape_:function(r,e){const t={x:ge(r,"x","reshape","string_or_numeric")},s={shape:e};return Ge.runKernel(Zi,t,s)}}),ap=$e({avgPool_:function(r,e,t,s,a){const l=ge(r,"x","avgPool","float32");Q(es(t,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${t} and dilations '1'`);let c=l,d=!1;l.rank===3&&(d=!0,c=Xe(l,[1,l.shape[0],l.shape[1],l.shape[2]])),Q(c.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${c.rank}.`),a!=null&&Q(_t(s),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const m={x:c},f={filterSize:e,strides:t,pad:s,dimRoundingMode:a};let y=Ge.runKernel(id,m,f);return y=un(y,l.dtype),d?Xe(y,[y.shape[1],y.shape[2],y.shape[3]]):y}}),U0=$e({avgPool3d_:function(r,e,t,s,a,l="NDHWC"){const c=ge(r,"x","avgPool3d","float32");let d=c,m=!1;c.rank===4&&(m=!0,d=Xe(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),Q(d.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${d.rank}.`),Q(l==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${l}`),a!=null&&Q(_t(s),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const f={x:d},y={filterSize:e,strides:t,pad:s,dimRoundingMode:a,dataFormat:l};let x=Ge.runKernel(sd,f,y);return x=un(x,d.dtype),m?Xe(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}}),bi=$e({concat_:function(r,e=0){Q(r.length>=1,()=>"Pass at least one tensor to concat");const t=Ka(r,"tensors","concat","string_or_numeric");if(t[0].dtype==="complex64"&&t.forEach(l=>{if(l.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${l.dtype}. `)}),t.length===1)return iu(t[0]);const s=t,a={axis:e};return Ge.runKernel(ud,s,a)}}),Rs=$e({sigmoid_:function(r){const e={x:ge(r,"x","sigmoid")};return Ge.runKernel(Yl,e)}}),Nr=$e({slice_:function(r,e,t){const s=ge(r,"x","slice","string_or_numeric");if(s.rank===0)throw new Error("Slicing scalar is not possible");const a={x:s},l={begin:e,size:t};return Ge.runKernel(ho,a,l)}}),tc=$e({tanh_:function(r){const e={x:ge(r,"x","tanh")};return Ge.runKernel(Bd,e)}}),Eg=$e({basicLSTMCell_:function(r,e,t,s,a,l){const c=ge(r,"forgetBias","basicLSTMCell"),d=ge(e,"lstmKernel","basicLSTMCell"),m=ge(t,"lstmBias","basicLSTMCell"),f=ge(s,"data","basicLSTMCell"),y=ge(a,"c","basicLSTMCell"),x=ge(l,"h","basicLSTMCell"),_=bi([f,x],1),A=wr(_,d),C=jt(A,m),L=C.shape[0],P=C.shape[1]/4,U=[L,P],q=Nr(C,[0,0],U),X=Nr(C,[0,P],U),re=Nr(C,[0,2*P],U),oe=Nr(C,[0,3*P],U),de=jt(qe(Rs(q),tc(X)),qe(y,Rs(jt(c,re))));return[de,qe(tc(de),Rs(oe))]}}),uu=$e({batchToSpaceND_:function(r,e,t){const s=ge(r,"x","batchToSpaceND"),a=e.reduce((d,m)=>d*m);Q(s.rank>=1+e.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${e.length}`),Q(t.length===e.length,()=>`crops.length is ${t.length} but should be equal to blockShape.length  ${e.length}`),Q(s.shape[0]%a==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${a}`);const l={x:s},c={blockShape:e,crops:t};return Ge.runKernel(od,l,c)}}),nc=$e({batchNorm_:function(r,e,t,s,a,l){l==null&&(l=.001);const c=ge(r,"x","batchNorm"),d=ge(e,"mean","batchNorm"),m=ge(t,"variance","batchNorm");let f,y;a!=null&&(f=ge(a,"scale","batchNorm")),s!=null&&(y=ge(s,"offset","batchNorm")),Q(d.rank===m.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),Q(y==null||d.rank===y.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),Q(f==null||d.rank===f.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const x={x:function(C){let L;return L=C.rank===0||C.rank===1?Xe(C,[1,1,1,C.size]):C.rank===2?Xe(C,[1,1,C.shape[0],C.shape[1]]):C.rank===3?Xe(C,[1,C.shape[0],C.shape[1],C.shape[2]]):C,L}(c),scale:f,offset:y,mean:d,variance:m},_={varianceEpsilon:l},A=Ge.runKernel(vd,x,_);return Xe(A,c.shape)}}),fs=$e({batchNorm2d_:function(r,e,t,s,a,l){const c=ge(r,"x","batchNorm"),d=ge(e,"mean","batchNorm"),m=ge(t,"variance","batchNorm");let f,y;return a!=null&&(f=ge(a,"scale","batchNorm")),s!=null&&(y=ge(s,"offset","batchNorm")),Q(c.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${c.rank}.`),Q(d.rank===2||d.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${d.rank}.`),Q(m.rank===2||m.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${m.rank}.`),f!=null&&Q(f.rank===2||f.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${f.rank}.`),y!=null&&Q(y.rank===2||y.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${y.rank}.`),nc(c,d,m,y,f,l)}}),V0=$e({batchNorm3d_:function(r,e,t,s,a,l){const c=ge(r,"x","batchNorm"),d=ge(e,"mean","batchNorm"),m=ge(t,"variance","batchNorm");let f,y;return a!=null&&(f=ge(a,"scale","batchNorm")),s!=null&&(y=ge(s,"offset","batchNorm")),Q(c.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${c.rank}.`),Q(d.rank===3||d.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${d.rank}.`),Q(m.rank===3||m.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${m.rank}.`),f!=null&&Q(f.rank===3||f.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${f.rank}.`),y!=null&&Q(y.rank===3||y.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${y.rank}.`),nc(c,d,m,y,f,l)}}),W0=$e({batchNorm4d_:function(r,e,t,s,a,l){const c=ge(r,"x","batchNorm"),d=ge(e,"mean","batchNorm"),m=ge(t,"variance","batchNorm");let f,y;return a!=null&&(f=ge(a,"scale","batchNorm")),s!=null&&(y=ge(s,"offset","batchNorm")),Q(c.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${c.rank}.`),Q(d.rank===4||d.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${d.rank}.`),Q(m.rank===4||m.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${m.rank}.`),f!=null&&Q(f.rank===4||f.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${f.rank}.`),y!=null&&Q(y.rank===4||y.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${y.rank}.`),nc(c,d,m,y,f,l)}}),Ag=$e({bincount_:function(r,e,t){const s=ge(r,"x","bincount"),a=ge(e,"weights","bincount");Q(s.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),Q(t>=0,()=>`size must be non-negative, but got ${t}.`),Q(a.size===s.size||a.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${a.shape}.`);const l={x:s,weights:a},c={size:t};return Ge.runKernel(of,l,c)}}),Ig=$e({broadcastArgs_:function(r,e){const t=ge(r,"s0","broadcastArgs","int32"),s=ge(e,"s1","broadcastArgs","int32");if(t.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${t.rank}`);if(s.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const a={s0:t,s1:s};return Ge.runKernel(Hm,a)}}),cu=$e({broadcastTo_:function(r,e){let t=ge(r,"broadcastTo","x");const s=t.shape;if(e.some(m=>!(m>0)||m%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<t.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);if(e.length>t.rank){const m=t.shape.slice();for(;m.length<e.length;)m.unshift(1);t=Xe(t,m)}const a=t.shape,l=Array.from(e);for(let m=e.length-1;m>=0;m--)if(a[m]===e[m])l[m]=1;else if(t.shape[m]!==1)throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${e}].`);if(l.map((m,f)=>m>1?f:-1).filter(m=>m>=0).length===0)return iu(t);const c={x:t},d={reps:l};return Ge.runKernel(Xa,c,d)}}),tl=$e({ceil_:function(r){const e={x:ge(r,"x","ceil")};return Ge.runKernel($c,e)}}),Ks=$e({clipByValue_:function(r,e,t){const s=ge(r,"x","clipByValue");Q(e<=t,()=>`Error in clip: min (${e}) must be less than or equal to max (${t}).`);const a={x:s},l={clipValueMin:e,clipValueMax:t};return Ge.runKernel(Uc,a,l)}}),G0=$e({concat1d_:function(r){return bi(r,0)}}),ga=$e({concat2d_:function(r,e){return bi(r,e)}}),Cg=$e({concat3d_:function(r,e){return bi(r,e)}}),rc=$e({concat4d_:function(r,e){return bi(r,e)}}),Al=$e({conv2d_:function(r,e,t,s,a="NHWC",l=[1,1],c){const d=ge(r,"x","conv2d"),m=ge(e,"filter","conv2d");let f=d,y=!1;d.rank===3&&(y=!0,f=Xe(d,[1,d.shape[0],d.shape[1],d.shape[2]])),Q(f.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${f.rank}.`),Q(m.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${m.rank}.`),c!=null&&Q(_t(s),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${c} but got pad ${s}.`);const x=a==="NHWC"?f.shape[3]:f.shape[1];Q(x===m.shape[2],()=>`Error in conv2d: depth of input (${x}) must match input depth for filter ${m.shape[2]}.`),Q(es(t,l),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${l}'`);const _={x:f,filter:m},A={strides:t,pad:s,dataFormat:a,dilations:l,dimRoundingMode:c},C=Ge.runKernel(cd,_,A);return y?Xe(C,[C.shape[1],C.shape[2],C.shape[3]]):C}}),op=$e({conv1d_:function(r,e,t,s,a="NWC",l=1,c){const d=ge(r,"x","conv1d"),m=ge(e,"filter","conv1d");let f=d,y=!1;d.rank===2&&(y=!0,f=Xe(d,[1,d.shape[0],d.shape[1]])),Q(f.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`),Q(m.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${m.rank}.`),c!=null&&Q(_t(s),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${c} but got pad ${s}.`),Q(f.shape[2]===m.shape[1],()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${m.shape[1]}.`),Q(es(t,l),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${l}'`),Q(a==="NWC",()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`);const x=Xe(m,[1,m.shape[0],m.shape[1],m.shape[2]]),_=Xe(f,[f.shape[0],1,f.shape[1],f.shape[2]]),A=Al(_,x,[1,t],s,"NHWC",[1,l],c);return Xe(A,y?[A.shape[2],A.shape[3]]:[A.shape[0],A.shape[2],A.shape[3]])}}),lp=$e({conv2DBackpropInput_:function(r,e,t,s,a,l="NHWC",c){Q(r.length===e.rank,()=>`Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);let d=r,m=e,f=!1;e.rank===3&&(f=!0,m=Xe(e,[1,e.shape[0],e.shape[1],e.shape[2]]),d=[1,r[0],r[1],r[2]]),Q(d.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${d.length}.`),Q(m.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${m.rank}`),Q(t.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${t.rank}`);const y=l==="NHWC"?d[3]:d[1],x=l==="NHWC"?m.shape[3]:m.shape[1];Q(y===t.shape[2],()=>`Error in conv2dDerInput: depth of input (${y}) must match input depth for filter ${t.shape[2]}.`),Q(x===t.shape[3],()=>`Error in conv2dDerInput: depth of output (${x}) must match output depth for filter ${t.shape[3]}.`),c!=null&&Q(_t(a),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${c} but got pad ${a}.`);const _={dy:m,filter:t},A={strides:s,pad:a,dataFormat:l,dimRoundingMode:c,inputShape:d},C=Ge.runKernel(hd,_,A);return f?Xe(C,[C.shape[1],C.shape[2],C.shape[3]]):C}}),Sh=$e({conv2dTranspose_:function(r,e,t,s,a,l){const c=ge(r,"x","conv2dTranspose"),d=ge(e,"filter","conv2dTranspose");return lp(t,c,d,s,a,"NHWC",l)}}),Mh=$e({conv3d_:function(r,e,t,s,a="NDHWC",l=[1,1,1]){const c=ge(r,"x","conv3d"),d=ge(e,"filter","conv3d");let m=c,f=!1;c.rank===4&&(f=!0,m=Xe(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),Q(m.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${m.rank}.`),Q(d.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${d.rank}.`),Q(m.shape[4]===d.shape[3],()=>`Error in conv3d: depth of input (${m.shape[4]}) must match input depth for filter ${d.shape[3]}.`),Q(es(t,l),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${l}'`),Q(a==="NDHWC",()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`);const y={x:m,filter:d},x={strides:t,pad:s,dataFormat:a,dilations:l},_=Ge.runKernel(dd,y,x);return f?Xe(_,[_.shape[1],_.shape[2],_.shape[3],_.shape[4]]):_}}),H0=$e({conv3DBackpropInput_:function(r,e,t,s,a){Q(r.length===e.rank,()=>`Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);let l=r,c=e,d=!1;e.rank===4&&(d=!0,c=Xe(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),l=[1,r[0],r[1],r[2],r[3]]);const m=l[4],f=c.shape[4];Q(l.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${l.length}.`),Q(c.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${c.rank}`),Q(t.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${t.rank}`),Q(m===t.shape[3],()=>`Error in conv3dDerInput: depth of input (${m}) must match input depth for filter ${t.shape[3]}.`),Q(f===t.shape[4],()=>`Error in conv3dDerInput: depth of output (${f}) must match output depth for filter ${t.shape[4]}.`);const y={dy:c,filter:t},x={pad:a,strides:s,inputShape:l},_=Ge.runKernel(hf,y,x);return d?Xe(_,[_.shape[1],_.shape[2],_.shape[3],_.shape[4]]):_}}),j0=$e({conv3dTranspose_:function(r,e,t,s,a){const l=ge(r,"x","conv3dTranspose"),c=ge(e,"filter","conv3dTranspose");return H0(t,l,c,s,a)}}),Th=$e({cos_:function(r){const e={x:ge(r,"x","cos")};return Ge.runKernel(Vc,e)}}),Kf=$e({cosh_:function(r){const e={x:ge(r,"x","cosh")};return Ge.runKernel(Wc,e)}}),Zf=$e({cumsum_:function(r,e=0,t=!1,s=!1){const a={x:ge(r,"x","cumsum")},l={axis:e,exclusive:t,reverse:s};return Ge.runKernel(pd,a,l)}}),Eh=$e({denseBincount_:function(r,e,t,s=!1){const a=ge(r,"x","denseBincount"),l=ge(e,"weights","denseBincount");Q(a.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`),Q(a.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`),Q(t>=0,()=>`size must be non-negative, but got ${t}.`),Q(l.size===a.size||l.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${l.shape}.`);const c={x:a,weights:l},d={size:t,binaryOutput:s};return Ge.runKernel(pf,c,d)}}),Il=$e({depthToSpace_:function(r,e,t="NHWC"){const s=ge(r,"x","depthToSpace"),a=t==="NHWC"?s.shape[1]:s.shape[2],l=t==="NHWC"?s.shape[2]:s.shape[3],c=t==="NHWC"?s.shape[3]:s.shape[1];Q(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${a} and ${e}  for depthToSpace with input shape
    ${s.shape}`),Q(l*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${l} and ${e} for depthToSpace with input shape
        ${s.shape}`),Q(c%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${c} for depthToSpace with input shape ${s.shape}`);const d={x:s},m={blockSize:e,dataFormat:t};return Ge.runKernel(ff,d,m)}}),nl=$e({depthwiseConv2d_:function(r,e,t,s,a="NHWC",l=[1,1],c){const d=ge(r,"x","depthwiseConv2d"),m=ge(e,"filter","depthwiseConv2d");let f=d,y=!1;d.rank===3&&(y=!0,f=Xe(d,[1,d.shape[0],d.shape[1],d.shape[2]])),Q(f.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`),Q(m.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`),Q(f.shape[3]===m.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),c!=null&&Q(_t(s),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${c} but got pad ${s}.`);const x={x:f,filter:m},_={strides:t,pad:s,dataFormat:a,dilations:l,dimRoundingMode:c},A=Ge.runKernel(fd,x,_);return y?Xe(A,[A.shape[1],A.shape[2],A.shape[3]]):A}}),Cl=$e({diag_:function(r){const e={x:ge(r,"x","diag")};return Ge.runKernel(Gc,e)}}),ic=$e({dilation2d_:function(r,e,t,s,a=[1,1],l="NHWC"){const c=ge(r,"x","dilation2d"),d=ge(e,"filter","dilation2d");Q(c.rank===3||c.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${c.rank}.`),Q(d.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${d.rank}.`),Q(l==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${l}`);let m=c,f=!1;c.rank===3&&(m=Xe(c,[1,c.shape[0],c.shape[1],c.shape[2]]),f=!0);const y={x:m,filter:d},x={strides:t,pad:s,dilations:a},_=Ge.runKernel(Fo,y,x);return f?Xe(_,[_.shape[1],_.shape[2],_.shape[3]]):_}}),Ls=$e({equal_:function(r,e){let t=ge(r,"a","equal","string_or_numeric"),s=ge(e,"b","equal","string_or_numeric");[t,s]=Qr(t,s),mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(ps,a)}}),as=$e({where_:function(r,e,t){const s=ge(e,"a","where"),a=ge(t,"b","where"),l=ge(r,"condition","where","bool"),c=mr(mr(l.shape,s.shape),a.shape),d={condition:cu(l,c),t:cu(s,c),e:cu(a,c)};return Ge.runKernel(wl,d)}}),Jf=$e({divNoNan_:function(r,e){let t=ge(r,"a","div"),s=ge(e,"b","div");[t,s]=Qr(t,s);const a=Un(t,s),l=Fr(a),c=Ls(s,l);return as(c,l,a)}}),Qf=$e({dot_:function(r,e){const t=ge(r,"t1","dot"),s=ge(e,"t2","dot");Q(!(t.rank!==1&&t.rank!==2||s.rank!==1&&s.rank!==2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${t.rank} and ${s.rank}.`);const a=t.rank===1?t.size:t.shape[1],l=s.rank===1?s.size:s.shape[0];if(Q(a===l,()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${l}.`),t.rank===1&&s.rank===1){const c=Xe(t,[1,-1]),d=Xe(s,[-1,1]),m=wr(c,d);return Xe(m,[])}if(t.rank===1&&s.rank===2){const c=Xe(t,[1,-1]),d=Xe(s,[s.shape[0],s.shape[1]]),m=wr(c,d);return Xe(m,[m.size])}if(t.rank===2&&s.rank===1){const c=Xe(s,[-1,1]),d=wr(t,c);return Xe(d,[d.size])}{const c=Xe(s,[s.shape[0],s.shape[1]]);return wr(t,c)}}}),kg=$e({einsum_:function(r,...e){const t=e.map((a,l)=>ge(a,`tensors${l}`,"einsum")),s={equation:r};return Ge.runKernel(md,t,s)}}),Es=$e({elu_:function(r){const e={x:ge(r,"x","elu")};return Ge.runKernel(Hc,e)}}),Ah=$e({erf_:function(r){let e=ge(r,"x","erf");Q(e.dtype==="int32"||e.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),e.dtype==="int32"&&(e=un(e,"float32"));const t={x:e};return Ge.runKernel(gd,t)}}),Zs=$e({exp_:function(r){const e={x:ge(r,"x","exp")};return Ge.runKernel(yl,e)}}),Ds=$e({expandDims_:function(r,e=0){const t=ge(r,"x","expandDims","string_or_numeric");Q(e<=t.rank,()=>"Axis must be <= rank of the tensor");const s={input:t},a={dim:e};return Ge.runKernel(Ou,s,a)}}),up=$e({expm1_:function(r){const e={x:ge(r,"x","expm1")};return Ge.runKernel(Vl,e)}}),ya=$e({tile_:function(r,e){const t=ge(r,"x","tile","string_or_numeric");Q(t.rank===e.length,()=>`Error in transpose: rank of input ${t.rank} must match length of reps ${e}.`);const s={x:t},a={reps:e};return Ge.runKernel(Xa,s,a)}}),em=$e({eye_:function(r,e,t,s="float32"){e==null&&(e=r);const a=Er([r,e],s),l=r<=e?r:e;for(let d=0;d<l;++d)a.set(1,d,d);const c=Xe(a.toTensor(),[r,e]);if(t==null)return c;if(t.length===1)return ya(Ds(c,0),[t[0],1,1]);if(t.length===2)return ya(Ds(Ds(c,0),0),[t[0],t[1],1,1]);if(t.length===3)return ya(Ds(Ds(Ds(c,0),0),0),[t[0],t[1],t[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t.length}D.`)}}),sc=$e({floor_:function(r){const e={x:ge(r,"x","floor")};return Ge.runKernel(zu,e)}}),hu=$e({gather_:function(r,e,t=0,s=0){const a={x:ge(r,"x","gather"),indices:ge(e,"indices","gather","int32")},l={axis:t,batchDims:s};return Ge.runKernel(Oo,a,l)}}),Js=$e({greater_:function(r,e){let t=ge(r,"a","greater","string_or_numeric"),s=ge(e,"b","greater","string_or_numeric");[t,s]=Qr(t,s),mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(yf,a)}}),_o=$e({greaterEqual_:function(r,e){let t=ge(r,"a","greaterEqual","string_or_numeric"),s=ge(e,"b","greaterEqual","string_or_numeric");[t,s]=Qr(t,s),mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(Wl,a)}}),ac=$e({imag_:function(r){const e={input:ge(r,"input","imag")};return Ge.runKernel(Xm,e)}}),tm=$e({isFinite_:function(r){const e={x:ge(r,"x","isFinite")};return Ge.runKernel(wd,e)}}),Ng=$e({isInf_:function(r){const e={x:ge(r,"x","isInf")};return Ge.runKernel(_d,e)}}),Ih=$e({isNaN_:function(r){const e={x:ge(r,"x","isNaN")};return Ge.runKernel(Sd,e)}}),cp=$e({leakyRelu_:function(r,e=.2){const t={x:ge(r,"x","leakyRelu")},s={alpha:e};return Ge.runKernel(xf,t,s)}}),Ch=$e({less_:function(r,e){let t=ge(r,"a","less","string_or_numeric"),s=ge(e,"b","less","string_or_numeric");[t,s]=Qr(t,s),mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(vf,a)}}),kl=$e({lessEqual_:function(r,e){let t=ge(r,"a","lessEqual","string_or_numeric"),s=ge(e,"b","lessEqual","string_or_numeric");[t,s]=Qr(t,s),mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(bf,a)}});function nm(r,e,t){if(t<=0)throw new Error("The number of values should be positive.");const s={start:r,stop:e,num:t};return Ge.runKernel(Ym,{},s)}const rm=$e({localResponseNormalization_:function(r,e=5,t=1,s=1,a=.5){const l=ge(r,"x","localResponseNormalization");Q(l.rank===4||l.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${l.rank}.`),Q(_t(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let c=l,d=!1;l.rank===3&&(d=!0,c=Xe(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const m={x:c},f={depthRadius:e,bias:t,alpha:s,beta:a},y=Ge.runKernel(_f,m,f);return d?Xe(y,[y.shape[1],y.shape[2],y.shape[3]]):y}}),xa=$e({log_:function(r){const e={x:ge(r,"x","log")};return Ge.runKernel(Md,e)}}),So=$e({log1p_:function(r){const e={x:ge(r,"x","log1p")};return Ge.runKernel(Td,e)}}),ti=$e({neg_:function(r){const e={x:ge(r,"x","neg")};return Ge.runKernel(Xc,e)}}),kh=$e({softplus_:function(r){const e={x:ge(r,"x","softplus")};return Ge.runKernel(fo,e)}}),_b=$e({logSigmoid_:function(r){const e=ge(r,"x","logSigmoid");return Zo(t=>({value:ti(kh(ti(t))),gradFunc:s=>qe(s,Rs(ti(t)))}))(e)}}),Mo=$e({max_:function(r,e=null,t=!1){const s={x:ge(r,"x","max")},a={reductionIndices:e,keepDims:t};return Ge.runKernel(Sf,s,a)}}),Ln=$e({sum_:function(r,e=null,t=!1){let s=ge(r,"x","sum");s.dtype==="bool"&&(s=un(s,"int32"));const a={x:s},l={axis:e,keepDims:t};return Ge.runKernel(If,a,l)}}),Rg=$e({logSoftmax_:function(r,e=-1){const t=ge(r,"logits","logSoftmax");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and axis was ${e}`);return Zo((s,a)=>{const l=Mo(s,e,!0),c=kn(s,l),d=kn(un(c,"float32"),xa(Ln(Zs(c),e,!0)));return a([d]),{value:d,gradFunc:(m,f)=>{const[y]=f,x=Zs(y);return kn(m,qe(Ln(m,e,!0),x))}}})(t)}});function q0(r,e){for(let t=0;t<r.length;++t)if(r[r.length-t-1]!==e-1-t)return!1;return!0}function Sb(r,e,t){const s=r.length+e.length,a=[];let l=0,c=0;for(let d=0;d<s;d++)t.indexOf(d)===-1?a.push(r[l++]):a.push(e[c++]);return a}function ts(r,e){const t=[],s=r.length;for(let a=0;a<s;a++)e.indexOf(a)===-1&&t.push(r[a]);return[t,e.map(a=>r[a])]}function Gi(r,e){return Sb(r,e.map(t=>1),e)}function Di(r,e,t){Q(q0(e,t),()=>`${r} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`)}function Hi(r,e){if(q0(r,e))return null;const t=[];for(let s=0;s<e;++s)r.indexOf(s)===-1&&t.push(s);return r.forEach(s=>t.push(s)),t}function ni(r){return r.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function Ai(r,e){const t=[];for(let s=e-r;s<e;++s)t.push(s);return t}const Lg=$e({logSumExp_:function(r,e=null,t=!1){const s=ge(r,"x","logSumExp"),a=ir(e,s.shape),l=Mo(s,a,!0),c=kn(s,l),d=Zs(c),m=Ln(d,a),f=xa(m),y=jt(Xe(l,f.shape),f);if(t){const x=Gi(y.shape,a);return Xe(y,x)}return y}}),va=$e({logicalAnd_:function(r,e){const t=ge(r,"a","logicalAnd","bool"),s=ge(e,"b","logicalAnd","bool");mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(wf,a)}}),oc=$e({logicalNot_:function(r){const e={x:ge(r,"x","logicalNot","bool")};return Ge.runKernel(Ed,e)}}),lc=$e({logicalOr_:function(r,e){const t=ge(r,"a","logicalOr","bool"),s=ge(e,"b","logicalOr","bool");mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(xl,a)}}),X0=$e({logicalXor_:function(r,e){const t=ge(r,"a","logicalXor","bool"),s=ge(e,"b","logicalXor","bool");return mr(t.shape,s.shape),va(lc(r,e),oc(va(r,e)))}}),hp=$e({maxPool_:function(r,e,t,s,a){const l=ge(r,"x","maxPool");let c=l,d=!1;l.rank===3&&(d=!0,c=Xe(l,[1,l.shape[0],l.shape[1],l.shape[2]])),Q(c.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${c.rank}.`),Q(es(t,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${t} and dilations '1'`),a!=null&&Q(_t(s),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const m={x:c},f={filterSize:e,strides:t,pad:s,dimRoundingMode:a},y=Ge.runKernel(Mf,m,f);return d?Xe(y,[y.shape[1],y.shape[2],y.shape[3]]):y}}),Nh=$e({maxPool3d_:function(r,e=[1,1,1],t,s,a,l="NDHWC"){const c=ge(r,"x","maxPool3d");let d=c,m=!1;c.rank===4&&(m=!0,d=Xe(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),Q(d.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${d.rank}.`),Q(l==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${l}`),a!=null&&Q(_t(s),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const f={x:d},y={filterSize:e,strides:t,pad:s,dimRoundingMode:a,dataFormat:l},x=Ge.runKernel(Tf,f,y);return m?Xe(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}}),Dg=$e({maxPoolWithArgmax_:function(r,e,t,s,a=!1){const l={x:ge(r,"x","maxPoolWithArgmax")},c={filterSize:e,strides:t,pad:s,includeBatchInIndex:a},d=Ge.runKernel(Id,l,c);return{result:d[0],indexes:d[1]}}}),Wr=$e({mean_:function(r,e=null,t=!1){const s={x:ge(r,"x","mean")},a={axis:e,keepDims:t};return Ge.runKernel(co,s,a)}});function ji(r,e="float32"){if(e==="complex64"){const s=ji(r,"float32"),a=ji(r,"float32");return nu(s,a)}const t=xt(he(r),e);return Ge.makeTensor(t,r,e)}function ba(r,e="float32"){if(e==="complex64"){const s=ba(r,"float32"),a=ji(r,"float32");return nu(s,a)}const t=lt(he(r),e);return Ge.makeTensor(t,r,e)}function rl(r,e,{indexing:t="xy"}={}){if(t!=="xy"&&t!=="ij")throw new TypeError(`${t} is not a valid third argument to meshgrid`);if(r===void 0)return[];let s=ge(r,"x","meshgrid",r instanceof Ur?r.dtype:"float32");if(e===void 0)return[s];let a=ge(e,"y","meshgrid",e instanceof Ur?e.dtype:"float32");const l=he(s.shape),c=he(a.shape);return t==="xy"?(s=Xe(s,[1,-1]),a=Xe(a,[-1,1]),[wr(ba([c,1],s.dtype),s),wr(a,ba([1,l],a.dtype))]):(s=Xe(s,[-1,1]),a=Xe(a,[1,-1]),[wr(s,ba([1,c],s.dtype)),wr(ba([l,1],a.dtype),a)])}const im=$e({min_:function(r,e=null,t=!1){const s={x:ge(r,"x","min")},a={axis:e,keepDims:t};return Ge.runKernel(Ki,s,a)}}),il=$e({minimum_:function(r,e){let t=ge(r,"a","minimum"),s=ge(e,"b","minimum");[t,s]=Qr(t,s),t.dtype==="bool"&&(t=un(t,"int32"),s=un(s,"int32")),mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(Gl,a)}}),uc=$e({mirrorPad_:function(r,e,t){Q(t==="reflect"||t==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${t}.`);const s=ge(r,"x","mirrorPad");if(s.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Q(e.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${e.length}.`);const a=t==="reflect"?1:0;for(let d=0;d<s.rank;d++)Q(e[d].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Q(e[d][0]>=0&&e[d][0]<=s.shape[d]-a&&e[d][1]>=0&&e[d][1]<=s.shape[d]-a,()=>`Padding in dimension ${d} cannot be greater than or equal to ${s.shape[d]-a} or less than 0 for input of shape ${s.shape}`);const l={paddings:e,mode:t},c={x:s};return Ge.runKernel(zo,c,l)}}),du=$e({mod_:function(r,e){let t=ge(r,"a","mod"),s=ge(e,"b","mod");[t,s]=Qr(t,s);const a={a:t,b:s};return Ge.runKernel(vl,a)}}),Rh=$e({moments_:function(r,e=null,t=!1){const s=ir(e,(r=ge(r,"x","moments")).shape),a=Wr(r,s,t);let l=a.shape;t||(l=Gi(a.shape,s));const c=ei(kn(un(r,"float32"),Xe(a,l)));return{mean:a,variance:Wr(c,s,t)}}}),dp=$e({multiRNNCell_:function(r,e,t,s){const a=ge(e,"data","multiRNNCell"),l=Ka(t,"c","multiRNNCell"),c=Ka(s,"h","multiRNNCell");let d=a;const m=[];for(let x=0;x<r.length;x++){const _=r[x](d,l[x],c[x]);m.push(_[0]),m.push(_[1]),d=_[1]}const f=[],y=[];for(let x=0;x<m.length;x+=2)f.push(m[x]),y.push(m[x+1]);return[f,y]}}),cc=$e({multinomial_:function(r,e,t,s=!1){const a=ge(r,"logits","multinomial"),l=a.size,c=a.rank;if(l<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${l}.`);if(c>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${c}`);t=t||Math.random();const d={logits:c===1?Xe(a,[1,-1]):a},m={numSamples:e,seed:t,normalized:s},f=Ge.runKernel(Vs,d,m);return c===1?Xe(f,[f.size]):f}}),eo=$e({notEqual_:function(r,e){let t=ge(r,"a","notEqual","string_or_numeric"),s=ge(e,"b","notEqual","string_or_numeric");[t,s]=Qr(t,s),mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(Hl,a)}}),ms=$e({onesLike_:function(r){const e={x:ge(r,"x","onesLike")};return Ge.runKernel(kd,e)}}),Pg=$e({outerProduct_:function(r,e){const t=ge(r,"v1","outerProduct"),s=ge(e,"v2","outerProduct");Q(t.rank===1&&s.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${t.rank} and ${s.rank}.`);const a=Xe(t,[-1,1]),l=Xe(s,[1,-1]);return wr(a,l)}}),Na=$e({pad_:function(r,e,t=0){const s=ge(r,"x","pad");if(s.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:e,constantValue:t},l={x:s};return Ge.runKernel(bl,l,a)}}),pp=$e({pad1d_:function(r,e,t=0){return Q(e.length===2,()=>"Invalid number of paddings. Must be length of 2."),Na(r,[e],t)}}),fp=$e({pad2d_:function(r,e,t=0){return Q(e.length===2&&e[0].length===2&&e[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Na(r,e,t)}}),Y0=$e({pad3d_:function(r,e,t=0){return Q(e.length===3&&e[0].length===2&&e[1].length===2&&e[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Na(r,e,t)}}),Mb=$e({pad4d_:function(r,e,t=0){return Q(e.length===4&&e[0].length===2&&e[1].length===2&&e[2].length===2&&e[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Na(r,e,t)}}),mp=$e({spaceToBatchND_:function(r,e,t){const s=ge(r,"x","spaceToBatchND");Q(s.rank>=1+e.length,()=>`input rank ${s.rank} should be > than [blockShape] ${e.length}`),Q(t.length===e.length,()=>`paddings.shape[0] ${t.length} must be equal to [blockShape] ${e.length}`),Q(s.shape.reduce((c,d,m)=>m>0&&m<=e.length?c&&(d+t[m-1][0]+t[m-1][1])%e[m-1]==0:c,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${t.toString()} must be divisible by blockShapes ${e.toString()}`);const a={x:s},l={blockShape:e,paddings:t};return Ge.runKernel(Pd,a,l)}}),Fg=$e({pool_:function(r,e,t,s,a,l){a==null&&(a=[1,1]),l==null&&(l=1),s===0&&(s="valid");const c=ge(r,"x","maxPool");let d=c,m=!1;c.rank===3&&(m=!0,d=Xe(c,[1,c.shape[0],c.shape[1],c.shape[2]])),Q(es(l,a),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${l} and dilations '${a}'`);const f=ma(d.shape,e,l,a,s),y=[f.dilationHeight,f.dilationWidth];let x;x=s==="same"?function(X,re){const oe=X.map((pe,Be)=>pe+(pe-1)*(re[Be]-1)).map(pe=>pe-1),de=oe.map(pe=>Math.floor(pe/2)),Ie=oe.map((pe,Be)=>pe-de[Be]);return oe.map((pe,Be)=>[de[Be],Ie[Be]])}([f.filterHeight,f.filterWidth],y):[[0,0],[0,0]];const _=y[0]===1&&y[1]===1,[A,C]=function(X,re,oe){const de=oe.map(Ve=>Ve[0]),Ie=oe.map(Ve=>Ve[1]),pe=X.concat(de,Ie),Be=re.map((Ve,Qe)=>(Ve-pe[Qe]%Ve)%Ve),ze=Ie.map((Ve,Qe)=>Ve+Be[Qe]);return[re.map((Ve,Qe)=>[de[Qe],ze[Qe]]),re.map((Ve,Qe)=>[0,Be[Qe]])]}([f.inHeight,f.inWidth],y,x),L=_?s:"valid",P=_?d:mp(d,y,A),U=(t==="avg"?()=>ap(P,e,l,L):()=>hp(P,e,l,L))(),q=_?U:uu(U,y,C);return m?Xe(q,[q.shape[1],q.shape[2],q.shape[3]]):q}}),hc=$e({prelu_:function(r,e){const t={x:ge(r,"x","prelu"),alpha:ge(e,"alpha","prelu")};return Ge.runKernel(Ri,t)}}),gp=$e({prod_:function(r,e=null,t=!1){let s=ge(r,"x","prod");s.dtype==="bool"&&(s=un(s,"int32"));const a={x:s},l={axis:e,keepDims:t};return Ge.runKernel(Rd,a,l)}}),K0=$e({rand_:function(r,e,t){const s=he(r);let a=null;if(t==null||t==="float32")a=new Float32Array(s);else if(t==="int32")a=new Int32Array(s);else{if(t!=="bool")throw new Error(`Unknown data type ${t}`);a=new Uint8Array(s)}for(let l=0;l<s;l++)a[l]=e();return Ge.makeTensor(a,r,t)}});var dc=b(36377);class sm{constructor(e,t,s,a,l){this.mean=e,this.stdDev=t,this.dtype=s,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const c=l||Math.random();this.random=dc.alea(c.toString())}nextValue(){if(!isNaN(this.nextVal)){const a=this.nextVal;return this.nextVal=NaN,a}let e,t,s=!1;for(;!s;){let a,l,c;do a=2*this.random()-1,l=2*this.random()-1,c=a*a+l*l;while(c>=1||c===0);const d=Math.sqrt(-2*Math.log(c)/c);e=this.mean+this.stdDev*a*d,t=this.mean+this.stdDev*l*d,this.truncated&&!this.isValidTruncated(e)||(s=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return this.dtype==null||this.dtype==="float32"?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Z0{constructor(e,t,s,a){this.alpha=e,this.beta=1/t,this.dtype=s;const l=a||Math.random();this.randu=dc.alea(l.toString()),this.randn=new sm(0,1,s,!1,this.randu()),this.d=e<1?e+.6666666666666666:e-.3333333333333333,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,s,a,l,c;for(;;){do a=this.randn.nextValue(),c=1+this.c*a;while(c<=0);if(c*=c*c,e=a*a,t=1-.331*e*e,s=.5*e+this.d*(1-c+Math.log(c)),l=this.randu(),l<t||Math.log(l)<s)break}return c=1/this.beta*this.d*c,this.alpha<1&&(c*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(c)}convertValue(e){return this.dtype==="float32"?e:Math.round(e)}}class J0{constructor(e=0,t=1,s,a){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=e,this.range=t-e,this.dtype=s,a==null&&(a=Math.random()),typeof a=="number"&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=dc.alea(a)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Q0=$e({randomGamma_:function(r,e,t=1,s="float32",a){if(t==null&&(t=1),s==null&&(s="float32"),s!=="float32"&&s!=="int32")throw new Error(`Unsupported data type ${s}`);const l=new Z0(e,t,s,a),c=Er(r,s);for(let d=0;d<c.values.length;d++)c.values[d]=l.nextValue();return c.toTensor()}}),Tb=$e({randomNormal_:function(r,e=0,t=1,s,a){if(s!=null&&s==="bool")throw new Error(`Unsupported data type ${s}`);const l=new sm(e,t,s,!1,a),c=Er(r,s);for(let d=0;d<c.values.length;d++)c.values[d]=l.nextValue();return c.toTensor()}}),Zr=$e({randomUniform_:function(r,e=0,t=1,s="float32",a){const l=Er(r,s),c=new J0(e,t,null,a);for(let d=0;d<l.values.length;d++)l.values[d]=c.nextValue();return l.toTensor()}});function Ra(r,e,t=1,s="float32"){if(t===0)throw new Error("Cannot have a step of zero");const a={start:r,stop:e,step:t,dtype:s};return Ge.runKernel(Xr,{},a)}const yp=$e({real_:function(r){const e={input:ge(r,"input","real")};return Ge.runKernel(Ea,e)}}),am=$e({reciprocal_:function(r){const e={x:ge(r,"x","reciprocal")};return Ge.runKernel(Kc,e)}}),To=$e({relu_:function(r){const e={x:ge(r,"x","relu")};return Ge.runKernel(Bu,e)}}),La=$e({relu6_:function(r){const e={x:ge(r,"x","relu6")};return Ge.runKernel(Aa,e)}}),os=$e({reverse_:function(r,e){const t={x:ge(r,"x","reverse")},s={dims:e};return Ge.runKernel(jl,t,s)}}),ex=$e({reverse1d_:function(r){const e=ge(r,"x","reverse");return Q(e.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),os(e,0)}}),om=$e({reverse2d_:function(r,e){const t=ge(r,"x","reverse");return Q(t.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${t.rank}.`),os(t,e)}}),Eb=$e({reverse3d_:function(r,e){const t=ge(r,"x","reverse");return Q(t.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${t.rank}.`),os(t,e)}}),xp=$e({reverse4d_:function(r,e){const t=ge(r,"x","reverse");return Q(t.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${t.rank}.`),os(t,e)}}),Nl=$e({round_:function(r){const e={x:ge(r,"x","round")};return Ge.runKernel($u,e)}}),pc=$e({rsqrt_:function(r){const e={x:ge(r,"x","rsqrt")};return Ge.runKernel(Bo,e)}}),fc=$e({selu_:function(r){const e={x:ge(r,"x","selu")};return Ge.runKernel(qa,e)}}),tx=$e({separableConv2d_:function(r,e,t,s,a,l=[1,1],c="NHWC"){const d=ge(r,"x","separableConv2d"),m=ge(e,"depthwiseFilter","separableConv2d"),f=ge(t,"pointwiseFilter","separableConv2d");let y=d,x=!1;if(d.rank===3&&(x=!0,y=Xe(d,[1,d.shape[0],d.shape[1],d.shape[2]])),c==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Q(y.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${y.rank}.`),Q(m.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${m.rank}.`),Q(f.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${m.rank}.`),Q(f.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${f.shape[0]}.`),Q(f.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${f.shape[1]}.`);const _=m.shape[2],A=m.shape[3];Q(f.shape[2]===_*A,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${_*A}, but got ${f.shape[2]}.`);const C=nl(y,m,s,a,c,l),L=Al(C,f,1,"valid",c);return x?Xe(L,[L.shape[1],L.shape[2],L.shape[3]]):L}}),mc=async function(r,e){const t=ge(r,"x","setdiff1d"),s=ge(e,"y","setdiff1d");Q(t.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${t.dtype}) and y (${s.dtype}).`),Q(t.rank===1,()=>`x should be 1D tensor, but got x (${t.shape}).`),Q(s.rank===1,()=>`y should be 1D tensor, but got y (${s.shape}).`);const a=await t.data(),l=await s.data(),c=new Set(l);let d=0;for(let y=0;y<a.length;y++)c.has(a[y])||d++;const m=new pn([d],t.dtype),f=new pn([d],"int32");for(let y=0,x=0;y<a.length;y++)c.has(a[y])||(m.values[x]=a[y],f.values[x]=y,x++);return[m.toTensor(),f.toTensor()]},lm=$e({sign_:function(r){const e={x:ge(r,"x","sign")};return Ge.runKernel(Xl,e)}}),um=$e({sin_:function(r){const e={x:ge(r,"x","sin")};return Ge.runKernel(po,e)}}),gs=$e({sinh_:function(r){const e={x:ge(r,"x","sinh")};return Ge.runKernel(_l,e)}}),Da=$e({slice1d_:function(r,e,t){const s=ge(r,"x","slice1d");return Q(s.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),Nr(s,[e],[t])}}),to=$e({slice2d_:function(r,e,t){const s=ge(r,"x","slice2d");return Q(s.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),Nr(s,e,t)}}),Og=$e({slice3d_:function(r,e,t){const s=ge(r,"x","slice3d");return Q(s.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),Nr(s,e,t)}}),cm=$e({slice4d_:function(r,e,t){const s=ge(r,"x","slice4d");return Q(s.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),Nr(s,e,t)}}),pu=$e({softmax_:function(r,e=-1){const t=ge(r,"logits","softmax","float32");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and dim was ${e}`);const s={logits:t},a={dim:e};return Ge.runKernel(Jc,s,a)}}),vp=$e({fft_:function(r){Q(r.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);const e={input:r};return Ge.runKernel(mf,e)}}),Lh=$e({ifft_:function(r){Q(r.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);const e={input:r};return Ge.runKernel(qm,e)}}),hm=$e({irfft_:function(r){const e=r.shape[r.shape.length-1],t=r.size/e;let s;if(e<=2){const a=Xe(r,[t,e]);s=Lh(a)}else{const a=[t,2*(e-1)],l=Xe(yp(r),[t,e]),c=Xe(ac(r),[t,e]),d=os(Nr(l,[0,1],[t,e-2]),1),m=qe(os(Nr(c,[0,1],[t,e-2]),1),Yn(-1)),f=bi([l,d],1),y=bi([c,m],1),x=Xe(nu(f,y),[a[0],a[1]]);s=Lh(x)}if(s=yp(s),r.rank===3&&r.shape[0]!==0){const a=s,l=r.shape[0];s=Xe(s,[l,s.shape[0]/l,s.shape[1]]),a.dispose()}return s}}),Qs=$e({split_:function(r,e,t=0){const s={x:ge(r,"x","split")},a={numOrSizeSplits:e,axis:t};return Ge.runKernel(Zc,s,a)}}),fu=$e({rfft_:function(r,e){Q(r.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${r.dtype}`);let t=r.shape[r.shape.length-1];const s=r.size/t;let a;if(e!=null&&e<t){const C=r.shape.map(P=>0),L=r.shape.map(P=>P);L[r.shape.length-1]=e,a=Nr(r,C,L),t=e}else if(e!=null&&e>t){const C=r.shape.map(L=>L);C[r.shape.length-1]=e-t,a=bi([r,ji(C)],r.shape.length-1),t=e}else a=r;const l=Fr(a),c=Xe(nu(a,l),[s,t]),d=vp(c),m=Math.floor(t/2)+1,f=yp(d),y=ac(d),x=Qs(f,[m,t-m],f.shape.length-1),_=Qs(y,[m,t-m],y.shape.length-1),A=a.shape.slice();return A[a.shape.length-1]=m,Xe(nu(x[0],_[0]),A)}}),sl=$e({squaredDifference_:function(r,e){let t=ge(r,"a","squaredDifference"),s=ge(e,"b","squaredDifference");[t,s]=Qr(t,s),mr(t.shape,s.shape);const a={a:t,b:s};return Ge.runKernel(Vu,a,{})}}),ls=$e({squeeze_:function(r,e){const t=ge(r,"x","squeeze");return Xe(t,Ui(t.shape,e).newShape)}}),ea=$e({stack_:function(r,e=0){const t=Ka(r,"tensors","stack","string_or_numeric");Q(t.length>=1,()=>"Pass at least one tensor to tf.stack"),t.length>0&&Q(e<=t[0].rank,()=>"Axis must be <= rank of the tensor");const s=t,a={axis:e};return Ge.runKernel(Ni,s,a)}}),Dh=$e({step_:function(r,e=0){const t={x:ge(r,"x","step")},s={alpha:e};return Ge.runKernel(rh,t,s)}}),zg=$e({stridedSlice_:function(r,e,t,s,a=0,l=0,c=0,d=0,m=0){const f={x:ge(r,"x","stridedSlice","string_or_numeric")},y={begin:e,end:t,strides:s,beginMask:a,endMask:l,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:m};return Ge.runKernel(Od,f,y)}}),Bg=$e({tan_:function(r){const e={x:ge(r,"x","tan")};return Ge.runKernel(zd,e)}});function us(r,e){Je(r);const t=xo(r,e);if(t.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return qs(r,null,t,e)}function gc(r,e,t){if(Je(r),e!=null&&e.length!==2)throw new Error("tensor2d() requires shape to have two numbers");const s=xo(r,t);if(s.length!==2&&s.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(s.length===1&&e==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return qs(r,e,s,t)}function nx(r,e,t){if(Je(r),e!=null&&e.length!==4)throw new Error("tensor4d() requires shape to have four numbers");const s=xo(r,t);if(s.length!==4&&s.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(s.length===1&&e==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return qs(r,e,s,t)}function Ab(r,e,t){if(Je(r),e!=null&&e.length!==5)throw new Error("tensor5d() requires shape to have five numbers");const s=xo(r,t);if(s.length!==5&&s.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(s.length===1&&e==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return qs(r,e,s,t)}function dm(r,e,t){if(Je(r),e!=null&&e.length!==6)throw new Error("tensor6d() requires shape to have six numbers");const s=xo(r,t);if(s.length!==6&&s.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(s.length===1&&e==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return qs(r,e=e||s,s,t)}const pm=$e({topk_:function(r,e=1,t=!0){const s=ge(r,"x","topk");if(s.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");const a=s.shape[s.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${e}`);const l={x:s},c={k:e,sorted:t},[d,m]=Ge.runKernel(th,l,c);return{values:d,indices:m}}}),fm=$e({truncatedNormal_:function(r,e=0,t=1,s,a){if(s!=null&&s==="bool")throw new Error("Unsupported data type $ { dtype }");const l=new sm(e,t,s,!0,a),c=Er(r,s);for(let d=0;d<c.values.length;d++)c.values[d]=l.nextValue();return c.toTensor()}}),bp=$e({unique_:function(r,e=0){const t=ge(r,"x","unique","string_or_numeric");Q(t.rank>0,()=>"The input tensor must be at least 1D");const s={x:t},a={axis:e},[l,c]=Ge.runKernel(Cf,s,a);return{values:l,indices:c}}}),$g=$e({unsortedSegmentSum_:function(r,e,t){const s=ge(r,"x","unsortedSegmentSum"),a=ge(e,"segmentIds","unsortedSegmentSum","int32");Q(_t(t),()=>"numSegments must be of dtype int");const l={x:s,segmentIds:a},c={numSegments:t};return Ge.runKernel(nh,l,c)}}),Pa=$e({unstack_:function(r,e=0){const t=ge(r,"x","unstack","string_or_numeric");Q(e>=-t.shape.length&&e<t.shape.length,()=>`Axis = ${e} is not in [-${t.shape.length}, ${t.shape.length})`);const s={value:t},a={axis:e};return Ge.runKernel(Wo,s,a)}});function Ug(r,e=!0,t,s){return Ge.makeVariable(r,e,t,s)}function wp(r,e){const t=[];for(let l=0;l<e.length;l++)e[l]&&t.push(l);const s=Er(r,"int32"),a=Er([t.length,r.length],"int32");for(let l=0;l<t.length;l++){const c=s.indexToLoc(t[l]),d=l*r.length;a.values.set(c,d)}return a.toTensor()}const mm=async function(r){const e=ge(r,"condition","whereAsync","bool"),t=await e.data(),s=wp(e.shape,t);return r!==e&&e.dispose(),s},gm=async function(r,e,t){const s=ge(r,"tensor","boolMask"),a=ge(e,"mask","boolMask","bool"),l=t==null?0:t,c=a.rank,d=s.shape;Q(c>0,()=>"mask cannot be scalar"),Ze(d.slice(l,l+c),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let m=1;for(let L=l;L<l+c;L++)m*=d[L];const f=d.slice(0,l).concat([m],d.slice(l+c)),y=Xe(s,f),x=Xe(a,[-1]),_=await mm(x),A=ls(_,[1]),C=hu(y,A,l);return r!==s&&s.dispose(),e!==a&&a.dispose(),A.dispose(),y.dispose(),x.dispose(),_.dispose(),C};function rx(r,e,t=null){if(r.rank===0)return ur(r);if(r.rank!==1&&t===null)return rx(Xe(r,[-1]),e,t);if(r.rank===1||typeof t=="number"||Array.isArray(t)&&t.length===1){if(e===1)return Ln(ur(r),t);if(e===1/0)return Mo(ur(r),t);if(e===-1/0)return im(ur(r),t);if(e==="euclidean"||e===2)return Ts(Ln(Jo(ur(r),Yn(2,"int32")),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(t)&&t.length===2){if(e===1)return Mo(Ln(ur(r),t[0]),t[1]-1);if(e===1/0)return Mo(Ln(ur(r),t[1]),t[0]);if(e===-1/0)return im(Ln(ur(r),t[1]),t[0]);if(e==="fro"||e==="euclidean")return Ts(Ln(ei(r),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${t}`)}const Ph=$e({norm_:function(r,e="euclidean",t=null,s=!1){const a=rx(r=ge(r,"x","norm"),e,t);let l=a.shape;if(s){const c=ir(t,r.shape);l=Gi(a.shape,c)}return Xe(a,l)}}),ix=$e({movingAverage_:function(r,e,t,s,a=!0){const l=ge(r,"v","movingAverage"),c=ge(e,"x","movingAverage"),d=ge(t,"decay","movingAverage");rg(l,c),Q(Le(l.shape,c.shape),()=>"Shape mismatch in v and x");const m=Yn(1),f=kn(m,d);let y=qe(kn(c,l),f);if(a){Q(s!=null,()=>"When using zeroDebias: true, step is required.");const x=ge(s,"step","movingAverage");y=Un(y,kn(m,Jo(d,x)))}return jt(l,y)}}),sx=$e({scatterND_:function(r,e,t){const s=ge(r,"indices","scatterND","int32"),a=ge(e,"updates","scatterND");R0(a,s,t);const l={indices:s,updates:a},c={shape:t};return Ge.runKernel(ql,l,c)}}),ax=$e({sparseToDense_:function(r,e,t,s=0){const a=ge(r,"sparseIndices","sparseToDense","int32"),l=ge(e,"sparseValues","sparseToDense"),c=ge(s,"defaultValue","sparseToDense",l.dtype);(function(f,y,x,_){if(f.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${f.dtype}.`);if(f.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${f.shape}.`);const A=f.rank>0?f.shape[0]:1,C=f.rank>1?f.shape[1]:1;if(x.length!==C)throw new Error(`outputShape has incorrect number of elements:, ${x.length}, should be: ${C}.`);const L=y.size;if(y.rank!==0&&(y.rank!==1||L!==A))throw new Error(`sparseValues has incorrect shape ${y.shape}, should be [] or [${A}]`);if(y.dtype!==_.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")})(a,l,t,c);const d={sparseIndices:a,sparseValues:l,defaultValue:c},m={outputShape:t};return Ge.runKernel(Uo,d,m)}}),Ib=$e({gatherND_:function(r,e){const t=ge(e,"indices","gatherND","int32"),s={params:ge(r,"x","gatherND","string_or_numeric"),indices:t};return Ge.runKernel(gf,s)}}),ox=$e({dropout_:function(r,e,t,s){const a=ge(r,"x","dropout");if(Q(a.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`),Q(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),e===0)return r instanceof Ur?a.clone():a;const l=function(m,f){if(f==null)return m.shape.slice();if(Le(m.shape,f))return f;if(m.shape.length===f.length){const y=[];for(let x=0;x<m.shape.length;x++)f[x]==null&&m.shape[x]!=null?y.push(m.shape[x]):y.push(f[x]);return y}return f}(a,t),c=1-e,d=Un(sc(jt(Zr(l,0,1,"float32",s),c)),c);return qe(a,d)}});function lx(r){return Math.floor(Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))))}function Vg(r,e,t){const s=1-r%2,a=new Float32Array(r);for(let l=0;l<r;++l){const c=2*Math.PI*l/(r+s-1);a[l]=e-t*Math.cos(c)}return us(a,"float32")}const Cb=async function(r,e,t=1){const s=ge(r,"predictions","inTopK"),a=ge(e,"targets","inTopK");Q(s.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`),Q(s.rank-1===a.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${a.rank}`),Ze(s.shape.slice(0,s.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const l=s.shape[s.shape.length-1];Q(t>0&&t<=l,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${l}), but got ${t}`);const c=await s.data(),d=await a.data(),[m,f]=[c.length/l,l],y=Ti("bool",m);for(let x=0;x<m;x++){const _=x*f,A=c.subarray(_,_+f),C=[];for(let L=0;L<A.length;L++)C.push({value:A[L],index:L});C.sort((L,P)=>P.value-L.value),y[x]=0;for(let L=0;L<t;L++)if(C[L].index===d[x]){y[x]=1;break}}return r!==s&&s.dispose(),e!==a&&a.dispose(),Xs(y,a.shape,"bool")},ym=$e({conv2DBackpropFilter_:function(r,e,t,s,a,l="NHWC",c){let d=r;r.rank===3&&(d=Xe(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let m=e;m.rank===3&&(m=Xe(e,[1,e.shape[0],e.shape[1],e.shape[2]])),Q(d.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${d.shape}.`),Q(m.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${m.shape}.`),Q(t.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${t}.`);const f=l==="NHWC"?d.shape[3]:d.shape[1],y=l==="NHWC"?m.shape[3]:m.shape[1];Q(f===t[2],()=>`Error in conv2dDerFilter: depth of input ${f}) must match input depth in filter (${t[2]}.`),Q(y===t[3],()=>`Error in conv2dDerFilter: depth of dy (${y}) must match output depth for filter (${t[3]}).`),c!=null&&Q(_t(a),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${c} but got pad ${a}.`);const x={x:d,dy:m},_={strides:s,pad:a,dataFormat:l,dimRoundingMode:c,filterShape:t};return Ge.runKernel(uf,x,_)}});function Wg(r,e,t){if(t==null||t==="linear")return r;if(t==="relu")return qe(r,Dh(e));throw new Error(`Cannot compute gradient for fused activation ${t}.`)}function Gg(r,e){let t=e;const s=Ei(r.shape,e.shape);return s.length>0&&(t=Ln(t,s)),Xe(t,r.shape)}function Fh(r,e,t,s){if(e==="linear")return r;if(e==="relu")return To(r);if(e==="elu")return Es(r);if(e==="relu6")return La(r);if(e==="prelu")return hc(r,t);if(e==="leakyrelu")return cp(r,s);if(e==="sigmoid")return Rs(r);throw new Error(`Unknown fused activation ${e}.`)}const _p=(r,e)=>!(r>0)||e==="linear",Hg=$e({fusedConv2d_:function({x:r,filter:e,strides:t,pad:s,dataFormat:a="NHWC",dilations:l=[1,1],dimRoundingMode:c,bias:d,activation:m="linear",preluActivationWeights:f,leakyreluAlpha:y}){if(m=m||"linear",_p(Ge.state.gradientDepth,m)===!1){let oe=Al(r,e,t,s,a,l,c);return d!=null&&(oe=jt(oe,d)),Fh(oe,m,f,y)}const x=ge(r,"x","conv2d"),_=ge(e,"filter","conv2d");let A=x,C=!1;x.rank===3&&(C=!0,A=Xe(x,[1,x.shape[0],x.shape[1],x.shape[2]])),Q(A.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${A.rank}.`),Q(_.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${_.rank}.`),c!=null&&Q(_t(s),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${c} but got pad ${s}.`),Q(A.shape[3]===_.shape[2],()=>`Error in conv2d: depth of input (${A.shape[3]}) must match input depth for filter ${_.shape[2]}.`),Q(es(t,l),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${l}'`),Q(a==="NHWC",()=>`Error in conv2d: got dataFormat of ${a} but only NHWC is currently supported.`);const L=Wi(A.shape,_.shape,t,l,s,c);let P,U;d!=null&&(P=ge(d,"bias","fused conv2d"),[P]=Qr(P,x),mr(L.outShape,P.shape)),f!=null&&(U=ge(f,"prelu weights","fused conv2d"));const q=(oe,de)=>{const[Ie,pe,Be,ze]=de,Ve=Wg(oe,Be,m);Q(lu(l),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${l}'`);const Qe=[lp(pe.shape,Ve,Ie,t,s),ym(pe,Ve,Ie.shape,t,s)];if(ze!=null){const nt=Gg(ze,Ve);Qe.push(nt)}return Qe},X={x:A,filter:_,bias:P,preluActivationWeights:U},re={strides:t,pad:s,dataFormat:a,dilations:l,dimRoundingMode:c,activation:m,leakyreluAlpha:y};return d==null?Zo((oe,de,Ie)=>{let pe=Ge.runKernel(Jl,X,re);return Ie([de,oe,pe]),C&&(pe=Xe(pe,[pe.shape[1],pe.shape[2],pe.shape[3]])),{value:pe,gradFunc:q}})(A,_):Zo((oe,de,Ie,pe)=>{let Be=Ge.runKernel(Jl,X,re);return pe([de,oe,Be,Ie]),C&&(Be=Xe(Be,[Be.shape[1],Be.shape[2],Be.shape[3]])),{value:Be,gradFunc:q}})(A,_,P)}}),ux=$e({depthwiseConv2dNativeBackpropFilter_:function(r,e,t,s,a,l=[1,1],c){let d=r;r.rank===3&&(d=Xe(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let m=e;m.rank===3&&(m=Xe(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const f={x:d,dy:m},y={strides:s,pad:a,dimRoundingMode:c,dilations:l,filterShape:t};return Ge.runKernel(Du,f,y)}}),cx=$e({depthwiseConv2dNativeBackpropInput_:function(r,e,t,s,a,l=[1,1],c){let d=e,m=!1;e.rank===3&&(m=!0,d=Xe(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const f={dy:d,filter:t},y={strides:s,pad:a,dimRoundingMode:c,dilations:l,inputShape:r},x=Ge.runKernel(Pu,f,y);return m?Xe(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),hx=$e({fusedDepthwiseConv2d_:function({x:r,filter:e,strides:t,pad:s,dataFormat:a="NHWC",dilations:l=[1,1],dimRoundingMode:c,bias:d,activation:m="linear",preluActivationWeights:f,leakyreluAlpha:y}){if(_p(Ge.state.gradientDepth,m)===!1){let oe=nl(r,e,t,s,a,l,c);return d!=null&&(oe=jt(oe,d)),Fh(oe,m,f,y)}const x=ge(r,"x","depthwiseConv2d"),_=ge(e,"filter","depthwiseConv2d");let A=x,C=!1;x.rank===3&&(C=!0,A=Xe(x,[1,x.shape[0],x.shape[1],x.shape[2]])),Q(A.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${A.rank}.`),Q(_.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${_.rank}.`),Q(A.shape[3]===_.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${A.shape[3]}) must match the inChannels dimension in filter ${_.shape[2]}.`),l==null&&(l=[1,1]),Q(es(t,l),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${l}'`),c!=null&&Q(_t(s),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${c} but got pad ${s}.`);const L=Wi(A.shape,_.shape,t,l,s,c,!0);let P,U;d!=null&&(P=ge(d,"bias","fused conv2d"),[P]=Qr(P,x),mr(L.outShape,P.shape)),f!=null&&(U=ge(f,"prelu weights","fused depthwiseConv2d"));const q=(oe,de)=>{Q(lu(l),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${l}'`);const[Ie,pe,Be,ze]=de,Ve=Wg(oe,Be,m),Qe=cx(pe.shape,Ve,Ie,t,s,l,c),nt=ux(pe,Ve,Ie.shape,t,s,l,c);return ze!=null?[Qe,nt,Gg(P,Ve)]:[Qe,nt]},X={x:A,filter:_,bias:P,preluActivationWeights:U},re={strides:t,pad:s,dataFormat:a,dilations:l,dimRoundingMode:c,activation:m,leakyreluAlpha:y};return d==null?Zo((oe,de,Ie)=>{let pe=Ge.runKernel(Nf,X,re);return Ie([de,oe,pe]),C&&(pe=Xe(pe,[pe.shape[1],pe.shape[2],pe.shape[3]])),{value:pe,gradFunc:q}})(A,_):Zo((oe,de,Ie,pe)=>{let Be=Ge.runKernel(Nf,X,re);return pe([de,oe,Be,Ie]),C&&(Be=Xe(Be,[Be.shape[1],Be.shape[2],Be.shape[3]])),{value:Be,gradFunc:q}})(A,_,P)}}),xm=$e({fusedMatMul_:function({a:r,b:e,transposeA:t=!1,transposeB:s=!1,bias:a,activation:l="linear",preluActivationWeights:c,leakyreluAlpha:d}){if(_p(Ge.state.gradientDepth,l)===!1){let ze=wr(r,e,t,s);return a!=null&&(ze=jt(ze,a)),Fh(ze,l,c,d)}let m=ge(r,"a","fused matMul"),f=ge(e,"b","fused matMul");[m,f]=Qr(m,f);const y=t?m.shape[m.rank-2]:m.shape[m.rank-1],x=s?f.shape[f.rank-1]:f.shape[f.rank-2],_=t?m.shape[m.rank-1]:m.shape[m.rank-2],A=s?f.shape[f.rank-2]:f.shape[f.rank-1],C=m.shape.slice(0,-2),L=f.shape.slice(0,-2),P=he(C),U=he(L);Q(m.rank>=2&&f.rank>=2&&m.rank===f.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${m.rank} and ${f.rank}.`),Q(Le(C,L),()=>`Error in fused matMul: outer dimensions (${C}) and (${L}) of Tensors with shapes ${m.shape} and ${f.shape} must match.`),Q(y===x,()=>`Error in fused matMul: inner shapes (${y}) and (${x}) of Tensors with shapes ${m.shape} and ${f.shape} and transposeA=${t} and transposeB=${s} must match.`);const q=m.shape.slice(0,-2).concat([_,A]),X=Xe(m,t?[P,y,_]:[P,_,y]),re=Xe(f,s?[U,A,x]:[U,x,A]);let oe,de;a!=null&&(oe=ge(a,"bias","fused matMul"),[oe]=Qr(oe,m),mr(q,oe.shape)),c!=null&&(de=ge(c,"prelu weights","fused matMul"));const Ie=(ze,Ve)=>{const[Qe,nt,ft,yt]=Ve,Mt=Wg(Xe(ze,ft.shape),ft,l);let vt,Ct;return t||s?!t&&s?(vt=wr(Mt,nt,!1,!1),Ct=wr(Mt,Qe,!0,!1)):t&&!s?(vt=wr(nt,Mt,!1,!0),Ct=wr(Qe,Mt,!1,!1)):(vt=wr(nt,Mt,!0,!0),Ct=wr(Mt,Qe,!0,!0)):(vt=wr(Mt,nt,!1,!0),Ct=wr(Qe,Mt,!0,!1)),a!=null?[vt,Ct,Gg(yt,Mt)]:[vt,Ct]},pe={a:X,b:re,bias:oe,preluActivationWeights:de},Be={transposeA:t,transposeB:s,activation:l,leakyreluAlpha:d};return a==null?Zo((ze,Ve,Qe)=>{const nt=Ge.runKernel(Wu,pe,Be);return Qe([ze,Ve,nt]),{value:Xe(nt,q),gradFunc:Ie}})(X,re):Zo((ze,Ve,Qe,nt)=>{const ft=Ge.runKernel(Wu,pe,Be);return nt([ze,Ve,ft,Qe]),{value:Xe(ft,q),gradFunc:Ie}})(X,re,oe)}}),T_=$e({hammingWindow_:function(r){return Vg(r,.54,.46)}}),dx=$e({hannWindow_:function(r){return Vg(r,.5,.5)}}),px=$e({frame_:function(r,e,t,s=!1,a=0){let l=0;const c=[];for(;l+e<=r.size;)c.push(Nr(r,l,e)),l+=t;if(s)for(;l<r.size;){const d=l+e-r.size,m=bi([Nr(r,l,e-d),vo([d],a)]);c.push(m),l+=t}return c.length===0?gc([],[0,e]):Xe(bi(c),[c.length,e])}}),Oh=$e({stft_:function(r,e,t,s,a=dx){s==null&&(s=lx(e));const l=px(r,e,t),c=qe(l,a(e));return fu(c,s)}}),kb=$e({cropAndResize_:function(r,e,t,s,a="bilinear",l=0){const c=ge(r,"image","cropAndResize"),d=ge(e,"boxes","cropAndResize","float32"),m=ge(t,"boxInd","cropAndResize","int32"),f=d.shape[0];Q(c.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${c.rank}.`),Q(d.rank===2&&d.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${f},4] but had shape ${d.shape}.`),Q(m.rank===1&&m.shape[0]===f,()=>`Error in cropAndResize: boxInd must be have size [${f}] but had shape ${d.shape}.`),Q(s.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),Q(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),Q(a==="bilinear"||a==="nearest",()=>`method must be bilinear or nearest, but was ${a}`);const y={image:c,boxes:d,boxInd:m},x={method:a,extrapolationValue:l,cropSize:s};return Ge.runKernel(df,y,x)}}),E_=$e({flipLeftRight_:function(r){const e=ge(r,"image","flipLeftRight","float32");Q(e.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);const t={image:e};return Ge.runKernel(xd,t,{})}}),zh=$e({grayscaleToRGB_:function(r){const e=ge(r,"image","grayscaleToRGB"),t=e.rank-1,s=e.shape[t];Q(e.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`),Q(s===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const a=new Array(e.rank);return a.fill(1,0,t),a[t]=3,ya(e,a)}}),A_=$e({rotateWithOffset_:function(r,e,t=0,s=.5){const a=ge(r,"image","rotateWithOffset","float32");Q(a.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`);const l={image:a},c={radians:e,fillValue:t,center:s};return Ge.runKernel(go,l,c)}});function yc(r,e,t,s,a,l){s==null&&(s=.5),a==null&&(a=Number.NEGATIVE_INFINITY),l==null&&(l=0);const c=r.shape[0];return t=Math.min(t,c),Q(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),Q(r.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${r.rank}'`),Q(r.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`),Q(e.rank===1,()=>"scores must be a 1D tensor"),Q(e.shape[0]===c,()=>`scores has incompatible shape with boxes. Expected ${c}, but was ${e.shape[0]}`),Q(0<=l&&l<=1,()=>`softNmsSigma must be in [0, 1], but was '${l}'`),{maxOutputSize:t,iouThreshold:s,scoreThreshold:a,softNmsSigma:l}}const Bh=$e({nonMaxSuppression_:function(r,e,t,s=.5,a=Number.NEGATIVE_INFINITY){const l=ge(r,"boxes","nonMaxSuppression"),c=ge(e,"scores","nonMaxSuppression"),d=yc(l,c,t,s,a),m={maxOutputSize:t=d.maxOutputSize,iouThreshold:s=d.iouThreshold,scoreThreshold:a=d.scoreThreshold};return Ge.runKernel(Cd,{boxes:l,scores:c},m)}});function Nb(r,e,t){const s=function(l,c,d){return function(m,f,y){let x=0,_=m.length,A=0,C=!1;for(;x<_;){A=x+(_-x>>>1);const L=y(f,m[A]);L>0?x=A+1:(_=A,C=!L)}return C?x:-x-1}(l,c,d||I_)}(r,e,t),a=s<0?-(s+1):s;r.splice(a,0,e)}function I_(r,e){return r>e?1:r<e?-1:0}function Rl(r,e,t,s,a){return qg(r,e,t,s,a,0)}function jg(r,e,t,s,a,l){return qg(r,e,t,s,a,0,!1,l,!0)}function vm(r,e,t,s,a,l){return qg(r,e,t,s,a,l,!0)}function qg(r,e,t,s,a,l,c=!1,d=!1,m=!1){const f=[];for(let P=0;P<e.length;P++)e[P]>a&&f.push({score:e[P],boxIndex:P,suppressBeginIndex:0});f.sort(Rb);const y=l>0?-.5/l:0,x=[],_=[];for(;x.length<t&&f.length>0;){const P=f.pop(),{score:U,boxIndex:q,suppressBeginIndex:X}=P;if(U<a)break;let re=!1;for(let oe=x.length-1;oe>=X;--oe){const de=C_(r,q,x[oe]);if(de>=s){re=!0;break}if(P.score=P.score*fx(s,y,de),P.score<=a)break}P.suppressBeginIndex=x.length,re||(P.score===U?(x.push(q),_.push(P.score)):P.score>a&&Nb(f,P,Rb))}const A=x.length,C=t-A;d&&C>0&&(x.push(...new Array(C).fill(0)),_.push(...new Array(C).fill(0)));const L={selectedIndices:x};return c&&(L.selectedScores=_),m&&(L.validOutputs=A),L}function C_(r,e,t){const s=r.subarray(4*e,4*e+4),a=r.subarray(4*t,4*t+4),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),d=Math.max(s[0],s[2]),m=Math.max(s[1],s[3]),f=Math.min(a[0],a[2]),y=Math.min(a[1],a[3]),x=Math.max(a[0],a[2]),_=Math.max(a[1],a[3]),A=(d-l)*(m-c),C=(x-f)*(_-y);if(A<=0||C<=0)return 0;const L=Math.max(l,f),P=Math.max(c,y),U=Math.min(d,x),q=Math.min(m,_),X=Math.max(U-L,0)*Math.max(q-P,0);return X/(A+C-X)}function fx(r,e,t){const s=Math.exp(e*t*t);return t<=r?s:0}function Rb(r,e){return r.score-e.score||r.score===e.score&&e.boxIndex-r.boxIndex}const k_=$e({nonMaxSuppressionWithScore_:function(r,e,t,s=.5,a=Number.NEGATIVE_INFINITY,l=0){const c=ge(r,"boxes","nonMaxSuppression"),d=ge(e,"scores","nonMaxSuppression"),m=yc(c,d,t,s,a,l),f={boxes:c,scores:d},y={maxOutputSize:t=m.maxOutputSize,iouThreshold:s=m.iouThreshold,scoreThreshold:a=m.scoreThreshold,softNmsSigma:l=m.softNmsSigma},x=Ge.runKernel(Af,f,y);return{selectedIndices:x[0],selectedScores:x[1]}}}),N_=$e({nonMaxSuppressionPadded_:function(r,e,t,s=.5,a=Number.NEGATIVE_INFINITY,l=!1){const c=ge(r,"boxes","nonMaxSuppression"),d=ge(e,"scores","nonMaxSuppression"),m=yc(c,d,t,s,a,null),f={boxes:c,scores:d},y={maxOutputSize:m.maxOutputSize,iouThreshold:m.iouThreshold,scoreThreshold:m.scoreThreshold,padToMaxOutputSize:l},x=Ge.runKernel(Ef,f,y);return{selectedIndices:x[0],validOutputs:x[1]}}}),Lb=$e({resizeBilinear_:function(r,e,t=!1,s=!1){const a=ge(r,"images","resizeBilinear");Q(a.rank===3||a.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`),Q(e.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`),Q(s===!1||t===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let l=a,c=!1;a.rank===3&&(c=!0,l=Xe(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const d={images:l},m={alignCorners:t,halfPixelCenters:s,size:e},f=Ge.runKernel(Dd,d,m);return c?Xe(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Db=$e({resizeNearestNeighbor_:function(r,e,t=!1,s=!1){const a=ge(r,"images","resizeNearestNeighbor");Q(a.rank===3||a.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`),Q(e.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`),Q(a.dtype==="float32"||a.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),Q(s===!1||t===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let l=a,c=!1;a.rank===3&&(c=!0,l=Xe(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const d={images:l},m={alignCorners:t,halfPixelCenters:s,size:e},f=Ge.runKernel(Te,d,m);return c?Xe(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),R_=$e({threshold_:function(r,e="binary",t=!1,s=.5){const a=ge(r,"image","threshold"),l=a.shape[0]*a.shape[1];let c,d,m,f,y=qe(us([s]),255);if(Q(a.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`),Q(a.shape[2]===3||a.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`),Q(a.dtype==="int32"||a.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`),Q(e==="otsu"||e==="binary",()=>`Method must be binary or otsu, but was ${e}`),a.shape[2]===3){[c,d,m]=Qs(a,[1,1,1],-1);const _=qe(c,.2989),A=qe(d,.587),C=qe(m,.114);f=jt(jt(_,A),C)}else f=r;e==="otsu"&&(y=function(_,A){let C,L,P,U,q,X,re=us([-1]),oe=us([0]),de=us([0]);for(let Ie=0;Ie<_.size-1;Ie++){C=Nr(_,0,Ie+1),L=Nr(_,Ie+1),q=Un(Ln(C),A),X=Un(Ln(L),A);const pe=Ln(qe(C,Ra(0,C.size)));P=Un(pe,Ln(C));const Be=vo(L.shape,C.size),ze=jt(Ra(0,L.size),Be),Ve=qe(L,ze);U=Un(Ln(Ve),Ln(L));const Qe=kn(P,U),nt=kn(P,U),ft=qe(q,X);de=qe(qe(ft,Qe),nt);const yt=Js(de,oe);oe=as(yt,de,oe),re=as(yt,us([Ie]),re)}return re}(Ag(un(Nl(f),"int32"),Xs([]),256),l));const x=t?kl(f,y):Js(f,y);return un(qe(x,255),"int32")}}),L_=$e({transform_:function(r,e,t="nearest",s="constant",a=0,l){const c=ge(r,"image","transform","float32"),d=ge(e,"transforms","transform","float32");Q(c.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${c.rank}.`),Q(d.rank===2&&(d.shape[0]===c.shape[0]||d.shape[0]===1)&&d.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),Q(l==null||l.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${l}.`);const m={image:c,transforms:d},f={interpolation:t,fillMode:s,fillValue:a,outputShape:l};return Ge.runKernel(Hs,m,f)}}),Gr=$e({bandPart_:function(r,e,t){Q(e%1==0,()=>`bandPart(): numLower must be an integer, got ${e}.`),Q(t%1==0,()=>`bandPart(): numUpper must be an integer, got ${t}.`);const s=ge(r,"a","bandPart");Q(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const a=s.shape,[l,c]=s.shape.slice(-2);if(!(e<=l))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${l}).`);if(!(t<=c))throw new Error(`bandPart(): numUpper (${t}) must not be greater than the number of columns (${c}).`);e<0&&(e=l),t<0&&(t=c);const d=Xe(Ra(0,l,1,"int32"),[-1,1]),m=Ra(0,c,1,"int32"),f=kn(d,m),y=va(kl(f,Yn(+e,"int32")),_o(f,Yn(-t,"int32"))),x=ji([l,c],s.dtype);return Xe(ea(Pa(Xe(s,[-1,l,c])).map(_=>as(y,_,x))),a)}}),Pb=$e({gramSchmidt_:function(r){let e;if(Array.isArray(r)){e=!1,Q(r!=null&&r.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const a=r[0].shape[0];for(let l=1;l<r.length;++l)Q(r[l].shape[0]===a,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[l].shape[0]} vs. ${a})`)}else e=!0,r=Qs(r,r.shape[0],0).map(a=>ls(a,[0]));Q(r.length<=r[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);const t=[],s=r;for(let a=0;a<r.length;++a)t.push(Ge.tidy(()=>{let l=s[a];if(a>0)for(let c=0;c<a;++c){const d=qe(Ln(qe(t[c],l)),t[c]);l=kn(l,d)}return Un(l,Ph(l,"euclidean"))}));return e?ea(t,0):t}});function Fb(r,e=!1){return Ge.tidy(()=>{Q(r.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);const t=r.shape[0],s=r.shape[1];let a=em(t),l=iu(r);const c=gc([[1]],[1,1]);let d=iu(c);const m=t>=s?s:t;for(let f=0;f<m;++f){const y=l,x=d,_=a;[d,l,a]=Ge.tidy(()=>{const A=Nr(l,[f,f],[t-f,1]),C=Ph(A),L=Nr(l,[f,f],[1,1]),P=as(Js(L,0),gc([[-1]]),gc([[1]])),U=kn(L,qe(P,C)),q=Un(A,U);d=q.shape[0]===1?iu(c):bi([c,Nr(q,[1,0],[q.shape[0]-1,q.shape[1]])],0);const X=ti(Un(wr(P,U),C)),re=Nr(l,[f,0],[t-f,s]),oe=qe(X,d),de=Pr(d);if(f===0)l=kn(re,wr(oe,wr(de,re)));else{const Be=kn(re,wr(oe,wr(de,re)));l=bi([Nr(l,[0,0],[f,s]),Be],0)}const Ie=Pr(oe),pe=Nr(a,[0,f],[t,a.shape[1]-f]);if(f===0)a=kn(pe,wr(wr(pe,d),Ie));else{const Be=kn(pe,wr(wr(pe,d),Ie));a=bi([Nr(a,[0,0],[t,f]),Be],1)}return[d,l,a]}),pr([y,x,_])}return!e&&t>s&&(a=Nr(a,[0,0],[t,s]),l=Nr(l,[0,0],[s,s])),[a,l]})}const Ob=$e({qr_:function(r,e=!1){if(Q(r.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`),r.rank===2)return Fb(r,e);{const t=r.shape.slice(0,r.shape.length-2).reduce((c,d)=>c*d),s=Pa(Xe(r,[t,r.shape[r.shape.length-2],r.shape[r.shape.length-1]]),0),a=[],l=[];return s.forEach(c=>{const[d,m]=Fb(c,e);a.push(d),l.push(m)}),[Xe(ea(a,0),r.shape),Xe(ea(l,0),r.shape)]}}});var ys;(function(r){r[r.NONE=0]="NONE",r[r.MEAN=1]="MEAN",r[r.SUM=2]="SUM",r[r.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(ys||(ys={}));const Ll=$e({computeWeightedLoss_:function(r,e,t=ys.SUM_BY_NONZERO_WEIGHTS){const s=ge(r,"losses","computeWeightedLoss");let a=null;e!=null&&(a=ge(e,"weights","computeWeightedLoss"));const l=a==null?s:qe(s,a);if(t===ys.NONE)return l;if(t===ys.SUM)return Ln(l);if(t===ys.MEAN){if(a==null)return Wr(l);{const c=s.size/a.size,d=Un(Ln(l),Ln(a));return c>1?Un(d,Yn(c)):d}}if(t===ys.SUM_BY_NONZERO_WEIGHTS){if(a==null)return Un(Ln(l),Yn(s.size));{const c=qe(a,ba(s.shape)),d=un(Ln(eo(c,Yn(0))),"float32");return Un(Ln(l),d)}}throw Error(`Unknown reduction: ${t}`)}}),zb=$e({absoluteDifference_:function(r,e,t,s=ys.SUM_BY_NONZERO_WEIGHTS){const a=ge(r,"labels","absoluteDifference"),l=ge(e,"predictions","absoluteDifference");let c=null;t!=null&&(c=ge(t,"weights","absoluteDifference")),Ze(a.shape,l.shape,"Error in absoluteDifference: ");const d=ur(kn(a,l));return Ll(d,c,s)}}),D_=$e({cosineDistance_:function(r,e,t,s,a=ys.SUM_BY_NONZERO_WEIGHTS){const l=ge(r,"labels","cosineDistance"),c=ge(e,"predictions","cosineDistance");let d=null;s!=null&&(d=ge(s,"weights","cosineDistance")),Ze(l.shape,c.shape,"Error in cosineDistance: ");const m=Yn(1),f=kn(m,Ln(qe(l,c),t,!0));return Ll(f,d,a)}}),Bb=$e({hingeLoss_:function(r,e,t,s=ys.SUM_BY_NONZERO_WEIGHTS){let a=ge(r,"labels","hingeLoss");const l=ge(e,"predictions","hingeLoss");let c=null;t!=null&&(c=ge(t,"weights","hingeLoss")),Ze(a.shape,l.shape,"Error in hingeLoss: ");const d=Yn(1);a=kn(qe(Yn(2),a),d);const m=To(kn(d,qe(a,l)));return Ll(m,c,s)}}),mx=$e({huberLoss_:function(r,e,t,s=1,a=ys.SUM_BY_NONZERO_WEIGHTS){const l=ge(r,"labels","huberLoss"),c=ge(e,"predictions","huberLoss");let d=null;t!=null&&(d=ge(t,"weights","huberLoss")),Ze(l.shape,c.shape,"Error in huberLoss: ");const m=Yn(s),f=ur(kn(c,l)),y=il(f,m),x=kn(f,y),_=jt(qe(Yn(.5),ei(y)),qe(m,x));return Ll(_,d,a)}}),P_=$e({logLoss_:function(r,e,t,s=1e-7,a=ys.SUM_BY_NONZERO_WEIGHTS){const l=ge(r,"labels","logLoss"),c=ge(e,"predictions","logLoss");let d=null;t!=null&&(d=ge(t,"weights","logLoss")),Ze(l.shape,c.shape,"Error in logLoss: ");const m=Yn(1),f=Yn(s),y=ti(qe(l,xa(jt(c,f)))),x=qe(kn(m,l),xa(jt(kn(m,c),f))),_=kn(y,x);return Ll(_,d,a)}}),F_=$e({meanSquaredError_:function(r,e,t,s=ys.SUM_BY_NONZERO_WEIGHTS){const a=ge(r,"labels","meanSquaredError"),l=ge(e,"predictions","meanSquaredError");let c=null;t!=null&&(c=ge(t,"weights","meanSquaredError")),Ze(a.shape,l.shape,"Error in meanSquaredError: ");const d=sl(a,l);return Ll(d,c,s)}}),$b=$e({sigmoidCrossEntropy_:function(r,e,t,s=0,a=ys.SUM_BY_NONZERO_WEIGHTS){let l=ge(r,"multiClassLabels","sigmoidCrossEntropy");const c=ge(e,"logits","sigmoidCrossEntropy");let d=null;if(t!=null&&(d=ge(t,"weights","sigmoidCrossEntropy")),Ze(l.shape,c.shape,"Error in sigmoidCrossEntropy: "),s>0){const f=Yn(s),y=Yn(1),x=Yn(.5);l=jt(qe(l,kn(y,f)),qe(x,f))}const m=function(f,y){const x=ge(f,"labels","sigmoidCrossEntropyWithLogits"),_=ge(y,"logits","sigmoidCrossEntropyWithLogits");Ze(x.shape,_.shape,"Error in sigmoidCrossEntropyWithLogits: ");const A=To(_),C=qe(_,x),L=So(Zs(ti(ur(_))));return jt(kn(A,C),L)}(l,c);return Ll(m,d,a)}}),Sp=$e({softmaxCrossEntropy_:function(r,e,t,s=0,a=ys.SUM_BY_NONZERO_WEIGHTS){let l=ge(r,"onehotLabels","softmaxCrossEntropy");const c=ge(e,"logits","softmaxCrossEntropy");let d=null;if(t!=null&&(d=ge(t,"weights","softmaxCrossEntropy")),Ze(l.shape,c.shape,"Error in softmaxCrossEntropy: "),s>0){const f=Yn(s),y=Yn(1),x=Yn(l.shape[1]);l=jt(qe(l,kn(y,f)),Un(f,x))}const m=function(f,y,x=-1){if(x===-1&&(x=y.rank-1),x!==y.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${y.rank} and dim was ${x}`);return Zo((_,A,C)=>{const L=Lg(A,[x],!0),P=kn(un(A,"float32"),L);C([_,P]);const U=ti(qe(P,_));return{value:Ln(U,[x]),gradFunc:(q,X)=>{const[re,oe]=X,de=Gi(q.shape,[x]);return[qe(Xe(q,de),kn(un(re,"float32"),Zs(oe))),qe(Xe(q,de),kn(Zs(oe),un(re,"float32")))]}}})(f,y)}(l,c);return Ll(m,d,a)}}),Ub=$e({sparseFillEmptyRows_:function(r,e,t,s){const a=ge(r,"indices","sparseFillEmptyRows"),l=ge(e,"values","sparseFillEmptyRows"),c=ge(t,"denseShape","sparseFillEmptyRows"),d=ge(s,"defaultValue","sparseFillEmptyRows",l.dtype);if(a.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${a.shape}`);if(l.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${l.shape}`);if(c.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${c.shape}`);if(d.rank!==0)throw new Error(`Default value should be a scalar but received shape ${d.shape}`);const m={indices:a,values:l,denseShape:c,defaultValue:d},f=Ge.runKernel($o,m);return{outputIndices:f[0],outputValues:f[1],emptyRowIndicator:f[2],reverseIndexMap:f[3]}}}),Xg=$e({sparseReshape_:function(r,e,t){const s=ge(r,"inputIndices","sparseReshape"),a=ge(e,"inputShape","sparseReshape"),l=ge(t,"newShape","sparseReshape");if(s.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);if(a.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(l.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${l.shape}`);const c={inputIndices:s,inputShape:a,newShape:l},d=Ge.runKernel(mo,c);return{outputIndices:d[0],outputShape:d[1]}}}),Vb=$e({sparseSegmentMean_:function(r,e,t){const s=ge(r,"data","sparseSegmentMean"),a=ge(e,"indices","sparseSegmentMean"),l=ge(t,"segmentIds","sparseSegmentMean");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(a.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${a.shape}`);if(l.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${l.shape}`);const c={data:s,indices:a,segmentIds:l};return Ge.runKernel(Fd,c)}}),Wb=$e({sparseSegmentSum_:function(r,e,t){const s=ge(r,"data","sparseSegmentSum"),a=ge(e,"indices","sparseSegmentSum"),l=ge(t,"segmentIds","sparseSegmentSum");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(a.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${a.shape}`);if(l.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${l.shape}`);const c={data:s,indices:a,segmentIds:l};return Ge.runKernel(Qc,c)}}),Gb=$e({stringNGrams_:function(r,e,t,s,a,l,c,d){const m=ge(r,"data","stringNGrams","string");if(m.dtype!=="string")throw new Error("Data must be of datatype string");if(m.shape.length!==1)throw new Error(`Data must be a vector, saw: ${m.shape}`);const f=ge(e,"dataSplits","stringNGrams");if(f.dtype!=="int32")throw new Error("Data splits must be of datatype int32");const y={separator:t,nGramWidths:s,leftPad:a,rightPad:l,padWidth:c,preserveShortSequences:d},x={data:m,dataSplits:f},_=Ge.runKernel(Vo,x,y);return{nGrams:_[0],nGramsSplits:_[1]}}}),O_=$e({stringSplit_:function(r,e,t=!0){const s=ge(r,"input","stringSplit","string"),a=ge(e,"delimiter","stringSplit","string");if(s.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(a.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const l={skipEmpty:t},c={input:s,delimiter:a},d=Ge.runKernel(Gn,c,l);return{indices:d[0],values:d[1],shape:d[2]}}}),xc=$e({stringToHashBucketFast_:function(r,e){const t=ge(r,"input","stringToHashBucketFast","string"),s={numBuckets:e};if(e<=0)throw new Error("Number of buckets must be at least 1");const a={input:t};return Ge.runKernel(Kl,a,s)}}),Yg={fft:vp,ifft:Lh,rfft:fu,irfft:hm},gx={hammingWindow:T_,hannWindow:dx,frame:px,stft:Oh},no={flipLeftRight:E_,grayscaleToRGB:zh,resizeNearestNeighbor:Db,resizeBilinear:Lb,rotateWithOffset:A_,cropAndResize:kb,nonMaxSuppression:Bh,nonMaxSuppressionAsync:async function(r,e,t,s=.5,a=Number.NEGATIVE_INFINITY){const l=ge(r,"boxes","nonMaxSuppressionAsync"),c=ge(e,"scores","nonMaxSuppressionAsync"),d=yc(l,c,t,s,a);t=d.maxOutputSize,s=d.iouThreshold,a=d.scoreThreshold;const m=await Promise.all([l.data(),c.data()]),f=m[0],y=m[1],{selectedIndices:x}=Rl(f,y,t,s,a);return l!==r&&l.dispose(),c!==e&&c.dispose(),us(x,"int32")},nonMaxSuppressionWithScore:k_,nonMaxSuppressionWithScoreAsync:async function(r,e,t,s=.5,a=Number.NEGATIVE_INFINITY,l=0){const c=ge(r,"boxes","nonMaxSuppressionAsync"),d=ge(e,"scores","nonMaxSuppressionAsync"),m=yc(c,d,t,s,a,l);t=m.maxOutputSize,s=m.iouThreshold,a=m.scoreThreshold,l=m.softNmsSigma;const f=await Promise.all([c.data(),d.data()]),y=f[0],x=f[1],{selectedIndices:_,selectedScores:A}=vm(y,x,t,s,a,l);return c!==r&&c.dispose(),d!==e&&d.dispose(),{selectedIndices:us(_,"int32"),selectedScores:us(A)}},nonMaxSuppressionPadded:N_,nonMaxSuppressionPaddedAsync:async function(r,e,t,s=.5,a=Number.NEGATIVE_INFINITY,l=!1){const c=ge(r,"boxes","nonMaxSuppressionAsync"),d=ge(e,"scores","nonMaxSuppressionAsync"),m=yc(c,d,t,s,a,null),f=m.maxOutputSize,y=m.iouThreshold,x=m.scoreThreshold,[_,A]=await Promise.all([c.data(),d.data()]),{selectedIndices:C,validOutputs:L}=jg(_,A,f,y,x,l);return c!==r&&c.dispose(),d!==e&&d.dispose(),{selectedIndices:us(C,"int32"),validOutputs:Yn(L,"int32")}},threshold:R_,transform:L_},yx={bandPart:Gr,gramSchmidt:Pb,qr:Ob},z_={absoluteDifference:zb,computeWeightedLoss:Ll,cosineDistance:D_,hingeLoss:Bb,huberLoss:mx,logLoss:P_,meanSquaredError:F_,sigmoidCrossEntropy:$b,softmaxCrossEntropy:Sp},bm={sparseFillEmptyRows:Ub,sparseReshape:Xg,sparseSegmentMean:Vb,sparseSegmentSum:Wb},wm={stringNGrams:Gb,stringSplit:O_,stringToHashBucketFast:xc};class vc{static sgd(e){return new vi(e)}static momentum(e,t,s=!1){return new Qo(e,t,s)}static rmsprop(e,t=.9,s=0,a=null,l=!1){return new yh(e,t,s,a,l)}static adam(e=.001,t=.9,s=.999,a=null){return new wg(e,t,s,a)}static adadelta(e=.001,t=.95,s=null){return new np(e,t,s)}static adamax(e=.002,t=.9,s=.999,a=null,l=0){return new Tl(e,t,s,a,l)}static adagrad(e,t=.1){return new bg(e,t)}}const $h={sgd:vc.sgd,momentum:vc.momentum,adadelta:vc.adadelta,adagrad:vc.adagrad,rmsprop:vc.rmsprop,adamax:vc.adamax,adam:vc.adam},Hb=typeof requestAnimationFrame!="undefined"?requestAnimationFrame:typeof setImmediate!="undefined"?setImmediate:r=>r();function Kg(){return new Promise(r=>Hb(()=>r()))}function Zg(r,e){const t=r[0].length;r.forEach((a,l)=>{Q(a.length===t,()=>`Error in concat${t}D: rank of tensors[${l}] must be the same as the rank of the rest (${t})`)}),Q(e>=0&&e<t,()=>`Error in concat${t}D: axis must be between 0 and ${t-1}.`);const s=r[0];r.forEach((a,l)=>{for(let c=0;c<t;c++)Q(c===e||a[c]===s[c],()=>`Error in concat${t}D: Shape of tensors[${l}] (${a}) does not match the shape of the rest (${s}) along the non-concatenated axis ${l}.`)})}function ro(r,e){const t=r[0].slice();for(let s=1;s<r.length;s++)t[e]+=r[s][e];return t}const Jg=30;function Qg(r){return r<=Jg?r:uo(r,Math.floor(Math.sqrt(r)))}function Mp(r,e,t){return[t*(typeof r=="number"?r:r[0]),e*(typeof r=="number"?r:r[1])]}function pi(r,e,t,s=!0){let a=[];if(s)a=a.concat(e.slice(0)),a.push(r[0]/t),a=a.concat(r.slice(1));else{a=a.concat(r[0]);const l=e.length;for(let c=0;c<l;++c)a=a.concat([r[c+1]/e[c],e[c]]);a=a.concat(r.slice(l+1))}return a}function _m(r,e,t=!0){const s=[];if(t){s.push(e);for(let a=e+1;a<r;++a)a<=2*e?(s.push(a),s.push(a-(e+1))):s.push(a)}else{const a=[],l=[];for(let c=1;c<r;++c)c>=2*e+1||c%2==1?l.push(c):a.push(c);s.push(...a),s.push(0),s.push(...l)}return s}function wi(r,e,t,s=!0){const a=[];s?a.push(r[0]/t):a.push(r[0]*t);for(let l=1;l<r.length;++l)l<=e.length?s?a.push(e[l-1]*r[l]):a.push(r[l]/e[l-1]):a.push(r[l]);return a}function Tp(r,e){const t=[0];for(let s=0;s<e;++s)t.push(r[s][0]);return t}function ey(r,e,t){const s=r.slice(0,1);for(let a=0;a<t;++a)s.push(r[a+1]-e[a][0]-e[a][1]);return s}const ty=1.7580993408473768,ny=1.0507009873554805,ry=.3275911,Ep=.254829592,Sm=-.284496736,xx=1.421413741,iy=-1.453152027,sy=1.061405429;function mu(r,e){if(r.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${e.length}.`);const t=new Float32Array(2*r.length);for(let s=0;s<t.length;s+=2)t[s]=r[s/2],t[s+1]=e[s/2];return t}function jb(r){const e=new Float32Array(r.length/2),t=new Float32Array(r.length/2);for(let s=0;s<r.length;s+=2)e[s/2]=r[s],t[s/2]=r[s+1];return{real:e,imag:t}}function qb(r){const e=Math.ceil(r.length/4),t=new Float32Array(e),s=new Float32Array(e);for(let a=0;a<r.length;a+=4)t[Math.floor(a/4)]=r[a],s[Math.floor(a/4)]=r[a+1];return{real:t,imag:s}}function Xb(r){const e=Math.floor(r.length/4),t=new Float32Array(e),s=new Float32Array(e);for(let a=2;a<r.length;a+=4)t[Math.floor(a/4)]=r[a],s[Math.floor(a/4)]=r[a+1];return{real:t,imag:s}}function vx(r,e){return{real:r[2*e],imag:r[2*e+1]}}function Yb(r,e,t,s){r[2*s]=e,r[2*s+1]=t}function Kb(r,e){const t=new Float32Array(r/2),s=new Float32Array(r/2);for(let a=0;a<Math.ceil(r/2);a++){const l=(e?2:-2)*Math.PI*(a/r);t[a]=Math.cos(l),s[a]=Math.sin(l)}return{real:t,imag:s}}function Zb(r,e,t){const s=(t?2:-2)*Math.PI*(r/e);return{real:Math.cos(s),imag:Math.sin(s)}}const B_=/->/g;function bx(r,e){const t=((r=r.replace(/\s/g,"")).length-r.replace(B_,"").length)/2;if(t<1)throw new Error("Equations without an arrow are not supported.");if(t>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,a]=r.split("->");Q(s.indexOf("...")===-1,()=>'The ellipsis notation ("...") is not supported yet.');const l=s.split(","),c=l.length;if(e!==c)throw new Error(`Expected ${c} input tensors, received ${e}`);if(c>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const d=[];for(let x=0;x<a.length;++x){const _=a[x];if(!l.some(A=>A.indexOf(_)!==-1))throw new Error(`Output subscripts contain the label ${_} not present in the input subscripts.`);d.indexOf(_)===-1&&d.push(_)}for(let x=0;x<s.length;++x){const _=s[x];d.indexOf(_)===-1&&_!==","&&d.push(_)}const m=new Array(l.length);for(let x=0;x<c;++x){if(new Set(l[x].split("")).size!==l[x].length)throw new Error(`Found duplicate axes in input component ${l[x]}. Support for duplicate axes in input is not implemented yet.`);m[x]=[];for(let _=0;_<l[x].length;++_)m[x].push(d.indexOf(l[x][_]))}const f=d.length,y=[];for(let x=a.length;x<f;++x)y.push(x);return{allDims:d,summedDims:y,idDims:m}}function wx(r,e){let t=new Array(r);t.fill(-1);for(let a=0;a<e.length;++a)t[e[a]]=a;const s=[];for(let a=0;a<r;++a)t[a]===-1&&s.push(a);return t=t.filter(a=>a!==-1),{permutationIndices:t,expandDims:s}}function _x(r,e,t){const s=new Array(r);for(let a=0;a<t.length;++a){const l=t[a].shape;for(let c=0;c<e[a].length;++c)s[e[a][c]]===void 0?s[e[a][c]]=l[c]:Q(s[e[a][c]]===l[c],()=>`Expected dimension ${s[e[a][c]]} at axis ${c} of input shaped ${JSON.stringify(l)}, but got dimension ${l[c]}`)}}function Sx(r,e){const t=r,s=[];let a=0;r.length===0&&t.push(-1),a=r.length+1;for(let c=0;c<a;++c)s.push([]);const l=[];for(let c=0;c<t.length;++c){const d=$_(e,t[c]);for(const m of d)l.indexOf(m)===-1&&(s[c].push(m),l.push(m))}return{path:t,steps:s}}function Mx(r){return r.every((e,t)=>e===t)}function $_(r,e){const t=[];for(let s=0;s<r.length;++s)r[s].length!==0&&r[s].indexOf(e)===-1&&e!==-1||t.push(s);return t}function Tx(r,e,t=0){let s=[];if(typeof e=="number")Q(r.shape[t]%e==0,()=>"Number of splits must evenly divide the axis."),s=new Array(e).fill(r.shape[t]/e);else{Q(e.reduce((l,c)=>(c===-1&&(l+=1),l),0)<=1,()=>"There should be only one negative value in split array.");const a=e.indexOf(-1);if(a!==-1){const l=e.reduce((c,d)=>d>0?c+d:c);e[a]=r.shape[t]-l}Q(r.shape[t]===e.reduce((l,c)=>l+c),()=>"The sum of sizes must match the size of the axis dimension."),s=e}return s}function Jb(r,e){let t,s=!1;for(r<=Jg?(t=r,s=!0):t=uo(r,Math.floor(Math.sqrt(r)));!s;)t>e||t===r?s=!0:t=uo(r,t+1);return t}function Qb(r,e,t){const s=[],a=r.length;for(let l=0;l<a;l++)l!==e?s.push(r[l]):s.push(t);return s}function Ex(r,e,t,s){const a=e.shape.length,l=r.shape.length;if(s!==0&&(s<-a||s>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${s}`);if(s<0&&(s+=a),s>l)throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${l}).`);if(t<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${t}).`);for(let x=0;x<s;++x)if(r.shape[x]!==e.shape[x])throw new Error(`x.shape[${x}]: ${r.shape[x]} should be equal to indices.shape[${x}]: ${e.shape[x]}.`);const c=r.shape[t],d=[];let m=1,f=1,y=1;for(let x=0;x<s;++x)d.push(r.shape[x]),m*=r.shape[x];for(let x=s;x<t;x++)d.push(r.shape[x]),f*=r.shape[x];for(let x=s;x<a;x++)d.push(e.shape[x]);for(let x=t+1;x<l;x++)d.push(r.shape[x]),y*=r.shape[x];return{batchSize:m,sliceSize:y,outerSize:f,dimSize:c,outputShape:d}}function Uh(r){try{return r.map(e=>Mr(e))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function ew(r){return r.map(e=>Ya(e))}const tw={kernelName:Us,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(r,Dh(un(t,"float32"),-1))}}},U_={kernelName:oi,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>{const s=ei(un(t,"float32")),a=Ts(kn(Yn(1),s));return ti(Un(r,a))}}}},V_={kernelName:ds,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>{const s=Ts(kn(ei(un(t,"float32")),1));return Un(r,s)}}}},W_={kernelName:li,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e,a=mr(t.shape,s.shape);return{a:()=>{let l=r;const c=Ei(t.shape,a);return c.length>0&&(l=Ln(l,c)),Xe(l,t.shape)},b:()=>{let l=r;const c=Ei(s.shape,a);return c.length>0&&(l=Ln(l,c)),Xe(l,s.shape)}}}},G_={kernelName:Lc,saveAllInputs:!0,gradFunc:(r,e)=>{const t={};return e.forEach((s,a)=>{t[a]=()=>r.clone()}),t}},H_={kernelName:rd,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Fr(t)}}},j_={kernelName:Dc,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Fr(t)}}},q_={kernelName:Lu,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Un(r,Ts(kn(Yn(1),ei(un(t,"float32")))))}}},X_={kernelName:Pc,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>{const s=Ts(jt(Yn(1),ei(un(t,"float32"))));return Un(r,s)}}}},Y_={kernelName:zc,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e,a=mr(t.shape,s.shape);return{a:()=>{const l=jt(ei(t),ei(s));let c=qe(r,Un(s,l));const d=Ei(t.shape,a);return d.length>0&&(c=Ln(c,d)),Xe(c,t.shape)},b:()=>{const l=jt(ei(t),ei(s));let c=ti(qe(r,Un(t,l)));const d=Ei(s.shape,a);return d.length>0&&(c=Ln(c,d)),Xe(c,s.shape)}}}},K_={kernelName:Fc,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Un(r,jt(ei(un(t,"float32")),1))}}},Z_={kernelName:Oc,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Un(r,kn(Yn(1),ei(un(t,"float32"))))}}},J_=$e({avgPool3dGrad_:function(r,e,t,s,a,l){const c=ge(r,"dy","avgPool3dGrad"),d=ge(e,"input","avgPool3dGrad");let m=c,f=d,y=!1;d.rank===4&&(y=!0,m=Xe(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]]),f=Xe(d,[1,d.shape[0],d.shape[1],d.shape[2],d.shape[3]])),Q(m.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${m.rank}.`),Q(f.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${f.rank}.`),l!=null&&Q(_t(a),()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${l} but got pad ${a}.`);const x={dy:m,input:f},_={filterSize:t,strides:s,pad:a,dimRoundingMode:l},A=Ge.runKernel(af,x,_);return y?Xe(A,[A.shape[1],A.shape[2],A.shape[3],A.shape[4]]):A}}),Q_={kernelName:sd,inputsToSave:["x"],gradFunc:(r,e,t)=>{const[s]=e,{filterSize:a,strides:l,pad:c,dimRoundingMode:d}=t;return{x:()=>J_(r,s,a,l,c,d)}}},eS=$e({avgPoolGrad_:function(r,e,t,s,a){const l=ge(r,"dy","avgPoolGrad"),c=ge(e,"input","avgPoolGrad");Q(c.rank===l.rank,()=>`Rank of input (${c.rank}) does not match rank of dy (${l.rank})`);let d=c,m=l,f=!1;c.rank===3&&(f=!0,d=Xe(c,[1,c.shape[0],c.shape[1],c.shape[2]]),m=Xe(l,[1,l.shape[0],l.shape[1],l.shape[2]])),Q(m.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${m.rank}.`),Q(d.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${d.rank}.`);const y={dy:m,input:d},x={filterSize:t,strides:s,pad:a},_=Ge.runKernel(sf,y,x);return f?Xe(_,[_.shape[1],_.shape[2],_.shape[3]]):_}}),tS={kernelName:id,inputsToSave:["x"],gradFunc:(r,e,t)=>{const[s]=e,{filterSize:a,strides:l,pad:c}=t;return{x:()=>eS(r,s,a,l,c)}}},T={kernelName:ad,inputsToSave:["a","b"],gradFunc:(r,e,t)=>{const[s,a]=e,{transposeA:l,transposeB:c}=t;return l||c?!l&&c?{a:()=>wr(r,a,!1,!1),b:()=>wr(r,s,!0,!1)}:l&&!c?{a:()=>wr(a,r,!1,!0),b:()=>wr(s,r,!1,!1)}:{a:()=>wr(a,r,!0,!0),b:()=>wr(r,s,!0,!0)}:{a:()=>wr(r,a,!1,!0),b:()=>wr(s,r,!0,!1)}}},n={kernelName:od,gradFunc:(r,e,t)=>{const{blockShape:s,crops:a}=t;return{x:()=>mp(r,s,a)}}},o={kernelName:v0,gradFunc:(r,e,t)=>{const s=t,a=s.inputShape,l=s.shape,c=Array.from(l);for(let m=a.length-1;m>=0;m--)if(a[m]===l[m])c[m]=1;else if(a[m]!==1)throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${l}].`);const d=[];for(let m=0;m<c.length;m++)c[m]>1&&d.push(m);return{x:()=>Ln(r,d,!0)}}},h={kernelName:Bc,gradFunc:r=>({x:()=>r.clone()})},p={kernelName:$c,gradFunc:r=>({x:()=>Fr(r)})},w={kernelName:Uc,inputsToSave:["x"],gradFunc:(r,e,t)=>{const[s]=e,{clipValueMin:a,clipValueMax:l}=t;return{x:()=>as(va(_o(s,a),kl(s,l)),r,Fr(r))}}},S={kernelName:ld,inputsToSave:["x"],gradFunc:tw.gradFunc},I={kernelName:ud,saveAllInputs:!0,gradFunc:(r,e,t)=>{const s=e.map(d=>d.shape),{axis:a}=t,l=ir(a,e[0].shape)[0],c=s.map(d=>d[l]);return Qs(r,c,l).map(d=>()=>d)}},k={kernelName:cd,inputsToSave:["x","filter"],gradFunc:(r,e,t)=>{const[s,a]=e,{dilations:l,strides:c,pad:d,dataFormat:m}=t;return Q(lu(l),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${l}'`),{x:()=>lp(s.shape,r,a,c,d,m),filter:()=>ym(s,r,a.shape,c,d,m)}}},R={kernelName:hd,inputsToSave:["dy","filter"],gradFunc:(r,e,t)=>{const[s,a]=e,{strides:l,pad:c,dataFormat:d,dimRoundingMode:m}=t;return{dy:()=>Al(r,a,l,c,d,1,m),filter:()=>ym(r,s,a.shape,l,c,d,m)}}},$=$e({conv3DBackpropFilter_:function(r,e,t,s,a){let l=r;r.rank===4&&(l=Xe(r,[1,r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));let c=e;c.rank===4&&(c=Xe(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),Q(l.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${l.shape}.`),Q(c.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${c.shape}.`),Q(t.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${t}.`),Q(l.shape[4]===t[3],()=>`Error in conv3dDerFilter: depth of input ${l.shape[4]}) must match input depth in filter (${t[3]}.`),Q(c.shape[4]===t[4],()=>`Error in conv3dDerFilter: depth of dy (${c.shape[4]}) must match output depth for filter (${t[4]}).`);const d={x:l,dy:c},m={strides:s,pad:a,filterShape:t};return Ge.runKernel(cf,d,m)}}),j={kernelName:dd,inputsToSave:["x","filter"],gradFunc:(r,e,t)=>{const{dilations:s,strides:a,pad:l}=t;Q(lu(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[c,d]=e;return{x:()=>H0(c.shape,r,d,a,l),filter:()=>$(c,r,d.shape,a,l)}}},H={kernelName:Vc,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(ti(um(un(t,"float32"))),r)}}},Y={kernelName:Wc,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(gs(un(t,"float32")),r)}}},ee={kernelName:pd,inputsToSave:["x"],gradFunc:(r,e,t)=>{const[s]=e,{axis:a,exclusive:l,reverse:c}=t;return{x:()=>{const d=Hi([a],s.rank);let m=Zf(r,a,l,!c);return d!=null&&(m=Pr(m,d)),m}}}},te={kernelName:fd,inputsToSave:["x","filter"],gradFunc:(r,e,t)=>{const{dilations:s,strides:a,pad:l,dimRoundingMode:c}=t,d=s==null?[1,1]:s;Q(lu(d),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${d}'`);const[m,f]=e;return Q(m.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${m.rank}.`),Q(f.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${f.rank}.`),Q(m.shape[3]===f.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`),Q(es(a,d),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${d}'.`),c!=null&&Q(_t(l),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${c} but got pad ${l}.`),{x:()=>cx(m.shape,r,f,a,l,d,c),filter:()=>ux(m,r,f.shape,a,l,d,c)}}},ae={kernelName:Fo,inputsToSave:["x","filter"],gradFunc:(r,e,t)=>{const[s,a]=e,l={x:s,filter:a,dy:r},c={x:s,filter:a,dy:r};return{x:()=>Ge.runKernel(gl,l,t),filter:()=>Ge.runKernel(Fu,c,t)}}},ne={kernelName:Hc,outputsToSave:[!0],gradFunc:(r,e)=>{const[t]=e,s={dy:r,y:t};return{x:()=>Ge.runKernel(jm,s)}}},me={kernelName:gd,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e,s=qe(Zs(ti(ei(t))),2/Math.sqrt(Math.PI));return{x:()=>qe(r,s)}}},_e={kernelName:yl,outputsToSave:[!0],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(r,t)}}},ve={kernelName:Ou,inputsToSave:["input"],gradFunc:(r,e)=>{const[t]=e;return{input:()=>Xe(r,t.shape)}}},Ne={kernelName:Vl,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(r,Zs(t))}}},Oe={kernelName:zu,gradFunc:r=>({x:()=>Fr(r)})},tt={kernelName:jc,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e,a=mr(t.shape,s.shape);return{a:()=>{const l=Un(r,un(s,"float32")),c=Ei(t.shape,a);return c.length>0?Xe(Ln(l,c),t.shape):l},b:()=>{let l=qe(r,un(t,"float32"));const c=Ei(s.shape,a);c.length>0&&(l=Xe(Ln(l,c),s.shape));const d=ei(s);return ti(Un(l,un(d,"float32")))}}}},it={kernelName:vd,inputsToSave:["x","mean","variance","scale"],gradFunc:(r,e,t)=>{const{varianceEpsilon:s}=t,[a,l,c,d]=e,m=d==null?Yn(1):d,f=Ei(l.shape,a.shape),y=[];if(l.rank===1){for(let L=0;L<a.shape.length-1;++L)y.push(a.shape[L]);y.push(1)}const x=kn(a,l),_=qe(r,m),A=pc(jt(c,Yn(s))),C=qe(qe(qe(A,A),A),Yn(-.5));return{x:()=>l.rank===1?Xe(qe(qe(r,ya(Xe(A,[1,1,1,l.shape[0]]),y)),m),a.shape):Xe(qe(qe(r,A),m),a.shape),mean:()=>{let L=qe(qe(A,Yn(-1)),_);return l.rank===1&&(L=Ln(L,f)),Xe(L,l.shape)},variance:()=>{let L=qe(qe(C,x),_);return l.rank===1&&(L=Ln(L,f)),Xe(L,l.shape)},scale:()=>{const L=qe(x,A);let P=qe(r,L);return l.rank===1&&(P=Ln(P,f)),Xe(P,l.shape)},offset:()=>{let L=r;return l.rank===1&&(L=Ln(L,f)),Xe(L,l.shape)}}}},gt={kernelName:Oo,inputsToSave:["x","indices"],gradFunc:(r,e,t)=>{const[s,a]=e,{axis:l}=t,c=ir(l,s.shape)[0];return{x:()=>{const d=s.shape,m=a.size,f=d.slice(0,c),y=f.length,x=d.slice(l,d.length).slice(1),_=x.length,A=ut(0,y),C=ut(y+1,y+1+_),L=ct([f,[m],x]),P=Xe(r,L),U=Xe(a,[m]),q=ct([[y],A,C]),X=Pr(P,q);let re=$g(X,U,s.shape[c]);const oe=ni(q);return re=Pr(re,oe),re},indices:()=>a}}};function ut(r,e){const t=[];for(let s=r;s<e;++s)t.push(s);return t}function ct(r){const e=[];for(let t=0;t<r.length;++t)for(let s=0;s<r[t].length;++s)e.push(r[t][s]);return e}const an={kernelName:Wl,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e;return{a:()=>Fr(t),b:()=>Fr(s)}}},Gt={kernelName:bd,gradFunc:r=>({x:()=>un(r,"float32")})},Lt={kernelName:wd,gradFunc:r=>({x:()=>Fr(r)})},Yt={kernelName:_d,gradFunc:r=>({x:()=>Fr(r)})},Tn={kernelName:Sd,gradFunc:r=>({x:()=>Fr(r)})},In={kernelName:xf,inputsToSave:["x"],gradFunc:(r,e,t)=>{const[s]=e,{alpha:a}=t,l=Js(s,0);return{x:()=>as(l,r,qe(r,a))}}},Pn={kernelName:Td,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Un(r,jt(t,1))}}},nr={kernelName:Md,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Un(r,un(t,"float32"))}}},er={kernelName:qc,inputsToSave:[],outputsToSave:[!0],gradFunc:(r,e,t)=>{const[s]=e,{axis:a}=t;return{logits:()=>{const l=Zs(s);return kn(r,qe(Ln(r,a,!0),l))}}}},ke=$e({localResponseNormalizationBackprop_:function(r,e,t,s=5,a=1,l=1,c=.5){const d={x:r,y:e,dy:t},m={depthRadius:s,bias:a,alpha:l,beta:c};return Ge.runKernel(Km,d,m)}}),Ue={kernelName:_f,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{const[s,a]=e,{depthRadius:l,bias:c,alpha:d,beta:m}=t;return{x:()=>ke(s,a,r,l,c,d,m)}}};function Dt(r,e,t,s){return e.rank<t.rank&&(e=Xe(e,Gi(e.shape,s))),r.rank<t.rank&&(r=Xe(r,Gi(r.shape,s))),{x:()=>qe(r,un(Ls(t,e),r.dtype))}}const zt={kernelName:Sf,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{const s=t,{reductionIndices:a}=s,l=e[0],c=Dt(r,e[1],l,ir(a,l.shape));return{x:()=>c.x()}}},Pt={kernelName:Ad,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e;return{a:()=>qe(r,un(_o(t,s),"float32")),b:()=>qe(r,un(Ch(t,s),"float32"))}}},Kt=$e({maxPool3dGrad_:function(r,e,t,s,a,l,c){const d=ge(r,"dy","maxPool3dGrad"),m=ge(e,"input","maxPool3dGrad"),f=ge(t,"output","maxPool3dGrad");let y=d,x=m,_=f,A=!1;m.rank===4&&(A=!0,y=Xe(d,[1,d.shape[0],d.shape[1],d.shape[2],d.shape[3]]),x=Xe(m,[1,m.shape[0],m.shape[1],m.shape[2],m.shape[3]]),_=Xe(f,[1,f.shape[0],f.shape[1],f.shape[2],f.shape[3]])),Q(y.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${y.rank}.`),Q(x.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${x.rank}.`),Q(_.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${_.rank}.`),c!=null&&Q(_t(l),()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${c} but got pad ${l}.`);const C={dy:y,input:x,output:_},L={filterSize:s,strides:a,pad:l,dimRoundingMode:c},P=Ge.runKernel(Jm,C,L);return A?Xe(P,[P.shape[1],P.shape[2],P.shape[3],P.shape[4]]):P}}),gn={kernelName:Tf,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{const[s,a]=e,{filterSize:l,strides:c,pad:d,dimRoundingMode:m}=t;return{x:()=>Kt(r,s,a,l,c,d,m)}}},dn=$e({maxPoolGrad_:function(r,e,t,s,a,l,c){const d=ge(r,"dy","maxPoolGrad"),m=ge(e,"input","maxPoolGrad"),f=ge(t,"output","maxPoolGrad");Q(m.rank===d.rank,()=>`Rank of input (${m.rank}) does not match rank of dy (${d.rank})`),Q(d.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${d.rank}.`),Q(m.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${m.rank}.`),c!=null&&Q(_t(l),()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${c} but got pad ${l}.`);const y={dy:d,input:m,output:f},x={filterSize:s,strides:a,pad:l,dimRoundingMode:c};return Ge.runKernel(Zm,y,x)}}),mt={kernelName:bl,inputsToSave:["x"],gradFunc:(r,e,t)=>{const s=e[0],{paddings:a}=t,l=a.map(c=>c[0]);return{x:()=>Nr(r,l,s.shape)}}},Ae={kernelName:Pd,gradFunc:(r,e,t)=>{const{blockShape:s,paddings:a}=t;return{x:()=>uu(r,s,a)}}},dt={kernelName:Zc,gradFunc:(r,e,t)=>{const{axis:s}=t;return{x:()=>bi(r,s)}}},$t=[tw,U_,V_,W_,G_,H_,j_,q_,X_,Y_,K_,Z_,Q_,tS,T,n,o,h,p,w,S,I,R,k,j,H,Y,ee,te,ae,{kernelName:Ul,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e,a=mr(t.shape,s.shape);return{a:()=>{const l=Un(r,un(s,"float32")),c=Ei(t.shape,a);return c.length>0?Xe(Ln(l,c),t.shape):l},b:()=>{let l=qe(r,un(t,"float32"));const c=Ei(s.shape,a);c.length>0&&(l=Xe(Ln(l,c),s.shape));const d=ei(s);return ti(Un(l,un(d,"float32")))}}}},ne,me,_e,ve,Ne,tt,Oe,it,gt,an,Gt,Lt,Yt,Tn,In,Pn,nr,er,Ue,zt,zt,Pt,gn,{kernelName:Mf,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{const[s,a]=e,{filterSize:l,strides:c,pad:d}=t;return{x:()=>dn(r,s,a,l,c,d)}}},{kernelName:co,inputsToSave:["x"],gradFunc:(r,e,t)=>{const[s]=e,{axis:a}=t,l=ir(a,s.shape),c=he(ts(s.shape,l)[1]);return{x:()=>{const d=s.shape.slice();l.forEach(f=>{d[f]=1});const m=Xe(r,d);return Un(qe(m,ba(s.shape,"float32")),c)}}}},{kernelName:Ki,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{const s=t,{axis:a}=s,[l,c]=e,d=Dt(r,c,l,ir(a,l.shape));return{x:()=>d.x()}}},{kernelName:Gl,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e;return{a:()=>qe(r,un(kl(t,s),"float32")),b:()=>qe(r,un(Js(t,s),"float32"))}}},{kernelName:zo,inputsToSave:["x"],gradFunc:(r,e,t)=>{const s=e[0],{paddings:a}=t,l=a.map(c=>c[0]);return{x:()=>Nr(r,l,s.shape)}}},{kernelName:vl,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e,a=mr(t.shape,s.shape);return{a:()=>{const l=Ei(t.shape,a);return l.length>0?Xe(Ln(r,l),t.shape):r},b:()=>{const l=qe(r,ti(sc(Un(t,s)))),c=Ei(s.shape,a);return c.length>0?Xe(Ln(l,c),s.shape):l}}}},{kernelName:Vi,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e,a=mr(t.shape,s.shape);return{a:()=>{const l=qe(r,un(s,"float32")),c=Ei(t.shape,a);return c.length>0?Xe(Ln(l,c),t.shape):l},b:()=>{const l=qe(r,un(t,"float32")),c=Ei(s.shape,a);return c.length>0?Xe(Ln(l,c),s.shape):l}}}},{kernelName:Xc,gradFunc:r=>({x:()=>ti(r)})},{kernelName:Qt,inputsToSave:["indices"],gradFunc:(r,e)=>{const t=e[0];return{indices:()=>ji(t.shape,"float32")}}},{kernelName:kd,gradFunc:r=>({x:()=>Fr(r)})},{kernelName:Ni,saveAllInputs:!0,gradFunc:(r,e,t)=>{const{axis:s}=t;return Pa(r,s).map(a=>()=>a)}},mt,mt,{kernelName:Nd,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(r,e)=>{const[t,s,a]=e,l=t,c=s,d=mr(l.shape,c.shape);return{a:()=>{const m=un(c,"float32");let f=qe(r,qe(m,Jo(l,kn(m,Yn(1)))));const y=Ei(l.shape,d);return y.length>0&&(f=Ln(f,y)),Xe(f,l.shape)},b:()=>{const m=Js(l,0),f=as(m,xa(l),Fr(l));let y=qe(r,qe(a,f));const x=Ei(c.shape,d);return x.length>0&&(y=Ln(y,x)),Xe(y,c.shape)}}}},{kernelName:Ri,inputsToSave:["x","alpha"],gradFunc:(r,e)=>{const[t,s]=e,a=Js(t,0);return{x:()=>as(a,r,qe(r,s)),alpha:()=>{let l=as(a,Fr(r),qe(r,t));const c=Ei(s.shape,r.shape);return c.length>0&&(l=Ln(l,c)),Xe(l,s.shape)}}}},{kernelName:Kc,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Un(r,ti(ei(t)))}}},{kernelName:Aa,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e,s=qe(kl(t,6),Dh(t));return{x:()=>qe(r,un(s,"float32"))}}},{kernelName:Bu,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(r,un(Dh(t),"float32"))}}},{kernelName:Zi,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Xe(r,t.shape)}}},{kernelName:Dd,inputsToSave:["images"],gradFunc:(r,e,t)=>{const[s]=e,a={dy:r,images:s};return{images:()=>Ge.runKernel(Ws,a,t)}}},{kernelName:Te,inputsToSave:["images"],gradFunc:(r,e,t)=>{const[s]=e,a={dy:r,images:s};return{images:()=>Ge.runKernel(Ld,a,t)}}},{kernelName:jl,gradFunc:(r,e,t)=>{const{dims:s}=t,a=ir(s,r.shape);return{x:()=>os(r,a)}}},{kernelName:$u,gradFunc:r=>({x:()=>Fr(r)})},{kernelName:Bo,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>ti(Un(r,qe(Jo(t,1.5),2)))}}},{kernelName:wl,inputsToSave:["condition"],gradFunc:(r,e)=>{const[t]=e;return{condition:()=>un(Fr(t),"float32"),t:()=>qe(r,un(t,r.dtype)),e:()=>qe(r,un(oc(t),r.dtype))}}},{kernelName:qa,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>{const s=Js(t,Yn(0)),a=Yn(ty),l=Yn(ny),c=qe(r,l),d=qe(qe(r,a),Zs(un(t,"float32")));return as(s,c,d)}}}},{kernelName:Yl,outputsToSave:[!0],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(r,qe(t,kn(Yn(1),t)))}}},{kernelName:Xl,gradFunc:r=>({x:()=>Fr(r)})},{kernelName:po,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(Th(un(t,"float32")),r)}}},{kernelName:_l,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(Kf(un(t,"float32")),r)}}},{kernelName:ho,inputsToSave:["x"],gradFunc:(r,e,t)=>{const[s]=e,{begin:a,size:l}=t,c=s.shape,[d,m]=yg(s,a,l),f=[];for(let y=0;y<r.rank;y++)f.push([d[y],c[y]-d[y]-m[y]]);return{x:()=>Na(r,f)}}},{kernelName:Jc,outputsToSave:[!0],gradFunc:(r,e,t)=>{const[s]=e,{dim:a}=t,l=qe(r,s);return{logits:()=>kn(l,qe(Ln(l,[a],!0),s))}}},{kernelName:fo,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(r,Rs(t))}}},Ae,Ae,dt,dt,{kernelName:Uu,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Un(r,qe(Ts(un(t,"float32")),2))}}},{kernelName:Vu,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e,a=Yn(2);return{a:()=>qe(r,qe(a,kn(t,s))),b:()=>qe(r,qe(a,kn(s,t)))}}},{kernelName:eh,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(r,qe(un(t,"float32"),2))}}},{kernelName:rh,gradFunc:r=>({x:()=>Fr(r)})},{kernelName:Gs,inputsToSave:["a","b"],gradFunc:(r,e)=>{const[t,s]=e,a=mr(t.shape,s.shape);return{a:()=>{let l=r;const c=Ei(t.shape,a);return c.length>0&&(l=Ln(l,c)),Xe(l,t.shape)},b:()=>{let l=r;const c=Ei(s.shape,a);return c.length>0&&(l=Ln(l,c)),Xe(ti(l),s.shape)}}}},{kernelName:If,inputsToSave:["x"],gradFunc:(r,e,t)=>{const[s]=e,a=s.shape.slice(),{axis:l}=t;ir(l,s.shape).forEach(m=>{a[m]=1});const c=Xe(r,a),d=qe(c,ba(s.shape,"float32"));return{x:()=>d}}},{kernelName:zd,inputsToSave:["x"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>Un(r,ei(Th(t)))}}},{kernelName:Bd,outputsToSave:[!0],gradFunc:(r,e)=>{const[t]=e;return{x:()=>qe(kn(Yn(1),ei(t)),r)}}},{kernelName:Xa,inputsToSave:["x"],gradFunc:(r,e,t)=>{const[s]=e,{reps:a}=t;return{x:()=>{let l=Fr(s);if(s.rank===1)for(let c=0;c<a[0];++c)l=jt(l,Nr(r,[c*s.shape[0]],[s.shape[0]]));else if(s.rank===2)for(let c=0;c<a[0];++c)for(let d=0;d<a[1];++d)l=jt(l,Nr(r,[c*s.shape[0],d*s.shape[1]],[s.shape[0],s.shape[1]]));else if(s.rank===3)for(let c=0;c<a[0];++c)for(let d=0;d<a[1];++d)for(let m=0;m<a[2];++m)l=jt(l,Nr(r,[c*s.shape[0],d*s.shape[1],m*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(s.rank!==4)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let c=0;c<a[0];++c)for(let d=0;d<a[1];++d)for(let m=0;m<a[2];++m)for(let f=0;f<a[3];++f)l=jt(l,Nr(r,[c*s.shape[0],d*s.shape[1],m*s.shape[2],f*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return l}}}},{kernelName:$d,gradFunc:(r,e,t)=>{const s=t,{perm:a}=s,l=ni(a);return{x:()=>Pr(r,l)}}},{kernelName:Wo,gradFunc:(r,e,t)=>{const s=t,{axis:a}=s;return{value:()=>ea(r,a)}}},{kernelName:nh,inputsToSave:["segmentIds"],gradFunc:(r,e)=>{const[t]=e;return{x:()=>function(s,a){const l=Qa(a,Fr(a)),c=hu(s,l);let d=_o(a,Yn(0,"int32"));const m=c.rank-d.rank;for(let y=0;y<m;++y)d=Ds(d,y+1);d=va(d,ba(c.shape,"bool"));const f=Fr(c);return as(d,c,f)}(r,t)}}},{kernelName:kf,gradFunc:r=>({x:()=>Fr(r)})}];for(const r of $t)Cr(r);let kt;function Nt(){return kt==null&&(kt=bb().epsilon()),kt}Tt().prototype.abs=function(){return this.throwIfDisposed(),ur(this)},Tt().prototype.acos=function(){return this.throwIfDisposed(),ec(this)},Tt().prototype.acosh=function(){return this.throwIfDisposed(),xh(this)},Tt().prototype.add=function(r){return this.throwIfDisposed(),jt(this,r)},Tt().prototype.all=function(r,e){return this.throwIfDisposed(),au(this,r,e)},Tt().prototype.any=function(r,e){return this.throwIfDisposed(),El(this,r,e)},Tt().prototype.argMax=function(r){return this.throwIfDisposed(),el(this,r)},Tt().prototype.argMin=function(r){return this.throwIfDisposed(),_g(this,r)},Tt().prototype.asScalar=function(){return this.throwIfDisposed(),Q(this.size===1,()=>"The array must have only 1 element."),Xe(this,[])},Tt().prototype.asType=function(r){return this.throwIfDisposed(),un(this,r)},Tt().prototype.as1D=function(){return this.throwIfDisposed(),Xe(this,[this.size])},Tt().prototype.as2D=function(r,e){return this.throwIfDisposed(),Xe(this,[r,e])},Tt().prototype.as3D=function(r,e,t){return this.throwIfDisposed(),Xe(this,[r,e,t])},Tt().prototype.as4D=function(r,e,t,s){return this.throwIfDisposed(),Xe(this,[r,e,t,s])},Tt().prototype.as5D=function(r,e,t,s,a){return this.throwIfDisposed(),Xe(this,[r,e,t,s,a])},Tt().prototype.asin=function(){return this.throwIfDisposed(),rp(this)},Tt().prototype.asinh=function(){return this.throwIfDisposed(),bh(this)},Tt().prototype.atan=function(){return this.throwIfDisposed(),ip(this)},Tt().prototype.atan2=function(r){return this.throwIfDisposed(),Sg(this,r)},Tt().prototype.atanh=function(){return this.throwIfDisposed(),Xf(this)},Tt().prototype.avgPool=function(r,e,t,s){return this.throwIfDisposed(),ap(this,r,e,t,s)},Tt().prototype.batchToSpaceND=function(r,e){return this.throwIfDisposed(),uu(this,r,e)},Tt().prototype.batchNorm=function(r,e,t,s,a){return this.throwIfDisposed(),nc(this,r,e,t,s,a)},Tt().prototype.broadcastTo=function(r){return this.throwIfDisposed(),cu(this,r)},Tt().prototype.cast=function(r){return this.throwIfDisposed(),un(this,r)},Tt().prototype.ceil=function(){return this.throwIfDisposed(),tl(this)},Tt().prototype.clipByValue=function(r,e){return this.throwIfDisposed(),Ks(this,r,e)},Tt().prototype.concat=function(r,e){return this.throwIfDisposed(),r instanceof Ur&&(r=[r]),bi([this,...r],e)},Tt().prototype.conv1d=function(r,e,t,s,a,l){return this.throwIfDisposed(),op(this,r,e,t,s,a,l)},Tt().prototype.conv2dTranspose=function(r,e,t,s,a){return this.throwIfDisposed(),Sh(this,r,e,t,s,a)},Tt().prototype.conv2d=function(r,e,t,s,a,l){return this.throwIfDisposed(),Al(this,r,e,t,s,a,l)},Tt().prototype.cos=function(){return this.throwIfDisposed(),Th(this)},Tt().prototype.cosh=function(){return this.throwIfDisposed(),Kf(this)},Tt().prototype.cumsum=function(r,e,t){return this.throwIfDisposed(),Zf(this,r,e,t)},Tt().prototype.depthToSpace=function(r,e){return this.throwIfDisposed(),Il(this,r,e)},Tt().prototype.depthwiseConv2d=function(r,e,t,s,a,l){return this.throwIfDisposed(),nl(this,r,e,t,s,a,l)},Tt().prototype.dilation2d=function(r,e,t,s,a){return this.throwIfDisposed(),ic(this,r,e,t,s,a)},Tt().prototype.divNoNan=function(r){return this.throwIfDisposed(),Jf(this,r)},Tt().prototype.div=function(r){return this.throwIfDisposed(),Un(this,r)},Tt().prototype.dot=function(r){return this.throwIfDisposed(),Qf(this,r)},Tt().prototype.elu=function(){return this.throwIfDisposed(),Es(this)},Tt().prototype.equal=function(r){return this.throwIfDisposed(),Ls(this,r)},Tt().prototype.erf=function(){return this.throwIfDisposed(),Ah(this)},Tt().prototype.exp=function(){return this.throwIfDisposed(),Zs(this)},Tt().prototype.expandDims=function(r){return this.throwIfDisposed(),Ds(this,r)},Tt().prototype.expm1=function(){return this.throwIfDisposed(),up(this)},Tt().prototype.fft=function(){return this.throwIfDisposed(),vp(this)},Tt().prototype.flatten=function(){return this.throwIfDisposed(),Xe(this,[this.size])},Tt().prototype.floor=function(){return this.throwIfDisposed(),sc(this)},Tt().prototype.floorDiv=function(r){return this.throwIfDisposed(),jf(this,r)},Tt().prototype.gather=function(r,e){return this.throwIfDisposed(),hu(this,r,e)},Tt().prototype.greaterEqual=function(r){return this.throwIfDisposed(),_o(this,r)},Tt().prototype.greater=function(r){return this.throwIfDisposed(),Js(this,r)},Tt().prototype.ifft=function(){return this.throwIfDisposed(),Lh(this)},Tt().prototype.irfft=function(){return this.throwIfDisposed(),hm(this)},Tt().prototype.isFinite=function(){return this.throwIfDisposed(),tm(this)},Tt().prototype.isInf=function(){return this.throwIfDisposed(),Ng(this)},Tt().prototype.isNaN=function(){return this.throwIfDisposed(),Ih(this)},Tt().prototype.leakyRelu=function(r){return this.throwIfDisposed(),cp(this,r)},Tt().prototype.lessEqual=function(r){return this.throwIfDisposed(),kl(this,r)},Tt().prototype.less=function(r){return this.throwIfDisposed(),Ch(this,r)},Tt().prototype.localResponseNormalization=function(r,e,t,s){return this.throwIfDisposed(),rm(this,r,e,t,s)},Tt().prototype.logSigmoid=function(){return this.throwIfDisposed(),_b(this)},Tt().prototype.logSoftmax=function(r){return this.throwIfDisposed(),Rg(this,r)},Tt().prototype.logSumExp=function(r,e){return this.throwIfDisposed(),Lg(this,r,e)},Tt().prototype.log=function(){return this.throwIfDisposed(),xa(this)},Tt().prototype.log1p=function(){return this.throwIfDisposed(),So(this)},Tt().prototype.logicalAnd=function(r){return this.throwIfDisposed(),va(this,r)},Tt().prototype.logicalNot=function(){return this.throwIfDisposed(),oc(this)},Tt().prototype.logicalOr=function(r){return this.throwIfDisposed(),lc(this,r)},Tt().prototype.logicalXor=function(r){return this.throwIfDisposed(),X0(this,r)},Tt().prototype.matMul=function(r,e,t){return this.throwIfDisposed(),wr(this,r,e,t)},Tt().prototype.maxPool=function(r,e,t,s){return this.throwIfDisposed(),hp(this,r,e,t,s)},Tt().prototype.max=function(r,e){return this.throwIfDisposed(),Mo(this,r,e)},Tt().prototype.maximum=function(r){return this.throwIfDisposed(),Qa(this,r)},Tt().prototype.mean=function(r,e){return this.throwIfDisposed(),Wr(this,r,e)},Tt().prototype.min=function(r,e){return this.throwIfDisposed(),im(this,r,e)},Tt().prototype.minimum=function(r){return this.throwIfDisposed(),il(this,r)},Tt().prototype.mirrorPad=function(r,e){return this.throwIfDisposed(),uc(this,r,e)},Tt().prototype.mod=function(r){return this.throwIfDisposed(),du(this,r)},Tt().prototype.mul=function(r){return this.throwIfDisposed(),qe(this,r)},Tt().prototype.neg=function(){return this.throwIfDisposed(),ti(this)},Tt().prototype.norm=function(r,e,t){return this.throwIfDisposed(),Ph(this,r,e,t)},Tt().prototype.notEqual=function(r){return this.throwIfDisposed(),eo(this,r)},Tt().prototype.oneHot=function(r,e=1,t=0){return this.throwIfDisposed(),Jd(this,r,e,t)},Tt().prototype.onesLike=function(){return this.throwIfDisposed(),ms(this)},Tt().prototype.pad=function(r,e){return this.throwIfDisposed(),Na(this,r,e)},Tt().prototype.pool=function(r,e,t,s,a){return this.throwIfDisposed(),Fg(this,r,e,t,s,a)},Tt().prototype.pow=function(r){return this.throwIfDisposed(),Jo(this,r)},Tt().prototype.prelu=function(r){return this.throwIfDisposed(),hc(this,r)},Tt().prototype.prod=function(r,e){return this.throwIfDisposed(),gp(this,r,e)},Tt().prototype.reciprocal=function(){return this.throwIfDisposed(),am(this)},Tt().prototype.relu=function(){return this.throwIfDisposed(),To(this)},Tt().prototype.relu6=function(){return this.throwIfDisposed(),La(this)},Tt().prototype.reshapeAs=function(r){return this.throwIfDisposed(),Xe(this,r.shape)},Tt().prototype.reshape=function(r){return this.throwIfDisposed(),Xe(this,r)},Tt().prototype.resizeBilinear=function(r,e,t){return this.throwIfDisposed(),Lb(this,r,e,t)},Tt().prototype.resizeNearestNeighbor=function(r,e,t){return this.throwIfDisposed(),Db(this,r,e,t)},Tt().prototype.reverse=function(r){return this.throwIfDisposed(),os(this,r)},Tt().prototype.rfft=function(){return this.throwIfDisposed(),fu(this)},Tt().prototype.round=function(){return this.throwIfDisposed(),Nl(this)},Tt().prototype.rsqrt=function(){return this.throwIfDisposed(),pc(this)},Tt().prototype.selu=function(){return this.throwIfDisposed(),fc(this)},Tt().prototype.separableConv2d=function(r,e,t,s,a,l){return this.throwIfDisposed(),tx(this,r,e,t,s,a,l)},Tt().prototype.sigmoid=function(){return this.throwIfDisposed(),Rs(this)},Tt().prototype.sign=function(){return this.throwIfDisposed(),lm(this)},Tt().prototype.sin=function(){return this.throwIfDisposed(),um(this)},Tt().prototype.sinh=function(){return this.throwIfDisposed(),gs(this)},Tt().prototype.slice=function(r,e){return this.throwIfDisposed(),Nr(this,r,e)},Tt().prototype.softmax=function(r){return this.throwIfDisposed(),pu(this,r)},Tt().prototype.softplus=function(){return this.throwIfDisposed(),kh(this)},Tt().prototype.spaceToBatchND=function(r,e){return this.throwIfDisposed(),mp(this,r,e)},Tt().prototype.split=function(r,e){return this.throwIfDisposed(),Qs(this,r,e)},Tt().prototype.sqrt=function(){return this.throwIfDisposed(),Ts(this)},Tt().prototype.square=function(){return this.throwIfDisposed(),ei(this)},Tt().prototype.squaredDifference=function(r){return this.throwIfDisposed(),sl(this,r)},Tt().prototype.squeeze=function(r){return this.throwIfDisposed(),ls(this,r)},Tt().prototype.stack=function(r,e){this.throwIfDisposed();const t=r instanceof Ur?[this,r]:[this,...r];return ea(t,e)},Tt().prototype.step=function(r){return this.throwIfDisposed(),Dh(this,r)},Tt().prototype.stridedSlice=function(r,e,t,s,a,l,c,d){return this.throwIfDisposed(),zg(this,r,e,t,s,a,l,c,d)},Tt().prototype.sub=function(r){return this.throwIfDisposed(),kn(this,r)},Tt().prototype.sum=function(r,e){return this.throwIfDisposed(),Ln(this,r,e)},Tt().prototype.tan=function(){return this.throwIfDisposed(),Bg(this)},Tt().prototype.tanh=function(){return this.throwIfDisposed(),tc(this)},Tt().prototype.tile=function(r){return this.throwIfDisposed(),ya(this,r)},Tt().prototype.toBool=function(){return this.throwIfDisposed(),un(this,"bool")},Tt().prototype.toFloat=function(){return this.throwIfDisposed(),un(this,"float32")},Tt().prototype.toInt=function(){return this.throwIfDisposed(),un(this,"int32")},Tt().prototype.topk=function(r,e){return this.throwIfDisposed(),pm(this,r,e)},Tt().prototype.transpose=function(r){return this.throwIfDisposed(),Pr(this,r)},Tt().prototype.unique=function(r){return this.throwIfDisposed(),bp(this,r)},Tt().prototype.unsortedSegmentSum=function(r,e){return this.throwIfDisposed(),$g(this,r,e)},Tt().prototype.unstack=function(r){return this.throwIfDisposed(),Pa(this,r)},Tt().prototype.where=function(r,e){return this.throwIfDisposed(),as(r,this,e)},Tt().prototype.zerosLike=function(){return this.throwIfDisposed(),Fr(this)};class bn extends Error{constructor(e){super(e),Object.setPrototypeOf(this,bn.prototype)}}class fn extends Error{constructor(e){super(e),Object.setPrototypeOf(this,fn.prototype)}}class Pe extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Pe.prototype)}}class mn extends Error{constructor(e){super(e),Object.setPrototypeOf(this,mn.prototype)}}class Br extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Br.prototype)}}function Ii(r,e){if(Array.isArray(r)){let t=[];for(let s=0;s<e;s++)t=t.concat(r);return t}{const t=new Array(e);return t.fill(r),t}}function Rr(r,e){if(!r)throw new Br(e)}function xs(r,e){let t=0;for(const s of r)s===e&&t++;return t}function ci(r){return r.length===1?r[0]:r}function Yr(r){return Array.isArray(r)?r:[r]}function wa(r){const e=r.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return e[0]!=="_"?e:"private"+e}function io(r){return r.length<=1||r.indexOf("_")===-1?r:r.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let Pi={};function ta(r){if(r==null)return null;const e={};return e.className=r.getClassName(),e.config=r.getConfig(),e}function en(r){if(r!=null&&typeof r=="object")if(Array.isArray(r))r.forEach(e=>en(e));else{const e=Object.keys(r);for(const t of e){const s=r[t];s!=null&&typeof s=="object"&&(Array.isArray(s)||s.type!=="ndarray"||typeof s.value!="number"?en(s):r[t]=s.value)}}}function Ap(r,e={},t={},s="object",a=!1){if(typeof r=="string"){const l=r;let c;if(l in t)c=t[l];else if(l in Pi)c=Pi[l];else if(c=e[l],c==null)throw new Pe(`Unknown ${s}: ${r}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return c}{const l=r;if(l.className==null||l.config==null)throw new Pe(`${s}: Improper config format: ${JSON.stringify(l)}.
'className' and 'config' must set.`);const c=l.className;let d,m;if(c in t?[d,m]=t[c]:c in Pi?[d,m]=Pi.className:c in e&&([d,m]=e[c]),d==null)throw new Pe(`Unknown ${s}: ${c}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(m!=null){const f={};for(const _ of Object.keys(Pi))f[_]=Pi[_];for(const _ of Object.keys(t))f[_]=t[_];l.config.customObjects=f;const y=Object.assign({},Pi);for(const _ of Object.keys(t))Pi[_]=t[_];en(l.config);const x=m(d,l.config,t,a);return Pi=Object.assign({},y),x}{const f=Object.assign({},Pi);for(const x of Object.keys(t))Pi[x]=t[x];const y=new d(l.config);return Pi=Object.assign({},f),y}}}function Mm(r,e){return-1*function(t,s){return t<s?-1:t>s?1:0}(r,e)}function cs(r){if(r==null)return r;const e=[];for(const t of r)e.indexOf(t)===-1&&e.push(t);return e}function nw(r){if(r==null)throw new Pe(`Invalid value in obj: ${JSON.stringify(r)}`);for(const e in r)if(r.hasOwnProperty(e))return!1;return!0}function bc(r,e,t){if(t!=null&&r.indexOf(t)<0)throw new Pe(`${t} is not a valid ${e}.  Valid values are ${r} or null/undefined.`)}function ay(r,e,t=0,s=1/0){return Rr(t>=0),Rr(s>=t),Array.isArray(r)&&r.length>=t&&r.length<=s&&r.every(a=>typeof a===e)}function ns(r,e){Array.isArray(r)?(Q(r.length>0,()=>`${e} is unexpectedly an empty array.`),r.forEach((t,s)=>ns(t,`element ${s+1} of ${e}`))):Q(Number.isInteger(r)&&r>0,()=>`Expected ${e} to be a positive integer, but got ${Ax(r)}.`)}function Ax(r){return r===null?"null":Array.isArray(r)?"["+r.map(e=>Ax(e)).join(",")+"]":typeof r=="string"?`"${r}"`:`${r}`}function Ix(r){return r==="relu"?"relu":r==="linear"?"linear":r==="elu"?"elu":null}function gu(r,e){return st(()=>Ts(Ln(qe(r,r),e,!0)))}class Ip extends mh{getConfig(){return{}}}class oy extends Ip{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=e.maxValue!=null?e.maxValue:this.defaultMaxValue,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return st(()=>{const t=gu(e,this.axis),s=Ks(t,0,this.maxValue);return qe(e,Un(s,jt(Nt(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}oy.className="MaxNorm",Ht(oy);class Cp extends Ip{constructor(e){super(),this.defaultAxis=0,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return st(()=>Un(e,jt(Nt(),gu(e,this.axis))))}getConfig(){return{axis:this.axis}}}Cp.className="UnitNorm",Ht(Cp);class Cx extends Ip{apply(e){return To(e)}}Cx.className="NonNeg",Ht(Cx);class Tm extends Ip{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=e.minValue!=null?e.minValue:this.defaultMinValue,this.maxValue=e.maxValue!=null?e.maxValue:this.defaultMaxValue,this.rate=e.rate!=null?e.rate:this.defaultRate,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return st(()=>{const t=gu(e,this.axis),s=jt(qe(this.rate,Ks(t,this.minValue,this.maxValue)),qe(1-this.rate,t));return qe(e,Un(s,jt(Nt(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Tm.className="MinMaxNorm",Ht(Tm);const kx={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function rs(r){return ta(r)}function De(r,e={}){return Ap(r,Ja.getMap().classNameMap,e,"constraint")}function wt(r){return r==null?null:typeof r=="string"?De({className:r in kx?kx[r]:r,config:{}}):r instanceof Ip?r:De(r)}function pt(r){return new oy(r)}function Ot(r){return new Cp(r)}function rn(){return new Cx}function hr(r){return new Tm(r)}const Jn=["channelsFirst","channelsLast"],gr=["nearest","bilinear"],Lr=["valid","same","causal"],ri=["max","avg"],Hr=["sum","mul","concat","ave"],xr=new Map;function Fn(r){bc(Jn,"DataFormat",r)}function vs(r){bc(Lr,"PaddingMode",r)}function Fi(r){bc(ri,"PoolMode",r)}const Eo=[];function Ps(r,e){Eo.push(r);try{const t=e();return Eo.pop(),t}catch(t){throw Eo.pop(),t}}function wc(r){if(!al(r))throw new Error("Not a valid tensor name: '"+r+"'");return(Eo.length===0?"":Eo.join("/")+"/")+r}function yu(r){if(!al(r))throw new Error("Not a valid tensor name: '"+r+"'");xr.has(r)||xr.set(r,0);const e=xr.get(r);if(xr.set(r,xr.get(r)+1),e>0){const t=`${r}_${e}`;return xr.set(t,1),t}return r}const As=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function al(r){return!!r.match(As)}function Oi(r,e,t){e==null&&(e=0),t==null&&(t=r.length);let s=1;for(let a=e;a<t;++a)s*=r[a];return s}function na(r){if(r.length===0)return Number.NaN;let e=Number.POSITIVE_INFINITY;for(let t=0;t<r.length;t++){const s=r[t];s<e&&(e=s)}return e}function Is(r){if(r.length===0)return Number.NaN;let e=Number.NEGATIVE_INFINITY;for(let t=0;t<r.length;t++){const s=r[t];s>e&&(e=s)}return e}function xu(r,e){if(e<r)throw new Pe(`end (${e}) < begin (${r}) is forbidden.`);const t=[];for(let s=r;s<e;++s)t.push(s);return t}function rw(r,e){return un(r,e)}function Nx(r,e=-1){const t=r.shape.slice();return e<0&&(e=t.length+e+1),t.splice(e,0,1),Xe(r,t)}function Em(r,e,t){return st(()=>{switch(r.rank){case 1:return Da(r,e,t);case 2:return to(r,[e,0],[t,r.shape[1]]);case 3:return Og(r,[e,0,0],[t,r.shape[1],r.shape[2]]);case 4:return cm(r,[e,0,0,0],[t,r.shape[1],r.shape[2],r.shape[3]]);case 5:return Nr(r,[e,0,0,0,0],[t,r.shape[1],r.shape[2],r.shape[3],r.shape[4]]);case 6:return Nr(r,[e,0,0,0,0,0],[t,r.shape[1],r.shape[2],r.shape[3],r.shape[4],r.shape[5]]);default:throw new Pe(`sliceAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}})}function nS(r,e,t){return st(()=>{switch(r.rank){case 1:return Da(r,e,t);case 2:return to(r,[0,e],[r.shape[0],t]);case 3:return Og(r,[0,0,e],[r.shape[0],r.shape[1],t]);case 4:return cm(r,[0,0,0,e],[r.shape[0],r.shape[1],r.shape[2],t]);default:throw new Pe(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function iw(r,e,t,s){return st(()=>{switch(r.rank){case 1:return Da(r,e,t);case 2:switch(s){case 1:return Em(r,e,t);case 2:return nS(r,e,t);default:throw new Pe(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Em(r,e,t);case 2:return Og(r,[0,e,0],[r.shape[0],t,r.shape[2]]);case 3:return nS(r,e,t);default:throw new Pe(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Em(r,e,t);case 2:return cm(r,[0,e,0,0],[r.shape[0],t,r.shape[2],r.shape[3]]);case 3:return cm(r,[0,0,e,0],[r.shape[0],r.shape[1],t,r.shape[3]]);case 4:return nS(r,e,t);default:throw new Pe(`The axis is not within the rank of the tensor ${s}`)}default:throw new Pe(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function rS(r,e=-1){let t;return e<0&&(t=r[0].rank,e=t!==0?t:0),e===r[0].rank&&(e=-1),bi(r,e)}function GE(r,e){switch(r.rank){case 1:return G0([r,e]);case 2:return ga([r,e],0);case 3:return Cg([r,e],0);case 4:return rc([r,e],0);default:throw new Pe(`concatAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}}function iS(r,e){if(Array.isArray(e)||(e=[e]),r.rank!==e.length)throw new Pe(`The length of input n (${e.length}) does not match the number of dimensions in input x (${r.rank})`);return ya(r,e)}function sw(r,e=0,t=1,s,a){return Tb(r,e,t,s,a)}function Vh(r,e,t,s){if(r.rank<2||e.rank<2)throw new mn(`dot requires both inputs to be rank >= 2 but got x shape = ${r.shape} and y shape = ${e.shape}`);if(e.rank>=3&&r.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new mn(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${r.shape} and  y shape = ${e.shape}`);if(r.rank===2&&e.rank===2)return xm({a:r,b:e,transposeA:!1,transposeB:!1,bias:s?sS(r.rank,s,"channelsLast"):null,activation:t});{const a=r.shape.slice(),l=a.pop();r=Xe(r,[-1,l]);const c=e.shape.slice(),d=c.pop(),m=c.pop(),f=[...c,d],y=Array.from({length:e.rank},(_,A)=>A===0?e.rank-2:A<=e.rank-2?A-1:A);e=Xe(Pr(e,y),[m,-1]);const x=[...a,...f];return Xe(xm({a:r,b:e,transposeA:!1,transposeB:!1,bias:s?sS(r.rank,s,"channelsLast"):null,activation:t}),x)}}function HE(r,e,t){return st(()=>(e=Array.isArray(e)?us(e,"int32"):un(e,"int32"),hu(r,e,t)))}function Rx(r){return qe(r,r)}function sS(r,e,t){const s=e.shape;if(e.rank!==1&&e.rank!==r)throw new Pe(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${r}`);if(r===5){if(t==="channelsFirst")return s.length===1?Xe(e,[1,s[0],1,1,1]):Xe(e,[1,s[3],s[0],s[1],s[2]]);if(t==="channelsLast")return s.length===1?Xe(e,[1,1,1,1,s[0]]):Xe(e,[1].concat(s))}else if(r===4){if(t==="channelsFirst")return s.length===1?Xe(e,[1,s[0],1,1]):Xe(e,[1,s[2],s[0],s[1]]);if(t==="channelsLast")return s.length===1?Xe(e,[1,1,1,s[0]]):Xe(e,[1].concat(s))}else if(r===3){if(t==="channelsFirst")return s.length===1?Xe(e,[1,s[0],1]):Xe(e,[1,s[1],s[0]]);if(t==="channelsLast")return s.length===1?Xe(e,[1,1,s[0]]):Xe(e,[1].concat(s))}else if(r<3)return e;throw new Pe(`Unsupported input rank by biasAdd: ${e.rank}`)}function vu(r,e,t){return st(()=>(t==null&&(t="channelsLast"),Fn(t),jt(r,sS(r.rank,e,t))))}function jE(r,e,t,s){return st(()=>ox(r,e,t,s))}function Lx(r,e,t=!1){return t?r():e()}const CR=["fanIn","fanOut","fanAvg"],kR=["normal","uniform","truncatedNormal"];class Dl extends mh{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class aS extends Dl{apply(e,t){return ji(e,t)}}aS.className="Zeros",Ht(aS);class aw extends Dl{apply(e,t){return ba(e,t)}}aw.className="Ones",Ht(aw);class oS extends Dl{constructor(e){if(super(),typeof e!="object")throw new Pe(`Expected argument of type ConstantConfig but got ${e}`);if(e.value===void 0)throw new Pe(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return st(()=>qe(Yn(this.value),ba(e,t)))}getConfig(){return{value:this.value}}}oS.className="Constant",Ht(oS);class lS extends Dl{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Zr(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}lS.className="RandomUniform",Ht(lS);class uS extends Dl{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if((t=t||"float32")!=="float32"&&t!=="int32")throw new mn(`randomNormal does not support dType ${t}.`);return sw(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}uS.className="RandomNormal",Ht(uS);class cS extends Dl{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if((t=t||"float32")!=="float32"&&t!=="int32")throw new mn(`truncatedNormal does not support dType ${t}.`);return fm(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}cS.className="TruncatedNormal",Ht(cS);class hS extends Dl{constructor(e){super(),this.gain=e.gain!=null?e.gain:1}apply(e,t){return st(()=>{if(e.length!==2||e[0]!==e[1])throw new Pe("Identity matrix initializer can only be used for 2D square matrices.");return qe(this.gain,em(e[0]))})}getConfig(){return{gain:this.gain}}}hS.className="Identity",Ht(hS);class so extends Dl{constructor(e){if(super(),e.scale<0)throw new Pe(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=e.scale==null?1:e.scale,this.mode=e.mode==null?"fanIn":e.mode,t=this.mode,bc(CR,"FanMode",t),this.distribution=e.distribution==null?"normal":e.distribution,function(s){bc(kR,"Distribution",s)}(this.distribution),this.seed=e.seed}apply(e,t){const s=function(d,m="channelsLast"){let f,y;if(Fn(m),d.length===2)f=d[0],y=d[1];else if([3,4,5].indexOf(d.length)!==-1){if(m==="channelsFirst"){const x=Oi(d,2);f=d[1]*x,y=d[0]*x}else if(m==="channelsLast"){const x=Oi(d,0,d.length-2);f=d[d.length-2]*x,y=d[d.length-1]*x}}else{const x=Oi(d);f=Math.sqrt(x),y=Math.sqrt(x)}return[f,y]}(e),a=s[0],l=s[1];let c=this.scale;if(this.mode==="fanIn"?c/=Math.max(1,a):this.mode==="fanOut"?c/=Math.max(1,l):c/=Math.max(1,(a+l)/2),this.distribution==="normal"){const d=Math.sqrt(c);if((t=t||"float32")!=="float32"&&t!=="int32")throw new mn(`${this.getClassName()} does not support dType ${t}.`);return fm(e,0,d,t,this.seed)}{const d=Math.sqrt(3*c);return Zr(e,-d,d,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}so.className="VarianceScaling",Ht(so);class ow extends so{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return so.className}}ow.className="GlorotUniform",Ht(ow);class lw extends so{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return so.className}}lw.className="GlorotNormal",Ht(lw);class uw extends so{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return so.className}}uw.className="HeNormal",Ht(uw);class cw extends so{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return so.className}}cw.className="HeUniform",Ht(cw);class hw extends so{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return so.className}}hw.className="LeCunNormal",Ht(hw);class dw extends so{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return so.className}}dw.className="LeCunNormal",Ht(dw);class dS extends Dl{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=e.gain==null?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,this.seed!=null)throw new mn("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return st(()=>{if(e.length<2)throw new mn("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const s=sw(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let a=yx.gramSchmidt(s);return e[0]>e[1]&&(a=Pr(a)),qe(this.gain,a)})}getConfig(){return{gain:this.gain,seed:this.seed}}}dS.className="Orthogonal",Ht(dS);const qE={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function XE(r,e={}){return Ap(r,Ja.getMap().classNameMap,e,"initializer")}function qi(r){return ta(r)}function zi(r){if(typeof r=="string"){const e=r in qE?qE[r]:r;if(e==="GlorotNormal")return new lw;if(e==="GlorotUniform")return new ow;if(e==="HeNormal")return new uw;if(e==="HeUniform")return new cw;if(e==="LeCunNormal")return new hw;if(e==="LeCunUniform")return new dw;{const t={};return t.className=e,t.config={},XE(t)}}return r instanceof Dl?r:XE(r)}function NR(){return new aS}function RR(){return new aw}function LR(r){return new oS(r)}function DR(r){return new lS(r)}function PR(r){return new uS(r)}function FR(r){return new cS(r)}function OR(r){return new hS(r)}function zR(r){return new so(r)}function BR(r){return new ow(r)}function $R(r){return new lw(r)}function UR(r){return new uw(r)}function VR(r){return new cw(r)}function WR(r){return new hw(r)}function GR(r){return new dw(r)}function HR(r){return new dS(r)}let jR=0;function YE(){return jR++}const pw={};function fw(r=""){return r in pw||(pw[r]=0),pw[r]+=1,r+pw[r].toString()}function pS(r){return Array.isArray(r)&&Array.isArray(r[0])}function mw(r){return r.length===0?[]:Array.isArray(r[0])?r:[r]}function _r(r){let e;if(Array.isArray(r)){if(r.length!==1)throw new Pe(`Expected Tensor length to be 1; got ${r.length}`);e=r[0]}else e=r;return e}function ii(r){if(Array.isArray(r)&&Array.isArray(r[0])){if(r.length===1)return(r=r)[0];throw new Pe(`Expected exactly 1 Shape; got ${r.length}`)}return r}function gw(r){let e=0;for(const t of r)t.shape.length===0?e+=1:e+=t.shape.reduce((s,a)=>s*a);return e}class KE{constructor(e,t="float32",s="Variable",a=!0,l=null){this.dtype=t==null?"float32":t,this.shape=e.shape,this.id=YE(),s=s==null?"Variable":s,this.originalName=wc(s),this.name=yu(this.originalName),this.trainable_=a,this.constraint=l,this.val=Ug(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(t,s){if(t.shape.toString()!==s.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(s.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function fS(r){return r.map(e=>e.read())}function mS(r){r.forEach(e=>{e[0].write(e[1])})}class bs{constructor(e){this.dtype=e.dtype,this.shape=e.shape,e.shape!=null?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class bu{constructor(e,t,s,a,l,c,d){this.dtype=e,this.shape=t,this.sourceLayer=s,this.inputs=a,this.callArgs=l,this.outputTensorIndex=d,this.id=YE(),c!=null&&(this.originalName=wc(c),this.name=yu(this.originalName)),this.rank=t.length}}let qR=0;class yw{constructor(e,t){this.callArgs=t,this.id=qR++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const s of e.inboundLayers)s!=null&&s.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)t!=null?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let XR=0;class Vr extends mh{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=XR++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const s=this.getClassName();t=wa(s)+"_"+fw(s)}if(this.name=t,this.trainable_=e.trainable==null||e.trainable,e.inputShape!=null||e.batchInputShape!=null){let s;if(e.batchInputShape!=null)s=e.batchInputShape;else if(e.inputShape!=null){let l=null;e.batchSize!=null&&(l=e.batchSize),s=[l].concat(e.inputShape)}this.batchInputShape=s;let a=e.dtype;a==null&&(a=e.inputDType),a==null&&(a="float32"),this.dtype=a}e.weights!=null?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(this.inboundNodes.length===0)throw new fn(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Pe(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return ci(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return ci(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new bn(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new bn(`Layer ${this.name} is not connected, no input to return.`);return ci(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new bn(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new bn(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return ci(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Yr(e),this.inputSpec==null||this.inputSpec.length===0)return;const t=Yr(this.inputSpec);if(e.length!==t.length)throw new Pe(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let s=0;s<e.length;s++){const a=e[s],l=t[s];if(l==null)continue;const c=a.rank;if(l.ndim!=null&&c!==l.ndim)throw new Pe(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${l.ndim}, found ndim=${c}`);if(l.maxNDim!=null&&c>l.maxNDim)throw new Pe(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${l.maxNDim}, found ndim=${c}`);if(l.minNDim!=null&&c<l.minNDim)throw new Pe(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${l.minNDim}, found ndim=${c}.`);if(l.dtype!=null&&a.dtype!==l.dtype)throw new Pe(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${l.dtype}, found dtype=${a.dtype}.`);if(l.axes){const d=a.shape;for(const m in l.axes){const f=Number(m),y=l.axes[m],x=f>=0?d[f]:d[d.length+f];if(y!=null&&[y,null].indexOf(x)===-1)throw new Pe(`Input ${s} is incompatible with layer ${this.name}: expected axis ${f} of input shape to have value ${y} but got shape ${d}.`)}}if(l.shape!=null)for(let d=0;d<l.shape.length;++d){const m=l.shape[d],f=a.shape[d];if(m!=null&&f!=null&&m!==f)throw new Pe(`Input ${s} is incompatible with layer ${this.name}: expected shape=${l.shape}, found shape=${a.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){this._callHook!=null&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const s=Yr(e);let a=!0;for(const c of s)if(!(c instanceof bu)){a=!1;break}let l=!0;for(const c of s)if(c instanceof bu){l=!1;break}if(a===l)throw new Pe("Arguments to apply() must be all SymbolicTensors or all Tensors");return Ps(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const c=[];for(const d of Yr(e))c.push(d.shape);this.build(ci(c)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&l&&(this._refCount=1)}if(this.assertInputCompatibility(e),l){let c=this.call(e,t);const d=Yr(c),m=[];for(let f of d)s.indexOf(f)!==-1&&(f=f.clone()),m.push(f);if(c=ci(m),this.activityRegularizer!=null)throw new mn("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return c}{const c=function(y){y=Yr(y);const x=[];for(const _ of y)x.push(_.shape);return ci(x)}(e),d=this.computeOutputShape(c);let m;const f="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?c[0]:c),m=d!=null&&d.length>0&&Array.isArray(d[0])?d.map((y,x)=>new bu(f,y,this,Yr(e),t,this.name,x)):new bu(f,d,this,Yr(e),t,this.name),this.addInboundNode(e,m,null,null,c,d,t),this._refCount++,this.activityRegularizer!=null)throw new mn("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return m}})}warnOnIncompatibleInputShape(e){if(this.batchInputShape!=null)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((s,a)=>{s!=null&&e[a]!=null&&e[a]!==s&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new bn(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const s=JSON.stringify(t.outputShapes);e.indexOf(s)===-1&&e.push(s)}if(e.length===1){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&t.length===1?t[0]:t}throw new bn(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new fn(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return gw(this.weights)}build(e){this.built=!0}getWeights(e=!1){return fS(e?this.trainableWeights:this.weights)}setWeights(e){st(()=>{const t=this.weights;if(t.length!==e.length)throw new Pe(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(t.length===0)return;const s=[],a=fS(t);for(let l=0;l<a.length;++l){const c=a[l],d=t[l],m=e[l];if(!Le(c.shape,m.shape))throw new Pe(`Layer weight shape ${c.shape} not compatible with provided weight shape ${m.shape}`);s.push([d,m])}mS(s)})}addWeight(e,t,s,a,l,c,d){if(this._addedWeightNames.indexOf(e)!==-1)throw new Pe(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),s==null&&(s="float32"),this.fastWeightInitDuringBuild&&(a=zi("zeros"));const m=a.apply(t,s),f=new KE(m,s,e,c,d);return m.dispose(),l!=null&&this.addLoss(()=>l.apply(f.read())),c==null&&(c=!0),c?this._trainableWeights.push(f):this._nonTrainableWeights.push(f),f}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){e==null||Array.isArray(e)&&e.length===0||(e=Yr(e),this._losses!==void 0&&this._losses!==null&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(t!=null){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach(s=>{if(s!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return t}addInboundNode(e,t,s,a,l,c,d=null){const m=Yr(e);t=Yr(t),s=Yr(s),a=Yr(a),l=mw(l),c=mw(c);const f=[],y=[],x=[];for(const _ of m)f.push(_.sourceLayer),y.push(_.nodeIndex),x.push(_.tensorIndex);new yw({outboundLayer:this,inboundLayers:f,nodeIndices:y,tensorIndices:x,inputTensors:m,outputTensors:t,inputMasks:s,outputMasks:a,inputShapes:l,outputShapes:c},d);for(let _=0;_<t.length;_++)t[_].sourceLayer=this,t[_].nodeIndex=this.inboundNodes.length-1,t[_].tensorIndex=_}getConfig(){const e={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(e.batchInputShape=this.batchInputShape),this.dtype!=null&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return--this._refCount==0&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function ZE(r,e,t){if((e==null||t!=null&&t>0)&&(e=r.sourceLayer,t=r.nodeIndex),e.inboundNodes.length===0)return[r];{const s=e.inboundNodes[t];if(s.inboundLayers.length===0)return s.inputTensors;{const a=[];for(let l=0;l<s.inboundLayers.length;l++){const c=ZE(s.inputTensors[l],s.inboundLayers[l],s.nodeIndices[l]);for(const d of c)a.indexOf(d)===-1&&a.push(d)}return a}}}class ly extends Vr{constructor(e){if(super({dtype:e.dtype,name:e.name!=null?e.name:fw("input").toString()}),e.batchSize==null&&(e.batchSize=null),e.sparse==null&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,e.inputShape!=null&&e.batchInputShape!=null)throw new Pe("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(t==null){if(e.inputShape==null)throw new Pe("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(e.batchSize!=null)throw new Pe("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const s=e.dtype||"float32";this.batchInputShape=t,this.dtype=s,this.inputSpec=[{shape:t}];const a=new bu(this.dtype,this.batchInputShape,this,[],{},this.name);a.nodeIndex=0,a.tensorIndex=0,new yw({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[a],outputTensors:[a],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Pe(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function JE(r){if(r.batchShape==null&&r.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(r.batchShape!=null&&r.shape!=null)throw new Pe("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=r.batchShape;r.shape!=null&&e==null&&(e=[null].concat(r.shape));let t=r.dtype;return t==null&&(t="float32"),new ly({batchInputShape:e,name:r.name,dtype:t,sparse:r.sparse}).inboundNodes[0].outputTensors[0]}async function kp(r){if(r==null)return;const e=[],t=[],s=[];for(const a in r){const l=r[a];if(typeof l!="number"){const c=l;e.push(c.data()),t.push(a),s.push(c)}}if(e.length>0){const a=await Promise.all(e);for(let l=0;l<a.length;++l)r[t[l]]=a[l][0];pr(s)}}function QE(r){if(r!=null)for(const e in r){const t=r[e];typeof t!="number"&&t.dispose()}}var e2;ly.className="InputLayer",Ht(ly),function(r){r[r.SILENT=0]="SILENT",r[r.VERBOSE=1]="VERBOSE"}(e2||(e2={}));class uy{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class t2{constructor(e,t=10){e==null&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){t==null&&(t={});for(const s of this.callbacks)await s.onEpochBegin(e,t)}async onEpochEnd(e,t){t==null&&(t={});for(const s of this.callbacks)await s.onEpochEnd(e,t)}async onBatchBegin(e,t){t==null&&(t={});for(const s of this.callbacks)await s.onBatchBegin(e,t)}async onBatchEnd(e,t){t==null&&(t={});for(const s of this.callbacks)await s.onBatchEnd(e,t)}async onTrainBegin(e){e==null&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){e==null&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class YR extends uy{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){t==null&&(t={});const s=t.size==null?0:t.size;this.seen+=s;for(const a in t){const l=t[a];if(typeof l=="number")this.totals.hasOwnProperty(a)||(this.totals[a]=0),this.totals[a]=this.totals[a]+l*s;else{let c;a in this.totals?c=this.totals[a]:this.totals[a]=0;const d=st(()=>jt(this.totals[a],qe(l,s)));this.totals[a]=d,c!=null&&c.dispose()}}}async onEpochEnd(e,t){if(t!=null)for(const s of this.params.metrics)this.totals[s]!=null&&(typeof this.totals[s]=="number"?t[s]=this.totals[s]/this.seen:st(()=>{const a=qe(Un(1,this.seen),this.totals[s]);t[s]=a,this.totals[s].dispose(),Qi(t[s])}))}}class n2 extends uy{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){t==null&&(t={}),this.epoch.push(e);for(const s in t)this.history[s]==null&&(this.history[s]=[]),this.history[s].push(t[s])}async syncData(){const e=[],t=[],s=[];for(const l in this.history){const c=this.history[l];for(let d=0;d<c.length;++d)if(typeof c[d]!="number"){const m=c[d];e.push(m.data()),t.push(l),s.push(d)}}const a=await Promise.all(e);for(let l=0;l<a.length;++l)this.history[t[l]][s[l]].dispose(),this.history[t[l]][s[l]]=a[l][0]}}class r2 extends uy{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=125),this.yieldEvery==="never"&&e.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");$l(this.yieldEvery)&&(this.maybeWait=function(s,a){let l,c=di();return(...d)=>{const m=di();return m-c<a||(c=m,l=s(...d)),l}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,s){const a=[];this.yield!=null&&(await kp(s),a.push(this.yield(e,t,s))),a.push(Kg()),await Promise.all(a)}async onEpochBegin(e,t){this.currentEpoch=e,this.epochBegin!=null&&(await kp(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const s=[];this.epochEnd!=null&&(await kp(t),s.push(this.epochEnd(e,t))),this.yieldEvery==="epoch"&&s.push(Kg()),await Promise.all(s)}async onBatchBegin(e,t){this.batchBegin!=null&&(await kp(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const s=[];this.batchEnd!=null&&(await kp(t),s.push(this.batchEnd(e,t))),this.yieldEvery==="batch"?s.push(Kg()):$l(this.yieldEvery)&&s.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(s)}async onTrainBegin(e){this.trainBegin!=null&&(await kp(e),await this.trainBegin(e))}async onTrainEnd(e){this.trainEnd!=null&&(await kp(e),await this.trainEnd(e))}}function i2(r,e){return r==null&&(r={}),r instanceof uy?[r]:Array.isArray(r)&&r[0]instanceof uy?r:Yr(r).map(t=>new r2(t,e))}class ol{constructor(){}static registerCallbackConstructor(e,t){Q(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),ol.checkForDuplicate(t),ol.constructors[e]==null&&(ol.constructors[e]=[]),ol.constructors[e].push(t)}static checkForDuplicate(e){for(const t in ol.constructors)ol.constructors[+t].forEach(s=>{if(s===e)throw new Pe("Duplicate callback constructor.")})}static clear(){ol.constructors={}}static createCallbacks(e){const t=[];for(const s in ol.constructors){const a=+s;e>=a&&t.push(...ol.constructors[a])}return t.map(s=>new s)}}function s2(r,e,t,s,a,l,c,d,m){const f=new n2,y=[new YR,...ol.createCallbacks(e)];r!=null&&y.push(...r),y.push(f);const x=new t2(y);return x.setParams({epochs:t,initialEpoch:s,samples:a,steps:l,batchSize:c,verbose:e,doValidation:d,metrics:m}),{callbackList:x,history:f}}function wu(r,e={},t=!1){return Ap(r,Ja.getMap().classNameMap,e,"layer",t)}function xw(r,e){return st(()=>{r.dtype!=="float32"&&(r=un(r,"float32"));const t=Ln(Rx(r),e,!0),s=vo(t.shape,Nt()),a=Ts(Qa(t,s));return Un(r,a)})}function Am(r,e){return st(()=>Wr(Rx(kn(e,r)),-1))}function vw(r,e){return st(()=>Wr(ur(kn(e,r)),-1))}function cy(r,e){return st(()=>{const t=kn(r,e),s=Ks(ur(r),Nt(),Number.MAX_VALUE),a=ur(Un(t,s));return qe(100,Wr(a,-1))})}function Dx(r,e,t=!1){return st(()=>{if(t)e=pu(e);else{const s=Ln(e,e.shape.length-1,!0);e=Un(e,s)}return e=Ks(e,Nt(),1-Nt()),ti(Ln(qe(un(r,"float32"),xa(e)),e.shape.length-1))})}function bw(r,e,t=!1){return st(()=>{const s=un(sc(function(l){const c=[Oi(l.shape)];return Xe(l,c)}(r)),"int32"),a=(e=Ks(e,Nt(),1-Nt())).shape;return Dx(Xe(Jd(s,a[a.length-1]),a),e,t)})}function ww(r,e){return st(()=>{let t;return t=Ks(e,Nt(),1-Nt()),t=xa(Un(t,kn(1,t))),Wr(function(s,a){if(!Le(s.shape,a.shape))throw new Pe(`logits and labels must have the same shape, but got shapes ${JSON.stringify(s.shape)} and ${JSON.stringify(a.shape)}`);return st(()=>{const l=To(a),c=ti(ur(a));return jt(kn(l,qe(a,s)),So(Zs(c)))})}(r,t),-1)})}function gS(r,e){return st(()=>{const t=xw(r,-1),s=xw(e,-1),a=qe(t,s);return ti(Ln(a,-1))})}ol.constructors={};const _w={meanSquaredError:Am,meanAbsoluteError:vw,meanAbsolutePercentageError:cy,meanSquaredLogarithmicError:function(r,e){return st(()=>{const t=Ks(e,Nt(),Number.MAX_VALUE),s=xa(jt(1,t)),a=Ks(r,Nt(),Number.MAX_VALUE),l=xa(jt(1,a));return Wr(Rx(kn(s,l)),-1)})},squaredHinge:function(r,e){return st(()=>{const t=Qa(0,kn(1,qe(r,e)));return Wr(Rx(t),-1)})},hinge:function(r,e){return st(()=>{const t=Qa(0,kn(1,qe(r,e)));return Wr(t,-1)})},categoricalHinge:function(r,e){return st(()=>{const t=Ln(qe(r,e),-1),s=Mo(qe(kn(1,r),e),-1);return Qa(0,jt(1,kn(s,t)))})},logcosh:function(r,e){return st(()=>{const t=Math.log(2),s=kn(e,r),a=kn(jt(s,kh(qe(-2,s))),t);return Wr(a,-1)})},categoricalCrossentropy:Dx,sparseCategoricalCrossentropy:bw,binaryCrossentropy:ww,kullbackLeiblerDivergence:function(r,e){return st(()=>{const t=Ks(r,Nt(),1),s=Ks(e,Nt(),1);return Ln(qe(r,xa(Un(t,s))),-1)})},poisson:function(r,e){return st(()=>{const t=xa(jt(Nt(),e));return Wr(kn(e,qe(r,t)),-1)})},cosineProximity:gS};function yS(r){if(typeof r=="string"){if(r in _w)return _w[r];let e=`Unknown loss ${r}`;throw r.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${r}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Pe(e)}return r}function xS(r,e){return st(()=>{const t=qe(.5,ms(e)),s=rw(Js(e,t),r.dtype);return Wr(Ls(r,s),-1)})}function vS(r,e){return st(()=>rw(Ls(el(r,-1),el(e,-1)),"float32"))}function a2(r,e){return st(()=>un(Ln(va(Ls(r,1),Ls(e,1))),"float32"))}function o2(r,e){return st(()=>{const t=a2(r,e),s=function(l,c){return st(()=>un(Ln(va(Ls(l,0),Ls(c,1))),"float32"))}(r,e),a=jt(t,s);return un(as(Js(a,0),Un(t,a),0),"float32")})}function l2(r,e){return ww(r,e)}function u2(r,e){return r.rank===e.rank&&(r=ls(r,[r.rank-1])),(e=el(e,-1)).dtype!==r.dtype&&(e=un(e,r.dtype)),un(Ls(r,e),"float32")}const bS=Dx,c2=bw,Sw={binaryAccuracy:xS,categoricalAccuracy:vS,precision:o2,categoricalCrossentropy:bS,sparseCategoricalCrossentropy:c2,mse:Am,MSE:Am,mae:vw,MAE:vw,mape:cy,MAPE:cy,cosine:gS};function KR(r){if(typeof r=="string"&&r in Sw)return Sw[r];if(typeof r!="string"&&r!=null)return r;throw new Pe(`Unknown metric ${r}`)}function Mw(r){if(Rr(r!==null,`Unknown LossOrMetricFn ${r}`),typeof r=="string")return r;{let e;for(const t of Object.keys(_w))if(_w[t]===r){e=t;break}if(e!==void 0)return e;for(const t of Object.keys(Sw))if(Sw[t]===r){e=t;break}return e!==void 0?e:r.name}}function h2(r,e,t=!1){if(r==null||typeof r!="object"||Object.getPrototypeOf(r)!==Object.prototype||!wS(r))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(t){const s=JSON.stringify(r);s.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function wS(r){if(r===null)return!0;if(typeof r=="object"){if(Object.getPrototypeOf(r)===Object.prototype){const e=Object.keys(r);for(const t of e)if(typeof t!="string"||!wS(r[t]))return!1;return!0}if(Array.isArray(r)){for(const e of r)if(!wS(e))return!1;return!0}return!1}{const e=typeof r;return e==="string"||e==="number"||e==="boolean"}}function Tw(r,e,t=console.log){let s="";for(let a=0;a<r.length;++a)a>0&&(s=s.slice(0,s.length-1)+" "),s+=r[a],s=s.slice(0,e[a]),s+=" ".repeat(e[a]-s.length);t(s)}function ZR(r,e,t){let s;try{s=JSON.stringify(r.outputShape)}catch{s="multiple"}Tw([`${r.name} (${r.getClassName()})`,s,r.countParams().toString()],e,t)}function JR(r,e,t,s){let a;try{a=JSON.stringify(r.outputShape)}catch{a="multiple"}const l=[];for(const f of r.inboundNodes)if(!(t!=null&&t.length>0&&t.indexOf(f)===-1))for(let y=0;y<f.inboundLayers.length;++y){const x=f.inboundLayers[y].name,_=f.nodeIndices[y],A=f.tensorIndices[y];l.push(`${x}[${_}][${A}]`)}const c=r.name,d=r.getClassName(),m=l.length===0?"":l[0];Tw([`${c} (${d})`,a,r.countParams().toString(),m],e,s);for(let f=1;f<l.length;++f)Tw(["","","",l[f]],e,s)}function d2(r,e,t){return(r==="inboundNodes"||r==="outputLayers"||r==="inputLayers")&&e===0&&typeof t=="string"}function Px(r,e){if(r===null)return null;if(typeof r=="string")return io(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){const t=[],s=r.length;for(let a=0;a<s;++a){const l=r[a];d2(e,a,l)?t.push(l):t.push(Px(l,e))}return t}{const t={};for(const s of Object.keys(r)){const a=r[s];if(s==="name"&&typeof a=="string")t[s]=a;else{const l=io(s);t[l]=Px(a,l)}}return t}}function _S(r,e){if(r==null)return null;if(typeof r=="string")return wa(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){const t=[],s=r.length;for(let a=0;a<s;++a){const l=r[a];d2(e,a,l)?t.push(l):t.push(_S(l,e))}return t}{const t={};for(const s of Object.keys(r)){const a=r[s];t[wa(s)]=s!=="name"&&s!=="className"||typeof a!="string"?_S(a,s):a}return t}}const Ew="3.9.0";class Np{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Np)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(e==null)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,s){if(this.id2Value[e.id]!=null)throw new Pe(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(a,l){if(a.dtype==null||a.dtype===l.dtype)return l;try{return un(l,a.dtype)}catch{throw new Pe(`The dtype of the feed (${l.dtype}) can not be cast to the dtype of the key '${a.name}' (${a.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,s!=null&&(this.id2Mask[e.id]=s),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return this.id2Value[e.id]!=null}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof bu){if(this.id2Value[e.id]==null)throw new Pe(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(t==null)throw new Pe(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof bu){if(this.id2Value[e.id]==null)throw new Pe(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(t==null)throw new Pe(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){this.id2Mask!=null&&pr(this.id2Mask)}}const SS={},p2={};function Fx(r,e,t,s){const a=t!=null&&t.training,l=Array.isArray(r),c=l?r:[r],d=c.map(C=>C.name),m=[],f=e.names();for(const C of d)f.indexOf(C)!==-1?m.push(e.getValue(C)):m.push(null);s!=null&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const y=d.join(",")+"|"+e.names().join(",");let x,_;if(SS[y]==null){const C=function(L,P){Q(L!=null&&L.length>0,()=>"Expected at least one fetch, got none");let U=[],q={};if(L.length===1){const X=f2(L[0],P);U=X.sorted,q=X.recipientMap}else{const X=new Set;for(const re of L){const{sorted:oe,recipientMap:de}=f2(re,P);for(const Ie of oe)X.has(Ie.name)||(U.push(Ie),X.add(Ie.name));for(const Ie in de)q[Ie]==null&&(q[Ie]=new Set),de[Ie].forEach(pe=>q[Ie].add(pe))}}return{sorted:U,recipientCounts:QR(q)}}(c,e);x=C.sorted,_=C.recipientCounts,SS[y]=x,p2[y]=_}x=SS[y],_={},a||Object.assign(_,p2[y]);const A=new Np(e);for(let C=0;C<x.length;++C){if(s!=null){const Be=Qu().numTensors;Be>s.maxNumTensors&&(s.maxNumTensors=Be),Be<s.minNumTensors&&(s.minNumTensors=Be)}const L=x[C],P=L.sourceLayer;if(P instanceof ly)continue;const U=[],q=[],X=[];let re=!1;for(const Be of L.inputs){const ze=A.getValue(Be),Ve=A.getMask(Be);U.push(ze),q.push(Ve),Ve!=null&&(re=!0),a||(_[Be.name]--,_[Be.name]!==0||e.hasKey(Be)||d.indexOf(Be.name)!==-1||ze.isDisposed||Be.sourceLayer.stateful===!0||X.push(ze))}re&&((t=t||{}).mask=q[0]);const oe=Yr(P.apply(U,t));let de=null;P.supportsMasking&&(de=P.computeMask(U,q));const Ie=e3(L),pe=Array.isArray(Ie)?Ie:[Ie];for(let Be=0;Be<pe.length;++Be){A.hasKey(pe[Be])||A.add(pe[Be],oe[Be],Array.isArray(de)?de[0]:de);const ze=d.indexOf(pe[Be].name);ze!==-1&&(m[ze]=oe[Be])}a||pr(X)}return A.disposeMasks(),l?m:m[0]}function QR(r){const e={};for(const t in r)e[t]=r[t].size;return e}function f2(r,e){const t=new Set,s=[],a={};for(const d of e.names())t.add(d);const l=[],c=[];for(l.push(r);l.length>0;){const d=l[l.length-1];if(t.has(d.name)){l.pop();continue}const m=c[c.length-1]===l.length-1;if(d.inputs.length===0||m)l.pop(),s.push(d),t.add(d.name),m&&c.pop();else{c.push(l.length-1);for(const f of d.inputs)a[f.name]==null&&(a[f.name]=new Set),a[f.name].add(d.name),t.has(f.name)||l.push(f)}}return{sorted:s,recipientMap:a}}function e3(r){let e;if(r.sourceLayer.inboundNodes.length===1)e=r.sourceLayer.output;else{let t=null;for(let s=0;s<r.sourceLayer.inboundNodes.length;++s)for(const a of r.sourceLayer.inboundNodes[s].outputTensors)if(a.id===r.id){t=s;break}e=r.sourceLayer.getOutputAt(t)}return e}class _u extends Vr{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,this.name==null){const q=this.getClassName().toLowerCase();this.name=fw(q)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],cs(this.inputs).length!==this.inputs.length)throw new Pe(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(q=>q.name)}`);cs(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(q=>q.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const q of this.outputs){const X=q.sourceLayer,re=q.nodeIndex,oe=q.tensorIndex;this.outputLayers.push(X),this.outputLayersNodeIndices.push(re),this.outputLayersTensorIndices.push(oe)}for(const q of this.inputs){const X=q.sourceLayer,re=q.nodeIndex,oe=q.tensorIndex;Rr(re===0,"input layer has >1 nodes"),Rr(oe===0,"input layer has >1 tensors"),this.inputLayers.push(X),this.inputLayersNodeIndices.push(re),this.inputLayersTensorIndices.push(oe)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let q=0;q<this.inputLayers.length;q++){const X=this.inputLayers[q];if(!(X instanceof ly))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${q} (0-based) originates from layer type ${X.getClassName()}.`);this.inputNames.push(X.name),this.feedInputShapes.push(X.batchInputShape),this.feedInputNames.push(X.name)}for(const q of this.outputLayers)this.outputNames.push(q.name);this.internalInputShapes=this.inputs.map(q=>q.shape),this.internalOutputShapes=this.outputs.map(q=>q.shape);const t={},s={},a={},l={},c={},d=[],m=(q,X,re,oe,de,Ie)=>{oe!=null&&de!=null&&Ie!=null||(oe=q.sourceLayer,de=q.nodeIndex,Ie=q.tensorIndex);const pe=oe.inboundNodes[de];if(re.indexOf(pe)!==-1)throw new fn(`The tensor ${q.name} at layer "${oe.name}" is part of a cycle.`);if(X.indexOf(pe)!==-1)return;this.containerNodes.add(_u.nodeKey(oe,de)),oe.id in c||(c[oe.id]=Object.keys(c).length),re.indexOf(pe)===-1&&re.push(pe);const Be=pe.inboundLayers.length;for(let ze=0;ze<Be;ze++){const Ve=pe.inputTensors[ze],Qe=pe.inboundLayers[ze],nt=pe.nodeIndices[ze],ft=pe.tensorIndices[ze];m(Ve,X,re,Qe,nt,ft)}for(X.push(pe);re.indexOf(pe)>=0;)re.splice(re.indexOf(pe),1);d.push(pe)},f=[],y=[];for(const q of this.outputs)m(q,f,y);const x=d.slice().reverse();for(const q of x){s[q.id]=q,q.id in t||(t[q.id]=0);let X=t[q.id];const re=a[q.outboundLayer.id]==null?0:a[q.outboundLayer.id];X=Math.max(X,re),a[q.outboundLayer.id]=X,l[q.outboundLayer.id]=q.outboundLayer,t[q.id]=X;for(let oe=0;oe<q.inboundLayers.length;oe++){const de=q.inboundLayers[oe],Ie=q.nodeIndices[oe],pe=de.inboundNodes[Ie],Be=t[pe.id]==null?0:t[pe.id];t[pe.id]=Math.max(X+1,Be),s[pe.id]=pe}}const _={};for(const q in t){const X=t[q];X in _||(_[X]=[]),_[X].push(s[q])}const A={};for(const q in a){const X=a[q];X in A||(A[X]=[]),A[X].push(l[q])}let C=Object.keys(A).map(q=>parseInt(q,10)).sort(Mm);this.layers=[];for(const q of C){const X=A[q];X.sort((re,oe)=>{const de=c[re.id],Ie=c[oe.id];return de<Ie?-1:de>Ie?1:0});for(const re of X)re instanceof _u&&this.internalContainerRefs.push(re),this.layers.push(re)}this.layersByDepth=A,C=Object.keys(_).map(q=>parseInt(q,10)).sort(Mm);const L=this.inputs.slice(),P=[];for(const q of C)for(const X of _[q]){const re=X.outboundLayer;if(re!=null){for(const oe of X.inputTensors)if(L.indexOf(oe)===-1)throw new fn(`Graph disconnected: cannot obtain value for tensor ${oe} at layer "${re.name}". The following previous layers were accessed without issue: ${P}`);for(const oe of X.outputTensors)L.push(oe);P.push(re.name)}}this.nodesByDepth=_;const U=this.layers.map(q=>q.name);for(const q of U){const X=U.filter(re=>re===q).length;if(X!==1)throw new fn(`The name "${q}" is used ${X} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(U))}this.outboundNodes=[],this.inboundNodes=[],new yw({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(q=>null),outputMasks:this.outputs.map(q=>null),inputShapes:this.inputs.map(q=>q.shape),outputShapes:this.outputs.map(q=>q.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount==0){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(s=>s.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Pe("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const s of this.layers)t.push(...s.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const s={};let a=0;for(const c of this.layers)for(const d of c.weights){if(s[d.originalName]!=null)throw new Pe(`Duplicate weight name: ${d.originalName}`);s[d.originalName]=d,a++}const l=[];for(const c in e){let d=c;if(s[c]==null){const m=c.split("/");d=m.slice(0,-2).concat([m[m.length-1]]).join("/")}if(s[d]!=null)l.push([s[d],e[c]]);else if(t)throw new Pe(`Provided weight data has no target variable: ${c}`);delete s[d]}if(t){const c=[];for(const d in s)c.push(d);if(c.length>0)throw new Pe(`${c.length} of ${a} weights are not set: ${c}`)}mS(l)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Ew}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const s=_S(this.updatedConfig());return t?JSON.stringify(s):s}call(e,t){return st(()=>{e=Yr(e);const s=new Np;for(let a=0;a<this.inputs.length;++a)s.add(this.inputs[a],e[a]);return Fx(this.outputs,s,t)})}computeMask(e,t){return st(()=>{let s;return e=Yr(e),s=t==null?Ii(null,e.length):Yr(t),this.runInternalGraph(e,s)[1]})}computeOutputShape(e){const t=mw(e);if(t.length!==this.inputLayers.length)throw new Pe(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let d=0;d<t.length;d++){const m=this.inputLayers[d],f=t[d];s[m.name+"_0_0"]=f}const a=Object.keys(this.nodesByDepth).map(d=>parseInt(d,10)).sort(Mm);if(a.length>1)for(const d of a){const m=this.nodesByDepth[d];for(const f of m){const y=f.outboundLayer;if(this.inputLayers.map(C=>C.id).indexOf(y.id)!==-1)continue;const x=[];for(let C=0;C<f.inboundLayers.length;C++){const L=f.inboundLayers[C],P=f.nodeIndices[C],U=f.tensorIndices[C],q=s[`${L.name}_${P}_${U}`];x.push(q)}const _=mw(y.computeOutputShape(ci(x))),A=y.inboundNodes.indexOf(f);for(let C=0;C<_.length;C++)s[`${y.name}_${A}_${C}`]=_[C]}}const l=[],c=[];for(let d=0;d<this.outputLayers.length;d++){const m=this.outputLayers[d],f=this.outputLayersNodeIndices[d],y=this.outputLayersTensorIndices[d],x=`${m.name}_${f}_${y}`;c.push(x)}for(let d=0;d<c.length;d++){const m=c[d];Rr(m in s),l.push(s[m])}return ci(l)}runInternalGraph(e,t){t==null&&(t=Ii(null,e.length));const s={};for(let m=0;m<this.inputs.length;++m){const f=this.inputs[m],y=e[m],x=t[m];s[f.id]=[y,x]}const a=Object.keys(this.nodesByDepth).map(m=>parseInt(m,10)).sort(Mm);for(const m of a){const f=this.nodesByDepth[m];for(const y of f){const x=y.outboundLayer,_=y.inputTensors,A=y.outputTensors,C=new Array;for(const L of _)L.id in s&&C.push(s[L.id]);if(C.length===_.length){let L,P,U,q,X={};if(y.callArgs!=null&&(X=y.callArgs),C.length===1){const[re,oe]=C[0];X.mask==null&&(X.mask=oe),U=Yr(x.call(re,X)),q=Yr(x.computeMask(re,oe)),L=[re],P=[oe]}else L=C.map(re=>re[0]),P=C.map(re=>re[1]),X.mask==null&&(X.mask=P),U=Yr(x.call(L,X)),q=Yr(x.computeMask(L,P));if(x.activityRegularizer)throw new mn("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let re=0;re<A.length;++re){const oe=A[re],de=U[re],Ie=q[re];s[oe.id]=[de,Ie]}}}}const l=[],c=[],d=[];for(const m of this.outputs){Rr(m.id in s,`Could not compute output ${m.name} : ${m.id}`);const[f,y]=s[m.id];d.push(f.shape),l.push(f),c.push(y)}return[l,c,d]}buildNodeConversionMap(e){const t={};let s;for(const a of this.layers){s=a instanceof _u?1:0;for(let l=0;l<a.inboundNodes.length;l++){const c=_u.nodeKey(a,l);this.containerNodes.has(c)&&(t[c]=s,s+=1)}}return t}getLayer(e,t){if(t!=null){if(this.layers.length<=t)throw new Pe(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(e==null)throw new Pe("Provide either a layer name or layer index");for(const s of this.layers)if(s.name===e)return s;throw new Pe(`No such layer: ${e}`)}calculateLosses(){return st(()=>{const e=[];for(const t of this.layers)for(let s=0;s<t.inboundNodes.length;++s){const a=_u.nodeKey(t,s);this.containerNodes.has(a)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),s=[];for(const c of this.layers){const d=c.getClassName(),m=c.getConfig(),f=[];for(let x=0;x<c.inboundNodes.length;x++){const _=c.inboundNodes[x],A=_u.nodeKey(c,x);let C={};if(this.containerNodes.has(A)){if(_.callArgs)try{JSON.stringify(_.callArgs),C=_.callArgs}catch{console.warn(`Layer ${c.name} was passed non-serializable keyword arguments: ${_.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),C={}}if(_.inboundLayers.length>0){const L=[];for(let P=0;P<_.inboundLayers.length;P++){const U=_.inboundLayers[P],q=_.nodeIndices[P],X=_.tensorIndices[P];let re=t[_u.nodeKey(U,q)];re==null&&(re=0),L.push([U.name,re,X,C])}f.push(L)}}}const y={};y.name=c.name,y.className=d,y.config=m,y.inboundNodes=f,s.push(y)}e.layers=s;const a=[];for(let c=0;c<this.inputLayers.length;c++){const d=this.inputLayers[c],m=this.inputLayersNodeIndices[c],f=_u.nodeKey(d,m);if(!this.containerNodes.has(f))continue;let y=t[f];y==null&&(y=0);const x=this.inputLayersTensorIndices[c];a.push([d.name,y,x])}e.inputLayers=a;const l=[];for(let c=0;c<this.outputLayers.length;c++){const d=this.outputLayers[c],m=this.outputLayersNodeIndices[c],f=_u.nodeKey(d,m);if(!this.containerNodes.has(f))continue;let y=t[f];y==null&&(y=0);const x=this.outputLayersTensorIndices[c];l.push([d.name,y,x])}return e.outputLayers=l,e}static fromConfig(e,t,s={},a=!1){const l={},c={};function d(P,U){P.name in c?c[P.name].push(U):c[P.name]=[U]}function m(P,U){const q=[];let X;for(const re of U){const oe=re[0],de=re[1],Ie=re[2];if(X=re[3]==null?{}:re[3],!(oe in l))return void d(P,U);const pe=l[oe];if(pe.inboundNodes.length<=de)return void d(P,U);const Be=pe.inboundNodes[de];q.push(Be.outputTensors[Ie])}q.length>0&&P.apply(ci(q),X)}function f(P){const U=P.name,q=wu(P,t.customObjects!=null?t.customObjects:{});q.setFastWeightInitDuringBuild(a),l[U]=q,P.inboundNodes.forEach(X=>{if(!(X instanceof Array))throw new Pe(`Corrupted configuration, expected array for nodeData: ${X}`);d(q,X)})}const y=t.name,x=t.layers;for(const P of x)f(P);for(;!nw(c);)for(const P of x){const U=l[P.name];if(U.name in c){const q=c[U.name];delete c[U.name];for(const X of q)m(U,X)}}const _=[],A=[],C=t.inputLayers;for(const P of C){const U=P[0],q=P[1],X=P[2];Rr(U in l);const re=l[U].inboundNodes[q].outputTensors;_.push(re[X])}const L=t.outputLayers;for(const P of L){const U=P[0],q=P[1],X=P[2];Rr(U in l);const re=l[U].inboundNodes[q].outputTensors;A.push(re[X])}return new e({inputs:_,outputs:A,name:y})}get stateful(){if(this._stateful)throw new Pe("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){st(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function m2(r,e){return function(t,s,a){const l=s.length;if(t==null||Array.isArray(t)&&t.length===0)return s.map(c=>null);if(l===1)return Array.isArray(t)&&t.length===1?t:typeof t=="object"&&s[0]in t?[t[s[0]]]:[t];if(Array.isArray(t)){if(t.length!==l)throw new Error(`Provided ${a} is an array of ${t.length} element(s), but the model has ${l} outputs. Make sure a set of weights is provided for each model output.`);return t}if(typeof t=="object"&&Object.keys(t).length>0&&typeof t[Object.keys(t)[0]]=="object"){const c=[];return s.forEach(d=>{d in t?c.push(t[d]):c.push(null)}),c}throw new Error(`The model has multiple (${l}) outputs, so ${a} must be either an array with ${l} elements or an object with ${s} keys. Provided ${a} not understood: ${JSON.stringify(t)}`)}(r,e,"classWeight")}async function g2(r,e,t,s){if(e!=null||s!=null)throw new Error("Support sampleWeight is not implemented yet");if(t!=null){const a=st(()=>{if(r.shape.length===1)return iu(r);if(r.shape.length===2){if(r.shape[1]>1)return el(r,1);if(r.shape[1]===1)return Xe(r,[r.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${r.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${r.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),l=Array.from(await a.data());pr(a);const c=[];return l.forEach(d=>{if(t[d]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${d} exists in the data but not in classWeight`);c.push(t[d])}),us(c,"float32")}return null}function t3(r,e){return qe(r,e)}function y2(r,e){let t,s;const a=e;t=a.xs,s=a.ys,Q(t!=null&&s!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`);const l=x2("input",r.inputNames,t),c=x2("output",r.outputNames,s),d=l[0].shape[0];Q(l.length===r.inputs.length,()=>`LayersModel has ${r.inputs.length} inputs, but the dataset provides ${l.length} inputs.  (Expected input keys: ${JSON.stringify(r.inputNames)})`),Q(c.length===r.outputs.length,()=>`LayersModel has ${r.outputs.length} outputs, but the dataset provides ${c.length} outputs.  (Expected output keys: ${JSON.stringify(r.outputNames)})`);for(let m=0;m<l.length;m++)Q(l[m].shape[0]===d,()=>`Batch size mismatch: input ${r.inputNames[m]} has ${l[m].shape[0]}; expected  ${d} based on input ${r.inputNames[0]}.`);for(let m=0;m<c.length;m++)Q(c[m].shape[0]===d,()=>`Batch size mismatch: output ${r.outputNames[m]} has ${c[m].shape[0]}; expected  ${d} based on input ${r.inputNames[0]}.`);return{xs:l,ys:c}}function x2(r,e,t){if(t instanceof Ur)return[t];if(Array.isArray(t))return Q(t.length===e.length,()=>`Received an array of ${t.length} Tensors, but expected ${e.length} to match the ${r} keys ${e}.`),t;{const s=[];for(const a of e){if(t[a]==null)throw new Pe(`The feature data generated by the dataset lacks the required ${r} key '${a}'.`);s.push(t[a])}return s}}function v2(r){return typeof r.iterator=="function"}function MS(r){Q(r>0&&Number.isInteger(r),()=>`batchSize is required to be a positive integer, but got ${r}`)}function Ox(r,e,t){return r==null?[null]:Array.isArray(r)?r.map(s=>Em(s,e,t-e)):Em(r,e,t-e)}function TS(r,e){return st(()=>r==null?null:Array.isArray(r)?r.map(t=>TS(t,e)):HE(r,e.dtype==="int32"?e:un(e,"int32")))}function ES(r,e){const t=[];let s=0,a=null;for(;s<r;)a=s+e,a>=r&&(a=r),t.push([s,a]),s=a;return t}function b2(r){const e=[];r instanceof Ur&&(r=[r]);for(let t=0;t<r.length;++t){const s=r[t];if(s.rank===1)e.push(Nx(s,1));else{if(s.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(s)}}return e}function Im(r,e){if(r==null)return;const t=[];if(e instanceof Ur)t.push(e.id);else if(Array.isArray(e))e.forEach(a=>t.push(a.id));else if(e!=null)for(const a in e){const l=e[a];t.push(l.id)}const s=[];if(r instanceof Ur)t.indexOf(r.id)===-1&&s.push(r);else if(Array.isArray(r))r.forEach(a=>{t.indexOf(a.id)===-1&&s.push(a)});else if(r!=null)for(const a in r){const l=r[a];t.indexOf(l.id)===-1&&s.push(l)}s.forEach(a=>{a.isDisposed||a.dispose()})}function AS(r){return Array.isArray(r)}function w2(r){return!function(e){return e instanceof Ur}(r)&&!AS(r)}function _2(r,e,t,s=!0,a=""){if(e==null||e.length===0){if(r!=null){let c=!1;if(AS(r)&&r.length>0)c=!0;else if(w2(r)){for(const d in r)if(r.hasOwnProperty(d)){c=!0;break}}else c=!0;if(c)throw new Pe(`Error when checking model ${a} expected no data, but got ${r}`)}return[]}if(r==null)return e.map(c=>null);let l;if(w2(r)){r=r,l=[];for(const c of e){if(r[c]==null)throw new Pe(`No data provided for "${c}". Need data for each key in: ${e}`);l.push(r[c])}}else if(AS(r)){if((r=r).length!==e.length)throw new Pe(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${r}`);l=r}else{if(r=r,e.length>1)throw new Pe(`The model ${a} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${r.shape}`);l=[r]}if(l=b2(l),t!=null)for(let c=0;c<e.length;++c){if(t[c]==null)continue;const d=l[c];if(d.shape.length!==t[c].length)throw new Pe(`Error when checking ${a}: expected ${e[c]} to have ${t[c].length} dimension(s). but got array with shape ${d.shape}`);for(let m=0;m<t[c].length;++m){if(m===0&&!s)continue;const f=d.shape[m],y=t[c][m];if(y!=null&&y>=0&&f!==y)throw new Pe(`${a} expected a batch of elements where each example has shape [${t[c].slice(1,t[c].length)}] (i.e.,tensor shape [*,${t[c].slice(1,t[c].length)}]) but the ${a} received an input with ${d.shape[0]} examples, each with shape [${d.shape.slice(1,d.shape.length)}] (tensor shape [${d.shape}])`)}}return l}function S2(r,e,t,s=!0,a=""){let l;if(Array.isArray(r)){if(r.length!==e.length)throw new Pe(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${r.length} Tensors(s).`);l=r}else{if(e.length>1)throw new Pe(`The model expects ${e.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(r.shape)}.`);l=[r]}if(t!=null)for(let c=0;c<e.length;++c){if(t[c]==null)continue;const d=l[c];if(d.shape.length!==t[c].length)throw new Pe(`Error when checking ${a}: expected ${e[c]} to have ${t[c].length} dimension(s), but got array with shape ${JSON.stringify(d.shape)}`);for(let m=0;m<t[c].length;++m){if(m===0&&!s)continue;const f=d.shape[m],y=t[c][m];if(y!=null&&y!==f)throw new Pe(`Error when checking ${a}: expected ${e[c]} to have shape ${JSON.stringify(t[c])} but got array with shape ${JSON.stringify(d.shape)}.`)}}}class Wh extends _u{constructor(e){super(e),this.isTraining=!1}summary(e,t,s=console.log){if(!this.built)throw new Pe("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");(function(a,l,c,d=console.log){const m=function(C){let L=!0;const P=[],U=[];for(const q in C.nodesByDepth)P.push(C.nodesByDepth[q]);for(const q of P){if(q.length>1||q.length===1&&q[0].inboundLayers.length>1){L=!1;break}U.push(...q)}if(L)for(const q of C.layers){let X=!1;for(const re of q.inboundNodes)if(U.indexOf(re)!==-1){if(X){L=!1;break}X=!0}if(!L)break}return L}(a),f=["Layer (type)","Output shape","Param #"];let y;if(m?(l=l||65,c=c||[.45,.85,1]):(l=l||98,c=c||[.33,.55,.67,1]),c[c.length-1]<=1&&(c=c.map(C=>Math.floor(l*C))),!m){f.push("Receives inputs"),y=[];for(const C in a.nodesByDepth)y.push(...a.nodesByDepth[C])}d("_".repeat(l)),Tw(f,c,d),d("=".repeat(l));const x=a.layers;for(let C=0;C<x.length;++C)m?ZR(x[C],c,d):JR(x[C],c,y,d),d((C===x.length-1?"=":"_").repeat(l));a.checkTrainableWeightsConsistency();const _=function(C){let L;return L=C.collectedTrainableWeights!=null?gw(C.collectedTrainableWeights):gw(C.trainableWeights),L}(a),A=gw(a.nonTrainableWeights);d(`Total params: ${_+A}`),d(`Trainable params: ${_}`),d(`Non-trainable params: ${A}`),d("_".repeat(l))})(this,e,t,s)}compile(e){if(e.loss==null&&(e.loss=[]),this.loss=e.loss,typeof e.optimizer=="string")this.optimizer_=function(c){const d={Adagrad:()=>$h.adagrad(.01),Adadelta:()=>$h.adadelta(1,.95,Nt()),Adam:()=>$h.adam(.001,.9,.999,Nt()),Adamax:()=>$h.adamax(.002,.9,.999,Nt(),0),RMSProp:()=>$h.rmsprop(.001,.9,0,Nt()),SGD:()=>$h.sgd(.01)};if(d.adagrad=d.Adagrad,d.adadelta=d.Adadelta,d.adam=d.Adam,d.adamax=d.Adamax,d.rmsprop=d.RMSProp,d.sgd=d.SGD,c in d)return d[c]();throw new Pe(`Unknown Optimizer ${c}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Ml))throw new Pe("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||typeof e.loss=="string"||typeof e.loss=="function")if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Pe(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(d=>yS(d))}else{const c=yS(e.loss);this.outputs.forEach(d=>{t.push(c)})}else{e.loss=e.loss;for(const c in e.loss)if(this.outputNames.indexOf(c)===-1)throw new Pe(`Unknown entry in loss dictionary: "${c}". Only expected the following keys: ${this.outputNames}`);for(const c of this.outputNames)e.loss[c]==null&&console.warn(`Output "${c}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${c} during training`),t.push(yS(e.loss[c]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let c=0;c<this.outputs.length;++c){const d=this.internalOutputShapes[c],m=this.outputNames[c];this.feedOutputNames.push(m),this.feedOutputShapes.push(d),this.feedLossFns.push(this.lossFunctions[c])}const s=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Ps("loss",()=>{for(let c=0;c<this.outputs.length;++c){if(s.indexOf(c)!==-1)continue;const d=this.lossFunctions[c];this.outputs.length>1&&(this.metricsTensors.push([d,c]),this.metricsNames.push(this.outputNames[c]+"_loss"))}});const a=function(c,d){if(c==null||Array.isArray(c)&&c.length===0)return d.map(f=>[]);let m;if(typeof c=="string"||typeof c=="function")m=[c];else{if(!Array.isArray(c)&&typeof c!="object")throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${c}`);m=c}if(Array.isArray(m))return d.map(f=>m);{const f=[];for(const y of d){let x=m.hasOwnProperty(y)?m[y]:[];Array.isArray(x)||(x=[x]),f.push(x)}return f}}(e.metrics,this.outputNames),l=(c,d,m)=>{this.outputNames.length>1&&(d=this.outputNames[c]+"_"+d),this.metricsNames.push(d),this.metricsTensors.push([m,c])};Ps("metric",()=>{for(let c=0;c<this.outputs.length;++c)s.indexOf(c)===-1&&(d=>{let m,f,y;for(const x of d){if(typeof x=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(x)!==-1){const A=this.internalOutputShapes[c];let C;A[A.length-1]===1||this.lossFunctions[c]===ww?["accuracy","acc"].indexOf(x)!==-1?f=xS:["crossentropy","ce"].indexOf(x)!==-1&&(f=l2):this.lossFunctions[c]===bw?["accuracy","acc"].indexOf(x)!==-1?f=u2:["crossentropy","ce"].indexOf(x)!==-1&&(f=c2):["accuracy","acc"].indexOf(x)!==-1?f=vS:["crossentropy","ce"].indexOf(x)!==-1&&(f=bS),["accuracy","acc"].indexOf(x)!==-1?C="acc":["crossentropy","ce"].indexOf(x)!==-1&&(C="ce"),y=f,m=""+C}else y=KR(x),m=""+Mw(x);let _;Ps(m,()=>{_=y}),l(c,m,_)}})(a[c])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,s={}){const a=s.batchSize==null?32:s.batchSize;MS(a);const l=this.standardizeUserDataXY(e,t,!0,a);try{const c=l[0].concat(l[1]);this.makeTestFunction();const d=this.testFunction;return ci(this.testLoop(d,c,a,s.verbose,s.steps))}finally{Im(l[0],e),Im(l[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(s,a,l){const c=(l=l||{}).batches!=null,d=s.testFunction;let m=[];if(l.verbose>0)throw new mn("Verbose mode is not implemented yet.");Q(!c||l.batches>0&&Number.isInteger(l.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(l.batches)}`);const f=typeof a.next=="function"?a:await a.iterator();let y=0,x=0;for(;!c||x<l.batches;){const _=await f.next();if(m=st(()=>{if(_.value){const{xs:A,ys:C}=y2(s,_.value),L=A.concat(C),P=st(()=>d(L));if(pr(L),x===0)for(let q=0;q<P.length;++q)m.push(Yn(0));const U=L[0].shape[0];for(let q=0;q<P.length;++q){const X=P[q],re=m[q];m[q]=st(()=>jt(m[q],qe(U,X))),x>0&&pr(re)}pr(P),y+=U,++x}return m}),_.done){c&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${l.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let _=0;_<m.length;++_){const A=m[_];m[_]=Un(m[_],y),pr(A)}return ci(m)}(this,e,t)}checkNumSamples(e,t,s,a="steps"){let l;if(s!=null){if(l=null,t!=null)throw new Pe(`If ${a} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(e==null)throw new Pe(`Either the input data should have a defined shape, or ${a} shoud be specified.`);l=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return l}execute(e,t){if(Array.isArray(t)&&t.length===0)throw new Pe("`outputs` is an empty Array, which is not allowed.");const s=Array.isArray(t),a=s?t:[t],l=this.retrieveSymbolicTensors(a),c=new Np;if(e instanceof Ur&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Pe(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let m=0;m<this.inputs.length;++m)c.add(this.inputs[m],e[m])}else for(const m of this.inputs){const f=e[m.name];if(f==null)throw new Pe(`No value is provided for the model's input ${m.name}`);c.add(m,f)}const d=Fx(l,c);return s?d:d[0]}retrieveSymbolicTensors(e){const t=Ii(null,e.length);let s=e.length;for(const a of this.layers){const l=Array.isArray(a.output)?a.output:[a.output],c=l.map(d=>d.name);for(let d=0;d<e.length;++d){const m=c.indexOf(e[d]);if(m!==-1&&(t[d]=l[m],s--),s===0)break}if(s===0)break}if(s>0){const a=[];throw t.forEach((l,c)=>{l==null&&a.push(e[c])}),new Pe(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(a)}`)}return t}predictLoop(e,t=32,s=!1){return st(()=>{const a=this.checkNumSamples(e);if(s)throw new mn("Verbose predictLoop() is not implemented yet.");const l=ES(a,t),c=this.outputs.map(d=>[]);for(let d=0;d<l.length;++d)st(()=>{const m=l[d][0],f=l[d][1],y=Ox(e,m,f),x=[];if(Array.isArray(y))for(let A=0;A<y.length;++A)x.push({key:this.inputs[A],value:y[A]});else x.push({key:this.inputs[0],value:y});const _=new Np(x);return Fx(this.outputs,_)}).forEach((m,f)=>c[f].push(m));return ci(c.map(d=>bi(d,0)))})}predict(e,t={}){const s=b2(e);S2(s,this.inputNames,this.feedInputShapes,!1);try{const a=t.batchSize==null?32:t.batchSize;return MS(a),this.predictLoop(s,a)}finally{Im(s,e)}}predictOnBatch(e){S2(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,s=!0,a){if(this.optimizer_==null)throw new fn("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const l=[];for(let c=0;c<this.feedOutputShapes.length;++c){const d=this.feedOutputShapes[c];this.feedLossFns[c]===bw?l.push(d.slice(0,d.length-1).concat([1])):l.push(d)}if(function(c,d,m){const f=cs(c.map(x=>x.shape[0]));f.sort();const y=cs(d.map(x=>x.shape[0]));if(y.sort(),f.length>1)throw new Pe(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(c.map(x=>x.shape))}`);if(y.length>1)throw new Pe(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(d.map(x=>x.shape))}`);if(f.length>0&&y.length>0&&!Le(f,y))throw new Pe(`Input Tensors should have the same number of samples as target Tensors. Found ${f[0]} input sample(s) and ${y[0]} target sample(s).`)}(e=_2(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=_2(t,this.feedOutputNames,l,!1,"target")),function(c,d,m){const f=[Am,ww,Dx];for(let y=0;y<c.length;++y){const x=c[y],_=d[y],A=m[y];if(_!=null){if(_===Dx&&x.shape[x.shape.length-1]===1)throw new Pe(`You are passing a target array of shape ${x.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(f.indexOf(_)!==-1){const C=x.shape.slice(1),L=A.slice(1);for(let P=0;P<C.length;++P){const U=C[P],q=L[P];if(q!=null&&U!==q)throw new Pe(`A target Tensor with shape ${x.shape} was passed for an output of shape ${A}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&a!=null&&a>0&&e[0].shape[0]%a!=0)throw new Pe(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${a}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,s,a,l=!0,c){const[d,m]=this.standardizeUserDataXY(e,t,l,c);if(s!=null)throw new Error("sample weight is not supported yet.");let f=null;if(a!=null){const y=m2(a,this.outputNames);f=[];for(let x=0;x<y.length;++x)f.push(await g2(m[x],null,y[x]))}return[d,m,f]}testLoop(e,t,s,a=0,l){return st(()=>{const c=this.checkNumSamples(t,s,l,"steps"),d=[];if(a>0)throw new mn("Verbose mode is not implemented yet.");if(l!=null)throw new mn("steps mode in testLoop() is not implemented yet");{const m=ES(c,s),f=us(xu(0,c));for(let y=0;y<m.length;++y){const x=m[y][0],_=m[y][1],A=Em(f,x,_-x),C=TS(t,A),L=e(C);if(y===0)for(let P=0;P<L.length;++P)d.push(Yn(0));for(let P=0;P<L.length;++P){const U=L[P];d[P]=jt(d[P],qe(_-x,U))}}for(let y=0;y<d.length;++y)d[y]=Un(d[y],c)}return d})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let s=0;s<e.length;++s){const a=e[s];let l=a;xs(e,a)>1&&(l+=`_${xs(e.slice(0,s),a)}`),t.push(l)}return t}makeTrainFunction(){return e=>{const t=[],s=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),l=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),c=[],d=this.collectedTrainableWeights.map(m=>m.read());return[this.optimizer_.minimize(()=>{const m=[];for(let _=0;_<this.inputs.length;++_)m.push({key:this.inputs[_],value:s[_]});const f=new Np(m),y=Fx(this.outputs,f,{training:!0});let x;for(let _=0;_<this.lossFunctions.length;++_){let A=(0,this.lossFunctions[_])(a[_],y[_]);l[_]!=null&&(A=t3(A,l[_]));const C=Wr(A);t.push(C),x=_===0?A:jt(x,A)}for(let _=0;_<this.metricsTensors.length;++_){let A;if(this.outputs.length>1&&_<this.outputs.length)A=t[_];else{const C=this.metricsTensors[_][0],L=this.metricsTensors[_][1];A=Wr(C(a[L],y[L]))}Qi(A),c.push(A)}return x=Wr(x),this.calculateLosses().forEach(_=>{x=jt(x,_)}),x},!0,d)].concat(c)}}makeTestFunction(){this.testFunction=e=>st(()=>{const t=[];let s;const a=e.slice(0,this.inputs.length),l=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),c=[];for(let f=0;f<this.inputs.length;++f)c.push({key:this.inputs[f],value:a[f]});const d=new Np(c),m=Fx(this.outputs,d);for(let f=0;f<this.lossFunctions.length;++f){const y=this.lossFunctions[f],x=Wr(y(l[f],m[f]));s=f===0?x:jt(s,x),t.push(s)}for(let f=0;f<this.metricsTensors.length;++f){const y=this.metricsTensors[f][0],x=this.metricsTensors[f][1],_=Wr(y(l[x],m[x]));t.push(_)}return t})}async fit(e,t,s={}){return async function(a,l,c,d={}){if(a.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let m,f,y,x,_,A,C;a.isTraining=!0;try{const L=d.batchSize==null?32:d.batchSize;MS(L);const P=!1,U=await a.standardizeUserData(l,c,d.sampleWeight,d.classWeight,P,L);m=U[0],f=U[1],C=U[2];let q,X=!1;if(d.validationData!=null&&d.validationData.length>0){if(X=!0,d.validationData.length!==2)throw d.validationData.length===3?new mn("validationData including sample weights is not supported yet."):new Pe(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${d.validationData} is invalid.`);y=d.validationData[0],x=d.validationData[1];const ze=!0,Ve=await a.standardizeUserData(y,x,null,null,ze,L);_=Ve[0],A=Ve[1],q=_.concat(A)}else if(d.validationSplit!=null&&d.validationSplit>0&&d.validationSplit<1){X=!0;const ze=Math.floor(m[0].shape[0]*(1-d.validationSplit)),Ve=m[0].shape[0];_=Ox(m,ze,Ve),m=Ox(m,0,ze),A=Ox(f,ze,Ve),f=Ox(f,0,ze),q=_.concat(A)}else d.validationSteps!=null&&(X=!0);const re=m.concat(f).concat(C);a.checkTrainableWeightsConsistency();const oe=a.makeTrainFunction(),de=a.getDedupedMetricsNames();let Ie,pe;X?(a.makeTestFunction(),Ie=a.testFunction,pe=de.slice().concat(de.map(ze=>"val_"+ze))):(Ie=null,q=[],pe=de.slice());const Be=i2(d.callbacks,d.yieldEvery);return await async function(ze,Ve,Qe,nt,ft,yt,Mt,vt,Ct,bt,Rt,Ut,Zt,qt,cn){ft==null&&(ft=32),yt==null&&(yt=1),Rt==null&&(Rt=!0),Zt==null&&(Zt=0);let hn=!1;Ct!=null&&bt!=null&&(hn=!0);const Sn=ze.checkNumSamples(Qe,ft,qt,"steps_per_epoch");let Cn;Sn!=null&&(Cn=xu(0,Sn)),Mt==null&&(Mt=1);const{callbackList:jn,history:ar}=s2(vt,Mt,yt,Zt,Sn,qt,ft,hn,Ut);jn.setModel(ze),ze.history=ar,await jn.onTrainBegin(),ze.stopTraining_=!1;for(let lr=Zt;lr<yt;++lr){await jn.onEpochBegin(lr);const Qn={};{if(Rt==="batch")throw new mn("batch shuffling is not implemneted yet");Rt&&Dn(Cn);const vr=us(Cn),Ar=ES(Sn,ft);for(let Dr=0;Dr<Ar.length;++Dr){const yr={};if(await jn.onBatchBegin(Dr,yr),st(()=>{const kr=Ar[Dr][0],qr=Ar[Dr][1],Cs=Em(vr,kr,qr-kr);yr.batch=Dr,yr.size=qr-kr;const _a=TS(Qe,Cs),sa=Ve(_a);for(let _i=0;_i<nt.length;++_i){const No=nt[_i],aa=sa[_i];yr[No]=aa,Qi(aa)}if(Dr===Ar.length-1&&hn){const _i=ze.testLoop(Ct,bt,ft);for(let No=0;No<nt.length;++No){const aa=nt[No],Ro=_i[No];Qi(Ro),Qn["val_"+aa]=Ro}}}),await jn.onBatchEnd(Dr,yr),QE(yr),ze.stopTraining_)break}vr.dispose()}if(await jn.onEpochEnd(lr,Qn),ze.stopTraining_)break}return await jn.onTrainEnd(),await ze.history.syncData(),ze.history}(a,oe,re,de,L,d.epochs,d.verbose,Be,Ie,q,d.shuffle,pe,d.initialEpoch,null)}finally{a.isTraining=!1,Im(m,l),Im(f,c),Im(_,y),Im(A,x),C!=null&&pr(C)}}(this,e,t,s)}async fitDataset(e,t){return async function(s,a,l){const c=l.batchesPerEpoch!=null;if(Q(s.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),Q(l!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),Q(l.epochs!=null&&l.epochs>0&&Number.isInteger(l.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${l.epochs}`),Q(!c||l.batchesPerEpoch>0&&Number.isInteger(l.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${l.batchesPerEpoch}`),Q(l.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),s.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");s.isTraining=!0;try{const d=l.validationData!=null;let m,f;if(d)if(v2(l.validationData))Q(l.validationBatches==null||l.validationBatches>0&&Number.isInteger(l.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${l.validationBatches}`);else{const X=function(re){if(re.length===3)throw new mn("Validation with sample weights is not implemented yet.");return{xs:re[0],ys:re[1]}}(l.validationData);m=X.xs,f=X.ys}const y=s.makeTrainFunction(),x=s.getDedupedMetricsNames();let _;_=d?x.slice().concat(x.map(X=>"val_"+X)):x.slice();const A=i2(l.callbacks,l.yieldEvery),C=l.verbose==null?1:l.verbose,{callbackList:L,history:P}=s2(A,C,l.epochs,null,null,function(X,re){let oe=null;return re.batchesPerEpoch!=null?oe=re.batchesPerEpoch:Number.isFinite(X.size)&&(oe=X.size),oe}(a,l),null,d,_);L.setModel(s),s.history=P,await L.onTrainBegin(),s.stopTraining_=!1;let U=l.initialEpoch==null?0:l.initialEpoch,q=await a.iterator();for(;U<l.epochs;){const X={};await L.onEpochBegin(U);let re=0,oe=0;for(c||(q=await a.iterator());!c||re<l.batchesPerEpoch;){const de=await q.next();if(c&&de.done){console.warn(`You provided \`batchesPerEpoch\` as ${l.batchesPerEpoch}, but your dataset iterator ran out of data after ${re} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+l.batchesPerEpoch*l.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(de.value!=null){const{xs:Ie,ys:pe}=y2(s,de.value),Be={};Be.batch=oe,Be.size=Ie[0].shape[0],await L.onBatchBegin(oe,Be);const ze=[];if(l.classWeight!=null){const nt=m2(l.classWeight,s.outputNames);for(let ft=0;ft<nt.length;++ft)ze.push(await g2(pe[ft],null,nt[ft]))}const Ve=Ie.concat(pe).concat(ze),Qe=y(Ve);pr(Ve);for(let nt=0;nt<x.length;++nt){const ft=x[nt],yt=Qe[nt];Be[ft]=yt,Qi(yt)}await L.onBatchEnd(oe,Be),QE(Be),oe++,re++}if(c?re>=l.batchesPerEpoch:de.done){if(d){let Ie;Ie=v2(l.validationData)?Yr(await s.evaluateDataset(l.validationData,{batches:l.validationBatches})):Yr(s.evaluate(m,f,{batchSize:l.validationBatchSize==null?32:l.validationBatchSize,verbose:0}));for(let pe=0;pe<s.metricsNames.length;++pe)X[`val_${s.metricsNames[pe]}`]=Ie[pe]}break}if(s.stopTraining_)break}if(await L.onEpochEnd(U,X),U++,s.stopTraining_)break}return await L.onTrainEnd(),await s.history.syncData(),s.history}finally{s.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const s=await this.standardizeUserData(e,t),a=s[0],l=s[1],c=this.makeTrainFunction()(a.concat(l)),d=[];for(const m of c){const f=await m.data();d.push(f[0])}return pr(c),ci(d)}getNamedWeights(e){const t=[],s=e!=null&&e.trainableOnly,a=s?this.trainableWeights:this.weights,l=this.getWeights(s);for(let c=0;c<a.length;++c)s&&!a[c].trainable||t.push({name:a[c].originalName,tensor:l[c]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(e.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){const t=Qu().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Qu().numTensors}return e}getLossIdentifiers(){let e;if(typeof this.loss=="string")e=wa(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if(typeof t!="string")throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(t=>wa(t))}else{const t=Object.keys(this.loss);e={};const s=this.loss;for(const a of t){if(typeof s[a]!="string")throw new Error("Serialization of non-string loss is not supported.");e[a]=wa(s[a])}}return e}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[wa(Mw(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>wa(Mw(e)));{const e={};for(const t in this.metrics)e[t]=wa(Mw(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(e.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(e.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(e.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");const t=wu(Px(e.optimizer_config));let s,a;if(typeof e.loss=="string")s=io(e.loss);else if(Array.isArray(e.loss))s=e.loss.map(l=>io(l));else if(e.loss!=null){s={};for(const l in e.loss)s[l]=io(e.loss[l])}if(Array.isArray(e.metrics))a=e.metrics.map(l=>io(l));else if(e.metrics!=null){a={};for(const l in e.metrics)a[l]=io(e.metrics[l])}this.compile({loss:s,metrics:a,optimizer:t})}async save(e,t){if(typeof e=="string"){const l=Tr(e);if(l.length===0)throw new Pe(`Cannot find any save handlers for URL '${e}'`);if(l.length>1)throw new Pe(`Found more than one (${l.length}) save handlers for URL '${e}'`);e=l[0]}if(e.save==null)throw new Pe("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const s=await qu(this.getNamedWeights(t)),a={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${Ew}`,convertedBy:null};if(t!=null&&t.includeOptimizer&&this.optimizer!=null){a.trainingConfig=this.getTrainingConfig();const l="optimizer",{data:c,specs:d}=await qu(await this.optimizer.getWeights(),l);s.specs.push(...d),s.data=og([s.data,c])}return this.userDefinedMetadata!=null&&(h2(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=s.data,a.weightSpecs=s.specs,e.save(a)}setUserDefinedMetadata(e){h2(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Wh.className="Model",Ht(Wh);class M2 extends Wh{}async function n3(r,e){"modelTopology"in r||(r={modelTopology:r});let t=(r=r).modelTopology;t.model_config!=null&&(t=t.model_config);const s=wu(Px(t),e);if(r.weightsManifest!=null){const a=await Yv(r.weightsManifest,r.pathPrefix,s.weights.map(c=>c.originalName)),l={};for(const c of s.weights)l[c.originalName]=a[c.originalName];s.loadWeights(l),pr(a)}return s}M2.className="Functional",Ht(M2);class Cm extends Wh{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=e.name!=null?e.name:fw("sequential_"),e.layers!=null)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new Pe(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Cm||e instanceof Wh;let s;if(t){if(s=e,s.outputs.length!==1)throw new Pe("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(s.inputs.length!==1)throw new Pe("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(e.inboundNodes.length===0){if(e.batchInputShape==null)throw new Pe("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const a=JE({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(a)}if(t)this.outputs=s.outputs,this.inputs=s.inputs;else{if(e.inboundNodes.length!==1)throw new Pe(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(e.inboundNodes[0].outputTensors.length!==1)throw new Pe("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=ZE(this.outputs[0])}this.inboundNodes=[],new yw({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Ii(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(a=>a.shape),outputShapes:this.outputs[0].shape})}else{const a=e.apply(this.outputs[0]);if(Array.isArray(a))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[a],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return this.model==null&&this.build(),this.model.call(e,t)}build(e){if(ii(e),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Wh({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,s=console.log){this.built||this.build(),super.summary(e,t,s)}setWeights(e){this.model==null&&this.build(),this.model.setWeights(e)}evaluate(e,t,s={}){if(!this.built)throw new fn("The model needs to be compiled before being used.");return this.model.evaluate(e,t,s)}async evaluateDataset(e,t){if(!this.built)throw new fn("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return this.model==null&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return this.model==null&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,s={}){if(!this.built)throw new fn("The model needs to be compiled before being used.");return this.model.fit(e,t,s)}async fitDataset(e,t){if(!this.built)throw new fn("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,s={},a=!1){let l,c={};if(t instanceof Array){if(t[0].className==null||t[0].className==="Merge")throw new Pe("Legacy serialization format not supported yet.");l=t}else Q(t.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),l=t.layers,delete t.layers,c=t;const d=new e(c);if(!(d instanceof Cm))throw new mn(`Sequential.fromConfig called on non-Sequential input: ${d}`);for(const m of l){const f=wu(m,void 0,a);a&&f.setFastWeightInitDuringBuild(!0),d.add(f)}return d}set stopTraining(e){if(this.model==null)throw new Pe("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(this.model==null)throw new Pe("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const s={};s.className=t.getClassName(),s.config=t.getConfig(),e.push(s)}return{name:this.name,layers:e}}}function r3(r){return new Wh(r)}function i3(r){return new Cm(r)}function s3(r,e){return e==null&&(e={}),async function(t,s){if(s==null&&(s={}),typeof t=="string"){const a=_n(t,s);if(a.length===0)a.push(Gf(t,s));else if(a.length>1)throw new Pe(`Found more than one (${a.length}) load handlers for URL '${t}'`);t=a[0]}return async function(a,l,c){if(c==null&&(c={}),a.load==null)throw new Pe("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const d=await a.load();let m=d.modelTopology;m.model_config!=null&&(m=m.model_config);const f=c.strict==null||c.strict,y=d.weightData!=null&&d.weightSpecs!=null&&f,x=wu(Px(m),void 0,y),_=d.trainingConfig;if(_!=null&&x.loadTrainingConfig(_),d.userDefinedMetadata!=null&&x.setUserDefinedMetadata(d.userDefinedMetadata),d.weightData!=null){if(d.weightSpecs==null)throw new Pe("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:A,optimizerWeights:C}=function(L,P){const U=uh(L,P),q={},X=[];return P.forEach(re=>{re.group==="optimizer"?X.push({name:re.name,tensor:U[re.name]}):q[re.name]=U[re.name]}),{modelWeights:q,optimizerWeights:X}}(d.weightData,d.weightSpecs);x.loadWeights(A,f),x.optimizer!=null&&C.length>0&&await x.optimizer.setWeights(C),pr(A),pr(C.map(L=>L.tensor))}return x}(t,0,s)}(r,e)}function T2(r){return JE(r)}function a3(r,e){ol.registerCallbackConstructor(r,e)}Cm.className="Sequential",Ht(Cm);class ao extends mh{getConfig(){return{}}}class E2 extends ao{apply(e,t=1){return function(s,a=1){if(a!==1)throw new mn(`Support for alpha values other than 1 (${a}) is not implemented yet.`);return Es(s)}(e,t)}}E2.className="elu",Ht(E2);class A2 extends ao{apply(e){return fc(e)}}A2.className="selu",Ht(A2);class I2 extends ao{apply(e){return To(e)}}I2.className="relu",Ht(I2);class C2 extends ao{apply(e){return st(()=>il(6,To(e)))}}C2.className="relu6",Ht(C2);class k2 extends ao{apply(e){return e}}k2.className="linear",Ht(k2);class N2 extends ao{apply(e){return Rs(e)}}N2.className="sigmoid",Ht(N2);class R2 extends ao{apply(e){return function(t){return st(()=>{const s=jt(.5,qe(.2,t));return Ks(s,0,1)})}(e)}}R2.className="hardSigmoid",Ht(R2);class L2 extends ao{apply(e){return kh(e)}}L2.className="softplus",Ht(L2);class D2 extends ao{apply(e){return function(t){return st(()=>Un(t,jt(ur(t),1)))}(e)}}D2.className="softsign",Ht(D2);class P2 extends ao{apply(e){return tc(e)}}P2.className="tanh",Ht(P2);class IS extends ao{apply(e,t=-1){return pu(e,t)}}IS.className="softmax",Ht(IS);class F2 extends ao{apply(e,t=-1){return Rg(e,t)}}F2.className="logSoftmax",Ht(F2);class O2 extends ao{apply(e,t=1){return st(()=>qe(Rs(qe(e,t)),e))}}O2.className="swish",Ht(O2);class z2 extends ao{apply(e){return st(()=>qe(e,tc(kh(e))))}}function Rp(r){return r.getClassName()}function CS(r,e={}){return Ap(r,Ja.getMap().classNameMap,e,"activation")}function Lp(r){if(r==null)return CS({className:"linear",config:{}});if(typeof r=="string"){const e={};return e.className=r,e.config={},CS(e)}return r instanceof ao?r:CS(r)}function kS(r){if(r!=null&&typeof r!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${r}`)}z2.className="mish",Ht(z2);class B2 extends mh{}class zx extends B2{constructor(e){super(),kS(e),this.l1=e==null||e.l1==null?.01:e.l1,this.l2=e==null||e.l2==null?.01:e.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(e){return st(()=>{let t=ji([1]);return this.hasL1&&(t=jt(t,Ln(qe(this.l1,ur(e))))),this.hasL2&&(t=jt(t,Ln(qe(this.l2,Rx(e))))),Xe(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}zx.className="L1L2",Ht(zx);const $2={l1l2:"L1L2"};function fi(r){return ta(r)}function U2(r,e={}){return Ap(r,Ja.getMap().classNameMap,e,"regularizer")}function Bi(r){return r==null?null:typeof r=="string"?U2({className:r in $2?$2[r]:r,config:{}}):r instanceof B2?r:U2(r)}class NS extends Vr{constructor(e){super(e==null?{}:e),this.supportsMasking=!0,e!=null&&(this.maxValue=e.maxValue)}call(e,t){e=_r(e);let s=To(e);return this.maxValue!=null&&(s=Ks(s,0,this.maxValue)),s}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}NS.className="ReLU",Ht(NS);class RS extends Vr{constructor(e){super(e==null?{}:e),this.DEFAULT_ALPHA=.3,e==null&&(e={}),this.alpha=e.alpha==null?this.DEFAULT_ALPHA:e.alpha}call(e,t){const s=_r(e);return cp(s,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}RS.className="LeakyReLU",Ht(RS);class LS extends Vr{constructor(e){if(super(e==null?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",e==null&&(e={}),this.supportsMasking=!0,this.alphaInitializer=zi(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Bi(e.alphaRegularizer),this.alphaConstraint=wt(e.alphaConstraint),e.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if(typeof e.sharedAxes!="number")throw new Pe(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=ii(e)).slice(1);if(this.sharedAxes!=null)for(const a of this.sharedAxes)t[a-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const s={};if(this.sharedAxes!=null)for(let a=1;a<e.length;++a)s[a]=e[a];this.inputSpec=[new bs({ndim:e.length,axes:s})],this.built=!0}call(e,t){return e=_r(e),hc(e,this.alpha.read())}getConfig(){const e={alphaInitializer:qi(this.alphaInitializer),alphaRegularizer:fi(this.alphaRegularizer),alphaConstraint:rs(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}LS.className="PReLU",Ht(LS);class DS extends Vr{constructor(e){if(super(e==null?{}:e),this.DEFAULT_ALPHA=1,e==null&&(e={}),e.alpha!=null&&e.alpha!==this.DEFAULT_ALPHA)throw new mn(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=e.alpha==null?this.DEFAULT_ALPHA:e.alpha}call(e,t){const s=_r(e);return Es(s)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}DS.className="ELU",Ht(DS);class PS extends Vr{constructor(e){super(e==null?{}:e),this.DEFAULT_THETA=1,e==null&&(e={}),this.theta=e.theta==null?this.DEFAULT_THETA:e.theta}call(e,t){const s=_r(e);return qe(s,un(Js(s,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}PS.className="ThresholdedReLU",Ht(PS);class FS extends Vr{constructor(e){super(e==null?{}:e),this.DEFAULT_AXIS=1,e==null&&(e={}),this.softmax=new IS().apply,this.axis=e.axis==null?this.DEFAULT_AXIS:e.axis}call(e,t){const s=_r(e);return this.softmax(s,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function hy(r,e,t){if(typeof r=="number")return Ii(r,e);if(r.length!==e)throw new Pe(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${r.length} elements.`);for(let a=0;a<e;++a){const l=r[a];if((s=l)!==parseInt(s.toString(),10))throw new Pe(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(r)} including a non-integer number ${l}`)}return r;var s}function Su(r,e,t,s,a=1){if(r==null)return r;let l;return l=t==="same"?r:r-(e+(e-1)*(a-1))+1,Math.floor((l+s-1)/s)}function _c(r,e,t,s){if(r==null)return null;if(s==="valid")r=r*e+Is([t-e,0]);else{if(s!=="same")throw new Pe(`Unsupport padding mode: ${s}.`);r*=e}return r}function OS(r,e){return st(()=>(Fn(e),e==="channelsFirst"?Pr(r,[0,2,3,1]):r))}function V2(r,e){return st(()=>(Fn(e),e==="channelsFirst"?Pr(r,[0,2,3,4,1]):r))}function W2(r,e,t,s=[1,1],a="valid",l,c,d=null){return st(()=>{if(l==null&&(l="channelsLast"),Fn(l),r.rank!==3&&r.rank!==4)throw new Pe(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${r.rank}.`);if(e.rank!==3&&e.rank!==4)throw new Pe(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${r.rank}.`);let m=OS(r,l);if(a==="causal")throw new mn("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return m=Hg({x:m,filter:e,strides:s,pad:a==="same"?"same":"valid",dilations:c,dataFormat:"NHWC",bias:t,activation:d}),l==="channelsFirst"&&(m=Pr(m,[0,3,1,2])),m})}FS.className="Softmax",Ht(FS);class Aw extends Vr{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Aw.verifyArgs(t),this.rank=e,ns(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new mn(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=hy(t.kernelSize,e,"kernelSize"),this.strides=hy(t.strides==null?1:t.strides,e,"strides"),this.padding=t.padding==null?"valid":t.padding,vs(this.padding),this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,Fn(this.dataFormat),this.activation=Lp(t.activation),this.useBias=t.useBias==null||t.useBias,this.biasInitializer=zi(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=wt(t.biasConstraint),this.biasRegularizer=Bi(t.biasRegularizer),this.activityRegularizer=Bi(t.activityRegularizer),this.dilationRate=hy(t.dilationRate==null?1:t.dilationRate,e,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new Pe(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new Pe(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new Pe(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(e){if(Rr("kernelSize"in e,"required key 'kernelSize' not in config"),typeof e.kernelSize!="number"&&!ay(e.kernelSize,"number",1,3))throw new Pe(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Rp(this.activation),useBias:this.useBias,biasInitializer:qi(this.biasInitializer),biasRegularizer:fi(this.biasRegularizer),activityRegularizer:fi(this.activityRegularizer),biasConstraint:rs(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class dy extends Aw{constructor(e,t){super(e,t),this.kernel=null,dy.verifyArgs(t),this.filters=t.filters,ns(this.filters,"filters"),this.kernelInitializer=zi(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=wt(t.kernelConstraint),this.kernelRegularizer=Bi(t.kernelRegularizer)}build(e){e=ii(e);const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new Pe(`The channel dimension of the input should be defined. Found ${e[t]}`);const s=e[t],a=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:s}}],this.built=!0}call(e,t){return st(()=>{let s;e=_r(e);const a=this.bias==null?null:this.bias.read(),l=Ix(this.activation.getClassName());if(l!=null&&this.rank===2)s=W2(e,this.kernel.read(),a,this.strides,this.padding,this.dataFormat,this.dilationRate,l);else{if(this.rank===1)s=function(c,d,m,f=1,y="valid",x,_=1){return st(()=>{if(x==null&&(x="channelsLast"),Fn(x),c.shape.length!==3)throw new Pe(`The input of a conv1dWithBias operation should be 3, but is ${c.shape.length} instead.`);if(d.shape.length!==3)throw new Pe(`The kernel for a conv1dWithBias operation should be 3, but is ${d.shape.length} instead`);if(m!=null&&m.shape.length!==1)throw new Pe(`The bias for a conv1dWithBias operation should be 1, but is ${d.shape.length} instead`);if(x==="channelsFirst"&&(c=Pr(c,[0,2,1])),y==="causal")throw new mn("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let A=op(c,d,f,y==="same"?"same":"valid","NWC",_);return m!=null&&(A=vu(A,m)),A})}(e,this.kernel.read(),a,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)s=W2(e,this.kernel.read(),a,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(this.rank!==3)throw new mn("convolutions greater than 3D are not implemented yet.");s=function(c,d,m,f=[1,1,1],y="valid",x,_){return st(()=>{if(x==null&&(x="channelsLast"),Fn(x),c.rank!==4&&c.rank!==5)throw new Pe(`conv3dWithBias expects input to be of rank 4 or 5, but received ${c.rank}.`);if(d.rank!==4&&d.rank!==5)throw new Pe(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${c.rank}.`);let A=V2(c,x);if(y==="causal")throw new mn("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return A=Mh(A,d,f,y==="same"?"same":"valid","NDHWC",_),m!=null&&(A=vu(A,m)),x==="channelsFirst"&&(A=Pr(A,[0,4,1,2,3])),A})}(e,this.kernel.read(),a,this.strides,this.padding,this.dataFormat,this.dilationRate)}this.activation!=null&&(s=this.activation.apply(s))}return s})}computeOutputShape(e){e=ii(e);const t=[],s=this.dataFormat==="channelsLast"?e.slice(1,e.length-1):e.slice(2);for(let l=0;l<s.length;++l){const c=Su(s[l],this.kernelSize[l],this.padding,this.strides[l],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[l]);t.push(c)}let a=[e[0]];return this.dataFormat==="channelsLast"?(a=a.concat(t),a.push(this.filters)):(a.push(this.filters),a=a.concat(t)),a}getConfig(){const e={filters:this.filters,kernelInitializer:qi(this.kernelInitializer),kernelRegularizer:fi(this.kernelRegularizer),kernelConstraint:rs(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||typeof e.filters!="number"||e.filters<1)throw new Pe(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class py extends dy{constructor(e){super(2,e),py.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!ay(e.kernelSize,"number",1,2))throw new Pe(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}py.className="Conv2D",Ht(py);class fy extends dy{constructor(e){super(3,e),fy.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&(!Array.isArray(e.kernelSize)||e.kernelSize.length!==1&&e.kernelSize.length!==3))throw new Pe(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}fy.className="Conv3D",Ht(fy);class zS extends py{constructor(e){if(super(e),this.inputSpec=[new bs({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new Pe(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if((e=ii(e)).length!==4)throw new Pe("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new Pe("The channel dimension of the inputs should be defined. Found `None`.");const s=e[t],a=this.kernelSize.concat([this.filters,s]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new bs({ndim:4,axes:{[t]:s}})],this.built=!0}call(e,t){return st(()=>{let s=_r(e);if(s.shape.length!==4)throw new Pe(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);const a=s.shape,l=a[0];let c,d;this.dataFormat==="channelsFirst"?(c=2,d=3):(c=1,d=2);const m=a[c],f=a[d],y=this.kernelSize[0],x=this.kernelSize[1],_=this.strides[0],A=this.strides[1],C=[l,_c(m,_,y,this.padding),_c(f,A,x,this.padding),this.filters];this.dataFormat!=="channelsLast"&&(s=Pr(s,[0,2,3,1]));let L=Sh(s,this.kernel.read(),C,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(L=Pr(L,[0,3,1,2])),this.bias!=null&&(L=vu(L,this.bias.read(),this.dataFormat)),this.activation!=null&&(L=this.activation.apply(L)),L})}computeOutputShape(e){const t=(e=ii(e)).slice();let s,a,l;this.dataFormat==="channelsFirst"?(s=1,a=2,l=3):(s=3,a=1,l=2);const c=this.kernelSize[0],d=this.kernelSize[1],m=this.strides[0],f=this.strides[1];return t[s]=this.filters,t[a]=_c(t[a],m,c,this.padding),t[l]=_c(t[l],f,d,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}zS.className="Conv2DTranspose",Ht(zS);class BS extends fy{constructor(e){if(super(e),this.inputSpec=[new bs({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new Pe(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if((e=ii(e)).length!==5)throw new Pe("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new Pe("The channel dimension of the inputs should be defined. Found `None`.");const s=e[t],a=this.kernelSize.concat([this.filters,s]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new bs({ndim:5,axes:{[t]:s}})],this.built=!0}call(e,t){return st(()=>{let s=_r(e);if(s.shape.length!==5)throw new Pe(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);const a=s.shape,l=a[0];let c,d,m;this.dataFormat==="channelsFirst"?(m=2,c=3,d=4):(m=1,c=2,d=3);const f=a[m],y=a[c],x=a[d],_=this.kernelSize[0],A=this.kernelSize[1],C=this.kernelSize[2],L=this.strides[0],P=this.strides[1],U=this.strides[2],q=[l,_c(f,L,_,this.padding),_c(y,P,A,this.padding),_c(x,U,C,this.padding),this.filters];this.dataFormat!=="channelsLast"&&(s=Pr(s,[0,2,3,4,1]));let X=j0(s,this.kernel.read(),q,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(X=Pr(X,[0,4,1,2,3])),this.bias!==null&&(X=vu(X,this.bias.read(),this.dataFormat)),this.activation!==null&&(X=this.activation.apply(X)),X})}computeOutputShape(e){const t=(e=ii(e)).slice();let s,a,l,c;this.dataFormat==="channelsFirst"?(s=1,a=2,l=3,c=4):(s=4,a=1,l=2,c=3);const d=this.kernelSize[0],m=this.kernelSize[1],f=this.kernelSize[2],y=this.strides[0],x=this.strides[1],_=this.strides[2];return t[s]=this.filters,t[a]=_c(t[a],y,d,this.padding),t[l]=_c(t[l],x,m,this.padding),t[c]=_c(t[c],_,f,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}BS.className="Conv3DTranspose",Ht(BS);class G2 extends dy{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,t.filters==null)throw new Pe("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(t.kernelInitializer!=null||t.kernelRegularizer!=null||t.kernelConstraint!=null)throw new Pe("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(t.padding!=null&&t.padding!=="same"&&t.padding!=="valid")throw new Pe(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=t.depthMultiplier==null?1:t.depthMultiplier,this.depthwiseInitializer=zi(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Bi(t.depthwiseRegularizer),this.depthwiseConstraint=wt(t.depthwiseConstraint),this.pointwiseInitializer=zi(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Bi(t.pointwiseRegularizer),this.pointwiseConstraint=wt(t.pointwiseConstraint)}build(e){if((e=ii(e)).length<this.rank+2)throw new Pe(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null||e[t]<0)throw new Pe(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const s=e[t],a=this.kernelSize.concat([s,this.depthMultiplier]),l=[];for(let d=0;d<this.rank;++d)l.push(1);l.push(s*this.depthMultiplier,this.filters);const c=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",a,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,c,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",l,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,c,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,c,this.biasConstraint):this.bias=null,this.inputSpec=[new bs({ndim:this.rank+2,axes:{[t]:s}})],this.built=!0}call(e,t){return st(()=>{let s;if(e=_r(e),this.rank===1)throw new mn("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(e=Pr(e,[0,2,3,1])),s=tx(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(s=vu(s,this.bias.read(),this.dataFormat)),this.activation!=null&&(s=this.activation.apply(s)),this.dataFormat==="channelsFirst"&&(s=Pr(s,[0,3,1,2])),s})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=qi(this.depthwiseInitializer),e.pointwiseInitializer=qi(this.pointwiseInitializer),e.depthwiseRegularizer=fi(this.depthwiseRegularizer),e.pointwiseRegularizer=fi(this.pointwiseRegularizer),e.depthwiseConstraint=rs(this.depthwiseConstraint),e.pointwiseConstraint=rs(this.pointwiseConstraint),e}}G2.className="SeparableConv";class $S extends G2{constructor(e){super(2,e)}}$S.className="SeparableConv2D",Ht($S);class Bx extends dy{constructor(e){super(1,e),Bx.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!ay(e.kernelSize,"number",1,1))throw new Pe(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Bx.className="Conv1D",Ht(Bx);class US extends Vr{constructor(e){super(e),typeof e.cropping=="number"?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:typeof e.cropping[0]=="number"?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=e.dataFormat===void 0?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return this.dataFormat==="channelsFirst"?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return st(()=>{if(e=_r(e),this.dataFormat==="channelsLast"){const s=iw(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return iw(s,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const s=iw(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return iw(s,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}US.className="Cropping2D",Ht(US);class VS extends Vr{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=e.size==null?this.DEFAULT_SIZE:e.size,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,Fn(this.dataFormat),this.interpolation=e.interpolation==null?"nearest":e.interpolation,t=this.interpolation,bc(gr,"InterpolationFormat",t)}computeOutputShape(e){if(this.dataFormat==="channelsFirst"){const t=e[2]==null?null:this.size[0]*e[2],s=e[3]==null?null:this.size[1]*e[3];return[e[0],e[1],t,s]}{const t=e[1]==null?null:this.size[0]*e[1],s=e[2]==null?null:this.size[1]*e[2];return[e[0],t,s,e[3]]}}call(e,t){return st(()=>{let s=_r(e);const a=s.shape;if(this.dataFormat==="channelsFirst"){s=Pr(s,[0,2,3,1]);const l=this.size[0]*a[2],c=this.size[1]*a[3],d=this.interpolation==="nearest"?no.resizeNearestNeighbor(s,[l,c]):no.resizeBilinear(s,[l,c]);return Pr(d,[0,3,1,2])}{const l=this.size[0]*a[1],c=this.size[1]*a[2];return this.interpolation==="nearest"?no.resizeNearestNeighbor(s,[l,c]):no.resizeBilinear(s,[l,c])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}VS.className="UpSampling2D",Ht(VS);class WS extends Aw{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=e.depthMultiplier==null?1:e.depthMultiplier,this.depthwiseInitializer=zi(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=wt(e.depthwiseConstraint),this.depthwiseRegularizer=Bi(e.depthwiseRegularizer)}build(e){if((e=ii(e)).length<4)throw new Pe(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t=this.dataFormat==="channelsFirst"?1:3;if(e[t]==null||e[t]<0)throw new Pe(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const s=e[t],a=[this.kernelSize[0],this.kernelSize[1],s,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",a,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[s*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return st(()=>{let s=function(a,l,c=[1,1],d="valid",m,f){return st(()=>{m==null&&(m="channelsLast"),Fn(m);let y=OS(a,m);if(a.rank!==4)throw new Pe(`Input for depthwiseConv2d is required to be 4-D, but is instead ${a.rank}-D`);if(l.rank!==4)throw new Pe(`depthwiseKernel is required to be 4-D, but is instead ${l.rank}-D`);return y=nl(y,l,c,d==="same"?"same":"valid","NHWC",f),m==="channelsFirst"&&(y=Pr(y,[0,3,1,2])),y})}(e=_r(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(s=vu(s,this.bias.read(),this.dataFormat)),this.activation!=null&&(s=this.activation.apply(s)),s})}computeOutputShape(e){e=ii(e);const t=this.dataFormat==="channelsFirst"?e[2]:e[1],s=this.dataFormat==="channelsFirst"?e[3]:e[2],a=this.dataFormat==="channelsFirst"?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,l=Su(t,this.kernelSize[0],this.padding,this.strides[0]),c=Su(s,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[e[0],a,l,c]:[e[0],l,c,a]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=qi(this.depthwiseInitializer),e.depthwiseRegularizer=fi(this.depthwiseRegularizer),e.depthwiseConstraint=rs(this.depthwiseRegularizer),e}}function H2(r,e,t,s){if(Array.isArray(r)){if(e!=null||t!=null)throw new Pe("When inputs is an array, neither initialState or constants should be provided");s!=null&&(t=r.slice(r.length-s,r.length),r=r.slice(0,r.length-s)),r.length>1&&(e=r.slice(1,r.length)),r=r[0]}function a(l){return l==null||Array.isArray(l)?l:[l]}return{inputs:r,initialState:e=a(e),constants:t=a(t)}}function j2(r,e,t,s=!1,a,l,c=!1,d=!1){return st(()=>{const m=e.shape.length;if(m<3)throw new Pe(`Input should be at least 3D, but is ${m}D.`);const f=[1,0].concat(xu(2,m));if(e=Pr(e,f),l!=null)throw new mn("The rnn() functoin of the deeplearn.js backend does not support constants yet.");c&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),a!=null&&((a=un(un(a,"bool"),"float32")).rank===m-1&&(a=Ds(a,-1)),a=Pr(a,f)),s&&(e=os(e,0),a!=null&&(a=os(a,0)));const y=[];let x,_=t;const A=e.shape[0],C=Pa(e);let L,P;a!=null&&(L=Pa(a));for(let U=0;U<A;++U){const q=C[U],X=st(()=>r(q,_));if(a==null)x=X[0],_=X[1];else{const re=st(()=>{const oe=L[U],de=kn(ms(oe),oe);return{output:jt(qe(X[0],oe),qe(_[0],de)),newStates:_.map((Ie,pe)=>jt(qe(X[1][pe],oe),qe(Ie,de)))}});x=re.output,_=re.newStates}d&&y.push(x)}return d&&(P=ea(y,1)),[x,P,_]})}WS.className="DepthwiseConv2D",Ht(WS);class Mu extends Vr{constructor(e){let t;if(super(e),e.cell==null)throw new Pe("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new kw({cells:e.cell}):e.cell,t.stateSize==null)throw new Pe("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=e.returnSequences!=null&&e.returnSequences,this.returnState=e.returnState!=null&&e.returnState,this.goBackwards=e.goBackwards!=null&&e.goBackwards,this._stateful=e.stateful!=null&&e.stateful,this.unroll=e.unroll!=null&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new bs({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return this.states_==null?xu(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){pS(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const s=t[0];let a;if(a=this.returnSequences?[e[0],e[1],s]:[e[0],s],this.returnState){const l=[];for(const c of t)l.push([e[0],c]);return[a].concat(l)}return a}computeMask(e,t){return st(()=>{Array.isArray(t)&&(t=t[0]);const s=this.returnSequences?t:null;if(this.returnState){const a=this.states.map(l=>null);return[s].concat(a)}return s})}get states(){if(this.states_==null){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let s=0;s<e;++s)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(this.numConstants!=null)throw new mn("Constants support is not implemented in RNN yet.");pS(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,s=e.slice(2);this.inputSpec[0]=new bs({shape:[t,null,...s]});const a=[e[0]].concat(e.slice(2));let l;if(this.cell.build(a),l=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],this.stateSpec!=null){if(!Le(this.stateSpec.map(c=>c.shape[c.shape.length-1]),l))throw new Pe(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=l.map(c=>new bs({shape:[null,c]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){st(()=>{if(!this.stateful)throw new bn("Cannot call resetStates() on an RNN Layer that is not stateful.");const s=this.inputSpec[0].shape[0];if(s==null)throw new Pe("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(a=>ji([s,a])):this.states_=[ji([s,this.cell.stateSize])];else if(e==null)pr(this.states_),this.keptStates!=null&&(pr(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(a=>ji([s,a])):this.states_[0]=ji([s,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Pe(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t===!0?this.keptStates.push(this.states_.slice()):pr(this.states_);for(let a=0;a<this.states_.length;++a){const l=e[a],c=Array.isArray(this.cell.stateSize)?this.cell.stateSize[a]:this.cell.stateSize,d=[s,c];if(!Le(l.shape,d))throw new Pe(`State ${a} is incompatible with layer ${this.name}: expected shape=${d}, received shape=${l.shape}`);this.states_[a]=l}}this.states_=this.states_.map(a=>Qi(a.clone()))})}apply(e,t){let s=t==null?null:t.initialState,a=t==null?null:t.constants;t==null&&(t={});const l=H2(e,s,a,this.numConstants);e=l.inputs,s=l.initialState,a=l.constants;let c=[],d=[];if(s!=null){t.initialState=s,c=c.concat(s),this.stateSpec=[];for(const m of s)this.stateSpec.push(new bs({shape:m.shape}));d=d.concat(this.stateSpec)}if(a!=null&&(t.constants=a,c=c.concat(a),this.numConstants=a.length),c[0]instanceof bu){const m=[e].concat(c),f=this.inputSpec.concat(d),y=this.inputSpec;this.inputSpec=f;const x=super.apply(m,t);return this.inputSpec=y,x}return super.apply(e,t)}call(e,t){return st(()=>{const s=t==null?null:t.mask,a=t==null?null:t.training;let l=t==null?null:t.initialState;e=_r(e),l==null&&(l=this.stateful?this.states_:this.getInitialState(e));const c=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(l.length!==c)throw new Pe(`RNN Layer has ${c} state(s) but was passed ${l.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const d={training:a},m=j2((A,C)=>{const L=this.cell.call([A].concat(C),d);return[L[0],L.slice(1)]},e,l,this.goBackwards,s,null,this.unroll,this.returnSequences),f=m[0],y=m[1],x=m[2];this.stateful&&this.resetStates(x,a);const _=this.returnSequences?y:f;return this.returnState?[_].concat(x):_})}getInitialState(e){return st(()=>{let t=ji(e.shape);return t=Ln(t,[1,2]),t=Nx(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(s=>s>1?iS(t,[1,s]):t):this.cell.stateSize>1?[iS(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(t.numConstants=this.numConstants);const s=this.cell.getConfig();return this.getClassName()===Mu.className&&(t.cell={className:this.cell.getClassName(),config:s}),Object.assign({},s,e,t)}static fromConfig(e,t,s={}){const a=wu(t.cell,s);return new e(Object.assign(t,{cell:a}))}}Mu.className="RNN",Ht(Mu);class $x extends Vr{}class Iw extends $x{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ns(this.units,"units"),this.activation=Lp(e.activation==null?this.DEFAULT_ACTIVATION:e.activation),this.useBias=e.useBias==null||e.useBias,this.kernelInitializer=zi(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=zi(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=zi(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Bi(e.kernelRegularizer),this.recurrentRegularizer=Bi(e.recurrentRegularizer),this.biasRegularizer=Bi(e.biasRegularizer),this.kernelConstraint=wt(e.kernelConstraint),this.recurrentConstraint=wt(e.recurrentConstraint),this.biasConstraint=wt(e.biasConstraint),this.dropout=na([1,Is([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=na([1,Is([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=ii(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return st(()=>{if((e=e).length!==2)throw new Pe(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let s=e[1];e=e[0];const a=t.training!=null&&t.training;let l;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Dp({ones:()=>ms(e),rate:this.dropout,training:a})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Dp({ones:()=>ms(s),rate:this.recurrentDropout,training:a}));const c=this.dropoutMask,d=this.recurrentDropoutMask;l=Vh(c!=null?qe(e,c):e,this.kernel.read()),this.bias!=null&&(l=vu(l,this.bias.read())),d!=null&&(s=qe(s,d));let m=jt(l,Vh(s,this.recurrentKernel.read()));return this.activation!=null&&(m=this.activation.apply(m)),[m,m]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Rp(this.activation),useBias:this.useBias,kernelInitializer:qi(this.kernelInitializer),recurrentInitializer:qi(this.recurrentInitializer),biasInitializer:qi(this.biasInitializer),kernelRegularizer:fi(this.kernelRegularizer),recurrentRegularizer:fi(this.recurrentRegularizer),biasRegularizer:fi(this.biasRegularizer),activityRegularizer:fi(this.activityRegularizer),kernelConstraint:rs(this.kernelConstraint),recurrentConstraint:rs(this.recurrentConstraint),biasConstraint:rs(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Iw.className="SimpleRNNCell",Ht(Iw);class GS extends Mu{constructor(e){e.cell=new Iw(e),super(e)}call(e,t){return st(()=>{this.cell.dropoutMask!=null&&(pr(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(pr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=t==null?null:t.mask,a=t==null?null:t.training,l=t==null?null:t.initialState;return super.call(e,{mask:s,training:a,initialState:l})})}static fromConfig(e,t){return new e(t)}}GS.className="SimpleRNN",Ht(GS);class Cw extends $x{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Pe("GRUCell does not support reset_after parameter set to true.");this.units=e.units,ns(this.units,"units"),this.activation=Lp(e.activation===void 0?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Lp(e.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias==null||e.useBias,this.kernelInitializer=zi(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=zi(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=zi(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Bi(e.kernelRegularizer),this.recurrentRegularizer=Bi(e.recurrentRegularizer),this.biasRegularizer=Bi(e.biasRegularizer),this.kernelConstraint=wt(e.kernelConstraint),this.recurrentConstraint=wt(e.recurrentConstraint),this.biasConstraint=wt(e.biasConstraint),this.dropout=na([1,Is([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=na([1,Is([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=ii(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return st(()=>{if((e=e).length!==2)throw new Pe(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const s=t.training!=null&&t.training;let a=e[1];e=e[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Dp({ones:()=>ms(e),rate:this.dropout,training:s,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Dp({ones:()=>ms(a),rate:this.recurrentDropout,training:s,count:3}));const l=this.dropoutMask,c=this.recurrentDropoutMask;let d,m,f;0<this.dropout&&this.dropout<1&&(e=qe(e,l[0]));let y=Vh(e,this.kernel.read());this.useBias&&(y=vu(y,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(a=qe(a,c[0]));const x=this.recurrentKernel.read(),[_,A]=Qs(x,[2*this.units,this.units],x.rank-1),C=Vh(a,_),[L,P,U]=Qs(y,3,y.rank-1),[q,X]=Qs(C,2,C.rank-1);d=this.recurrentActivation.apply(jt(L,q)),m=this.recurrentActivation.apply(jt(P,X));const re=Vh(qe(m,a),A);f=this.activation.apply(jt(U,re));const oe=jt(qe(d,a),qe(jt(1,ti(d)),f));return[oe,oe]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Rp(this.activation),recurrentActivation:Rp(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qi(this.kernelInitializer),recurrentInitializer:qi(this.recurrentInitializer),biasInitializer:qi(this.biasInitializer),kernelRegularizer:fi(this.kernelRegularizer),recurrentRegularizer:fi(this.recurrentRegularizer),biasRegularizer:fi(this.biasRegularizer),activityRegularizer:fi(this.activityRegularizer),kernelConstraint:rs(this.kernelConstraint),recurrentConstraint:rs(this.recurrentConstraint),biasConstraint:rs(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Cw.className="GRUCell",Ht(Cw);class HS extends Mu{constructor(e){e.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Cw(e),super(e)}call(e,t){return st(()=>{this.cell.dropoutMask!=null&&(pr(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(pr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=t==null?null:t.mask,a=t==null?null:t.training,l=t==null?null:t.initialState;return super.call(e,{mask:s,training:a,initialState:l})})}static fromConfig(e,t){return t.implmentation===0&&(t.implementation=1),new e(t)}}HS.className="GRU",Ht(HS);class Ux extends $x{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ns(this.units,"units"),this.activation=Lp(e.activation===void 0?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Lp(e.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias==null||e.useBias,this.kernelInitializer=zi(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=zi(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=zi(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Bi(e.kernelRegularizer),this.recurrentRegularizer=Bi(e.recurrentRegularizer),this.biasRegularizer=Bi(e.biasRegularizer),this.kernelConstraint=wt(e.kernelConstraint),this.recurrentConstraint=wt(e.recurrentConstraint),this.biasConstraint=wt(e.biasConstraint),this.dropout=na([1,Is([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=na([1,Is([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const s=(e=ii(e))[e.length-1];let a;if(this.kernel=this.addWeight("kernel",[s,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const l=this.biasInitializer,c=this.units;a=new((t=class extends Dl{apply(d,m){const f=l.apply([c]),y=new aw().apply([c]),x=l.apply([2*c]);return GE(GE(f,y),x)}}).className="CustomInit",t)}else a=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,a,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return st(()=>{const s=t.training!=null&&t.training;if((e=e).length!==3)throw new Pe(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let a=e[1];const l=e[2];e=e[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Dp({ones:()=>ms(e),rate:this.dropout,training:s,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Dp({ones:()=>ms(a),rate:this.recurrentDropout,training:s,count:4}));const c=this.dropoutMask,d=this.recurrentDropoutMask;let m,f,y,x;0<this.dropout&&this.dropout<1&&(e=qe(e,c[0]));let _=Vh(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(a=qe(a,d[0])),_=jt(_,Vh(a,this.recurrentKernel.read())),this.useBias&&(_=vu(_,this.bias.read()));const[A,C,L,P]=Qs(_,4,_.rank-1);m=this.recurrentActivation.apply(A),f=this.recurrentActivation.apply(C),y=jt(qe(f,l),qe(m,this.activation.apply(L))),x=this.recurrentActivation.apply(P);const U=qe(x,this.activation.apply(y));return[U,U,y]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Rp(this.activation),recurrentActivation:Rp(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qi(this.kernelInitializer),recurrentInitializer:qi(this.recurrentInitializer),biasInitializer:qi(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:fi(this.kernelRegularizer),recurrentRegularizer:fi(this.recurrentRegularizer),biasRegularizer:fi(this.biasRegularizer),activityRegularizer:fi(this.activityRegularizer),kernelConstraint:rs(this.kernelConstraint),recurrentConstraint:rs(this.recurrentConstraint),biasConstraint:rs(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Ux.className="LSTMCell",Ht(Ux);class jS extends Mu{constructor(e){e.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Ux(e),super(e)}call(e,t){return st(()=>{this.cell.dropoutMask!=null&&(pr(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(pr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=t==null?null:t.mask,a=t==null?null:t.training,l=t==null?null:t.initialState;return super.call(e,{mask:s,training:a,initialState:l})})}static fromConfig(e,t){return t.implmentation===0&&(t.implementation=1),new e(t)}}jS.className="LSTM",Ht(jS);class kw extends $x{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return st(()=>{let s=(e=e).slice(1);const a=[];for(const d of this.cells.slice().reverse())Array.isArray(d.stateSize)?a.push(s.splice(0,d.stateSize.length)):a.push(s.splice(0,1));a.reverse();const l=[];let c;for(let d=0;d<this.cells.length;++d){const m=this.cells[d];s=a[d],c=d===0?[e[0]].concat(s):[c[0]].concat(s),c=m.call(c,t),l.push(c.slice(1))}s=[];for(const d of l.slice().reverse())s.push(...d);return[c[0]].concat(s)})}build(e){let t;pS(e)&&(e=e[0]),e=e,this.cells.forEach((s,a)=>{Ps(`RNNCell_${a}`,()=>{s.build(e),t=Array.isArray(s.stateSize)?s.stateSize[0]:s.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map(s=>({className:s.getClassName(),config:s.getConfig()}))};return Object.assign({},e,t)}static fromConfig(e,t,s={}){const a=[];for(const l of t.cells)a.push(wu(l,s));return new e({cells:a})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const s of this.cells)t.push(...s.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return fS(e)}setWeights(e){const t=[];for(const s of this.cells){const a=s.weights.length,l=e.splice(a);for(let c=0;c<s.weights.length;++c)t.push([s.weights[c],l[c]])}mS(t)}}function Dp(r){const{ones:e,rate:t,training:s=!1,count:a=1}=r,l=()=>jE(e(),t),c=()=>Lx(l,e,s);return!a||a<=1?Qi(c().clone()):Array(a).fill(void 0).map(c).map(d=>Qi(d.clone()))}kw.className="StackedRNNCells",Ht(kw);class q2 extends Mu{constructor(e){if(e.unroll)throw new mn("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new mn("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new bs({ndim:5})]}call(e,t){return st(()=>{if(this.cell.dropoutMask!=null&&(pr(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(pr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Pe("ConvRNN2D cell does not support constants");const s=t==null?null:t.mask,a=t==null?null:t.training,l=t==null?null:t.initialState;return super.call(e,{mask:s,training:a,initialState:l})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return st(()=>{const{stateSize:t}=this.cell,s=e.shape,a=this.computeSingleOutputShape(s),l=ji([a[0],...a.slice(2)]);return Array.isArray(t)?Array(t.length).fill(l):[l]})}resetStates(e,t=!1){st(()=>{if(!this.stateful)throw new bn("Cannot call resetStates() on an RNN Layer that is not stateful.");const s=this.inputSpec[0].shape,a=this.computeSingleOutputShape(s),l=[a[0],...a.slice(2)];if(s[0]==null)throw new Pe("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>ji(l)):this.states_=[ji(l)];else if(e==null)pr(this.states_),this.keptStates!=null&&(pr(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>ji(l)):this.states_[0]=ji(l);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Pe(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):pr(this.states_);for(let c=0;c<this.states_.length;++c){const d=e[c],m=l;if(!Le(d.shape,m))throw new Pe(`State ${c} is incompatible with layer ${this.name}: expected shape=${m}, received shape=${d.shape}`);this.states_[c]=d}}this.states_=this.states_.map(c=>Qi(c.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:s,kernelSize:a,padding:l,strides:c,dilationRate:d}=this.cell,m=t==="channelsFirst",f=e[m?3:2],y=e[m?4:3],x=Su(f,a[0],l,c[0],d[0]),_=Su(y,a[1],l,c[1],d[1]);return[...e.slice(0,2),...m?[s,x,_]:[x,_,s]]}}q2.className="ConvRNN2D";class Nw extends Ux{constructor(e){const{filters:t,kernelSize:s,strides:a,padding:l,dataFormat:c,dilationRate:d}=e;super(Object.assign({},e,{units:t})),this.filters=t,ns(this.filters,"filters"),this.kernelSize=hy(s,2,"kernelSize"),this.kernelSize.forEach(m=>ns(m,"kernelSize")),this.strides=hy(a||1,2,"strides"),this.strides.forEach(m=>ns(m,"strides")),this.padding=l||"valid",vs(this.padding),this.dataFormat=c||"channelsLast",Fn(this.dataFormat),this.dilationRate=hy(d||1,2,"dilationRate"),this.dilationRate.forEach(m=>ns(m,"dilationRate"))}build(e){var t;e=ii(e);const s=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[s]==null)throw new Pe(`The channel dimension of the input should be defined. Found ${e[s]}`);const a=e[s],l=this.kernelSize.concat([a,4*this.filters]);this.kernel=this.addWeight("kernel",l,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const c=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",c,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let d;if(this.unitForgetBias){const m=this.biasInitializer,f=this.filters;d=new((t=class extends Dl{apply(y,x){return rS([m.apply([f]),ba([f]),m.apply([2*f])])}}).className="CustomInit",t)}else d=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,d,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return st(()=>{if(e.length!==3)throw new Pe(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const s=t.training||!1,a=e[0],l=e[1],c=e[2];0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Dp({ones:()=>ms(a),rate:this.dropout,training:s,count:4}));const d=this.dropoutMask,m=(Ct,bt,Rt)=>bt&&bt[Rt]?qe(bt[Rt],Ct):Ct;let f=m(a,d,0),y=m(a,d,1),x=m(a,d,2),_=m(a,d,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Dp({ones:()=>ms(l),rate:this.recurrentDropout,training:s,count:4}));const A=this.recurrentDropoutMask;let C=m(l,A,0),L=m(l,A,1),P=m(l,A,2),U=m(l,A,3);const[q,X,re,oe]=Qs(this.kernel.read(),4,3),[de,Ie,pe,Be]=this.useBias?Qs(this.bias.read(),4):[null,null,null,null];f=this.inputConv(f,q,de,this.padding),y=this.inputConv(y,X,Ie,this.padding),x=this.inputConv(x,re,pe,this.padding),_=this.inputConv(_,oe,Be,this.padding);const[ze,Ve,Qe,nt]=Qs(this.recurrentKernel.read(),4,3);C=this.recurrentConv(C,ze),L=this.recurrentConv(L,Ve),P=this.recurrentConv(P,Qe),U=this.recurrentConv(U,nt);const ft=this.recurrentActivation.apply(jt(f,C)),yt=this.recurrentActivation.apply(jt(y,L)),Mt=jt(qe(yt,c),qe(ft,this.activation.apply(jt(x,P)))),vt=qe(this.recurrentActivation.apply(jt(_,U)),this.activation.apply(Mt));return[vt,vt,Mt]})}getConfig(){const e=super.getConfig(),t=function(a,l){var c={};for(var d in a)Object.prototype.hasOwnProperty.call(a,d)&&l.indexOf(d)<0&&(c[d]=a[d]);if(a!=null&&typeof Object.getOwnPropertySymbols=="function"){var m=0;for(d=Object.getOwnPropertySymbols(a);m<d.length;m++)l.indexOf(d[m])<0&&Object.prototype.propertyIsEnumerable.call(a,d[m])&&(c[d[m]]=a[d[m]])}return c}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},t,s)}inputConv(e,t,s,a){const l=Al(e,t,this.strides,a||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return s?vu(l,s,this.dataFormat):l}recurrentConv(e,t){return Al(e,t,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}}Nw.className="ConvLSTM2DCell",Ht(Nw);class qS extends q2{constructor(e){const t=new Nw(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}qS.className="ConvLSTM2D",Ht(qS);class Rw extends Vr{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(this.noiseShape==null)return this.noiseShape;const t=e.shape,s=[];for(let a=0;a<this.noiseShape.length;++a)s.push(this.noiseShape[a]==null?t[a]:this.noiseShape[a]);return s}call(e,t){return st(()=>{this.invokeCallHook(e,t);const s=_r(e);if(0<this.rate&&this.rate<1){const a=t.training!=null&&t.training,l=this.getNoiseShape(s);return Lx(()=>jE(s,this.rate,l,this.seed),()=>s,a)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Rw.className="Dropout",Ht(Rw);class XS extends Rw{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}XS.className="SpatialDropout1D",Ht(XS);class YS extends Vr{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.batchInputShape==null&&e.inputShape==null&&e.inputDim!=null){let t=null;e.batchSize!=null&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,ns(this.units,"units"),this.activation=Lp(e.activation),e.useBias!=null&&(this.useBias=e.useBias),this.kernelInitializer=zi(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=zi(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=wt(e.kernelConstraint),this.biasConstraint=wt(e.biasConstraint),this.kernelRegularizer=Bi(e.kernelRegularizer),this.biasRegularizer=Bi(e.biasRegularizer),this.activityRegularizer=Bi(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=ii(e))[e.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=ii(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return st(()=>{this.invokeCallHook(e,t);const s=_r(e),a=Ix(this.activation.getClassName());let l;return a!=null?l=Vh(s,this.kernel.read(),a,this.bias?this.bias.read():null):(l=Vh(s,this.kernel.read()),this.bias!=null&&(l=vu(l,this.bias.read())),this.activation!=null&&(l=this.activation.apply(l))),l})}getConfig(){const e={units:this.units,activation:Rp(this.activation),useBias:this.useBias,kernelInitializer:qi(this.kernelInitializer),biasInitializer:qi(this.biasInitializer),kernelRegularizer:fi(this.kernelRegularizer),biasRegularizer:fi(this.biasRegularizer),activityRegularizer:fi(this.activityRegularizer),kernelConstraint:rs(this.kernelConstraint),biasConstraint:rs(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}YS.className="Dense",Ht(YS);class KS extends Vr{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=ii(e);for(const t of e.slice(1))if(t==null)throw new Pe(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Oi(e,1)]}call(e,t){return st(()=>{this.invokeCallHook(e,t);let s=_r(e);if(this.dataFormat==="channelsFirst"&&s.rank>1){const a=[0];for(let l=2;l<s.rank;++l)a.push(l);a.push(1),s=Pr(s,a)}return function(a){if(a.rank<=1)throw new Pe(`batchFlatten requires a minimum rank of 2. Got rank: ${a.rank}.`);const l=[a.shape[0],Oi(a.shape,1)];return Xe(a,l)}(s)})}getConfig(){const e={};this.dataFormat!=null&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}KS.className="Flatten",Ht(KS);class ZS extends Vr{constructor(e){super(e),this.supportsMasking=!0,this.activation=Lp(e.activation)}call(e,t){return st(()=>{this.invokeCallHook(e,t);const s=_r(e);return this.activation.apply(s)})}getConfig(){const e={activation:Rp(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}ZS.className="Activation",Ht(ZS);class JS extends Vr{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return st(()=>{return e=_r(e),s=e,a=this.n,st(()=>{if(s.shape.length!==2)throw new Pe(`repeat() expects a rank-2 tensor, but received a rank-${s.shape.length} tensor.`);return iS(Nx(s,1),[1,a,1])});var s,a})}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}JS.className="RepeatVector",Ht(JS);class QS extends Vr{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||e==null}fixUnknownDimension(e,t){const s="Total size of new array must be unchanged.",a=t.slice();let l=1,c=null;for(let m=0;m<a.length;++m){const f=a[m];if(this.isUnknown(f)){if(c!==null)throw new Pe("Can only specifiy one unknown dimension.");c=m}else l*=f}const d=Oi(e);if(c!==null){if(l===0||d%l!=0)throw new Pe(s);a[c]=d/l}else if(d!==l)throw new Pe(s);return a}computeOutputShape(e){let t=!1;for(let s=0;s<e.length;++s)if(this.isUnknown(e[s])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return st(()=>{this.invokeCallHook(e,t);const s=_r(e),a=s.shape,l=a.slice(0,1).concat(this.fixUnknownDimension(a.slice(1),this.targetShape));return Xe(s,l)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}QS.className="Reshape",Ht(QS);class eM extends Vr{constructor(e){if(super(e),e.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=xu(1,e.dims.length+1);if(!Le(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new bs({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=ii(e)).slice();return this.dims.forEach((s,a)=>{t[a+1]=e[s]}),t}call(e,t){return Pr(_r(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}eM.className="Permute",Ht(eM);class tM extends Vr{constructor(e){super(e==null?{}:e),this.supportsMasking=!0,this.maskValue=e!=null?e.maskValue==null?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const s=_r(e);return El(eo(s,this.maskValue),-1)}call(e,t){return st(()=>{this.invokeCallHook(e,t);const s=_r(e),a=El(eo(s,this.maskValue),-1,!0);return qe(s,un(a,s.dtype))})}}tM.className="Masking",Ht(tM);class nM extends Vr{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",e.batchInputShape==null&&e.inputShape==null){let t=null;e.batchSize!=null&&(t=e.batchSize),e.inputLength==null?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Yr(e.inputLength))}this.inputDim=e.inputDim,ns(this.inputDim,"inputDim"),this.outputDim=e.outputDim,ns(this.outputDim,"outputDim"),this.embeddingsInitializer=zi(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Bi(e.embeddingsRegularizer),this.activityRegularizer=Bi(e.activityRegularizer),this.embeddingsConstraint=wt(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return st(()=>this.maskZero?(e=_r(e),eo(e,Fr(e))):null)}computeOutputShape(e){if(e=ii(e),this.inputLength==null)return[...e,this.outputDim];const t=Yr(this.inputLength);if(t.length!==e.length-1)throw new Pe(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let s=0;for(let a=0;a<t.length;++a){const l=t[a],c=e[a+1];if(l!=null&&c!=null&&l!==c)throw new Pe(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);l==null&&(t[s]=c),s++}}return[e[0],...t,this.outputDim]}call(e,t){return st(()=>{this.invokeCallHook(e,t);let s=_r(e);s.dtype!=="int32"&&(s=rw(s,"int32"));const a=HE(this.embeddings.read(),Xe(s,[s.size]));return Xe(a,ii(this.computeOutputShape(s.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:qi(this.embeddingsInitializer),embeddingsRegularizer:fi(this.embeddingsRegularizer),activityRegularizer:fi(this.activityRegularizer),embeddingsConstraint:rs(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}nM.className="Embedding",Ht(nM);class km extends Vr{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new mn}computeElementwiseOpOutputShape(e,t){if(e==null||t==null)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(t.length===0)return e;const s=e.slice(0,e.length-t.length);for(let a=0;a<t.length;++a){const l=e[e.length-t.length+a],c=t[a];if(l==null||c==null||l<0||c<0)s.push(null);else if(l===1)s.push(c);else if(c===1)s.push(l);else{if(l!==c)throw new Pe("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));s.push(l)}}return s}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[ii(e)]),(e=e).length<2)throw new Pe(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const l of e)l!=null&&l[0]!==null&&t.push(l[0]);if(t=cs(t),t.length>1)throw new Pe(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let s=e[0]==null?null:e[0].slice(1);for(let l=1;l<e.length;++l){const c=e[l]==null?null:e[l].slice(1);s=this.computeElementwiseOpOutputShape(s,c)}const a=e.map(l=>l.length);e.indexOf(null)===-1&&cs(a).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return st(()=>{if(e=e,this.reshapeRequired){const s=[],a=e.map(l=>l.rank);if(a.indexOf(null)===-1){const l=Is(a);for(let c of e){const d=c.rank;for(let m=0;m<l-d;++m)c=Nx(c,1);s.push(c)}return this.mergeFunction(s)}{let l=!1;for(const m of e){const f=m.rank;if(f==null){const y=m.shape,x=y[0],_=y.slice(1).concat([x]);let A=Xe(m,[x].concat(Oi(y.slice(1))));A=Pr(A,[1,0]),A=Xe(A,_),s.push(A),l=!0}else if(f>1){const y=xu(1,f).concat([0]);s.push(Pr(m,y)),l=!0}else s.push(m)}let c=this.mergeFunction(s);const d=c.rank;if(l){if(d==null){const m=c.shape,f=m[m.length-1],y=[f].concat(m.slice(0,m.length-1));c=Xe(Pr(Xe(c,[-1,f]),[1,0]),y)}else if(d>1){const m=[d-1].concat(xu(0,d-1));c=Pr(c,m)}}return c}}return this.mergeFunction(e)})}computeOutputShape(e){let t;t=(e=e)[0]==null?null:e[0].slice(1);for(let a=1;a<e.length;++a){const l=e[a]==null?null:e[a].slice(1);t=this.computeElementwiseOpOutputShape(t,l)}let s=[];for(const a of e)a!=null&&a[0]!==null&&s.push(a[0]);return s=cs(s),t=s.length===1?s.concat(t):[null].concat(t),t}computeMask(e,t){return st(()=>{if(t==null)return null;if(!Array.isArray(t))throw new Pe("`mask` should be an Array");if(!Array.isArray(e))throw new Pe("`inputs` should be an Array");if(t.length!==e.length)throw new Pe(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(a=>a==null))return null;let s=(t=t.map(a=>a==null?a:Ds(a,0)))[0];for(let a=1;a<t.length-1;++a)s=va(s,t[a]);return s})}}class rM extends km{constructor(e){super(e)}mergeFunction(e){return st(()=>{let t=e[0].clone();for(let s=1;s<e.length;++s)t=jt(t,e[s]);return t})}}rM.className="Add",Ht(rM);class iM extends km{constructor(e){super(e)}mergeFunction(e){return st(()=>{let t=e[0].clone();for(let s=1;s<e.length;++s)t=qe(t,e[s]);return t})}}iM.className="Multiply",Ht(iM);class sM extends km{constructor(e){super(e)}mergeFunction(e){return st(()=>{let t=e[0].clone();for(let s=1;s<e.length;++s)t=jt(t,e[s]);return qe(1/e.length,t)})}}sM.className="Average",Ht(sM);class aM extends km{constructor(e){super(e)}mergeFunction(e){return st(()=>{let t=e[0];for(let s=1;s<e.length;++s)t=Qa(t,e[s]);return t})}}aM.className="Maximum",Ht(aM);class oM extends km{constructor(e){super(e)}mergeFunction(e){return st(()=>{let t=e[0];for(let s=1;s<e.length;++s)t=il(t,e[s]);return t})}}oM.className="Minimum",Ht(oM);class lM extends km{constructor(e){super(e),this.DEFAULT_AXIS=-1,e==null&&(e={}),this.axis=e.axis==null?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||e.length===1)throw new Pe("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const a of e)if(a!=null){t=!1;break}if(t)return;const s=[];for(let a=0;a<e.length;++a){const l=e[a].slice();l.splice(this.axis,1);let c=!1;for(const d of s)if(Le(d,l)){c=!0;break}c||s.push(l)}if(s.length>1)throw new Pe("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return st(()=>rS(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Pe("A `Concatenate` layer should be called on a list of inputs.");const t=e,s=t[0].slice(),a=this.axis<0?s.length+this.axis:this.axis;for(const l of t.slice(1)){if(s[a]==null||l[a]==null){s[a]=null;break}s[a]+=l[a]}return s}computeMask(e,t){if(t==null)return null;if(!Array.isArray(t))throw new Pe("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Pe("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Pe(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return st(()=>{let s=!0;if(t.forEach(c=>{c==null||(s=!1)}),s)return null;const a=[];for(let c=0;c<e.length;++c)t[c]==null?a.push(un(ms(e[c]),"bool")):t[c].rank<e[c].rank?a.push(Ds(t[c],-1)):a.push(t[c]);const l=bi(a,this.axis);return au(l,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Vx(r,e){for(;r<0;)r+=e;return r}lM.className="Concatenate",Ht(lM);class uM extends km{constructor(e){super(e),this.axes=e.axes,this.normalize=e.normalize!=null&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Q(Array.isArray(e)&&e.length===2&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],s=e[1];if(t.length>3||s.length>3)throw new mn("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(t,s);if(t[a[0]]!==s[a[1]])throw new Pe(`Dimension incompatibility: ${t[a[0]]} !== ${s[a[1]]}`)}mergeFunction(e){if(e.length!==2)throw new Pe(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,s=e[0],a=e[1];return t=Array.isArray(this.axes)?this.axes.map((l,c)=>Vx(l,e[c].shape.length)):[Vx(this.axes,s.shape.length),Vx(this.axes,a.shape.length)],this.normalize&&(s=xw(s,t[0]),a=xw(a,t[1])),function(l,c,d){if(l.shape.length>3||c.shape.length>3)throw new mn("batchDot is not implemented for tensors of 4D or higher rank yet");if(Q(l.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${l.shape.length}`),Q(l.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${c.shape.length}`),typeof d=="number"&&(d=[d,d]),l.dtype==="complex64"||c.dtype==="complex64")throw new mn("batchDot is not implemented for complex64-type Tensors yet.");const m=l.shape.length,f=c.shape.length;d==null&&(d=[m-1,f-2]);const y=d;return st(()=>{let x,_;if(m>f){x=m-f;const A=[];for(let C=0;C<x;++C)A.push(1);c=Xe(c,c.shape.concat(A))}else if(f>m){x=f-m;const A=[];for(let C=0;C<x;++C)A.push(1);l=Xe(l,l.shape.concat(A))}else x=0;if(l.shape.length===2&&c.shape.length===2)_=y[0]===y[1]?Ln(qe(l,c),y[0]):Ln(qe(Pr(l,[1,0]),c),y[1]);else{const A=y[0]!==l.shape.length-1,C=y[1]===c.shape.length-1;_=wr(l,c,A,C)}if(x>0){let A;A=m>f?m+f-3:m-1;const C=[];for(let L=A;L<A+x;++L)C.push(L);_=ls(_,C)}return _.shape.length===1&&(_=Ds(_,1)),_})}(s,a,t)}interpretAxes(e,t){let s;return s=Array.isArray(this.axes)?this.axes:[Vx(this.axes,e.length),Vx(this.axes,t.length)],s}computeOutputShape(e){Q(Array.isArray(e)&&e.length===2&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),s=e[1].slice();if(t.length>3||s.length>3)throw new mn("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(t,s);t.splice(a[0],1),s.splice(a[1],1),s.splice(0,1);const l=t.concat(s);return l.length===1&&l.push(1),l}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}uM.className="Dot",Ht(uM);class cM extends Vr{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return st(()=>{this.invokeCallHook(e,t);const s=_r(e);return Lx(()=>jt(sw(s.shape,0,this.stddev),s),()=>s,t.training||!1)})}}cM.className="GaussianNoise",Ht(cM);class hM extends Vr{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return st(()=>{this.invokeCallHook(e,t);const s=_r(e);return this.rate>0&&this.rate<1?Lx(()=>{const a=Math.sqrt(this.rate/(1-this.rate));return qe(s,sw(s.shape,1,a))},()=>s,t.training||!1):s})}}hM.className="GaussianDropout",Ht(hM);class dM extends Vr{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||_r(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return st(()=>{if(this.rate<1&&this.rate>0){const s=this._getNoiseShape(e);return Lx(()=>{const a=_r(e),l=-1.7580993408473766;let c=_o(Zr(s),this.rate);c=rw(c,"float32");const d=((1-this.rate)*(1+this.rate*l**2))**-.5,m=-d*l*this.rate,f=jt(qe(a,c),qe(jt(c,-1),l));return jt(qe(f,d),m)},()=>_r(e),t.training||!1)}return e})}}function Wx(r,e,t,s,a,l=.001){let c;if(r.rank===2)c=fs(r,e,t,s,a,l);else if(r.rank===3)c=V0(r,e,t,s,a,l);else{if(r.rank!==4)throw new mn(`batchNormalization is not implemented for array of rank ${r.rank} yet`);c=W0(r,e,t,s,a,l)}return c}dM.className="AlphaDropout",Ht(dM);class pM extends Vr{constructor(e){e==null&&(e={}),super(e),this.supportsMasking=!0,this.axis=e.axis==null?-1:e.axis,this.momentum=e.momentum==null?.99:e.momentum,this.epsilon=e.epsilon==null?.001:e.epsilon,this.center=e.center==null||e.center,this.scale=e.scale==null||e.scale,this.betaInitializer=zi(e.betaInitializer||"zeros"),this.gammaInitializer=zi(e.gammaInitializer||"ones"),this.movingMeanInitializer=zi(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=zi(e.movingVarianceInitializer||"ones"),this.betaConstraint=wt(e.betaConstraint),this.gammaConstraint=wt(e.gammaConstraint),this.betaRegularizer=Bi(e.betaRegularizer),this.gammaRegularizer=Bi(e.gammaRegularizer)}build(e){e=ii(e);const t=this.axis>=0?this.axis:this.axis+e.length,s=e[t];if(s==null)throw new Pe(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new bs({ndim:e.length,axes:{[t]:s}})];const a=[s];this.scale&&(this.gamma=this.addWeight("gamma",a,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",a,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",a,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",a,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return st(()=>{const s=t.training!=null&&t.training,a=_r(e),l=a.shape,c=l.length,d=xu(0,c),m=this.axis>=0?this.axis:this.axis+c;d.splice(m,1);const f=Ii(1,c);f[m]=l[m];const y=d.slice();y.sort();const x=!Le(y,xu(0,c).slice(0,c-1));if(!s)return(()=>{if(x){const P=Xe(this.movingMean.read(),f),U=Xe(this.movingVariance.read(),f),q=this.center?Xe(this.beta.read(),f):null,X=this.scale?Xe(this.gamma.read(),f):null;return Wx(a,P,U,q,X,this.epsilon)}return Wx(a,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)})();const[_,A,C]=function(P,U,q,X,re=.001){return Le(X.slice().sort(),xu(0,P.rank-1))?function(oe,de,Ie,pe,Be=.001){return st(()=>{const ze=Rh(oe,pe),Ve=ze.mean,Qe=ze.variance;return[Wx(oe,Ve,Qe,Ie,de,Be),Ve,Qe]})}(P,U,q,X,re):function(oe,de,Ie,pe,Be=.001){return st(()=>{const ze=Rh(oe,pe),Ve=ze.mean,Qe=ze.variance,nt=[];for(const Ct of xu(0,oe.rank))pe.indexOf(Ct)!==-1?nt.push(1):nt.push(oe.shape[Ct]);const ft=Xe(Ve,nt),yt=Xe(Qe,nt),Mt=de==null?null:Xe(de,nt),vt=Ie==null?null:Xe(Ie,nt);return[Wx(oe,ft,yt,vt,Mt,Be),Ve,Qe]})}(P,U,q,X,re)}(a,this.gamma.read(),this.beta.read(),d,this.epsilon),L=(P,U,q)=>{st(()=>{const X=1-q,re=P.read(),oe=qe(kn(re,U),X);P.write(kn(re,oe))})};return L(this.movingMean,A,this.momentum),L(this.movingVariance,C,this.momentum),_})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:qi(this.betaInitializer),gammaInitializer:qi(this.gammaInitializer),movingMeanInitializer:qi(this.movingMeanInitializer),movingVarianceInitializer:qi(this.movingVarianceInitializer),betaRegularizer:fi(this.betaRegularizer),gammaRegularizer:fi(this.gammaRegularizer),betaConstraint:rs(this.betaConstraint),gammaConstraint:rs(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}pM.className="BatchNormalization",Ht(pM);class fM extends Vr{constructor(e){if(e==null&&(e={}),super(e),this.axis=e.axis==null?-1:e.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const t of this.axis)if(!Number.isInteger(t))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=e.epsilon==null?.001:e.epsilon,this.center=e.center==null||e.center,this.scale=e.scale==null||e.scale,this.betaInitializer=zi(e.betaInitializer||"zeros"),this.gammaInitializer=zi(e.gammaInitializer||"ones"),this.betaRegularizer=Bi(e.betaRegularizer),this.gammaRegularizer=Bi(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=ii(e)).length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let a=0;a<this.axis.length;++a)this.axis[a]<0&&(this.axis[a]+=t);for(const a of this.axis)if(a<0||a>=t)throw new Error(`Invalid axis: ${a}`);if(this.axis.length!==cs(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const s=this.axis.map(a=>e[a]);this.scale?this.gamma=this.addWeight("gamma",s,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",s,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){const s=_r(e),a=s.shape,l=a.length;return st(()=>{let{mean:c,variance:d}=Rh(s,this.axis,!0);const m=Ii(1,l);for(const C of this.axis)m[C]=a[C];const f=C=>C!=null&&C.shape.length!==l&&this.axis!==[l-1]?Xe(C,m):C;let y=f(this.gamma.read()),x=f(this.beta.read());const _=[],A=[];for(let C=0;C<l;++C)this.axis.indexOf(C)!==-1?(_.push(a[C]),A.push(1)):(_.push(1),A.push(a[C]));return c=ya(c,_),d=ya(d,_),y=ya(y,A),x=ya(x,A),Wx(s,c,d,x,y,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:qi(this.betaInitializer),gammaInitializer:qi(this.gammaInitializer),betaRegularizer:fi(this.betaRegularizer),gammaRegularizer:fi(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}fM.className="LayerNormalization",Ht(fM);class mM extends Vr{constructor(e){if(e==null&&(e={}),super(e),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,e.padding==null)this.padding=[[1,1],[1,1]];else if(typeof e.padding=="number")this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,e.padding.length!==2)throw new Pe(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,s;if(typeof e.padding[0]=="number")t=[e.padding[0],e.padding[0]],s=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,e.padding[0].length!==2)throw new Pe(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],e.padding[1].length!==2)throw new Pe(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);s=e.padding[1]}this.padding=[t,s]}this.inputSpec=[new bs({ndim:4})]}computeOutputShape(e){let t,s;return e=ii(e),this.dataFormat==="channelsFirst"?(t=e[2]!=null&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,s=e[3]!=null&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,s]):(t=e[1]!=null&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,s=e[2]!=null&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,s,e[3]])}call(e,t){return st(()=>{return s=_r(e),a=this.padding,l=this.dataFormat,st(()=>{if(s.rank!==4)throw new Pe(`temporalPadding expects input tensor to be 4-D, but received a ${s.rank}-D tensor.`);if(a==null&&(a=[[1,1],[1,1]]),a.length!==2||a[0].length!==2||a[1].length!==2)throw new Pe("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(l==null&&(l="channelsLast"),l!=="channelsLast"&&l!=="channelsFirst")throw new Pe(`Unknown data format: ${l}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let c;return c=l==="channelsFirst"?[[0,0],[0,0],a[0],a[1]]:[[0,0],a[0],a[1],[0,0]],Na(s,c)});var s,a,l})}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Lw(r,e,t,s,a,l){return st(()=>{let c;Fn(a),Fi(l),vs(s),t==null&&(t=[1,1]),s==null&&(s="valid"),a==null&&(a="channelsLast"),l==null&&(l="max"),r=OS(r,a);const d=s==="same"?"same":"valid";return c=l==="max"?hp(r,e,t,d):ap(r,e,t,d),a==="channelsFirst"&&(c=Pr(c,[0,3,1,2])),c})}function X2(r,e,t,s,a,l){return st(()=>{let c;Fn(a),Fi(l),vs(s),t==null&&(t=[1,1,1]),s==null&&(s="valid"),a==null&&(a="channelsLast"),l==null&&(l="max"),r=V2(r,a);const d=s==="same"?"same":"valid";return c=l==="max"?Nh(r,e,t,d):U0(r,e,t,d),a==="channelsFirst"&&(c=Pr(c,[0,4,1,2,3])),c})}mM.className="ZeroPadding2D",Ht(mM);class Y2 extends Vr{constructor(e){if(e.poolSize==null&&(e.poolSize=2),super(e),typeof e.poolSize=="number")this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||e.poolSize.length!==1||typeof e.poolSize[0]!="number")throw new Pe(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(ns(this.poolSize,"poolSize"),e.strides==null)this.strides=this.poolSize;else if(typeof e.strides=="number")this.strides=[e.strides];else{if(!Array.isArray(e.strides)||e.strides.length!==1||typeof e.strides[0]!="number")throw new Pe(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}ns(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,vs(this.padding),this.inputSpec=[new bs({ndim:3})]}computeOutputShape(e){const t=Su((e=ii(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return st(()=>{this.invokeCallHook(e,t),e=Nx(_r(e),2);const s=this.poolingFunction(_r(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ls(s,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class gM extends Y2{constructor(e){super(e)}poolingFunction(e,t,s,a,l){return Fn(l),vs(a),Lw(e,t,s,a,l,"max")}}gM.className="MaxPooling1D",Ht(gM);class yM extends Y2{constructor(e){super(e)}poolingFunction(e,t,s,a,l){return Fn(l),vs(a),Lw(e,t,s,a,l,"avg")}}yM.className="AveragePooling1D",Ht(yM);class K2 extends Vr{constructor(e){if(e.poolSize==null&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],e.strides==null)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(e.strides.length!==2)throw new Pe(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];ns(this.poolSize,"poolSize"),ns(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,Fn(this.dataFormat),vs(this.padding),this.inputSpec=[new bs({ndim:4})]}computeOutputShape(e){e=ii(e);let t=this.dataFormat==="channelsFirst"?e[2]:e[1],s=this.dataFormat==="channelsFirst"?e[3]:e[2];return t=Su(t,this.poolSize[0],this.padding,this.strides[0]),s=Su(s,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[e[0],e[1],t,s]:[e[0],t,s,e[3]]}call(e,t){return st(()=>(this.invokeCallHook(e,t),this.poolingFunction(_r(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class xM extends K2{constructor(e){super(e)}poolingFunction(e,t,s,a,l){return Fn(l),vs(a),Lw(e,t,s,a,l,"max")}}xM.className="MaxPooling2D",Ht(xM);class vM extends K2{constructor(e){super(e)}poolingFunction(e,t,s,a,l){return Fn(l),vs(a),Lw(e,t,s,a,l,"avg")}}vM.className="AveragePooling2D",Ht(vM);class Z2 extends Vr{constructor(e){if(e.poolSize==null&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],e.strides==null)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(e.strides.length!==3)throw new Pe(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];ns(this.poolSize,"poolSize"),ns(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,Fn(this.dataFormat),vs(this.padding),this.inputSpec=[new bs({ndim:5})]}computeOutputShape(e){e=ii(e);let t=this.dataFormat==="channelsFirst"?e[2]:e[1],s=this.dataFormat==="channelsFirst"?e[3]:e[2],a=this.dataFormat==="channelsFirst"?e[4]:e[3];return t=Su(t,this.poolSize[0],this.padding,this.strides[0]),s=Su(s,this.poolSize[1],this.padding,this.strides[1]),a=Su(a,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[e[0],e[1],t,s,a]:[e[0],t,s,a,e[4]]}call(e,t){return st(()=>(this.invokeCallHook(e,t),this.poolingFunction(_r(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class bM extends Z2{constructor(e){super(e)}poolingFunction(e,t,s,a,l){return Fn(l),vs(a),X2(e,t,s,a,l,"max")}}bM.className="MaxPooling3D",Ht(bM);class wM extends Z2{constructor(e){super(e)}poolingFunction(e,t,s,a,l){return Fn(l),vs(a),X2(e,t,s,a,l,"avg")}}wM.className="AveragePooling3D",Ht(wM);class J2 extends Vr{constructor(e){super(e),this.inputSpec=[new bs({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new mn}}class _M extends J2{constructor(e){super(e||{})}call(e,t){return st(()=>{const s=_r(e);return Wr(s,1)})}}_M.className="GlobalAveragePooling1D",Ht(_M);class SM extends J2{constructor(e){super(e||{})}call(e,t){return st(()=>{const s=_r(e);return Mo(s,1)})}}SM.className="GlobalMaxPooling1D",Ht(SM);class Q2 extends Vr{constructor(e){super(e),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,Fn(this.dataFormat),this.inputSpec=[new bs({ndim:4})]}computeOutputShape(e){return e=e,this.dataFormat==="channelsLast"?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new mn}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class MM extends Q2{call(e,t){return st(()=>{const s=_r(e);return this.dataFormat==="channelsLast"?Wr(s,[1,2]):Wr(s,[2,3])})}}MM.className="GlobalAveragePooling2D",Ht(MM);class TM extends Q2{call(e,t){return st(()=>{const s=_r(e);return this.dataFormat==="channelsLast"?Mo(s,[1,2]):Mo(s,[2,3])})}}TM.className="GlobalMaxPooling2D",Ht(TM);class eA extends Vr{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return this.layer!=null&&this.layer.trainable}set trainable(e){this.layer!=null&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,s={}){const a=wu(t.layer,s);delete t.layer;const l={layer:a};return Object.assign(l,t),new e(l)}}class EM extends eA{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=ii(e)).length<3)throw new Pe(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=ii(e))[0]].concat(e.slice(2)),s=this.layer.computeOutputShape(t),a=e[1];return[s[0],a].concat(s.slice(1))}call(e,t){return st(()=>j2((s,a)=>[_r(this.layer.call(s,t)),[]],e=_r(e),[],!1,null,null,!1,!0)[1])}}EM.className="TimeDistributed",Ht(EM);class AM extends eA{constructor(e){super(e);const t=e.layer.getConfig(),s={};s.className=e.layer.getClassName(),s.config=t,this.forwardLayer=wu(s),t.goBackwards=t.goBackwards!==!0;const a={};var l;if(a.className=e.layer.getClassName(),a.config=t,this.backwardLayer=wu(a),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=e.mergeMode===void 0?"concat":e.mergeMode,l=this.mergeMode,bc(Hr,"BidirectionalMergeMode",l),e.weights)throw new mn("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,this.forwardLayer!=null&&(this.forwardLayer.trainable=e),this.backwardLayer!=null&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,s=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,s)),this.backwardLayer.setWeights(e.slice(s))}computeOutputShape(e){let t,s,a,l=this.forwardLayer.computeOutputShape(e);return Array.isArray(l)&&Array.isArray(l[0])||(l=[l]),l=l,this.returnState&&(a=l.slice(1)),t=l[0],t=t,this.mergeMode==="concat"?(t[t.length-1]*=2,s=[t]):s=this.mergeMode==null?[t,t.slice()]:[t],this.returnState?this.mergeMode==null?s.concat(a).concat(a.slice()):[t].concat(a).concat(a.slice()):ci(s)}apply(e,t){let s=t==null?null:t.initialState,a=t==null?null:t.constants;t==null&&(t={});const l=H2(e,s,a,this.numConstants);if(e=l.inputs,s=l.initialState,a=l.constants,Array.isArray(e)&&(s=e.slice(1),e=e[0]),(s==null||s.length===0)&&a==null)return super.apply(e,t);const c=[],d=[];if(s!=null){const f=s.length;if(f%2>0)throw new Pe("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=s,c.push(...s);const y=s.map(x=>new bs({shape:x.shape}));this.forwardLayer.stateSpec=y.slice(0,f/2),this.backwardLayer.stateSpec=y.slice(f/2),d.push(...y)}if(a!=null)throw new mn("Support for constants in Bidirectional layers is not implemented yet.");const m=c[0]instanceof bu;for(const f of c)if(f instanceof bu!==m)throw new Pe("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(m){const f=[e].concat(c),y=this.inputSpec.concat(d),x=this.inputSpec;this.inputSpec=y;const _=super.apply(f,t);return this.inputSpec=x,_}return super.apply(e,t)}call(e,t){return st(()=>{const s=t.initialState;let a,l,c,d;if(s==null)a=this.forwardLayer.call(e,t),l=this.backwardLayer.call(e,t);else{const m=s.slice(0,s.length/2),f=s.slice(s.length/2);a=this.forwardLayer.call(e,Object.assign(t,{initialState:m})),l=this.backwardLayer.call(e,Object.assign(t,{initialState:f}))}return this.returnState&&(Array.isArray(a)&&(c=a.slice(1).concat(l.slice(1))),a=a[0],l=l[0]),this.returnSequences&&(l=os(l,1)),this.mergeMode==="concat"?d=rS([a,l]):this.mergeMode==="sum"?d=jt(a,l):this.mergeMode==="ave"?d=qe(.5,jt(a,l)):this.mergeMode==="mul"?d=qe(a,l):this.mergeMode==null&&(d=[a,l]),this.returnState?this.mergeMode==null?d.concat(c):[d].concat(c):d})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Ps(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Ps(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let s;if(Array.isArray(t)&&(t=t[0]),s=this.returnSequences?this.mergeMode==null?[t,t]:t:this.mergeMode==null?[null,null]:null,this.returnState){const a=this.forwardLayer.states.map(l=>null);return Array.isArray(s)?s.concat(a).concat(a):[s].concat(a).concat(a)}return s}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(e),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const s=wu(t.layer);if(delete t.layer,t.numConstants!=null)throw new mn("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const a=t;return a.layer=s,new e(a)}}function o3(r){return new ly(r)}function l3(r){return new DS(r)}function u3(r){return new NS(r)}function c3(r){return new RS(r)}function h3(r){return new LS(r)}function d3(r){return new FS(r)}function p3(r){return new PS(r)}function f3(r){return new Bx(r)}function m3(r){return new py(r)}function g3(r){return new zS(r)}function y3(r){return new fy(r)}function x3(r){return new BS(r)}function v3(r){return new $S(r)}function b3(r){return new US(r)}function w3(r){return new VS(r)}function _3(r){return new WS(r)}function S3(r){return new ZS(r)}function M3(r){return new YS(r)}function T3(r){return new Rw(r)}function E3(r){return new XS(r)}function A3(r){return new KS(r)}function I3(r){return new JS(r)}function C3(r){return new QS(r)}function k3(r){return new eM(r)}function N3(r){return new nM(r)}function R3(r){return new rM(r)}function L3(r){return new sM(r)}function D3(r){return new lM(r)}function P3(r){return new aM(r)}function F3(r){return new oM(r)}function O3(r){return new iM(r)}function z3(r){return new uM(r)}function B3(r){return new pM(r)}function $3(r){return new fM(r)}function U3(r){return new mM(r)}function IM(r){return new yM(r)}function V3(r){return IM(r)}function W3(r){return IM(r)}function CM(r){return new vM(r)}function G3(r){return CM(r)}function H3(r){return CM(r)}function kM(r){return new wM(r)}function j3(r){return kM(r)}function q3(r){return kM(r)}function X3(r){return new _M(r)}function Y3(r){return new MM(r)}function tA(r){return new SM(r)}function nA(r){return new TM(r)}function rA(r){return new gM(r)}function iA(r){return new xM(r)}function K3(r){return new bM(r)}function Z3(r){return new HS(r)}function J3(r){return new Cw(r)}function Q3(r){return new jS(r)}function eL(r){return new Ux(r)}function tL(r){return new GS(r)}function nL(r){return new Iw(r)}function rL(r){return new qS(r)}function iL(r){return new Nw(r)}function sL(r){return new Mu(r)}function aL(r){return new kw(r)}function oL(r){return new AM(r)}function lL(r){return new EM(r)}AM.className="Bidirectional",Ht(AM);const uL=tA,cL=nA,hL=rA,dL=iA;function pL(r){return new cM(r)}function fL(r){return new hM(r)}function mL(r){return new dM(r)}function gL(r){return new tM(r)}function yL(r,e){return xS(r,e)}function xL(r,e){return l2(r,e)}function vL(r,e){return u2(r,e)}function bL(r,e){return vS(r,e)}function wL(r,e){return bS(r,e)}function _L(r,e){return o2(r,e)}function SL(r,e){return function(t,s){return st(()=>{const a=a2(t,s),l=function(d,m){return st(()=>un(Ln(va(Ls(d,1),Ls(m,0))),"float32"))}(t,s),c=jt(a,l);return un(as(Js(c,0),Un(a,c),0),"float32")})}(r,e)}function ML(r,e){return gS(r,e)}function TL(r,e){return vw(r,e)}function EL(r,e){return cy(r,e)}function AL(r,e){return cy(r,e)}function IL(r,e){return cy(r,e)}function CL(r,e){return Am(r,e)}function kL(r,e){return Am(r,e)}function NL(r,e){return Am(r,e)}function RL(r){return new zx(r)}function LL(r){return kS(e=r),new zx({l1:e!=null?e.l1:null,l2:0});var e}function DL(r){return kS(e=r),new zx({l2:e!=null?e.l2:null,l1:0});var e}class sA extends uy{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof Wh))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function Dw(r,e){return r<e}function PL(r,e){return r>e}class aA extends sA{constructor(e){if(super(),e==null&&(e={}),e.restoreBestWeights)throw new mn("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,["auto","min","max"].indexOf(this.mode)===-1&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),this.mode==="min"?this.monitorFunc=Dw:this.mode==="max"||this.monitor.indexOf("acc")!==-1?this.monitorFunc=PL:this.monitorFunc=Dw,this.monitorFunc===Dw&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,this.baseline!=null?this.best=this.baseline:this.best=this.monitorFunc===Dw?1/0:-1/0}async onEpochEnd(e,t){await kp(t);const s=this.getMonitorValue(t);s!=null&&(this.monitorFunc(s-this.minDelta,this.best)?(this.best=s,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){e==null&&(e={});const t=e[this.monitor];return t==null&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const FL={earlyStopping:function(r){return new aA(r)}};var Tu,oA;(function(r){r[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"})(Tu||(Tu={})),function(r){(function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"})(r.CheckpointFormatVersion||(r.CheckpointFormatVersion={}))}(oA||(oA={}));const NM={};function OL(r,e){const t={tfOpName:r,category:"custom",inputs:[],attrs:[],customExecutor:e};NM[r]=t}function lA(r){return NM[r]}function zL(r){delete NM[r]}function ie(r,e,t,s,a){const l=e.inputParams[r];if(l&&l.inputIndexStart!==void 0){const d=l.inputIndexStart,m=l.inputIndexEnd===0?void 0:l.inputIndexEnd===void 0?d+1:l.inputIndexEnd;if(l.type==="tensor")return Fa(e.inputNames[l.inputIndexStart],t,s,a);if(l.type==="tensors")return e.inputNames.slice(d,m).map(x=>Fa(x,t,s,a));const f=Fa(e.inputNames.slice(d)[0],t,s,a),y=f.dataSync();return l.type==="number"?y[0]:ht(f.shape,y)}const c=e.attrParams[r];return c&&c.value}function Fa(r,e,t,s){const[a,l]=Ao(r);if(s!=null){const d=s.getHashTableHandleByName(a);if(d!=null)return d}const c=t.currentContextIds.find(d=>!!e[Pw(a,d)]);return c!==void 0?e[Pw(a,c)][l]:void 0}function Gh(r,e){const[t,s,a]=Ao(r);return[Pw(t,e&&e.currentContextId),s,a]}function Pw(r,e){return e?`${r}-${e}`:r}function Ao(r){const e=r.split(":");if(e.length===1)return[r,0,void 0];const t=e[0],s=e.length===3?e[1]:void 0;return[t,Number(e[e.length-1]),s]}function Fw(r,e,t){let s=ie("pad",r,e,t);if(s==="explicit"){s=ie("explicitPaddings",r,e,t);const a=[[0,0],[0,0],[0,0],[0,0]];for(let l=0;l<4;l++)a[l][0]=s[2*l],a[l][1]=s[2*l+1];return a}return s}function Hh(r){return r.kept?r:iu(r)}const BL=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],$L=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],UL=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],VL=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],WL=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],GL=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],HL=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],jL=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],qL=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],XL=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],YL=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],KL=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],ZL=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],JL=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],QL=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],eD=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],tD=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],nD=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],rD=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class uA{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[xe,ue,Se,je,rt,et,ot,Et,tn,ln,Vt,En,Bt,sn,Mn,St,zn,Bn,wn].map(t=>t.json));this.opMappers=e.reduce((t,s)=>(t[s.tfOpName]=s,t),{})}transformGraph(e,t={}){const s=e.node,a=[],l=[],c=[],d=s.reduce((L,P)=>(L[P.name]=this.mapNode(P),P.op.startsWith("Placeholder")?a.push(L[P.name]):P.op==="Const"?l.push(L[P.name]):P.input!=null&&P.input.length!==0||c.push(L[P.name]),L),{});let m=[];const f=[];let y={},x={};t!=null&&(y=this.mapSignatureEntries(t.inputs),x=this.mapSignatureEntries(t.outputs));const _=Object.keys(d);_.forEach(L=>{const P=d[L];P.inputNames.forEach((U,q)=>{const[X,,re]=Gh(U),oe=d[X];if(oe.outputs!=null){const de=oe.outputs.indexOf(re);if(de!==-1){const Ie=`${X}:${de}`;P.inputNames[q]=Ie}}P.inputs.push(oe),oe.children.push(P)})}),Object.keys(x).length===0?_.forEach(L=>{const P=d[L];P.children.length===0&&f.push(P)}):Object.keys(x).forEach(L=>{const[P]=Gh(L),U=d[P];U!=null&&(U.signatureKey=x[L],f.push(U))}),Object.keys(y).length>0?Object.keys(y).forEach(L=>{const[P]=Gh(L),U=d[P];U&&(U.signatureKey=y[L],m.push(U))}):m=a;let A={};e.library!=null&&e.library.function!=null&&(A=e.library.function.reduce((L,P)=>(L[P.signature.name]=this.mapFunction(P),L),{}));const C={nodes:d,inputs:m,outputs:f,weights:l,placeholders:a,signature:t,functions:A};return c.length>0&&(C.initNodes=c),C}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,s)=>(t[e[s].name]=s,t),{})}mapNode(e){const t=lA(e.op)||this.opMappers[e.op]||{};e.attr==null&&(e.attr={});const s={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(a=>a.startsWith("^")?a.substr(1):a),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return t.inputs!=null&&(s.inputParams=t.inputs.reduce((a,l)=>(a[l.name]={type:l.type,inputIndexStart:l.start,inputIndexEnd:l.end},a),{})),t.attrs!=null&&(s.attrParams=t.attrs.reduce((a,l)=>{const c=l.type;let d;switch(l.type){case"string":d=RM(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=RM(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"string[]":d=$M(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=$M(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"number":d=DM(e.attr,l.tfName,l.defaultValue||0),d===void 0&&l.tfDeprecatedName&&(d=DM(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"number[]":d=BM(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=BM(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"bool":d=LM(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=LM(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"bool[]":d=VM(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=VM(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"shape":d=zM(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=zM(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"shape[]":d=UM(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=UM(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"dtype":d=FM(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=FM(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"dtype[]":d=OM(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=OM(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"func":d=hA(e.attr,l.tfName,l.defaultValue),d===void 0&&l.tfDeprecatedName&&(d=hA(e.attr,l.tfDeprecatedName,l.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${l.type} for op: ${e.op}`)}return a[l.name]={value:d,type:c},a},{})),s}mapFunction(e){const t=e.nodeDef,s=[];let a={};t!=null&&(a=t.reduce((f,y)=>(f[y.name]=this.mapNode(y),y.op==="Const"&&s.push(f[y.name]),f),{}));const l=[],c=[];e.signature.inputArg.forEach(f=>{const[y]=Gh(f.name),x={name:y,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:PM(f.type),type:"dtype"}},children:[]};x.signatureKey=f.name,l.push(x),a[y]=x}),Object.keys(a).forEach(f=>{const y=a[f];y.inputNames.forEach((x,_)=>{const[A,,C]=Gh(x),L=a[A];if(L.outputs!=null){const P=L.outputs.indexOf(C);if(P!==-1){const U=`${A}:${P}`;y.inputNames[_]=U}}y.inputs.push(L),L.children.push(y)})});const d=e.ret;e.signature.outputArg.forEach(f=>{const[y,x]=Gh(d[f.name]),_=a[y];_!=null&&(_.defaultOutput=x,c.push(_))});const m=this.mapArgsToSignature(e);return{nodes:a,inputs:l,outputs:c,weights:s,placeholders:[],signature:m}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((t,s)=>(t[s.name]=this.mapArgToTensorInfo(s),t),{}),outputs:e.signature.outputArg.reduce((t,s)=>(t[s.name]=this.mapArgToTensorInfo(s,e.ret),t),{})}}mapArgToTensorInfo(e,t){let s=e.name;return t!=null&&(s=t[s]),{name:s,dtype:e.type}}}function cA(r,e){const t=Array.isArray(r)?String.fromCharCode.apply(null,r):function(s){const a=At().global;if(a.atob!==void 0)return a.atob(s);if(typeof Buffer!="undefined")return new Buffer(s,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(r);return e?t:t.toLowerCase()}function RM(r,e,t,s=!1){const a=r[e];return a!=null?cA(a.s,s):t}function LM(r,e,t){const s=r[e];return s?s.b:t}function DM(r,e,t){const s=r[e]||{},a=s.i!=null?s.i:s.f!=null?s.f:t;return typeof a=="number"?a:parseInt(a,10)}function PM(r){switch(typeof r=="string"&&(r=Tu[r]),r){case Tu.DT_FLOAT:return"float32";case Tu.DT_INT32:case Tu.DT_INT64:case Tu.DT_INT8:case Tu.DT_UINT8:return"int32";case Tu.DT_BOOL:return"bool";case Tu.DT_DOUBLE:return"float32";case Tu.DT_STRING:return"string";default:return null}}function hA(r,e,t){const s=r[e];return s&&s.func?s.func.name:t}function FM(r,e,t){const s=r[e];return s&&s.type?PM(s.type):t}function OM(r,e,t){const s=r[e];return s&&s.list&&s.list.type?s.list.type.map(a=>PM(a)):t}function dA(r){if(!r.unknownRank)return r.dim!=null?r.dim.map(e=>typeof e.size=="number"?e.size:parseInt(e.size,10)):[]}function zM(r,e,t){const s=r[e];return s&&s.shape?dA(s.shape):t}function BM(r,e,t){const s=r[e];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(a=>typeof a=="number"?a:parseInt(a,10)):t}function $M(r,e,t,s=!1){const a=r[e];return a&&a.list&&a.list.s?a.list.s.map(l=>cA(l,s)):t}function UM(r,e,t){const s=r[e];return s&&s.list&&s.list.shape?s.list.shape.map(a=>dA(a)):t}function VM(r,e,t){const s=r[e];return s&&s.list&&s.list.b?s.list.b:t}class iD{constructor(e,t,s){this.node=e,this.tensorMap=t,this.context=s,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(a=>this.getInput(a)),e.rawAttrs!=null&&(this.attrs=Object.keys(e.rawAttrs).reduce((a,l)=>(a[l]=this.getAttr(l),a),{}))}getInput(e){return Fa(e,this.tensorMap,this.context)}getAttr(e,t){const s=this.node.rawAttrs[e];if(s.tensor!=null)return Fa(e,this.tensorMap,this.context);if(s.i!=null||s.f!=null)return DM(this.node.rawAttrs,e,t);if(s.s!=null)return RM(this.node.rawAttrs,e,t);if(s.b!=null)return LM(this.node.rawAttrs,e,t);if(s.shape!=null)return zM(this.node.rawAttrs,e,t);if(s.type!=null)return FM(this.node.rawAttrs,e,t);if(s.list!=null){if(s.list.i!=null||s.list.f!=null)return BM(this.node.rawAttrs,e,t);if(s.list.s!=null)return $M(this.node.rawAttrs,e,t);if(s.list.shape!=null)return UM(this.node.rawAttrs,e,t);if(s.list.b!=null)return VM(this.node.rawAttrs,e,t);if(s.list.type!=null)return OM(this.node.rawAttrs,e,t)}return t}}function Pl(r,e,t=""){if(typeof r!="number"&&typeof e!="number"){Q(r.length===e.length,()=>t+` Shapes ${r} and ${e} must match`);for(let s=0;s<r.length;s++){const a=r[s],l=e[s];Q(a<0||l<0||a===l,()=>t+` Shapes ${r} and ${e} must match`)}}}function pA(r){return typeof r!="number"&&!r.some(e=>e<0)}function Gx(r,e,t){let s=WM(r,t);const a=!pA(s);if(a&&e.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(a&&e.forEach(l=>{s=WM(l.shape,s)}),!pA(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function WM(r,e){if(typeof r=="number")return e;if(typeof e=="number")return r;if(r.length!==e.length)throw new Error(`Incompatible ranks during merge: ${r} vs. ${e}`);const t=[];for(let s=0;s<r.length;++s){const a=r[s],l=e[s];if(a>=0&&l>=0&&a!==l)throw new Error(`Incompatible shape during merge: ${r} vs. ${e}`);t[s]=a>=0?a:l}return t}class sD{constructor(e,t,s,a,l,c,d){this.name=e,this.dtype=t,this.maxSize=s,this.elementShape=a,this.identicalElementShapes=l,this.dynamicSize=c,this.clearAfterRead=d,this.tensors=[],this.closed_=!1,this.idTensor=Yn(0),Qi(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{e!=null&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(t=>this.read(t))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const s=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()!==0||this.elementShape!=null&&this.elementShape.length!==0||(this.elementShape=t.shape),Pl(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),s.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(s.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);s.tensor=t,Qi(t),s.written=!0,this.tensors[e]=s}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((s,a)=>this.write(s,t[a]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let a=0;a<this.size();a++)e.push(a)}if(e.length===0)return Xs([],[0].concat(this.elementShape));const s=this.readMany(e);return Pl(this.elementShape,s[0].shape,"TensorArray shape mismatch: "),ea(s,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(this.size()===0)return Xs([],[0].concat(this.elementShape));const t=[];for(let a=0;a<this.size();a++)t.push(a);const s=this.readMany(t);return Pl(this.elementShape,s[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`),bi(s,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const s=Math.max(...e);if(!this.dynamicSize&&s>=this.maxSize)throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);this.writeMany(e,Pa(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let s=0;const a=e.map(m=>(s+=m,s));if(s!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const l=s===0?0:t.size/s,c=[];st(()=>{t=Xe(t,[1,s,l]);for(let m=0;m<e.length;++m){const f=[0,m===0?0:a[m-1],0],y=[1,e[m],l];c[m]=Xe(Nr(t,f,y),this.elementShape)}return c});const d=[];for(let m=0;m<e.length;m++)d[m]=m;this.writeMany(d,c)}}class my{constructor(e,t,s,a=-1){this.tensors=e,this.elementShape=t,this.elementDtype=s,e!=null&&e.forEach(l=>{if(s!==l.dtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${l.dtype}`);Pl(t,l.shape,"TensorList shape mismatch: "),Qi(l)}),this.idTensor=Yn(0),this.maxNumElements=a,Qi(this.idTensor)}get id(){return this.idTensor.id}copy(){return new my([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{e!=null&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,s=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(s!==-1&&this.tensors.length!==s)throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);Pl(e,this.elementShape,"TensorList shape mismatch: ");const a=Gx(this.elementShape,this.tensors,e);return st(()=>{const l=this.tensors.map(c=>Xe(c,a));return ea(l,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");const s=Gx(this.elementShape,this.tensors,e),a=this.tensors.pop();return Pl(a.shape,e,"TensorList shape mismatch: "),Xe(a,s)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Pl(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Qi(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(this.maxNumElements!==-1&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,s){if(s!==this.elementDtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(this.tensors[e]==null)throw new Error(`element at index ${e} is null.`);Pl(this.tensors[e].shape,t,"TensorList shape mismatch: ");const a=Gx(this.elementShape,this.tensors,t);return Xe(this.tensors[e],a)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||this.maxNumElements!==-1&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Pl(this.elementShape,t.shape,"TensorList shape mismatch: "),Qi(t),this.tensors[e]=t}gather(e,t,s){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Pl(this.elementShape,s,"TensorList shape mismatch: "),e=e.slice(0,this.size());const a=Gx(this.elementShape,this.tensors,s);return e.length===0?Xs([],[0].concat(a)):st(()=>{const l=e.map(c=>Xe(this.tensors[c],a));return ea(l,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Pl(this.elementShape,t,"TensorList shape mismatch: ");const s=Gx(this.elementShape,this.tensors,t);return this.size()===0?Xs([],[0].concat(s)):st(()=>{const a=this.tensors.map(l=>Xe(l,s));return bi(a,0)})}}function fA(r,e,t){const[s,a]=ie("fusedOps",r,e,t),l=s==="biasadd",c=!l,d=a==="prelu",m=s==="fusedbatchnorm",f=ie("numArgs",r,e,t);if(l){if(d&&f!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!d&&l&&f!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(m)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const y=ie("strides",r,e,t),x=Fw(r,e,t),_=ie("dataFormat",r,e,t).toUpperCase(),A=ie("dilations",r,e,t);let[C,L]=ie("args",r,e,t);return c&&(L=C,C=void 0),{stride:y,pad:x,dataFormat:_,dilations:A,biasArg:C,preluArg:L,activationFunc:a,leakyreluAlpha:ie("leakyreluAlpha",r,e,t)}}function GM(r,e,t){return{boxes:ie("boxes",r,e,t),scores:ie("scores",r,e,t),maxOutputSize:ie("maxOutputSize",r,e,t),iouThreshold:ie("iouThreshold",r,e,t),scoreThreshold:ie("scoreThreshold",r,e,t),softNmsSigma:ie("softNmsSigma",r,e,t)}}class aD{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Yn(0),this.tensorMap=new Map,Qi(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Yn(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const s=await e.data();return this.tensorMap.forEach(a=>a.dispose()),this.tensorMap.clear(),st(()=>{const a=Pa(t),l=s.length,c=a.length;Q(l===c,()=>`The number of elements doesn't match, keys has ${l} elements, the values has ${c} elements.`);for(let d=0;d<l;d++){const m=s[d],f=a[d];Qi(f),this.tensorMap.set(m,f)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);const s=await e.data();return st(()=>{const a=[];for(let l=0;l<s.length;l++){const c=s[l],d=this.findWithDefault(c,t);a.push(d)}return ea(a)})}findWithDefault(e,t){const s=this.tensorMap.get(e);return s!=null?s:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function mA(r,e,t,s){const a=((l,c,d)=>{switch(l.category){case"arithmetic":return st(()=>((f,y,x)=>{switch(f.op){case"BiasAdd":case"AddV2":case"Add":return[jt(ie("a",f,y,x),ie("b",f,y,x))];case"AddN":return[vh(ie("tensors",f,y,x))];case"FloorMod":case"Mod":return[du(ie("a",f,y,x),ie("b",f,y,x))];case"Mul":return[qe(ie("a",f,y,x),ie("b",f,y,x))];case"RealDiv":case"Div":return[Un(ie("a",f,y,x),ie("b",f,y,x))];case"DivNoNan":return[Jf(ie("a",f,y,x),ie("b",f,y,x))];case"FloorDiv":return[jf(ie("a",f,y,x),ie("b",f,y,x))];case"Sub":return[kn(ie("a",f,y,x),ie("b",f,y,x))];case"Minimum":return[il(ie("a",f,y,x),ie("b",f,y,x))];case"Maximum":return[Qa(ie("a",f,y,x),ie("b",f,y,x))];case"Pow":return[Jo(ie("a",f,y,x),ie("b",f,y,x))];case"SquaredDifference":return[sl(ie("a",f,y,x),ie("b",f,y,x))];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"basic_math":return st(()=>((f,y,x)=>{switch(f.op){case"Abs":case"ComplexAbs":return[ur(ie("x",f,y,x))];case"Acos":return[ec(ie("x",f,y,x))];case"Acosh":return[xh(ie("x",f,y,x))];case"Asin":return[rp(ie("x",f,y,x))];case"Asinh":return[bh(ie("x",f,y,x))];case"Atan":return[ip(ie("x",f,y,x))];case"Atan2":return[Sg(ie("x",f,y,x),ie("y",f,y,x))];case"Atanh":return[Xf(ie("x",f,y,x))];case"Ceil":return[tl(ie("x",f,y,x))];case"Complex":return[nu(ie("real",f,y,x),ie("imag",f,y,x))];case"Cos":return[Th(ie("x",f,y,x))];case"Cosh":return[Kf(ie("x",f,y,x))];case"Elu":return[Es(ie("x",f,y,x))];case"Erf":return[Ah(ie("x",f,y,x))];case"Exp":return[Zs(ie("x",f,y,x))];case"Expm1":return[up(ie("x",f,y,x))];case"Floor":return[sc(ie("x",f,y,x))];case"Log":return[xa(ie("x",f,y,x))];case"Log1p":return[So(ie("x",f,y,x))];case"Imag":return[ac(ie("x",f,y,x))];case"Neg":return[ti(ie("x",f,y,x))];case"Reciprocal":return[am(ie("x",f,y,x))];case"Real":return[yp(ie("x",f,y,x))];case"Relu":return[To(ie("x",f,y,x))];case"Round":return[Nl(ie("x",f,y,x))];case"Selu":return[fc(ie("x",f,y,x))];case"Sigmoid":return[Rs(ie("x",f,y,x))];case"Sin":return[um(ie("x",f,y,x))];case"Sign":return[lm(ie("x",f,y,x))];case"Sinh":return[gs(ie("x",f,y,x))];case"Softplus":return[kh(ie("x",f,y,x))];case"Sqrt":return[Ts(ie("x",f,y,x))];case"Square":return[ei(ie("x",f,y,x))];case"Tanh":return[tc(ie("x",f,y,x))];case"Tan":return[Bg(ie("x",f,y,x))];case"ClipByValue":return[Ks(ie("x",f,y,x),ie("clipValueMin",f,y,x),ie("clipValueMax",f,y,x))];case"Relu6":return[La(ie("x",f,y,x))];case"Rsqrt":return[pc(Fa(f.inputNames[0],y,x))];case"Prod":return[gp(ie("x",f,y,x),ie("axes",f,y,x))];case"LeakyRelu":return[cp(ie("x",f,y,x),ie("alpha",f,y,x))];case"Prelu":return[hc(ie("x",f,y,x),ie("alpha",f,y,x))];case"IsNan":return[Ih(Fa(f.inputNames[0],y,x))];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"control":return(async(f,y,x)=>{switch(f.op){case"If":case"StatelessIf":{const _=ie("thenBranch",f,y,x),A=ie("elseBranch",f,y,x),C=ie("cond",f,y,x),L=ie("args",f,y,x);return(await C.data())[0]?x.functionMap[_].executeFunctionAsync(L,x.tensorArrayMap,x.tensorListMap):x.functionMap[A].executeFunctionAsync(L,x.tensorArrayMap,x.tensorListMap)}case"While":case"StatelessWhile":{const _=ie("body",f,y,x),A=ie("cond",f,y,x),C=ie("args",f,y,x),L=await x.functionMap[A].executeFunctionAsync(C,x.tensorArrayMap,x.tensorListMap),P=C.map(X=>X.id);let U=await L[0].data();L.forEach(X=>{X.kept||P.indexOf(X.id)!==-1||X.dispose()});let q=C;for(;U[0];){const X=q;q=await x.functionMap[_].executeFunctionAsync(q,x.tensorArrayMap,x.tensorListMap);const re=q.map(de=>de.id);X.forEach(de=>{de.kept||P.indexOf(de.id)!==-1||re.indexOf(de.id)!==-1||de.dispose()});const oe=await x.functionMap[A].executeFunctionAsync(q,x.tensorArrayMap,x.tensorListMap);U=await oe[0].data(),oe.forEach(de=>{de.kept||P.indexOf(de.id)!==-1||re.indexOf(de.id)!==-1||de.dispose()})}return q}case"LoopCond":return[Hh(ie("pred",f,y,x))];case"Switch":{const _=ie("pred",f,y,x);let A=ie("data",f,y,x);return A.kept||(A=Hh(A)),(await _.data())[0]?[void 0,A]:[A,void 0]}case"Merge":{const _=f.inputNames.find(A=>Fa(A,y,x)!==void 0);return _?[Hh(Fa(_,y,x))]:void 0}case"Enter":{const _=ie("frameName",f,y,x),A=ie("tensor",f,y,x);return x.enterFrame(_),[Hh(A)]}case"Exit":{const _=ie("tensor",f,y,x);return x.exitFrame(),[Hh(_)]}case"NextIteration":{const _=ie("tensor",f,y,x);return x.nextIteration(),[Hh(_)]}case"TensorArrayV3":{const _=ie("size",f,y,x),A=ie("dtype",f,y,x),C=ie("elementShape",f,y,x),L=ie("dynamicSize",f,y,x),P=ie("clearAfterRead",f,y,x),U=ie("identicalElementShapes",f,y,x),q=ie("name",f,y,x),X=new sD(q,A,_,C,U,L,P);return x.addTensorArray(X),[X.idTensor,Yn(1)]}case"TensorArrayWriteV3":{const _=ie("tensorArrayId",f,y,x),A=ie("index",f,y,x),C=ie("tensor",f,y,x),L=x.getTensorArray(_.id);return L.write(A,C),[L.idTensor]}case"TensorArrayReadV3":{const _=ie("tensorArrayId",f,y,x),A=ie("index",f,y,x);return[x.getTensorArray(_.id).read(A)]}case"TensorArrayGatherV3":{const _=ie("tensorArrayId",f,y,x),A=ie("indices",f,y,x),C=ie("dtype",f,y,x);return[x.getTensorArray(_.id).gather(A,C)]}case"TensorArrayScatterV3":{const _=ie("tensorArrayId",f,y,x),A=ie("indices",f,y,x),C=ie("tensor",f,y,x),L=x.getTensorArray(_.id);return L.scatter(A,C),[L.idTensor]}case"TensorArrayConcatV3":{const _=ie("tensorArrayId",f,y,x),A=x.getTensorArray(_.id),C=ie("dtype",f,y,x);return[A.concat(C)]}case"TensorArraySplitV3":{const _=ie("tensorArrayId",f,y,x),A=ie("tensor",f,y,x),C=ie("lengths",f,y,x),L=x.getTensorArray(_.id);return L.split(C,A),[L.idTensor]}case"TensorArraySizeV3":{const _=ie("tensorArrayId",f,y,x);return[Yn(x.getTensorArray(_.id).size(),"int32")]}case"TensorArrayCloseV3":{const _=ie("tensorArrayId",f,y,x),A=x.getTensorArray(_.id);return A.clearAndClose(),[A.idTensor]}case"TensorListSetItem":{const _=ie("tensorListId",f,y,x),A=ie("index",f,y,x),C=ie("tensor",f,y,x),L=x.getTensorList(_.id);return L.setItem(A,C),[L.idTensor]}case"TensorListGetItem":{const _=ie("tensorListId",f,y,x),A=ie("index",f,y,x),C=ie("elementShape",f,y,x),L=ie("elementDType",f,y,x);return[x.getTensorList(_.id).getItem(A,C,L)]}case"TensorListScatterV2":case"TensorListScatter":{const _=ie("indices",f,y,x),A=function(C,L,P,U){if(L.length!==C.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${L.length} vs. ${C.shape[0]}`);const q=Math.max(...L);if(U!=null&&U!==-1&&q>=U)throw new Error(`Max index must be < array size (${q}  vs. ${U})`);const X=new my([],P,C.dtype,U),re=Pa(C,0);return L.forEach((oe,de)=>{X.setItem(oe,re[de])}),X}(ie("tensor",f,y,x),_,ie("elementShape",f,y,x),ie("numElements",f,y,x));return x.addTensorList(A),[A.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const _=ie("elementShape",f,y,x),A=ie("elementDType",f,y,x);let C;C=f.op==="TensorListReserve"?"numElements":"maxNumElements";const L=function(P,U,q){return new my([],P,U,q)}(_,A,ie(C,f,y,x));return x.addTensorList(L),[L.idTensor]}case"TensorListGather":{const _=ie("tensorListId",f,y,x),A=ie("indices",f,y,x),C=ie("elementShape",f,y,x),L=ie("elementDType",f,y,x);return[x.getTensorList(_.id).gather(A,L,C)]}case"TensorListStack":{const _=ie("tensorListId",f,y,x),A=ie("elementShape",f,y,x),C=ie("elementDType",f,y,x),L=ie("numElements",f,y,x);return[x.getTensorList(_.id).stack(A,C,L)]}case"TensorListFromTensor":{const _=function(A,C,L){const P=A.dtype;if(A.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${A.shape}`);if(A.dtype!==L)throw new Error(`Invalid data types; op elements ${A.dtype}, but list elements ${L}`);Pl(A.shape.slice(1),C,"TensorList shape mismatch: ");const U=Pa(A);return new my(U,C,P)}(ie("tensor",f,y,x),ie("elementShape",f,y,x),ie("elementDType",f,y,x));return x.addTensorList(_),[_.idTensor]}case"TensorListConcat":{const _=ie("tensorListId",f,y,x),A=x.getTensorList(_.id),C=ie("dtype",f,y,x),L=ie("elementShape",f,y,x);return[A.concat(C,L)]}case"TensorListPushBack":{const _=ie("tensorListId",f,y,x),A=ie("tensor",f,y,x),C=x.getTensorList(_.id);return C.pushBack(A),[C.idTensor]}case"TensorListPopBack":{const _=ie("tensorListId",f,y,x),A=ie("elementShape",f,y,x),C=ie("elementDType",f,y,x);return[x.getTensorList(_.id).popBack(A,C)]}case"TensorListSplit":{const _=ie("tensor",f,y,x),A=ie("elementShape",f,y,x),C=function(L,P,U){let q=0;const X=P.map(pe=>(q+=pe,q));if(q!==L.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${q}, and tensor's shape is: ${L.shape}`);const re=WM(L.shape.slice(1),U),oe=q===0?0:L.size/q,de=st(()=>{const pe=[];L=Xe(L,[1,q,oe]);for(let Be=0;Be<P.length;++Be){const ze=[0,Be===0?0:X[Be-1],0],Ve=[1,P[Be],oe];pe[Be]=Xe(Nr(L,ze,Ve),re)}return L.dispose(),pe}),Ie=new my([],U,L.dtype,P.length);for(let pe=0;pe<de.length;pe++)Ie.setItem(pe,de[pe]);return Ie}(_,ie("lengths",f,y,x),A);return x.addTensorList(C),[C.idTensor]}default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d);case"convolution":return st(()=>((f,y,x)=>{switch(f.op){case"Conv1D":{const _=ie("stride",f,y,x),A=ie("pad",f,y,x),C=ie("dataFormat",f,y,x).toUpperCase(),L=ie("dilation",f,y,x);return[op(ie("x",f,y,x),ie("filter",f,y,x),_,A,C,L)]}case"Conv2D":{const _=ie("strides",f,y,x),A=Fw(f,y,x),C=ie("dataFormat",f,y,x).toUpperCase(),L=ie("dilations",f,y,x);return[Al(ie("x",f,y,x),ie("filter",f,y,x),[_[1],_[2]],A,C,[L[1],L[2]])]}case"_FusedConv2D":{const{stride:_,pad:A,dataFormat:C,dilations:L,biasArg:P,preluArg:U,activationFunc:q,leakyreluAlpha:X}=fA(f,y,x);return[Hg({x:ie("x",f,y,x),filter:ie("filter",f,y,x),strides:[_[1],_[2]],pad:A,dataFormat:C,dilations:[L[1],L[2]],bias:P,activation:q,preluActivationWeights:U,leakyreluAlpha:X})]}case"FusedDepthwiseConv2dNative":{const{stride:_,pad:A,dataFormat:C,dilations:L,biasArg:P,preluArg:U,activationFunc:q,leakyreluAlpha:X}=fA(f,y,x);return[hx({x:ie("x",f,y,x),filter:ie("filter",f,y,x),strides:[_[1],_[2]],pad:A,dataFormat:C,dilations:[L[1],L[2]],bias:P,activation:q,preluActivationWeights:U,leakyreluAlpha:X})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const _=ie("outputShape",f,y,x),A=ie("strides",f,y,x),C=Fw(f,y,x);return[Sh(ie("x",f,y,x),ie("filter",f,y,x),_,[A[1],A[2]],C)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const _=ie("strides",f,y,x),A=Fw(f,y,x),C=ie("dilations",f,y,x),L=ie("dataFormat",f,y,x).toUpperCase();return[nl(ie("input",f,y,x),ie("filter",f,y,x),[_[1],_[2]],A,L,[C[1],C[2]])]}case"Conv3D":{const _=ie("strides",f,y,x),A=ie("pad",f,y,x),C=ie("dataFormat",f,y,x).toUpperCase(),L=ie("dilations",f,y,x);return[Mh(ie("x",f,y,x),ie("filter",f,y,x),[_[1],_[2],_[3]],A,C,[L[1],L[2],L[3]])]}case"AvgPool":{const _=ie("strides",f,y,x),A=ie("pad",f,y,x),C=ie("kernelSize",f,y,x);return[ap(ie("x",f,y,x),[C[1],C[2]],[_[1],_[2]],A)]}case"MaxPool":{const _=ie("strides",f,y,x),A=ie("pad",f,y,x),C=ie("kernelSize",f,y,x);return[hp(ie("x",f,y,x),[C[1],C[2]],[_[1],_[2]],A)]}case"MaxPoolWithArgmax":{const _=ie("strides",f,y,x),A=ie("pad",f,y,x),C=ie("kernelSize",f,y,x),L=ie("includeBatchInIndex",f,y,x),{result:P,indexes:U}=Dg(ie("x",f,y,x),[C[1],C[2]],[_[1],_[2]],A,L);return[P,U]}case"AvgPool3D":{const _=ie("strides",f,y,x),A=ie("pad",f,y,x),C=ie("kernelSize",f,y,x);return[U0(ie("x",f,y,x),[C[1],C[2],C[3]],[_[1],_[2],_[3]],A)]}case"MaxPool3D":{const _=ie("strides",f,y,x),A=ie("pad",f,y,x),C=ie("kernelSize",f,y,x);return[Nh(ie("x",f,y,x),[C[1],C[2],C[3]],[_[1],_[2],_[3]],A)]}case"Dilation2D":{const _=ie("strides",f,y,x),A=ie("pad",f,y,x),C=ie("dilations",f,y,x),L=_[1],P=_[2],U=C[1],q=C[2];return[ic(ie("x",f,y,x),ie("filter",f,y,x),[L,P],A,[U,q],"NHWC")]}default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"creation":return st(()=>((f,y,x)=>{switch(f.op){case"Fill":{const _=ie("shape",f,y,x),A=ie("dtype",f,y,x);return[vo(_,ie("value",f,y,x),A)]}case"LinSpace":return[nm(ie("start",f,y,x),ie("stop",f,y,x),ie("num",f,y,x))];case"Multinomial":{const _=ie("logits",f,y,x),A=ie("numSamples",f,y,x),C=ie("seed",f,y,x);return[cc(_,A,C)]}case"OneHot":{const _=ie("indices",f,y,x),A=ie("depth",f,y,x),C=ie("onValue",f,y,x),L=ie("offValue",f,y,x);return[Jd(_,A,C,L)]}case"Ones":return[ba(ie("shape",f,y,x),ie("dtype",f,y,x))];case"OnesLike":return[ms(ie("x",f,y,x))];case"RandomUniform":return[Zr(ie("shape",f,y,x),ie("minval",f,y,x),ie("maxval",f,y,x),ie("dtype",f,y,x))];case"Range":return[Ra(ie("start",f,y,x),ie("stop",f,y,x),ie("step",f,y,x),ie("dtype",f,y,x))];case"TruncatedNormal":{const _=ie("shape",f,y,x),A=ie("mean",f,y,x),C=ie("stdDev",f,y,x),L=ie("seed",f,y,x);return[fm(_,A,C,ie("dtype",f,y,x),L)]}case"Zeros":return[ji(ie("shape",f,y,x),ie("dtype",f,y,x))];case"ZerosLike":return[Fr(ie("x",f,y,x))];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"dynamic":return(async(f,y,x)=>{switch(f.op){case"NonMaxSuppressionV5":{const{boxes:_,scores:A,maxOutputSize:C,iouThreshold:L,scoreThreshold:P,softNmsSigma:U}=GM(f,y,x),q=await no.nonMaxSuppressionWithScoreAsync(_,A,C,L,P,U);return[q.selectedIndices,q.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:_,scores:A,maxOutputSize:C,iouThreshold:L,scoreThreshold:P}=GM(f,y,x),U=ie("padToMaxOutputSize",f,y,x),q=await no.nonMaxSuppressionPaddedAsync(_,A,C,L,P,U);return[q.selectedIndices,q.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:_,scores:A,maxOutputSize:C,iouThreshold:L,scoreThreshold:P}=GM(f,y,x);return[await no.nonMaxSuppressionAsync(_,A,C,L,P)]}case"Where":{const _=un(ie("condition",f,y,x),"bool"),A=[await mm(_)];return _.dispose(),A}case"ListDiff":return mc(ie("x",f,y,x),ie("y",f,y,x));default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d);case"evaluation":return st(()=>((f,y,x)=>{switch(f.op){case"TopKV2":{const _=ie("x",f,y,x),A=ie("k",f,y,x),C=ie("sorted",f,y,x),L=pm(_,A,C);return[L.values,L.indices]}case"Unique":{const _=ie("x",f,y,x),A=bp(_);return[A.values,A.indices]}case"UniqueV2":{const _=ie("x",f,y,x),A=ie("axis",f,y,x),C=bp(_,A);return[C.values,C.indices]}default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"image":return st(()=>((f,y,x)=>{switch(f.op){case"ResizeBilinear":{const _=ie("images",f,y,x),A=ie("size",f,y,x),C=ie("alignCorners",f,y,x),L=ie("halfPixelCenters",f,y,x);return[no.resizeBilinear(_,[A[0],A[1]],C,L)]}case"ResizeNearestNeighbor":{const _=ie("images",f,y,x),A=ie("size",f,y,x),C=ie("alignCorners",f,y,x),L=ie("halfPixelCenters",f,y,x);return[no.resizeNearestNeighbor(_,[A[0],A[1]],C,L)]}case"CropAndResize":{const _=ie("image",f,y,x),A=ie("boxes",f,y,x),C=ie("boxInd",f,y,x),L=ie("cropSize",f,y,x),P=ie("method",f,y,x),U=ie("extrapolationValue",f,y,x);return[no.cropAndResize(_,A,C,L,P,U)]}default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"graph":return st(()=>((f,y,x)=>{switch(f.op){case"Const":return y[f.name];case"PlaceholderWithDefault":const _=ie("default",f,y,x);return[Fa(f.name,y,x)||_];case"Placeholder":return[Fa(f.name,y,x)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[Hh(ie("x",f,y,x))];case"IdentityN":return ie("x",f,y,x).map(U=>Hh(U));case"Snapshot":return[Hh(ie("x",f,y,x))];case"Shape":return[us(ie("x",f,y,x).shape,"int32")];case"ShapeN":return ie("x",f,y,x).map(U=>us(U.shape));case"Size":return[Yn(ie("x",f,y,x).size,"int32")];case"Rank":return[Yn(ie("x",f,y,x).rank,"int32")];case"NoOp":return[Yn(1)];case"Print":const A=ie("x",f,y,x),C=ie("data",f,y,x),L=ie("message",f,y,x),P=ie("summarize",f,y,x);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(L);for(let U=0;U<C.length;U++)console.log(Array.prototype.slice.call(C[U].dataSync()).slice(0,P));return[A];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"logical":return st(()=>((f,y,x)=>{switch(f.op){case"Equal":return[Ls(ie("a",f,y,x),ie("b",f,y,x))];case"NotEqual":return[eo(ie("a",f,y,x),ie("b",f,y,x))];case"Greater":return[Js(ie("a",f,y,x),ie("b",f,y,x))];case"GreaterEqual":return[_o(ie("a",f,y,x),ie("b",f,y,x))];case"Less":return[Ch(ie("a",f,y,x),ie("b",f,y,x))];case"LessEqual":return[kl(ie("a",f,y,x),ie("b",f,y,x))];case"LogicalAnd":return[va(ie("a",f,y,x),ie("b",f,y,x))];case"LogicalNot":return[oc(ie("a",f,y,x))];case"LogicalOr":return[lc(ie("a",f,y,x),ie("b",f,y,x))];case"Select":case"SelectV2":return[as(ie("condition",f,y,x),ie("a",f,y,x),ie("b",f,y,x))];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"matrices":return st(()=>((f,y,x)=>{switch(f.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[wr(ie("a",f,y,x),ie("b",f,y,x),ie("transposeA",f,y,x),ie("transposeB",f,y,x))];case"Einsum":return[kg(ie("equation",f,y,x),...ie("tensors",f,y,x))];case"Transpose":return[Pr(ie("x",f,y,x),ie("perm",f,y,x))];case"_FusedMatMul":const[_,A]=ie("fusedOps",f,y,x),C=_==="biasadd",L=A==="prelu",P=ie("numArgs",f,y,x),U=ie("leakyreluAlpha",f,y,x);if(C){if(L&&P!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!L&&P!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[q,X]=ie("args",f,y,x);return[xm({a:ie("a",f,y,x),b:ie("b",f,y,x),transposeA:ie("transposeA",f,y,x),transposeB:ie("transposeB",f,y,x),bias:q,activation:A,preluActivationWeights:X,leakyreluAlpha:U})];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"normalization":return st(()=>((f,y,x)=>{switch(f.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[nc(ie("x",f,y,x),ie("mean",f,y,x),ie("variance",f,y,x),ie("offset",f,y,x),ie("scale",f,y,x),ie("epsilon",f,y,x))];case"LRN":return[rm(ie("x",f,y,x),ie("radius",f,y,x),ie("bias",f,y,x),ie("alpha",f,y,x),ie("beta",f,y,x))];case"Softmax":return[pu(ie("x",f,y,x))];case"LogSoftmax":return[Rg(ie("x",f,y,x))];case"SparseToDense":return[ax(ie("sparseIndices",f,y,x),ie("outputShape",f,y,x),ie("sparseValues",f,y,x),ie("defaultValue",f,y,x))];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"reduction":return st(()=>((f,y,x)=>{switch(f.op){case"Max":{const L=ie("axis",f,y,x),P=ie("keepDims",f,y,x);return[Mo(ie("x",f,y,x),L,P)]}case"Mean":{const L=ie("axis",f,y,x),P=ie("keepDims",f,y,x);return[Wr(ie("x",f,y,x),L,P)]}case"Min":{const L=ie("axis",f,y,x),P=ie("keepDims",f,y,x);return[im(ie("x",f,y,x),L,P)]}case"Sum":{const L=ie("axis",f,y,x),P=ie("keepDims",f,y,x);return[Ln(ie("x",f,y,x),L,P)]}case"All":{const L=ie("axis",f,y,x),P=ie("keepDims",f,y,x);return[au(ie("x",f,y,x),L,P)]}case"Any":{const L=ie("axis",f,y,x),P=ie("keepDims",f,y,x);return[El(ie("x",f,y,x),L,P)]}case"ArgMax":{const L=ie("axis",f,y,x);return[el(ie("x",f,y,x),L)]}case"ArgMin":{const L=ie("axis",f,y,x);return[_g(ie("x",f,y,x),L)]}case"Prod":{const L=ie("axis",f,y,x),P=ie("keepDims",f,y,x);return[gp(ie("x",f,y,x),L,P)]}case"Cumsum":{const L=ie("axis",f,y,x),P=ie("exclusive",f,y,x),U=ie("reverse",f,y,x);return[Zf(ie("x",f,y,x),L,P,U)]}case"Bincount":const _=ie("x",f,y,x),A=ie("weights",f,y,x),C=ie("size",f,y,x);return[Ag(_,A,C)];case"DenseBincount":{const L=ie("x",f,y,x),P=ie("weights",f,y,x),U=ie("size",f,y,x),q=ie("binaryOutput",f,y,x);return[Eh(L,P,U,q)]}default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"slice_join":return st(()=>((f,y,x)=>{switch(f.op){case"ConcatV2":case"Concat":{const _=ie("n",f,y,x),A=ie("axis",f,y,x);let C=ie("tensors",f,y,x);return C=C.slice(0,_),[bi(C,A)]}case"Gather":{const _=ie("x",f,y,x),A=ie("indices",f,y,x);return[hu(_,un(A,"int32"),0)]}case"GatherV2":{const _=ie("axis",f,y,x),A=ie("batchDims",f,y,x),C=ie("x",f,y,x),L=ie("indices",f,y,x);return[hu(C,un(L,"int32"),_,A)]}case"Reverse":{const _=ie("dims",f,y,x),A=[];for(let L=0;L<_.length;L++)_[L]&&A.push(L);const C=ie("x",f,y,x);return[os(C,A)]}case"ReverseV2":{const _=ie("axis",f,y,x),A=ie("x",f,y,x);return[os(A,_)]}case"Slice":{const _=ie("begin",f,y,x),A=ie("size",f,y,x);return[Nr(ie("x",f,y,x),_,A)]}case"StridedSlice":{const _=ie("begin",f,y,x),A=ie("end",f,y,x),C=ie("strides",f,y,x),L=ie("beginMask",f,y,x),P=ie("endMask",f,y,x),U=ie("ellipsisMask",f,y,x),q=ie("newAxisMask",f,y,x),X=ie("shrinkAxisMask",f,y,x),re=ie("x",f,y,x);return[zg(re,_,A,C,L,P,U,q,X)]}case"Pack":return st(()=>{const _=ie("axis",f,y,x),A=ie("tensors",f,y,x),C=A[0].shape,L=ls(A[0]).shape,P=A.map(U=>{const q=Le(U.shape,C);if(!q&&!Le(ls(U).shape,L))throw new Error("the input tensors shape does not match");return q?U:Xe(U,C)});return[ea(P,_)]});case"Unpack":{const _=ie("axis",f,y,x),A=ie("tensor",f,y,x);return Pa(A,_)}case"Tile":{const _=ie("reps",f,y,x);return[ya(ie("x",f,y,x),_)]}case"Split":case"SplitV":{const _=ie("axis",f,y,x),A=ie("numOrSizeSplits",f,y,x),C=ie("x",f,y,x);return Qs(C,A,_)}case"ScatterNd":{const _=ie("indices",f,y,x),A=ie("values",f,y,x),C=ie("shape",f,y,x);return[sx(_,A,C)]}case"GatherNd":{const _=ie("x",f,y,x),A=ie("indices",f,y,x);return[Ib(_,A)]}case"SparseToDense":{const _=ie("sparseIndices",f,y,x),A=ie("outputShape",f,y,x),C=ie("sparseValues",f,y,x),L=ie("defaultValue",f,y,x);return[ax(_,C,A,C.dtype===L.dtype?L:un(L,C.dtype))]}default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"sparse":return st(()=>((f,y,x)=>{switch(f.op){case"SparseFillEmptyRows":{const{outputIndices:_,outputValues:A,emptyRowIndicator:C,reverseIndexMap:L}=bm.sparseFillEmptyRows(ie("indices",f,y,x),ie("values",f,y,x),ie("denseShape",f,y,x),ie("defaultValue",f,y,x));return[_,A,C,L]}case"SparseReshape":{const{outputIndices:_,outputShape:A}=bm.sparseReshape(ie("inputIndices",f,y,x),ie("inputShape",f,y,x),ie("newShape",f,y,x));return[_,A]}case"SparseSegmentMean":return[bm.sparseSegmentMean(ie("data",f,y,x),ie("indices",f,y,x),ie("segmentIds",f,y,x))];case"SparseSegmentSum":return[bm.sparseSegmentSum(ie("data",f,y,x),ie("indices",f,y,x),ie("segmentIds",f,y,x))];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"spectral":return st(()=>((f,y,x)=>{switch(f.op){case"FFT":return[vp(ie("x",f,y,x))];case"IFFT":return[Lh(ie("x",f,y,x))];case"RFFT":return[fu(ie("x",f,y,x))];case"IRFFT":return[hm(ie("x",f,y,x))];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"string":return st(()=>((f,y,x)=>{switch(f.op){case"StringNGrams":{const{nGrams:_,nGramsSplits:A}=wm.stringNGrams(ie("data",f,y,x),ie("dataSplits",f,y,x),ie("separator",f,y,x),ie("nGramWidths",f,y,x),ie("leftPad",f,y,x),ie("rightPad",f,y,x),ie("padWidth",f,y,x),ie("preserveShortSequences",f,y,x));return[_,A]}case"StringSplit":{const{indices:_,values:A,shape:C}=wm.stringSplit(ie("input",f,y,x),ie("delimiter",f,y,x),ie("skipEmpty",f,y,x));return[_,A,C]}case"StringToHashBucketFast":return[wm.stringToHashBucketFast(ie("input",f,y,x),ie("numBuckets",f,y,x))];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"transformation":return st(()=>((f,y,x)=>{switch(f.op){case"Cast":return[un(ie("x",f,y,x),ie("dtype",f,y,x))];case"ExpandDims":{const _=ie("axis",f,y,x);return[Ds(ie("x",f,y,x),_)]}case"Squeeze":{const _=ie("axis",f,y,x);return[ls(ie("x",f,y,x),_)]}case"Reshape":return[Xe(ie("x",f,y,x),ie("shape",f,y,x))];case"MirrorPad":return[uc(ie("x",f,y,x),ie("padding",f,y,x),ie("mode",f,y,x))];case"PadV2":case"Pad":return[Na(ie("x",f,y,x),ie("padding",f,y,x),ie("constantValue",f,y,x))];case"SpaceToBatchND":{const _=ie("blockShape",f,y,x),A=ie("paddings",f,y,x);return[mp(ie("x",f,y,x),_,A)]}case"BatchToSpaceND":{const _=ie("blockShape",f,y,x),A=ie("crops",f,y,x);return[uu(ie("x",f,y,x),_,A)]}case"DepthToSpace":{const _=ie("blockSize",f,y,x),A=ie("dataFormat",f,y,x).toUpperCase();return[Il(ie("x",f,y,x),_,A)]}case"BroadcastTo":return[cu(ie("x",f,y,x),ie("shape",f,y,x))];case"BroadcastArgs":return[Ig(ie("s0",f,y,x),ie("s1",f,y,x))];default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d));case"hash_table":return(async(f,y,x,_)=>{switch(f.op){case"HashTable":case"HashTableV2":{const A=ie("keyDType",f,y,x),C=ie("valueDType",f,y,x),L=new aD(A,C);return _.addHashTable(f.name,L),[L.handle]}case"LookupTableImport":case"LookupTableImportV2":{const A=ie("tableHandle",f,y,x,_),C=ie("keys",f,y,x),L=ie("values",f,y,x);return[await _.getHashTableById(A.id).import(C,L)]}case"LookupTableFind":case"LookupTableFindV2":{const A=ie("tableHandle",f,y,x,_),C=ie("keys",f,y,x),L=ie("defaultValue",f,y,x);return[await _.getHashTableById(A.id).find(C,L)]}case"LookupTableSize":case"LookupTableSizeV2":{const A=ie("tableHandle",f,y,x,_);return[_.getHashTableById(A.id).tensorSize()]}default:throw TypeError(`Node type ${f.op} is not implemented`)}})(l,c,d,s);case"custom":const m=lA(l.op);if(m&&m.customExecutor)return m.customExecutor(new iD(l,c,d));throw TypeError(`Custom op ${l.op} is not registered.`);default:throw TypeError(`Unknown op '${l.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(r,e,t);return dr(a)?a.then(l=>[].concat(l)):[].concat(a)}class gA{constructor(e={},t={},s={},a={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=s,this.functionMap=a,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const s=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(s))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(t=>t.id===0&&t.iterationId===0?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function yA(r,e,t,s){const a=new Set,l=[];let c=null,d=null;const m=new Set,f=Object.keys(r).map(_=>Ao(_)[0]);let y=[];s!=null&&(y=s.map(_=>Ao(_.name)[0]));const x=[...e];for(;x.length>0;){const _=x.pop();(xA(_)||cD(_)||hD(_))&&c==null&&(c=_,d=c.children.map(A=>A.name).filter(A=>a.has(A))),a.add(_.name),t[_.name]==null&&f.indexOf(_.name)===-1&&y.indexOf(_.name)===-1&&(_.inputs.length!==0?_.inputs.forEach(A=>{m.has(A.name)||(m.add(A.name),x.push(A))}):l.push(_.name))}return{inputs:r,outputs:e,usedNodes:a,missingInputs:l,dynamicNode:c,syncInputs:d}}const oD=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],lD=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],uD=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function xA(r){return oD.indexOf(r.op)>=0}function cD(r){return lD.indexOf(r.op)>=0}function hD(r){return uD.indexOf(r.op)>=0}class Ow{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,e.functions!=null&&Object.keys(e.functions).forEach(s=>{this._functionExecutorMap[s]=new Ow(e.functions[s],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(s=>e[s].map(a=>a.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){const s=e.map(l=>l.name).sort(),a=t.map(l=>l.name).sort();return s.join(this.SEPERATOR)+"--"+a.join(this.SEPERATOR)}compile(e,t){const s=yA(e,t,this.weightMap,this._initNodes),{missingInputs:a,dynamicNode:l,syncInputs:c}=s;if(l!=null)throw new Error(`This execution contains the node '${l.name}', which has the dynamic op '${l.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${c}]`);if(a.length>0){const d=t.map(f=>f.name),m=Object.keys(e);throw new Error(`Cannot compute the outputs [${d}] from the provided inputs [${m}]. Missing the following inputs: [${a}]`)}return function(d,m,f){const{usedNodes:y,inputs:x}=f,_=[],A=Object.keys(x).map(U=>Ao(U)[0]).map(U=>d.nodes[U]),C=d.initNodes;A.forEach(U=>{y.has(U.name)&&_.push(U)}),d.weights.forEach(U=>{y.has(U.name)&&_.push(U)}),C!=null&&C.forEach(U=>{y.has(U.name)&&_.push(U)});const L=new Set,P=[];for(;_.length>0;){const U=_.pop();L.add(U.name),m[U.name]||P.push(U),U.children.forEach(q=>{!L.has(q.name)&&y.has(q.name)&&q.inputs.every(X=>L.has(X.name))&&_.push(q)})}return P}(this.graph,this.weightMap,s)}execute(e,t){e=this.mapInputs(e);const s=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const a=s.map(x=>this.graph.nodes[Ao(x)[0]]),l=t.map(x=>Ao(x)[0]);let c=l.map(x=>this.graph.nodes[x]);c.length===0&&(c=this._outputs);const d=this.getCompilationKey(a,c);let m=this.compiledMap.get(d);m==null&&(m=this.compile(e,c),this.compiledMap.set(d,m));const f={},y={};return st(()=>{const x=new gA(this.weightMap,f,y,this.functionExecutorMap),_=Object.assign({},this.weightMap);Object.keys(e).forEach(L=>{const[P,U]=Ao(L),q=[];q[U]=e[L],_[P]=q});const A=this.getFrozenTensorIds(_),C={};for(let L=0;L<m.length;L++){const P=m[L];if(!_[P.name]){const U=mA(P,_,x,this._resourceManager);if(dr(U))throw new Error(`The execution of the op '${P.op}' returned a promise. Please use model.executeAsync() instead.`);_[P.name]=U,this.checkTensorForDisposal(P.name,P,_,x,A,l,C)}}return this.parent==null&&x.dispose(A),t.map(L=>Fa(L,_,x))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(s=>e[s]).map(s=>s.map(a=>a.id)));return new Set(t)}checkTensorForDisposal(e,t,s,a,l,c,d){t.category!=="control"&&c.indexOf(e)===-1&&(s[e].forEach(m=>{m!=null&&(d[m.id]=(d[m.id]||0)+t.children.length)}),t.inputs.forEach(m=>{if(m.category!=="control"){const f=function(y,x,_){return x[Pw(y,_.currentContextId)]}(m.name,s,a);f!=null&&f.forEach(y=>{if(y&&!y.kept&&!l.has(y.id)){const x=d[y.id];x===1?(y.dispose(),delete d[y.id]):x!=null&&d[y.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,s=!1,a={},l={}){s||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const c=new gA(this.weightMap,a,l,this.functionExecutorMap),d=await this.executeWithControlFlow(e,c,t,s),m=t.map(_=>Fa(_,d,c)),f=m.map(_=>_.id),y=Object.keys(e).map(_=>e[_].id),x=new Set([...f,...y,...this.weightIds]);return Object.keys(d).forEach(_=>{d[_].forEach(A=>{!A||A.kept||A.isDisposed||x.has(A.id)||A.dispose()})}),this.parent==null&&c.dispose(x),m}async executeFunctionAsync(e,t,s){const a=e.reduce((l,c,d)=>(l[this.inputs[d].name]=c,l),{});return this._executeAsync(a,this.outputNodes,!0,t,s)}async executeWithControlFlow(e,t,s,a){const l=Object.keys(e),c=l.map(X=>this.graph.nodes[Ao(X)[0]]),d=s.map(X=>Ao(X)[0]);let m=d.map(X=>this.graph.nodes[X]);m.length===0&&(m=this._outputs);const{usedNodes:f,missingInputs:y,dynamicNode:x,syncInputs:_}=yA(e,m,this.weightMap,this._initNodes),A=[...c,...this.graph.weights,...this._initNodes||[]].map(X=>({node:X,contexts:t.currentContext})),C=Object.assign({},this.weightMap);Object.keys(e).forEach(X=>{const[re,oe]=Ao(X),de=[];de[oe]=e[X],C[re]=de});const L={},P=this.getFrozenTensorIds(C),U={};for(;A.length>0;){const X=this.processStack(c,A,t,C,U,P,d,L,f);await Promise.all(X)}x!=null||a||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const q=m.filter(X=>!xA(X)&&!Fa(X.name,C,t)).map(X=>X.name);if(q.length>0){let X="";throw x!=null&&(X=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${_}]`),new Error(`Cannot compute the outputs [${q}] from the provided inputs [${l}]. Consider providing the following inputs: [${y}]. ${X}`)}return C}processStack(e,t,s,a,l,c,d,m,f){const y=[];for(;t.length>0;){const x=t.pop();s.currentContext=x.contexts;let _="";if(x.node.op==="Enter"&&ie("isConstant",x.node,a,s)&&([_]=Gh(x.node.name,s)),a[x.node.name]==null){const A=mA(x.node,a,s,this._resourceManager);_||([_]=Gh(x.node.name,s));const C=s.currentContext;dr(A)?y.push(A.then(L=>(a[_]=L,s.currentContext=C,this.checkTensorForDisposal(_,x.node,a,s,c,d,m),this.processChildNodes(x.node,t,s,a,l,f),L))):(a[_]=A,this.checkTensorForDisposal(_,x.node,a,s,c,d,m),this.processChildNodes(x.node,t,s,a,l,f))}else this.processChildNodes(x.node,t,s,a,l,f)}return y}processChildNodes(e,t,s,a,l,c){e.children.forEach(d=>{const[m]=Gh(d.name,s);!l[m]&&c.has(d.name)&&(d.op==="Merge"?d.inputNames.some(f=>!!Fa(f,a,s))&&(l[m]=!0,t.push({contexts:s.currentContext,node:d})):d.inputNames.every(f=>!!Fa(f,a,s))&&(l[m]=!0,t.push({contexts:s.currentContext,node:d})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(t=>t.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{const s=e[t],[a]=Ao(t),l=this.graph.nodes[a];if(l.attrParams.shape&&l.attrParams.shape.value){const c=l.attrParams.shape.value;Q(c.length===s.shape.length&&s.shape.every((d,m)=>c[m]===-1||c[m]===d),()=>`The shape of dict['${l.name}'] provided in model.execute(dict) must be [${c}], but was [${s.shape}]`)}l.attrParams.dtype&&l.attrParams.dtype.value&&Q(s.dtype===l.attrParams.dtype.value,()=>`The dtype of dict['${l.name}'] provided in model.execute(dict) must be ${l.attrParams.dtype.value}, but was ${s.dtype}`)})}mapInputs(e){const t={};for(const s in e)this._signature!=null&&this._signature.inputs!=null&&this._signature.inputs[s]!=null?t[this._signature.inputs[s].name]=e[s]:t[s]=e[s];return t}checkInputs(e){const t=Object.keys(e).filter(s=>{const[a]=Ao(s);return this.graph.nodes[a]==null});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(t=>this._signature!=null&&this._signature.outputs!=null&&this._signature.outputs[t]!=null?this._signature.outputs[t].name:t,{})}checkOutputs(e){e.forEach(t=>{const[s]=Ao(t);if(!this.graph.nodes[s])throw new Error(`The output '${t}' is not found in the graph`)})}}class dD{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class vA{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",t==null&&(this.loadOptions={}),this.resourceManager=new dD}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(e.load!=null)this.handler=e;else if(this.loadOptions.requestInit!=null)this.handler=Gf(e,this.loadOptions);else{const t=_n(e,this.loadOptions);if(t.length===0)t.push(Gf(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let s;s=this.artifacts.userDefinedMetadata!=null&&this.artifacts.userDefinedMetadata.signature!=null?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=s,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const a=uh(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Ow(uA.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(a),this.executor.resourceManager=this.resourceManager,e.modelInitializer!=null&&e.modelInitializer.node!=null){const l=uA.Instance.transformGraph(e.modelInitializer);this.initializer=new Ow(l),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if(typeof e=="string"){const s=Tr(e);if(s.length===0)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(s.length>1)throw new Error(`Found more than one (${s.length}) save handlers for URL '${e}'`);e=s[0]}if(e.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof Ur||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce((t,s,a)=>(t[s]=e[a],t),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const s=this.executor.execute(e,t);return s.length>1?s:s[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const s=await this.executor.executeAsync(e,t);return s.length>1?s:s[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,s)=>(t[s]=[e[s]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function pD(r,e={}){if(r==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");e==null&&(e={}),e.fromTFHub&&r.load==null&&(r.endsWith("/")||(r+="/"),r=`${r}model.json?tfjs-format=file`);const t=new vA(r,e);return await t.load(),t}const bA="3.9.0";function zw(r,e,t=new Map,s=new Set){if(r==null)return null;if(s.has(r))throw new Error("Circular references are not supported.");if(t.has(r))return t.get(r);const a=e(r);if(a.recurse&&a.value!==null)throw new Error("A deep map function may not return both a value and recurse=true.");if(a.recurse){if(gy(r)){const l=Array.isArray(r)?[]:{};s.add(r);for(const c in r){const d=zw(r[c],e,t,s);l[c]=d}return s.delete(r),l}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return t.set(r,a.value),a.value}function fD(r,e=_A){return wA(r,e)}function wA(r,e,t=new Set){const s=r[0];if(t.has(s))throw new Error("Circular references are not supported.");const a=e(r);if(a.recurse&&a.value!==null)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(gy(s)){const l=Array.isArray(s)?[]:{};t.add(s);for(const c in s){const d=wA(r.map(m=>m[c]),e,t);l[c]=d}return t.delete(s),l}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return a.value}function _A(r){return r===null?null:gy(r[0])?{value:null,recurse:!0}:{value:r,recurse:!1}}async function SA(r,e){const t=new Map;zw(r,e,t);for(const s of Array.from(t.keys())){const a=t.get(s);if(dr(a)){const l=await a;t.set(s,l)}}return zw(r,e,t)}function gy(r){let e=!1;if(At().get("IS_BROWSER"))e=r instanceof TextDecoder;else{const{StringDecoder:t}=b(84589);e=r instanceof t}return r!=null&&!ArrayBuffer.isView(r)&&(Array.isArray(r)||typeof r=="object"&&!(r instanceof Ur)&&!(r instanceof Promise)&&!e)}function mD(r){return r instanceof Ur?{value:r.clone(),recurse:!1}:gy(r)?{value:null,recurse:!0}:{value:r,recurse:!1}}class MA{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,e==null)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return this.length()===0}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),s=this.get(t);return this.set(t,this.pop()),s}}class Bw extends MA{constructor(){super(Bw.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),s=this.length();for(let a=0;a<s;a++)t[a]=this.get(this.wrap(this.begin+a));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=s}}function TA(r){return new gD(r)}function HM(r){return new yD(r)}Bw.INITIAL_CAPACITY=32;class Fs{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let s=await e.next();for(;!s.done;)t.push(s.value),s=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),s=e(t.value);for(;!t.done&&s;)t=await this.next(),s=e(t.value)}handleErrors(e){return new MD(this,e)}filter(e){return new _D(this,e)}map(e){return new SD(this,e)}mapAsync(e){return new EA(this,e)}serialMapAsync(e){return new EA(this,e).serial()}flatmap(e){return new TD(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(t=>t===!0)}rowMajorBatch(e,t=!0){return new wD(this,e,t)}columnMajorBatch(e,t=!0,s=_A){return this.rowMajorBatch(e,t).map(a=>fD(a,s))}concatenate(e,t){return new AA(TA([this,e]),t)}take(e){return e<0||e==null?this:new bD(this,e)}skip(e){return e<0||e==null?this:new vD(this,e)}prefetch(e){return new IA(this,e)}shuffle(e,t){return new AD(this,e,t)}serial(){return new xD(this)}}class gD extends Fs{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,function(s,a){return zw(s,a)}(t,mD)),done:!1};var t}}class yD extends Fs{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class xD extends Fs{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class vD extends Fs{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;pr(e.value)}return this.upstream.next()}}class bD extends Fs{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class wD extends Fs{constructor(e,t,s=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=s,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class _D extends Fs{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;pr(e.value)}}}class SD extends Fs{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=js(e.value),s=this.transform(e.value),a=js(s);for(const l of t)Yo(l,a)||l.dispose();return{value:s,done:!1}}}class MD extends Fs{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class EA extends Fs{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=js(e.value),s=await this.transform(e.value),a=js(s);for(const l of t)Yo(l,a)||l.dispose();return{value:s,done:!1}}}class jM extends Fs{constructor(){super(),this.outputQueue=new Bw,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.outputQueue.length()===0;)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class TD extends jM{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=js(e.value),s=this.transform(e.value),a=js(s);this.outputQueue.pushAll(s);for(const l of t)Yo(l,a)||l.dispose();return!0}}class AA extends Fs{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,this.iterator==null){const s=await this.moreIterators.next();if(s.done)return{value:null,done:!0};this.iterator=s.value,this.baseErrorHandler!=null&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var Pp;(function(r){r[r.FAIL=0]="FAIL",r[r.SHORTEST=1]="SHORTEST",r[r.LONGEST=2]="LONGEST"})(Pp||(Pp={}));class ED extends Fs{constructor(e,t=Pp.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,s=0;const a=await SA(this.iterators,function(l){return l instanceof Fs?{value:l.next().then(c=>(t++,c.done&&s++,c.value)),recurse:!1}:{value:null,recurse:!0}});if(t===s)return{value:null,done:!0};if(s>0)switch(this.mismatchMode){case Pp.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case Pp.SHORTEST:return{value:null,done:!0};case Pp.LONGEST:}return this.count++,{value:a,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class IA extends Fs{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new MA(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class AD extends IA{constructor(e,t,s){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=dc.alea(s||di().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class yy{constructor(){this.size=null}batch(e,t=!0){const s=this;let a;return Q(e>0,()=>`batchSize needs to be positive, but it is
      ${e}`),a=this.size===1/0||this.size==null?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Io(async()=>(await s.iterator()).columnMajorBatch(e,t,kD),a)}concatenate(e){const t=this;let s;return s=this.size===1/0||e.size===1/0?1/0:this.size!=null&&e.size!=null?this.size+e.size:null,Io(async()=>(await t.iterator()).concatenate(await e.iterator()),s)}filter(e){const t=this;let s;return s=this.size===1/0?1/0:null,Io(async()=>(await t.iterator()).filter(a=>st(()=>e(a))),s)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Io(async()=>(await t.iterator()).map(s=>st(()=>e(s))),this.size)}mapAsync(e){const t=this;return Io(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(e==null)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Io(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){const t=this;let s;return s=this.size!=null&&e>0?this.size*e:e===0?0:this.size!=null&&(e===void 0||e<0)?1/0:null,Io(async()=>{return a=HM(async()=>({value:await t.iterator(),done:!1})).take(e),new AA(a,l);var a,l},s)}skip(e){const t=this;let s;return s=this.size!=null&&e>=0&&this.size>=e?this.size-e:this.size!=null&&(this.size<e||e===void 0||e<0)?0:null,Io(async()=>(await t.iterator()).skip(e),s)}shuffle(e,t,s=!0){if(e==null||e<0)throw this.size==null?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const a=this,l=dc.alea(t||di().toString());return Io(async()=>{let c=l.int32();return s&&(c+=l.int32()),(await a.iterator()).shuffle(e,c.toString())},this.size)}take(e){const t=this;let s;return s=this.size!=null&&this.size>e?e:this.size!=null&&this.size<=e?this.size:null,Io(async()=>(await t.iterator()).take(e),s)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Io(r,e=null){return new class extends yy{constructor(){super(...arguments),this.size=e}async iterator(){return r()}}}function ID(r){return Io(async()=>TA(r),r.length)}function CD(r){if(!gy(r))throw new Error("The argument to zip() must be an object or array.");let e;if(Array.isArray(r))for(let t=0;t<r.length;t++)e=e==null?r[t].size:Math.min(e,r[t].size);else if(r instanceof Object)for(const t in r)e=e==null?r[t].size:Math.min(e,r[t].size);return Io(async()=>function(t,s=Pp.FAIL){return new ED(t,s)}(await SA(r,t=>{if(t instanceof yy)return{value:t.iterator(),recurse:!1};if(gy(t))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),Pp.SHORTEST),e)}function kD(r){if(r===null)return null;return(e=r[0])==null||(t=e)===null||typeof t!="object"&&typeof t!="function"||Array.isArray(e)||typeof e=="object"&&e instanceof Ur||Yi(e)?{value:function(s){if(s.length===0)throw new Error("Can't make a batch of zero elements.");return s[0]instanceof Ur?ea(s):Xs(s)}(r),recurse:!1}:{value:null,recurse:!0};var e,t}yy.MAX_BUFFER_SIZE=1e4;class CA extends yy{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split(`
`).map(e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e))}}const $w='"',Hx=Symbol("out"),kA=Symbol("field"),Uw=Symbol("quote"),qM=Symbol("quoteafterquote"),NA=Symbol("quoteinquote");class RA extends yy{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new CA(e),t||(t={}),this.hasHeader=t.hasHeader!==!1,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(Q(t.delimiter==null,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&Q(e.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce((a,l)=>(a[l]=a[l]+1||1,a),{}),s=Object.keys(t).filter(a=>t[a]>1);if(Q(s.length===0,()=>"Duplicate column names found: "+s.toString()),this.columnConfigs){for(const a of Object.keys(this.columnConfigs))if(this.fullColumnNames.indexOf(a)===-1)throw new Error('The key "'+a+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const s=t.value;return this.parseRow(s,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map(t=>this.makeDataElement(t))}makeDataElement(e){const t=this.parseRow(e),s={},a={};for(let l=0;l<this.fullColumnNames.length;l++){const c=this.fullColumnNames[l],d=this.columnConfigs?this.columnConfigs[c]:null;if(!this.configuredColumnsOnly||d){const m=t[l];let f=null;if(m==="")if(d&&d.default!==void 0)f=d.default;else{if(d&&(d.required||d.isLabel))throw new Error(`Required column ${c} is empty in this line: ${e}`);f=void 0}else{const y=Number(m);if(isNaN(y))f=d&&d.dtype==="bool"?this.getBoolean(m):m;else if(d&&d.dtype)switch(d.dtype){case"float32":f=y;break;case"int32":f=Math.floor(y);break;case"bool":f=this.getBoolean(m);break;default:f=y}else f=y}d&&d.isLabel?a[c]=f:s[c]=f}}return Object.keys(a).length===0?s:{xs:s,ys:a}}getBoolean(e){return e==="1"||e.toLowerCase()==="true"?1:0}parseRow(e,t=!0){const s=[];let a=0;const l=e.length;let c=Hx;for(let d=0;d<l;d++)switch(c){case Hx:switch(e.charAt(d)){case $w:a=d+1,c=Uw;break;case this.delimiter:if(a=d+1,this.delimiter===" "&&this.delimWhitespace)break;s.push(""),c=Hx;break;default:c=kA,a=d}break;case kA:switch(e.charAt(d)){case this.delimiter:s.push(e.substring(a,d)),c=Hx,a=d+1}break;case Uw:switch(e.charAt(d)){case $w:c=qM}break;case qM:switch(e.charAt(d)){case this.delimiter:s.push(e.substring(a,d-1)),c=Hx,a=d+1;break;case $w:c=Uw;break;default:c=NA}break;case NA:switch(e.charAt(d)){case $w:c=Uw}}if(c===qM?s.push(e.substring(a,l-1)):s.push(e.substring(a)),t&&s.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${s}`);return s}}class XM extends Fs{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=e.includeSpectrogram!==!1,this.includeWaveform=e.includeWaveform===!0,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(At().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new XM(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:this.audioTrackConstraints==null||this.audioTrackConstraints,video:!1})}catch(s){throw new Error(`Error thrown while initializing video stream: ${s.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const s=await this.getAudioData();if(this.includeSpectrogram){const a=this.flattenQueue(s.freqDataQueue);e=this.getTensorFromAudioDataArray(a,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const a=this.flattenQueue(s.timeDataQueue);t=this.getTensorFromAudioDataArray(a,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let s=0;return new Promise(a=>{const l=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&a({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++s===this.numFrames&&(clearInterval(l),a({freqDataQueue:e,timeDataQueue:t}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),this.stream!=null&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,s=new Float32Array(e.length*t);return e.forEach((a,l)=>s.set(a,l*t)),s}getTensorFromAudioDataArray(e,t){const s=new Float32Array(he(t));return s.set(e,s.length-e.length),Xs(s,t)}}class YM extends Fs{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=us([0],"int32"),this.webcamConfig.centerCrop){const s=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,a=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,l=(1-s)/2,c=(1-a)/2,d=l+s,m=a+c;this.cropBox=gc([c,l,m,d],[1,4])}else this.cropBox=gc([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(At().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const s=new YM(e,t);return await s.start(),s}async start(){this.webcamConfig.facingMode&&Q(this.webcamConfig.facingMode==="user"||this.webcamConfig.facingMode==="environment",()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}})}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=Qv(this.webcamVideoElement)}catch(t){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(t){throw new Error(`Error thrown cropping the video: ${t.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return st(()=>{const t=Ds(un(e,"float32"),0);let s;s=no.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const a=s.shape;return Xe(s,a.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(e=>e.stop());try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class LA{}class DA extends Fs{split(e){return new ND(this,e)}}class ND extends DA{constructor(e,t){super(),this.upstream=e,this.impl=new RD(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class RD extends jM{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return this.carryover!==""&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const s of t.slice(0,-1))this.outputQueue.push(s);return this.carryover=t[t.length-1],!0}}class LD extends Fs{decodeUTF8(){return new DD(this)}}class DD extends DA{constructor(e){super(),this.upstream=e,this.impl=new PD(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class PD extends jM{constructor(e){if(super(),this.upstream=e,At().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:t}=b(84589);this.decoder=new t("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,s;return!e.done&&(t=e.value,s=At().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(s),!0)}}class PA extends LD{constructor(e,t={}){super(),this.file=e,this.options=t,Q(e instanceof Uint8Array||!!At().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){return this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size)?{value:null,done:!0}:{value:await new Promise((t,s)=>{const a=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)t(new Uint8Array(this.file.slice(this.offset,a)));else{const l=new FileReader;l.onload=d=>{let m=l.result;if(m instanceof ArrayBuffer&&(m=new Uint8Array(m)),!(m instanceof Uint8Array))return s(new TypeError("FileReader returned unknown type."));t(m)},l.onabort=d=>s(new Error("Aborted")),l.onerror=d=>s(new Error(d.type));const c=this.file.slice(this.offset,a);l.readAsArrayBuffer(c)}this.offset=a}),done:!1}}}function FA(r){return typeof r=="string"&&r.substr(0,7)==="file://"}class OA extends LA{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(FA(this.input)&&At().get("IS_NODE")){const e=b(12993);this.input=e.readFileSync(this.input.substr(7))}return new PA(this.input,this.options)}}class zA extends LA{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return FA(this.url)?new OA(this.url,this.fileOptions).iterator():async function(e,t={}){let s,a;var l;typeof e=="string"?s=e:(s=e.url,a={method:(l=e).method,headers:l.headers,body:l.body,mode:l.mode,credentials:l.credentials,cache:l.cache,redirect:l.redirect,referrer:l.referrer,integrity:l.integrity});const c=await ui(s,a);if(c.ok){const d=new Uint8Array(await c.arrayBuffer());return new PA(d,t)}throw new Error(c.statusText)}(this.url,this.fileOptions)}}function FD(r,e={}){return new RA(new zA(r),e)}function OD(r){const e=HM(r);return Io(async()=>e)}function zD(r){return Io(async()=>{const e=await r();return HM(()=>e.next())})}async function BD(r,e){return YM.create(r,e)}async function $D(r){return XM.create(r)}const BA="3.9.0";function Vn(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&Q(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the CPU backend.`)})}const UD=wp;class Vw extends Jt{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Ft(this,Ju())}nextDataId(){return Vw.nextDataId++}write(e,t,s){this.firstUse&&(this.firstUse=!1,At().get("IS_NODE")&&sr(`
============================
Hi there \u{1F44B}. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.
============================`));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:s,refCount:1}),a}makeTensorInfo(e,t,s){let a;if(t==="string"&&s!=null&&s.length>0&&$s(s[0])){const l=s.map(c=>Ya(c));a=this.write(l,e,t)}else a=this.write(s,e,t);return{dataId:a,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,s,a,l){this.data.set(e,{values:t,dtype:a,refCount:l})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:s}=this.data.get(e);return t==="complex64"?mu(this.readSync(s.real.dataId),this.readSync(s.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let s=t;if(e.dtype==="string")try{s=t.map(a=>Mr(a))}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Er(e.shape,e.dtype,s)}makeOutput(e,t,s){const a=this.write(e,t,s);return Ju().makeTensorFromDataId(a,t,s,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:s}=this.data.get(e);s!=null&&(this.disposeData(s.real.dataId,!0),this.disposeData(s.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=di();return e(),{kernelMs:di()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Vn([e],"where");const t=this.readSync(e.dataId);return UD(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function si(r,e,t){return({inputs:s,attrs:a,backend:l})=>{const{x:c}=s;if(Vn(c,r),c.dtype==="string"||t==="string")throw new Error("unaryKernelFunc does not support string input/output");const d=l,m=d.data.get(c.dataId).values,f=he(c.shape),y=t||c.dtype,x=Or(y,f);for(let _=0;_<f;++_)x[_]=e(m[_],a);return d.makeTensorInfo(c.shape,y,x)}}function xy(r,e,t){return({inputs:s,attrs:a,backend:l})=>{const{x:c}=s;if(Vn(c,r),c.dtype==="string"||t==="string")throw new Error("unaryKernelFunc does not support string input/output");const d=l,m=d.data.get(c.dataId).values,f=t||c.dtype,y=e(m,f,a);return d.makeTensorInfo(c.shape,f,y)}}Vw.nextDataId=0,$0("cpu",()=>new Vw,1);const $A=si(Hc,r=>r>=0?r:Math.exp(r)-1),VD={kernelName:Hc,backendName:"cpu",kernelFunc:$A};function Sc(r){const{inputs:e,backend:t}=r,{x:s}=e;return t.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const WD={kernelName:bd,backendName:"cpu",kernelFunc:Sc};function UA(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{alpha:l}=s;Vn([a],"leakyRelu");const c=he(a.shape),d=t.data.get(a.dataId).values,m=Ti("float32",c);for(let f=0;f<d.length;f++)m[f]=d[f]<0?l*d[f]:d[f];return t.makeTensorInfo(a.shape,"float32",m)}const GD={kernelName:xf,backendName:"cpu",kernelFunc:UA};function ws(r){return(e,t,s,a,l)=>{const c=mr(e,t),d=c.length,m=Hn(c),f=Ti(l,he(c)),y=e.length,x=t.length,_=Hn(e),A=Hn(t),C=gh(e,c),L=gh(t,c);if(C.length+L.length===0)for(let P=0;P<f.length;++P)f[P]=r(s[P%s.length],a[P%a.length]);else for(let P=0;P<f.length;++P){const U=Zn(P,d,m),q=U.slice(-y);C.forEach(de=>q[de]=0);const X=Wn(q,y,_),re=U.slice(-x);L.forEach(de=>re[de]=0);const oe=Wn(re,x,A);f[P]=r(s[X],a[oe])}return[f,c]}}const HD=ws((r,e)=>r<0?e*r:r);function VA(r){const{inputs:e,backend:t}=r,{x:s,alpha:a}=e;Vn([s,a],"prelu");const l=t.data.get(s.dataId).values,c=t.data.get(a.dataId).values,[d,m]=HD(s.shape,a.shape,l,c,s.dtype);return t.makeTensorInfo(m,s.dtype,d)}const jD={kernelName:Ri,backendName:"cpu",kernelFunc:VA},WA=si(Bu,r=>Math.max(0,r)),qD={kernelName:Bu,backendName:"cpu",kernelFunc:WA},GA=si(Aa,r=>Math.min(Math.max(0,r),6)),XD={kernelName:Aa,backendName:"cpu",kernelFunc:GA};function Fp(r){return(e,t,s)=>{const a=Ti(t,e.length);for(let l=0;l<e.length;++l)a[l]=r(e[l],s);return a}}const YD=Fp(r=>1/(1+Math.exp(-r))),HA=si(Yl,r=>1/(1+Math.exp(-r))),KD={kernelName:Yl,backendName:"cpu",kernelFunc:HA};function KM(r,e,t,s,a){if(t==="linear")return Sc({inputs:{x:e},backend:r});if(t==="relu")return WA({inputs:{x:e},backend:r});if(t==="elu")return $A({inputs:{x:e},backend:r});if(t==="relu6")return GA({inputs:{x:e},backend:r});if(t==="prelu")return VA({inputs:{x:e,alpha:s},backend:r});if(t==="leakyrelu")return UA({inputs:{x:e},backend:r,attrs:{alpha:a}});if(t==="sigmoid")return HA({inputs:{x:e},backend:r});throw new Error(`Activation ${t} has not been implemented for the CPU backend.`)}function Co(r){const{inputs:e,backend:t}=r,{real:s,imag:a}=e,l=t.data.get(s.dataId).values,c=t.data.get(a.dataId).values,d=t.makeTensorInfo(s.shape,"complex64");return t.data.get(d.dataId).complexTensorInfos={real:t.makeTensorInfo(s.shape,"float32",l),imag:t.makeTensorInfo(a.shape,"float32",c)},d}const ZD={kernelName:lf,backendName:"cpu",kernelFunc:Co};function Ww(r,e,t="float32"){if(t==="complex64")return Co({inputs:{real:Ww(r,e,"float32"),imag:Ww(r,e,"float32")},backend:r});const s=xt(he(e),t);return r.makeTensorInfo(e,t,s)}function Nm(r){const{inputs:e,backend:t}=r,{input:s}=e,a=t.data.get(s.dataId).complexTensorInfos.real,l=t.data.get(a.dataId).values;return t.makeTensorInfo(a.shape,a.dtype,l)}const JD={kernelName:Ea,backendName:"cpu",kernelFunc:Nm};function Op(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{dtype:l}=s;if(l==="complex64"){if(a.dtype==="complex64")return Sc({inputs:{x:a},backend:t});const c=Ww(t,a.shape,a.dtype),d=Op({inputs:{x:a},backend:t,attrs:{dtype:"float32"}}),m=Co({inputs:{real:d,imag:c},backend:t});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(d),m}if(a.dtype==="complex64"){const c=Nm({inputs:{input:a},backend:t}),d=Op({inputs:{x:c},backend:t,attrs:{dtype:l}});return t.disposeIntermediateTensorInfo(c),d}if(!Ns(a.dtype,l)){const c=Sc({inputs:{x:a},backend:t});return{dataId:c.dataId,shape:c.shape,dtype:l}}if(l==="int32"){const c=t.data.get(a.dataId).values,d=Int32Array.from(c);return t.makeTensorInfo(a.shape,"int32",d)}if(l==="bool"){const c=t.data.get(a.dataId).values,d=yn([0],a.dtype),[m,f]=ws((y,x)=>y!==x?1:0)(a.shape,[],c,d,"bool");return t.makeTensorInfo(f,"bool",m)}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${l}`)}const QD={kernelName:Bc,backendName:"cpu",kernelFunc:Op};function Os(r,e,t,s){return t==null?({inputs:a,backend:l})=>{const{a:c,b:d}=a,m=l;Vn([c,d],r);const f=m.data.get(c.dataId).values,y=m.data.get(d.dataId).values,x=c.dtype==="string"?Uh(f):f,_=c.dtype==="string"?Uh(y):y,A=s||c.dtype,[C,L]=e(c.shape,d.shape,x,_,A);return m.makeTensorInfo(L,A,C)}:({inputs:a,backend:l})=>{const{a:c,b:d}=a,m=l;if(c.dtype==="complex64"||d.dtype==="complex64"){const f=Op({inputs:{x:c},backend:m,attrs:{dtype:"complex64"}}),y=m.data.get(f.dataId),x=y.complexTensorInfos.real,_=y.complexTensorInfos.imag,A=m.data.get(x.dataId).values,C=m.data.get(_.dataId).values,L=Op({inputs:{x:d},backend:m,attrs:{dtype:"complex64"}}),P=m.data.get(L.dataId),U=P.complexTensorInfos.real,q=P.complexTensorInfos.imag,X=m.data.get(U.dataId).values,re=m.data.get(q.dataId).values,[oe,de,Ie]=t(c.shape,d.shape,A,C,X,re),pe=m.makeTensorInfo(Ie,"float32",oe),Be=m.makeTensorInfo(Ie,"float32",de),ze=Co({inputs:{real:pe,imag:Be},backend:m});return m.disposeIntermediateTensorInfo(f),m.disposeIntermediateTensorInfo(L),m.disposeIntermediateTensorInfo(pe),m.disposeIntermediateTensorInfo(Be),ze}{const f=m.data.get(c.dataId).values,y=m.data.get(d.dataId).values,x=s||c.dtype,[_,A]=e(c.shape,d.shape,f,y,x);return m.makeTensorInfo(A,x,_)}}}function ZM(r){return(e,t,s,a,l,c)=>{const d=mr(e,t),m=he(d),f=d.length,y=Hn(d),x=Ti("float32",m),_=Ti("float32",m),A=gh(e,d),C=gh(t,d),L=mu(s,a),P=mu(l,c),U=e.length,q=Hn(e),X=t.length,re=Hn(t);if(A.length+C.length===0)for(let oe=0;oe<x.length;oe++){const de=oe%L.length,Ie=oe%P.length,pe=r(L[2*de],L[2*de+1],P[2*Ie],P[2*Ie+1]);x[oe]=pe.real,_[oe]=pe.imag}else for(let oe=0;oe<x.length;oe++){const de=Zn(oe,f,y),Ie=de.slice(-U);A.forEach(Qe=>Ie[Qe]=0);const pe=Wn(Ie,U,q),Be=de.slice(-X);C.forEach(Qe=>Be[Qe]=0);const ze=Wn(Be,X,re),Ve=r(L[2*pe],L[2*pe+1],P[2*ze],P[2*ze+1]);x[oe]=Ve.real,_[oe]=Ve.imag}return[x,_,d]}}const jA=ws((r,e)=>r+e),eP=ZM((r,e,t,s)=>({real:r+t,imag:e+s})),jx=Os(li,jA,eP),tP={kernelName:li,backendName:"cpu",kernelFunc:jx};function Ci(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{shape:l}=s,c=he(a.shape),d=Kr(l,c),m=he(d);Q(c===m,()=>`The new shape (${d}) has ${m} elements and the old shape (${a.shape}) has ${c} elements. The new shape and old shape must have the same number of elements.`),t.incRef(a.dataId);const f=t.data.get(a.dataId);if(f.complexTensorInfos!=null){const y=f.complexTensorInfos.real,x=f.complexTensorInfos.imag;y.shape=d,x.shape=d}return{dataId:a.dataId,shape:d,dtype:a.dtype}}const nP={kernelName:Zi,backendName:"cpu",kernelFunc:Ci};function qA(r){const{inputs:e,backend:t,attrs:s}=r,{a,b:l}=e,{transposeA:c,transposeB:d}=s;Vn([a,l],"matMul");const m=a.shape.length,f=l.shape.length,y=c?a.shape[m-2]:a.shape[m-1],x=d?l.shape[f-1]:l.shape[f-2],_=c?a.shape[m-1]:a.shape[m-2],A=d?l.shape[f-2]:l.shape[f-1],C=a.shape.slice(0,-2),L=l.shape.slice(0,-2),P=he(C),U=he(L);Q(m>=2&&f>=2&&(P===U||P===1||U===1),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${C}) and (${L}).`);const q=(P>U?a.shape.slice(0,-2):l.shape.slice(0,-2)).concat([_,A]);Q(y===x,()=>`Error in matMul: inner shapes (${y}) and (${x}) of Tensors with shapes ${a.shape} and ${l.shape} and transposeA=${c} and transposeB=${d} must match.`);const X=d?[U,A,x]:[U,x,A],re=Ci({inputs:{x:a},backend:t,attrs:{shape:c?[P,y,_]:[P,_,y]}}),oe=Ci({inputs:{x:l},backend:t,attrs:{shape:X}}),de=c?re.shape[1]:re.shape[2],Ie=c?re.shape[2]:re.shape[1],pe=d?oe.shape[1]:oe.shape[2],Be=Math.max(P,U),ze=t.data.get(re.dataId).values,Ve=t.data.get(oe.dataId).values,Qe=Hn(re.shape),nt=Hn(oe.shape),[ft,yt,Mt]=c?[Qe[0],1,Qe[1]]:[Qe[0],Qe[1],1],[vt,Ct,bt]=d?[1,nt[1],nt[0]]:[nt[1],1,nt[0]],Rt=Ie*pe,Ut=Er([Be,Ie,pe],re.dtype),Zt=Ut.values,qt=t.blockSize;for(let cn=0;cn<Be;cn++)for(let hn=0;hn<Ie;hn+=qt)for(let Sn=0;Sn<pe;Sn+=qt)for(let Cn=0;Cn<de;Cn+=qt){const jn=Math.min(hn+qt,Ie),ar=Math.min(Sn+qt,pe),lr=Math.min(Cn+qt,de);for(let Qn=hn;Qn<jn;Qn++)for(let vr=Sn;vr<ar;vr++){let Ar=0;for(let Dr=Cn;Dr<lr;Dr++){const yr=Math.min(cn,P-1)*ft,kr=Math.min(cn,U-1)*bt;Ar+=ze[yr+Qn*yt+Dr*Mt]*Ve[Dr*vt+vr*Ct+kr]}Zt[cn*Rt+(Qn*pe+vr)]+=Ar}}return t.disposeIntermediateTensorInfo(re),t.disposeIntermediateTensorInfo(oe),t.makeTensorInfo(q,Ut.dtype,Ut.values)}const rP={kernelName:ad,backendName:"cpu",kernelFunc:qA},iP={kernelName:Wu,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{a,b:l,bias:c,preluActivationWeights:d}=e,{transposeA:m,transposeB:f,activation:y,leakyreluAlpha:x}=s;let _,A,C;const L=[];_=qA({inputs:{a,b:l},attrs:{transposeA:m,transposeB:f},backend:t}),c&&(A=jx({inputs:{a:_,b:c},backend:t}),L.push(_),_=A),y&&(C=KM(t,_,y,d,x),L.push(_),_=C);for(const P of L)t.disposeIntermediateTensorInfo(P);return _}};function XA(r){const e=new Float32Array(r.length);for(let t=0;t<r.length;++t)e[t]=Math.abs(r[t]);return e}const sP={kernelName:Us,backendName:"cpu",kernelFunc:r=>{const{x:e}=r.inputs,t=r.backend;Vn(e,"abs");let s=new Float32Array(he(e.shape));return s=XA(t.data.get(e.dataId).values),t.makeOutput(s,e.shape,"float32")}},aP=si(oi,r=>Math.acos(r)),oP={kernelName:oi,backendName:"cpu",kernelFunc:aP},lP=si(ds,r=>Math.acosh(r)),uP={kernelName:ds,backendName:"cpu",kernelFunc:lP},cP={kernelName:Lc,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,s=e;Vn(e,"addN");const a=s.map(d=>t.data.get(d.dataId).values),l=Er(s[0].shape,s[0].dtype),c=l.values;for(let d=0;d<s.length;d++){const m=a[d];for(let f=0;f<c.length;f++)c[f]+=m[f]}return t.makeTensorInfo(l.shape,l.dtype,l.values)}};function JM(r,e,t,s,a){const l=e.length,c=he(e),d=Hn(e),m=Hn(a),f=Ti(t,he(a));for(let y=0;y<c;++y){const x=Zn(y,l,d),_=new Array(x.length);for(let A=0;A<_.length;A++)_[A]=x[s[A]];f[Wn(_,l,m)]=r[y]}return f}function ll(r){const{inputs:e,attrs:t,backend:s}=r,{x:a}=e,{perm:l}=t;Vn(a,"transpose");const c=a.shape.length,d=new Array(c);for(let f=0;f<d.length;f++)d[f]=a.shape[l[f]];const m=JM(s.data.get(a.dataId).values,a.shape,a.dtype,l,d);return{dataId:s.write(m,d,a.dtype),shape:d,dtype:a.dtype}}const hP={kernelName:$d,backendName:"cpu",kernelFunc:ll},dP={kernelName:td,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s;Vn(a,"all");const d=ir(l,a.shape);let m=d;const f=Hi(m,a.shape.length);let y=a;f!=null&&(y=ll({inputs:{x:a},backend:t,attrs:{perm:f}}),m=Ai(m.length,a.shape.length)),Di("all",m,y.shape.length);const[x,_]=ts(y.shape,m),A=he(_),C=xt(he(x),y.dtype),L=t.data.get(y.dataId).values;for(let U=0;U<C.length;++U){const q=U*A;let X=L[q];for(let re=0;re<A;++re){const oe=L[q+re];X=X&&oe}C[U]=X}f!=null&&t.disposeIntermediateTensorInfo(y);const P=t.makeTensorInfo(x,y.dtype,C);if(c){const U=Ci({inputs:{x:P},backend:t,attrs:{shape:Gi(x,d)}});return t.disposeIntermediateTensorInfo(P),U}return P}},pP={kernelName:nd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s;Vn(a,"any");const d=ir(l,a.shape);let m=d;const f=Hi(m,a.shape.length);let y=a;f!=null&&(y=ll({inputs:{x:a},backend:t,attrs:{perm:f}}),m=Ai(m.length,a.shape.length)),Di("any",m,y.shape.length);const[x,_]=ts(y.shape,m),A=he(_),C=xt(he(x),y.dtype),L=t.data.get(y.dataId).values;for(let U=0;U<C.length;++U){const q=U*A;let X=L[q];for(let re=0;re<A;++re){const oe=L[q+re];X=X||oe}C[U]=X}f!=null&&t.disposeIntermediateTensorInfo(y);const P=t.makeTensorInfo(x,y.dtype,C);if(c){const U=Ci({inputs:{x:P},backend:t,attrs:{shape:Gi(x,d)}});return t.disposeIntermediateTensorInfo(P),U}return P}},fP={kernelName:rd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l}=s;Vn(a,"argMax");let c=ir(l,a.shape);const d=Hi(c,a.shape.length);let m=a;const f=[];d!=null&&(m=ll({inputs:{x:a},backend:t,attrs:{perm:d}}),f.push(m),c=Ai(c.length,m.shape.length)),c=[c[0]],Di("argMax",c,m.shape.length);const[y,x]=ts(m.shape,c),_=xt(he(y),"int32"),A=he(x),C=t.data.get(m.dataId).values;for(let L=0;L<_.length;++L){const P=L*A;let U=C[P],q=0;for(let X=0;X<A;++X){const re=C[P+X];re>U&&(U=re,q=X)}_[L]=q}return f.forEach(L=>t.disposeIntermediateTensorInfo(L)),t.makeTensorInfo(y,"int32",_)}},mP={kernelName:Dc,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l}=s;Vn(a,"argMin");let c=ir(l,a.shape);const d=Hi(c,a.shape.length);let m=a;const f=[];d!=null&&(m=ll({inputs:{x:a},backend:t,attrs:{perm:d}}),f.push(m),c=Ai(c.length,m.shape.length)),c=[c[0]],Di("argMin",c,m.shape.length);const[y,x]=ts(m.shape,c),_=xt(he(y),"int32"),A=he(x),C=t.data.get(m.dataId).values;for(let L=0;L<_.length;++L){const P=L*A;let U=C[P],q=0;for(let X=0;X<A;++X){const re=C[P+X];re<U&&(U=re,q=X)}_[L]=q}return f.forEach(L=>t.disposeIntermediateTensorInfo(L)),t.makeTensorInfo(y,"int32",_)}},gP=si(Lu,r=>Math.asin(r)),yP={kernelName:Lu,backendName:"cpu",kernelFunc:gP},xP=si(Pc,r=>Math.asinh(r)),vP={kernelName:Pc,backendName:"cpu",kernelFunc:xP},bP=si(Fc,r=>Math.atan(r)),wP={kernelName:Fc,backendName:"cpu",kernelFunc:bP},_P=ws((r,e)=>Math.atan2(r,e)),SP=Os(zc,_P),MP={kernelName:zc,backendName:"cpu",kernelFunc:SP},TP=si(Oc,r=>Math.atanh(r)),EP={kernelName:Oc,backendName:"cpu",kernelFunc:TP};function QM(r,e,t,s,a,l){const c=a.strideHeight,d=a.strideWidth,m=a.dilationHeight,f=a.dilationWidth,y=a.effectiveFilterHeight,x=a.effectiveFilterWidth,_=a.padInfo.top,A=a.padInfo.left,C=l==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,L=Er(a.outShape,t),P=L.values,U=a.outShape[1]*a.outShape[2]*a.outShape[3],q=a.outShape[2]*a.outShape[3],X=a.outShape[3];for(let re=0;re<a.batchSize;++re){const oe=re*U,de=re*s[0];for(let Ie=0;Ie<a.inChannels;++Ie)for(let pe=0;pe<a.outHeight;++pe){const Be=pe*c-_,ze=Math.max(0,Be),Ve=Math.min(a.inHeight,y+Be),Qe=oe+pe*q;for(let nt=0;nt<a.outWidth;++nt){const ft=nt*d-A,yt=Math.max(0,ft),Mt=Math.min(a.inWidth,x+ft);let vt=C,Ct=0,bt=0;for(let Rt=ze;Rt<Ve;Rt+=m){const Ut=de+Rt*s[1];for(let Zt=yt;Zt<Mt;Zt+=f){const qt=r[Ut+Zt*s[2]+Ie];l==="max"&&qt>vt?vt=qt:l==="avg"&&(Ct+=qt,bt++)}if(isNaN(vt))break}P[Qe+nt*X+Ie]=l==="avg"?Ct/bt:vt}}}return L}function YA(r,e,t,s,a=!1,l=!1){const c=Er(s.outShape,"int32"),d=s.strideHeight,m=s.strideWidth,f=s.dilationHeight,y=s.dilationWidth,x=s.effectiveFilterHeight,_=s.effectiveFilterWidth,A=s.padInfo.top,C=s.padInfo.left,L=Er(e,t,r);for(let P=0;P<s.batchSize;++P)for(let U=0;U<s.inChannels;++U)for(let q=0;q<s.outHeight;++q){const X=q*d-A;let re=X;for(;re<0;)re+=f;const oe=Math.min(s.inHeight,x+X);for(let de=0;de<s.outWidth;++de){const Ie=de*m-C;let pe=Ie;for(;pe<0;)pe+=y;const Be=Math.min(s.inWidth,_+Ie);let ze=Number.NEGATIVE_INFINITY,Ve=-1;for(let Qe=re;Qe<oe;Qe+=f){const nt=Qe-X;for(let ft=pe;ft<Be;ft+=y){const yt=ft-Ie,Mt=L.get(P,Qe,ft,U);Mt>ze&&(ze=Mt,Ve=a?l?((P*s.inHeight+Qe)*s.inWidth+ft)*s.inChannels+U:(Qe*s.inWidth+ft)*s.inChannels+U:nt*_+yt)}}c.set(Ve,P,q,de,U)}}return c}function KA(r,e,t,s,a,l){const c=a.strideDepth,d=a.strideHeight,m=a.strideWidth,f=a.dilationDepth,y=a.dilationHeight,x=a.dilationWidth,_=a.effectiveFilterDepth,A=a.effectiveFilterHeight,C=a.effectiveFilterWidth,L=a.padInfo.front,P=a.padInfo.top,U=a.padInfo.left,q=l==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,X=Er(a.outShape,t),re=X.values,oe=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],de=a.outShape[2]*a.outShape[3]*a.outShape[4],Ie=a.outShape[3]*a.outShape[4],pe=a.outShape[4];for(let Be=0;Be<a.batchSize;++Be){const ze=Be*oe,Ve=Be*s[0];for(let Qe=0;Qe<a.inChannels;++Qe)for(let nt=0;nt<a.outDepth;++nt){const ft=nt*c-L;let yt=ft;for(;yt<0;)yt+=f;const Mt=Math.min(a.inDepth,_+ft),vt=ze+nt*de;for(let Ct=0;Ct<a.outHeight;++Ct){const bt=Ct*d-P;let Rt=bt;for(;Rt<0;)Rt+=y;const Ut=Math.min(a.inHeight,A+bt),Zt=vt+Ct*Ie;for(let qt=0;qt<a.outWidth;++qt){const cn=qt*m-U;let hn=cn;for(;hn<0;)hn+=x;const Sn=Math.min(a.inWidth,C+cn),Cn=Zt+qt*pe;let jn=q,ar=0,lr=0;for(let Qn=yt;Qn<Mt;Qn+=f){const vr=Ve+Qn*s[1];for(let Ar=Rt;Ar<Ut;Ar+=y){const Dr=vr+Ar*s[2];for(let yr=hn;yr<Sn;yr+=x){const kr=r[Dr+yr*s[3]+Qe];if(l==="max"&&kr>jn?jn=kr:l==="avg"&&(ar+=kr,lr++),isNaN(jn))break}if(isNaN(jn))break}if(isNaN(jn))break}re[Cn+Qe]=l==="avg"?ar/lr:jn}}}}return X}const AP={kernelName:id,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e;Vn(a,"avgPool");const{filterSize:l,strides:c,pad:d,dimRoundingMode:m}=s;Q(es(c,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${c} and dilations '1'`);const f=ma(a.shape,l,c,1,d,m);let y;if(f.filterWidth===1&&f.filterHeight===1&&Le(f.inShape,f.outShape))y=Sc({inputs:{x:a},backend:t});else{const x=t.data.get(a.dataId).values,_=Hn(a.shape),A=QM(x,a.shape,a.dtype,_,f,"avg");y=t.makeTensorInfo(f.outShape,a.dtype,A.values)}return y}},IP={kernelName:sd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{filterSize:l,strides:c,pad:d,dimRoundingMode:m,dataFormat:f}=s;Vn(a,"avgPool3d");const y=bo(a.shape,l,c,1,d,m,f),x=KA(t.data.get(a.dataId).values,a.shape,a.dtype,Hn(a.shape),y,"avg");return t.makeTensorInfo(x.shape,"float32",x.values)}},CP={kernelName:af,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,input:l}=e,{filterSize:c,strides:d,pad:m,dimRoundingMode:f}=s;Vn([a,l],"avgPool3DGrad");const y=bo(l.shape,c,d,1,m,f),x=y.strideDepth,_=y.strideHeight,A=y.strideWidth,C=y.filterDepth,L=y.filterHeight,P=y.filterWidth,U=y.dilationDepth,q=y.dilationHeight,X=y.dilationWidth,re=y.effectiveFilterDepth,oe=y.effectiveFilterHeight,de=y.effectiveFilterWidth,Ie=re-1-y.padInfo.front,pe=de-1-y.padInfo.left,Be=oe-1-y.padInfo.top,ze=Er(l.shape,"float32"),Ve=1/(C*L*P),Qe=t.bufferSync(a);for(let nt=0;nt<y.batchSize;++nt)for(let ft=0;ft<y.inChannels;++ft)for(let yt=0;yt<y.inDepth;++yt)for(let Mt=0;Mt<y.inHeight;++Mt)for(let vt=0;vt<y.inWidth;++vt){const Ct=yt-Ie,bt=Mt-Be,Rt=vt-pe;let Ut=0;for(let Zt=0;Zt<re;Zt+=U){const qt=(Ct+Zt)/x;if(!(qt<0||qt>=y.outDepth||Math.floor(qt)!==qt))for(let cn=0;cn<oe;cn+=q){const hn=(bt+cn)/_;if(!(hn<0||hn>=y.outHeight||Math.floor(hn)!==hn))for(let Sn=0;Sn<de;Sn+=X){const Cn=(Rt+Sn)/A;Cn<0||Cn>=y.outWidth||Math.floor(Cn)!==Cn||(Ut+=Qe.get(nt,qt,hn,Cn,ft))}}}ze.set(Ut*Ve,nt,yt,Mt,vt,ft)}return t.makeTensorInfo(ze.shape,ze.dtype,ze.values)}},kP={kernelName:sf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,input:l}=e,c=l;Vn([a,l],"avgPoolGrad");const{filterSize:d,strides:m,pad:f}=s,y=ma(c.shape,d,m,1,f),x=y.strideHeight,_=y.strideWidth,A=y.filterHeight,C=y.filterWidth,L=y.dilationHeight,P=y.dilationWidth,U=y.effectiveFilterHeight,q=y.effectiveFilterWidth,X=q-1-y.padInfo.left,re=U-1-y.padInfo.top,oe=Er(c.shape,"float32"),de=1/(A*C),Ie=t.data.get(a.dataId).values,pe=Er(a.shape,"float32",Ie);for(let Be=0;Be<y.batchSize;++Be)for(let ze=0;ze<y.inChannels;++ze)for(let Ve=0;Ve<y.inHeight;++Ve)for(let Qe=0;Qe<y.inWidth;++Qe){const nt=Ve-re,ft=Qe-X;let yt=0;for(let Mt=0;Mt<U;Mt+=L){const vt=(nt+Mt)/x;if(!(vt<0||vt>=y.outHeight||Math.floor(vt)!==vt))for(let Ct=0;Ct<q;Ct+=P){const bt=(ft+Ct)/_;bt<0||bt>=y.outWidth||Math.floor(bt)!==bt||(yt+=pe.get(Be,vt,bt,ze))}}oe.set(yt*de,Be,Ve,Qe,ze)}return t.makeTensorInfo(oe.shape,oe.dtype,oe.values)}},NP={kernelName:vd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,scale:l,offset:c,mean:d,variance:m}=e;Q(d.shape.length===m.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),Q(c==null||d.shape.length===c.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),Q(l==null||d.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Vn([a,d,m,l,c],"batchNorm");let{varianceEpsilon:f}=s;f==null&&(f=.001);const y=t.data.get(a.dataId).values,x=t.data.get(d.dataId).values,_=t.data.get(m.dataId).values,A=l?t.data.get(l.dataId).values:new Float32Array([1]),C=c?t.data.get(c.dataId).values:new Float32Array([0]),L=new Float32Array(y.length),P=C.length,U=A.length,q=_.length,X=x.length;let re=0,oe=0,de=0,Ie=0;for(let pe=0;pe<y.length;++pe)L[pe]=C[re++]+(y[pe]-x[oe++])*A[de++]/Math.sqrt(_[Ie++]+f),re>=P&&(re=0),oe>=X&&(oe=0),de>=U&&(de=0),Ie>=q&&(Ie=0);return t.makeTensorInfo(a.shape,a.dtype,L)}};function ZA(r,e,t,s,a){const l=D0(s,e,t),c=he(t),d=Hn(s);if(l){const y=P0(e,d);return a==="string"?r.slice(y,y+c):r.subarray(y,y+c)}const m=Er(s,a,a==="string"?Uh(r):r),f=Er(t,a);for(let y=0;y<f.size;++y){const x=f.indexToLoc(y),_=x.map((A,C)=>A+e[C]);f.set(m.get(..._),...x)}return a==="string"?ew(f.values):f.values}function Rm(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{begin:l,size:c}=s;Vn(a,"slice");const[d,m]=yg(a,l,c);L0(a,d,m);const f=ZA(t.data.get(a.dataId).values,d,m,a.shape,a.dtype);return t.makeTensorInfo(m,a.dtype,f)}const RP={kernelName:ho,backendName:"cpu",kernelFunc:Rm},LP={kernelName:od,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{blockShape:l,crops:c}=s;Vn([a],"batchToSpaceND");const d=l.reduce((U,q)=>U*q),m=pi(a.shape,l,d),f=_m(m.length,l.length),y=wi(a.shape,l,d),x=Tp(c,l.length),_=ey(y,c,l.length),A=Ci({inputs:{x:a},backend:t,attrs:{shape:m}}),C=ll({inputs:{x:A},backend:t,attrs:{perm:f}}),L=Ci({inputs:{x:C},backend:t,attrs:{shape:y}}),P=Rm({inputs:{x:L},backend:t,attrs:{begin:x,size:_}});return t.disposeIntermediateTensorInfo(A),t.disposeIntermediateTensorInfo(C),t.disposeIntermediateTensorInfo(L),P}};function eT(r,e,t,s,a){const l=he(s),c=xt(a,t);for(let d=0;d<r.length;d++){const m=r[d];if(m<0)throw new Error("Input x must be non-negative!");m>=a||(c[m]+=l>0?e[d]:1)}return c}function JA(r,e,t,s=!1){const a=r.shape[0],l=r.shape[1],c=Er([a,t],e.dtype);for(let d=0;d<a;d++)for(let m=0;m<l;m++){const f=r.get(d,m);if(f<0)throw new Error("Input x must be non-negative!");f>=t||(s?c.set(1,d,f):e.size>0?c.set(c.get(d,f)+e.get(d,m),d,f):c.set(c.get(d,f)+1,d,f))}return c}const DP={kernelName:of,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,weights:l}=e,{size:c}=s,d=eT(t.data.get(a.dataId).values,t.data.get(l.dataId).values,l.dtype,l.shape,c);return t.makeTensorInfo([c],l.dtype,d)}},PP={kernelName:Hm,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{s0:s,s1:a}=e,l=t.data.get(s.dataId).values,c=t.data.get(a.dataId).values,d=mr(Array.from(l),Array.from(c));return t.makeTensorInfo([d.length],"int32",Int32Array.from(d))}},QA=Fp(r=>Math.ceil(r)),FP=xy($c,QA),OP={kernelName:$c,backendName:"cpu",kernelFunc:FP},zP=si(Uc,(r,e)=>{const t=e;return r>t.clipValueMax?t.clipValueMax:r<t.clipValueMin?t.clipValueMin:r}),BP={kernelName:Uc,backendName:"cpu",kernelFunc:zP},$P={kernelName:ld,backendName:"cpu",kernelFunc:r=>{const{x:e}=r.inputs,t=r.backend,s=new Float32Array(he(e.shape)),a=t.data.get(e.dataId),l=a.complexTensorInfos.real,c=a.complexTensorInfos.imag,d=t.data.get(l.dataId).values,m=t.data.get(c.dataId).values;for(let f=0;f<d.length;f++){const y=d[f],x=m[f];s[f]=Math.hypot(y,x)}return t.makeOutput(s,e.shape,"float32")}};function eI(r,e,t,s){const a=Or(t,he(e));if(s&&t!=="string"){let l=0;r.forEach(c=>{const d=he(c.shape);a.set(c.vals,l),l+=d})}else{let l=0;r.forEach(c=>{const d=t==="string"?Uh(c.vals):c.vals;let m=0;for(let f=0;f<c.shape[0];++f){const y=f*e[1]+l;for(let x=0;x<c.shape[1];++x)a[y+x]=d[m++]}l+=c.shape[1]})}return a}function vy(r){const{inputs:e,backend:t}=r,{input:s}=e,a=t.data.get(s.dataId).complexTensorInfos.imag,l=t.data.get(a.dataId).values;return t.makeTensorInfo(a.shape,a.dtype,l)}const UP={kernelName:Xm,backendName:"cpu",kernelFunc:vy};function by(r){const{inputs:e,backend:t,attrs:s}=r,{axis:a}=s,l=ir(a,e[0].shape)[0];let c=ro(e.map(C=>C.shape),l);if(he(c)===0)return t.makeTensorInfo(c,e[0].dtype,[]);const d=e.filter(C=>he(C.shape)>0);if(d.length===1)return Sc({inputs:{x:d[0]},backend:t});if(Zg(d.map(C=>C.shape),l),d[0].dtype==="complex64"){const C=d.map(X=>Nm({inputs:{input:X},backend:t})),L=d.map(X=>vy({inputs:{input:X},backend:t})),P=by({inputs:C,backend:t,attrs:{axis:l}}),U=by({inputs:L,backend:t,attrs:{axis:l}}),q=Co({inputs:{real:P,imag:U},backend:t});return C.forEach(X=>t.disposeIntermediateTensorInfo(X)),L.forEach(X=>t.disposeIntermediateTensorInfo(X)),t.disposeIntermediateTensorInfo(P),t.disposeIntermediateTensorInfo(U),q}const m=d.map(C=>{const L=he(C.shape.slice(l));return Ci({inputs:{x:C},backend:t,attrs:{shape:[-1,L]}})}),f=m.map(C=>({vals:t.data.get(C.dataId).values,shape:C.shape}));c=ro(m.map(C=>C.shape),1);const y=m[0].shape[0]===1,x=eI(f,c,e[0].dtype,y),_=ro(d.map(C=>C.shape),l),A=t.makeTensorInfo(_,e[0].dtype,x);return m.forEach(C=>t.disposeIntermediateTensorInfo(C)),A}const VP={kernelName:ud,backendName:"cpu",kernelFunc:by};function tI(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l}=e,{strides:c,pad:d,dataFormat:m,dilations:f,dimRoundingMode:y}=s;Vn([a,l],"conv2d");const x=wo(m),_=Wi(a.shape,l.shape,c,f,d,y,!1,x),A=_.filterHeight,C=_.filterWidth,L=_.dilationHeight,P=_.dilationWidth,U=_.padInfo.left,q=_.padInfo.top,X=_.dataFormat==="channelsLast",re=new pn(_.outShape,a.dtype),oe=Hn(a.shape),de=Hn(l.shape),Ie=oe[0],pe=X?oe[1]:oe[2],Be=X?oe[2]:1,ze=X?1:oe[1],Ve=re.strides[0],Qe=X?re.strides[1]:re.strides[2],nt=X?re.strides[2]:1,ft=X?1:re.strides[1],yt=t.data.get(a.dataId).values,Mt=t.data.get(l.dataId).values,vt=re.values;for(let Ct=0;Ct<_.batchSize;++Ct){const bt=Ct*Ie,Rt=Ct*Ve;for(let Ut=0;Ut<_.outHeight;++Ut){const Zt=Rt+Ut*Qe,qt=Ut*_.strideHeight-q;for(let cn=0;cn<A;++cn){const hn=qt+cn*L;if(hn<0||hn>=_.inHeight)continue;const Sn=cn*de[0],Cn=bt+hn*pe;for(let jn=0;jn<_.outWidth;++jn){const ar=Zt+jn*nt,lr=jn*_.strideWidth-U;for(let Qn=0;Qn<C;++Qn){const vr=lr+Qn*P;if(vr<0||vr>=_.inWidth)continue;const Ar=Cn+vr*Be;let Dr=Sn+Qn*de[1];for(let yr=0;yr<_.inChannels;++yr){const kr=yt[Ar+yr*ze];for(let qr=0;qr<_.outChannels;++qr)vt[ar+qr*ft]+=kr*Mt[Dr+qr];Dr+=_.outChannels}}}}}}return t.makeTensorInfo(re.shape,re.dtype,vt)}const WP={kernelName:cd,backendName:"cpu",kernelFunc:tI},GP={kernelName:uf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,dy:l}=e,{strides:c,pad:d,dataFormat:m,dimRoundingMode:f,filterShape:y}=s;Vn([a,l],"conv2dBackpropFilter");const x=wo(m),_=Wi(a.shape,y,c,1,d,f,!1,x),{strideHeight:A,strideWidth:C,filterHeight:L,filterWidth:P}=_,U=_.dataFormat==="channelsLast",q=new pn(_.filterShape,"float32"),X=_.padInfo.left,re=_.padInfo.top,oe=t.data.get(a.dataId).values,de=t.data.get(l.dataId).values,Ie=new pn(a.shape,a.dtype,oe),pe=new pn(l.shape,l.dtype,de);for(let Be=0;Be<L;++Be){const ze=Math.max(0,Math.ceil((re-Be)/A)),Ve=Math.min(_.outHeight,(_.inHeight+re-Be)/A);for(let Qe=0;Qe<P;++Qe){const nt=Math.max(0,Math.ceil((X-Qe)/C)),ft=Math.min(_.outWidth,(_.inWidth+X-Qe)/C);for(let yt=0;yt<_.inChannels;++yt)for(let Mt=0;Mt<_.outChannels;++Mt){let vt=0;for(let Ct=0;Ct<_.batchSize;++Ct)for(let bt=ze;bt<Ve;++bt){const Rt=Be+bt*A-re;for(let Ut=nt;Ut<ft;++Ut){const Zt=Qe+Ut*C-X;vt+=U?Ie.get(Ct,Rt,Zt,yt)*pe.get(Ct,bt,Ut,Mt):Ie.get(Ct,yt,Rt,Zt)*pe.get(Ct,Mt,bt,Ut)}}q.set(vt,Be,Qe,yt,Mt)}}}return t.makeTensorInfo(q.shape,q.dtype,q.values)}},HP={kernelName:hd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,filter:l}=e,{inputShape:c,strides:d,pad:m,dataFormat:f,dimRoundingMode:y}=s;Vn([a,l],"conv2dBackpropInput");const x=Hn(l.shape),_=Hn(a.shape);let A=wo(f);const C=Wi(c,l.shape,d,1,m,y,!1,A),L=new pn(C.inShape,"float32"),P=L.values,U=t.data.get(a.dataId).values,q=t.data.get(l.dataId).values,[X,re,oe]=x,{batchSize:de,filterHeight:Ie,filterWidth:pe,inChannels:Be,inHeight:ze,inWidth:Ve,outChannels:Qe,outHeight:nt,outWidth:ft,strideHeight:yt,strideWidth:Mt}=C;A=C.dataFormat;const vt=Ie-1-C.padInfo.top,Ct=pe-1-C.padInfo.left,bt=A==="channelsLast",Rt=L.strides[0],Ut=bt?L.strides[1]:L.strides[2],Zt=bt?L.strides[2]:1,qt=bt?1:L.strides[1],cn=_[0],hn=bt?_[1]:_[2],Sn=bt?_[2]:1,Cn=bt?1:_[1];for(let jn=0;jn<de;++jn)for(let ar=0;ar<Be;++ar)for(let lr=0;lr<ze;++lr){const Qn=lr-vt,vr=Math.max(0,Math.ceil(Qn/yt)),Ar=Math.min(nt,(Ie+Qn)/yt);for(let Dr=0;Dr<Ve;++Dr){const yr=Dr-Ct,kr=Math.max(0,Math.ceil(yr/Mt)),qr=Math.min(ft,(pe+yr)/Mt);let Cs=0;for(let _a=vr;_a<Ar;++_a){const sa=_a*yt-Qn;for(let _i=kr;_i<qr;++_i){const No=cn*jn+hn*_a+Sn*_i,aa=X*(Ie-1-sa)+re*(pe-1-(_i*Mt-yr))+oe*ar;for(let Ro=0;Ro<Qe;++Ro)Cs+=U[No+Cn*Ro]*q[aa+Ro]}}P[Rt*jn+Ut*lr+Zt*Dr+qt*ar]=Cs}}return t.makeTensorInfo(L.shape,L.dtype,L.values)}},jP={kernelName:dd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l}=e,{strides:c,pad:d,dilations:m}=s;Vn([a,l],"conv3d");const f=ou(a.shape,l.shape,c,m,d),{filterDepth:y,filterHeight:x,filterWidth:_,dilationDepth:A,dilationHeight:C,dilationWidth:L,padInfo:P}=f,U=P.front,q=P.left,X=P.top,re=new pn(f.outShape,a.dtype),oe=t.data.get(a.dataId).values,de=t.data.get(l.dataId).values,Ie=re.values,pe=Hn(a.shape),Be=Hn(l.shape);for(let ze=0;ze<f.batchSize;++ze){const Ve=ze*pe[0],Qe=ze*re.strides[0];for(let nt=0;nt<f.outDepth;++nt){const ft=Qe+nt*re.strides[1],yt=nt*f.strideDepth-U;for(let Mt=0;Mt<y;++Mt){const vt=yt+Mt*A;if(vt<0||vt>=f.inDepth)continue;const Ct=Mt*Be[0],bt=Ve+vt*pe[1];for(let Rt=0;Rt<f.outHeight;++Rt){const Ut=ft+Rt*re.strides[2],Zt=Rt*f.strideHeight-X;for(let qt=0;qt<x;++qt){const cn=Zt+qt*C;if(cn<0||cn>=f.inHeight)continue;const hn=Ct+qt*Be[1],Sn=bt+cn*pe[2];for(let Cn=0;Cn<f.outWidth;++Cn){const jn=Ut+Cn*f.outChannels,ar=Cn*f.strideWidth-q;for(let lr=0;lr<_;++lr){const Qn=ar+lr*L;if(Qn<0||Qn>=f.inWidth)continue;const vr=hn+lr*Be[2],Ar=Sn+Qn*f.inChannels;let Dr=vr;for(let yr=0;yr<f.inChannels;++yr){const kr=oe[Ar+yr];for(let qr=0;qr<f.outChannels;++qr)Ie[jn+qr]+=kr*de[Dr+qr];Dr+=f.outChannels}}}}}}}}return t.makeTensorInfo(re.shape,re.dtype,re.values)}},qP={kernelName:cf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,dy:l}=e,{strides:c,pad:d,filterShape:m}=s;Vn([a,l],"conv3dBackpropFilterV2");const f=Hn(a.shape),y=Hn(l.shape),x=ou(a.shape,m,c,1,d),_=x.strideDepth,A=x.strideHeight,C=x.strideWidth,L=x.filterDepth,P=x.filterHeight,U=x.filterWidth,q=new pn(x.filterShape,"float32"),X=q.values,[re,oe,de,Ie]=q.strides,pe=t.data.get(l.dataId).values,[Be,ze,Ve,Qe]=y,nt=t.data.get(a.dataId).values,[ft,yt,Mt,vt]=f,Ct=x.padInfo.front,bt=x.padInfo.left,Rt=x.padInfo.top;for(let Ut=0;Ut<L;++Ut){const Zt=Math.max(0,Math.ceil((Ct-Ut)/_)),qt=Math.min(x.outDepth,(x.inDepth+Ct-Ut)/_),cn=Ut*re;for(let hn=0;hn<P;++hn){const Sn=Math.max(0,Math.ceil((Rt-hn)/A)),Cn=Math.min(x.outHeight,(x.inHeight+Rt-hn)/A),jn=hn*oe+cn;for(let ar=0;ar<U;++ar){const lr=Math.max(0,Math.ceil((bt-ar)/C)),Qn=Math.min(x.outWidth,(x.inWidth+bt-ar)/C),vr=ar*de+jn;for(let Ar=0;Ar<x.inChannels;++Ar){const Dr=Ar*Ie+vr;for(let yr=0;yr<x.outChannels;++yr){let kr=0;for(let qr=0;qr<x.batchSize;++qr){const Cs=qr*ft,_a=qr*Be;for(let sa=Zt;sa<qt;++sa){const _i=(Ut+sa*_-Ct)*yt+Cs,No=sa*ze+_a;for(let aa=Sn;aa<Cn;++aa){const Ro=(hn+aa*A-Rt)*Mt+_i,Eu=aa*Ve+No;for(let $p=lr;$p<Qn;++$p){const qh=$p*Qe+Eu;kr+=nt[(ar+$p*C-bt)*vt+Ro+Ar]*pe[qh+yr]}}}}X[Dr+yr]=kr}}}}}return t.makeTensorInfo(q.shape,q.dtype,q.values)}},XP={kernelName:hf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,filter:l}=e,{pad:c,strides:d,inputShape:m}=s;Vn([a],"conv3dBackpropInputV2");const f=Hn(a.shape),y=Hn(l.shape),x=ou(m,l.shape,d,1,c),_=new pn(x.inShape,"float32"),A=_.values,[C,L,P,U]=_.strides,q=t.data.get(a.dataId).values,[X,re,oe,de]=f,Ie=t.data.get(l.dataId).values,[pe,Be,ze,Ve]=y,{batchSize:Qe,filterDepth:nt,filterHeight:ft,filterWidth:yt,inChannels:Mt,inDepth:vt,inHeight:Ct,inWidth:bt,outChannels:Rt,outDepth:Ut,outHeight:Zt,outWidth:qt,strideDepth:cn,strideHeight:hn,strideWidth:Sn}=x,Cn=nt-1-x.padInfo.front,jn=ft-1-x.padInfo.top,ar=yt-1-x.padInfo.left;for(let lr=0;lr<Qe;++lr)for(let Qn=0;Qn<Mt;++Qn)for(let vr=0;vr<vt;++vr){const Ar=vr-Cn,Dr=Math.max(0,Math.ceil(Ar/cn)),yr=Math.min(Ut,(nt+Ar)/cn);for(let kr=0;kr<Ct;++kr){const qr=kr-jn,Cs=Math.max(0,Math.ceil(qr/hn)),_a=Math.min(Zt,(ft+qr)/hn);for(let sa=0;sa<bt;++sa){const _i=sa-ar,No=Math.max(0,Math.ceil(_i/Sn)),aa=Math.min(qt,(yt+_i)/Sn);let Ro=0;for(let Eu=Dr;Eu<yr;++Eu){const $p=Eu*cn-Ar;for(let qh=Cs;qh<_a;++qh){const dG=qh*hn-qr;for(let l1=No;l1<aa;++l1){const pG=X*lr+re*Eu+oe*qh+de*l1,fG=pe*(nt-1-$p)+Be*(ft-1-dG)+ze*(yt-1-(l1*Sn-_i))+Ve*Qn;for(let u1=0;u1<Rt;++u1)Ro+=q[pG+u1]*Ie[fG+u1]}}}A[C*lr+L*vr+P*kr+U*sa+Qn]=Ro}}}return t.makeTensorInfo(_.shape,_.dtype,_.values)}},YP=si(Vc,r=>Math.cos(r)),KP={kernelName:Vc,backendName:"cpu",kernelFunc:YP},ZP=si(Wc,r=>Math.cosh(r)),JP={kernelName:Wc,backendName:"cpu",kernelFunc:ZP},QP={kernelName:df,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{image:a,boxes:l,boxInd:c}=e,{cropSize:d,method:m,extrapolationValue:f}=s,[y,x,_,A]=a.shape,C=l.shape[0],[L,P]=d,U=Er([C,L,P,A],"float32"),q=t.data.get(l.dataId).values,X=t.data.get(c.dataId).values,re=t.data.get(a.dataId).values,oe=Hn(a.shape),de=Hn(U.shape);for(let Ie=0;Ie<C;Ie++){const pe=4*Ie,Be=q[pe],ze=q[pe+1],Ve=q[pe+2],Qe=q[pe+3],nt=X[Ie];if(nt>=y)continue;const ft=L>1?(Ve-Be)*(x-1)/(L-1):0,yt=P>1?(Qe-ze)*(_-1)/(P-1):0;for(let Mt=0;Mt<L;Mt++){const vt=L>1?Be*(x-1)+Mt*ft:.5*(Be+Ve)*(x-1);if(vt<0||vt>x-1)for(let Ct=0;Ct<P;Ct++)for(let bt=0;bt<A;bt++){const Rt=bt+Ct*de[2]+Mt*de[1]+Ie*de[0];U.values[Rt]=f}else if(m==="bilinear"){const Ct=Math.floor(vt),bt=Math.ceil(vt),Rt=vt-Ct;for(let Ut=0;Ut<P;Ut++){const Zt=P>1?ze*(_-1)+Ut*yt:.5*(ze+Qe)*(_-1);if(Zt<0||Zt>_-1){for(let Sn=0;Sn<A;Sn++){const Cn=Sn+Ut*de[2]+Mt*de[1]+Ie*de[0];U.values[Cn]=f}continue}const qt=Math.floor(Zt),cn=Math.ceil(Zt),hn=Zt-qt;for(let Sn=0;Sn<A;Sn++){let Cn=Sn+qt*oe[2]+Ct*oe[1]+nt*oe[0];const jn=re[Cn];Cn=Sn+cn*oe[2]+Ct*oe[1]+nt*oe[0];const ar=re[Cn];Cn=Sn+qt*oe[2]+bt*oe[1]+nt*oe[0];const lr=re[Cn];Cn=Sn+cn*oe[2]+bt*oe[1]+nt*oe[0];const Qn=jn+(ar-jn)*hn,vr=lr+(re[Cn]-lr)*hn;Cn=Sn+Ut*de[2]+Mt*de[1]+Ie*de[0],U.values[Cn]=Qn+(vr-Qn)*Rt}}}else for(let Ct=0;Ct<P;++Ct){const bt=P>1?ze*(_-1)+Ct*yt:.5*(ze+Qe)*(_-1);if(bt<0||bt>_-1){for(let Zt=0;Zt<A;Zt++){const qt=Zt+Ct*de[2]+Mt*de[1]+Ie*de[0];U.values[qt]=f}continue}const Rt=Math.round(bt),Ut=Math.round(vt);for(let Zt=0;Zt<A;Zt++){const qt=Zt+Rt*oe[2]+Ut*oe[1]+nt*oe[0],cn=Zt+Ct*de[2]+Mt*de[1]+Ie*de[0];U.values[cn]=re[qt]}}}}return t.makeTensorInfo(U.shape,U.dtype,U.values)}},eF={kernelName:pd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,exclusive:c,reverse:d}=s;Vn(a,"cumsum");const m=Hi([l],a.shape.length);let f=a;m!=null&&(f=ll({inputs:{x:a},backend:t,attrs:{perm:m}}));const y=Ai(1,a.shape.length)[0];if(y!==f.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${f.shape.length-1} but got axis=${y}`);const x=On(f.dtype,"int32"),_=xt(he(f.shape),x),A=t.data.get(f.dataId).values,C=f.shape[f.shape.length-1],L=d?(U,q)=>U+C-q-1:(U,q)=>U+q;for(let U=0;U<A.length;U+=C)for(let q=0;q<C;q++){const X=L(U,q);if(q===0)_[X]=c?0:A[X];else{const re=L(U,q-1);_[X]=c?A[re]+_[re]:A[X]+_[re]}}const P=t.makeTensorInfo(f.shape,x,_);if(m!=null){const U=ll({inputs:{x:P},backend:t,attrs:{perm:ni(m)}});return t.disposeIntermediateTensorInfo(P),t.disposeIntermediateTensorInfo(f),U}return P}},tF={kernelName:pf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,weights:l}=e,{size:c,binaryOutput:d}=s;if(a.shape.length===1){const m=eT(t.data.get(a.dataId).values,t.data.get(l.dataId).values,l.dtype,l.shape,c);return t.makeTensorInfo([c],l.dtype,m)}if(a.shape.length===2){const m=JA(t.bufferSync(a),t.bufferSync(l),c,d);return t.makeTensorInfo(m.shape,l.dtype,m.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},nF={kernelName:ff,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{blockSize:l,dataFormat:c}=s;Q(c==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${c}`),Q(l>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${l}`);const d=a.shape[0],m=a.shape[1],f=a.shape[2],y=a.shape[3],x=m*l,_=f*l,A=y/(l*l),C=t.data.get(a.dataId).values,L=new Float32Array(d*x*_*A);let P=0;for(let U=0;U<d;++U)for(let q=0;q<x;++q){const X=Math.floor(q/l),re=q%l;for(let oe=0;oe<_;++oe){const de=Math.floor(oe/l),Ie=(re*l+oe%l)*A;for(let pe=0;pe<A;++pe){const Be=pe+Ie+y*(de+f*(X+m*U));L[P++]=C[Be]}}}return t.makeTensorInfo([d,x,_,A],a.dtype,L)}};function nI(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l}=e,{strides:c,pad:d,dilations:m,dimRoundingMode:f}=s;Vn([a,l],"depthwiseConv2DNative");const y=Hn(a.shape),x=Hn(l.shape);let _=m;_==null&&(_=[1,1]),Q(es(c,_),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${c} and dilations '${_}'`);const A=Wi(a.shape,l.shape,c,_,d,f,!0),{filterHeight:C,filterWidth:L,dilationHeight:P,dilationWidth:U,padInfo:q}=A,X=q.left,re=q.top,oe=A.outChannels/A.inChannels,de=new pn(A.outShape,a.dtype),Ie=t.data.get(a.dataId).values,pe=t.data.get(l.dataId).values,Be=de.values;for(let ze=0;ze<A.batchSize;++ze){const Ve=ze*y[0],Qe=ze*de.strides[0];for(let nt=0;nt<A.outHeight;++nt){const ft=Qe+nt*de.strides[1],yt=nt*A.strideHeight-re;for(let Mt=0;Mt<C;++Mt){const vt=yt+Mt*P;if(vt<0||vt>=A.inHeight)continue;const Ct=Mt*x[0],bt=Ve+vt*y[1];for(let Rt=0;Rt<A.outWidth;++Rt){const Ut=ft+Rt*de.strides[2],Zt=Rt*A.strideWidth-X;for(let qt=0;qt<L;++qt){const cn=Zt+qt*U;if(cn<0||cn>=A.inWidth)continue;const hn=Ct+qt*x[1],Sn=bt+cn*A.inChannels;let Cn=Ut,jn=hn;for(let ar=0;ar<A.inChannels;++ar){const lr=Ie[Sn+ar];for(let Qn=0;Qn<oe;++Qn)Be[Cn+Qn]+=lr*pe[jn+Qn];Cn+=oe,jn+=oe}}}}}}return t.makeTensorInfo(de.shape,de.dtype,de.values)}const rF={kernelName:fd,backendName:"cpu",kernelFunc:nI},iF={kernelName:Du,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,dy:l}=e,{strides:c,dilations:d,pad:m,dimRoundingMode:f,filterShape:y}=s;Vn([a,l],"depthwiseConv2dNativeBackpropFilter");const x=Wi(a.shape,y,c,d,m,f,!0),{strideHeight:_,strideWidth:A,filterHeight:C,filterWidth:L}=x,P=new pn(x.filterShape,"float32"),U=x.padInfo.left,q=x.padInfo.top,X=x.outChannels/x.inChannels,re=t.data.get(a.dataId).values,oe=new pn(a.shape,a.dtype,re),de=t.data.get(l.dataId).values,Ie=new pn(l.shape,l.dtype,de);for(let pe=0;pe<C;++pe){const Be=Math.max(0,Math.ceil((q-pe)/_)),ze=Math.min(x.outHeight,(x.inHeight+q-pe)/_);for(let Ve=0;Ve<L;++Ve){const Qe=Math.max(0,Math.ceil((U-Ve)/A)),nt=Math.min(x.outWidth,(x.inWidth+U-Ve)/A);for(let ft=0;ft<x.outChannels;++ft){const yt=Math.trunc(ft/X),Mt=ft%X;let vt=0;for(let Ct=0;Ct<x.batchSize;++Ct)for(let bt=Be;bt<ze;++bt){const Rt=pe+bt*_-q;for(let Ut=Qe;Ut<nt;++Ut){const Zt=Ve+Ut*A-U;vt+=oe.get(Ct,Rt,Zt,yt)*Ie.get(Ct,bt,Ut,ft)}}P.set(vt,pe,Ve,yt,Mt)}}}return t.makeTensorInfo(P.shape,P.dtype,P.values)}},sF={kernelName:Pu,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,filter:l}=e,{strides:c,dilations:d,pad:m,dimRoundingMode:f,inputShape:y}=s;Vn([a,l],"depthwiseConv2DNativeBackpropInput");const x=Hn(a.shape),_=Hn(l.shape),A=Wi(y,l.shape,c,d,m,f,!0),C=new pn(A.inShape,"float32"),L=C.values,[P,U,q]=C.strides,X=t.data.get(a.dataId).values,[re,oe,de]=x,Ie=t.data.get(l.dataId).values,[pe,Be,ze]=_,{batchSize:Ve,filterHeight:Qe,filterWidth:nt,inChannels:ft,inHeight:yt,inWidth:Mt,outChannels:vt,outHeight:Ct,outWidth:bt,strideHeight:Rt,strideWidth:Ut}=A,Zt=Qe-1-A.padInfo.top,qt=nt-1-A.padInfo.left,cn=vt/ft;for(let hn=0;hn<Ve;++hn)for(let Sn=0;Sn<ft;++Sn)for(let Cn=0;Cn<yt;++Cn){const jn=Cn-Zt,ar=Math.max(0,Math.ceil(jn/Rt)),lr=Math.min(Ct,(Qe+jn)/Rt);for(let Qn=0;Qn<Mt;++Qn){const vr=Qn-qt,Ar=Math.max(0,Math.ceil(vr/Ut)),Dr=Math.min(bt,(nt+vr)/Ut);let yr=0;for(let kr=ar;kr<lr;++kr){const qr=kr*Rt-jn;for(let Cs=Ar;Cs<Dr;++Cs){const _a=re*hn+oe*kr+de*Cs,sa=pe*(Qe-1-qr)+Be*(nt-1-(Cs*Ut-vr))+ze*Sn;for(let _i=0;_i<cn;++_i)yr+=X[_a+(Sn*cn+_i)]*Ie[sa+_i]}}L[P*hn+U*Cn+q*Qn+Sn]=yr}}return t.makeTensorInfo(C.shape,C.dtype,C.values)}},aF={kernelName:Gc,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{x:s}=e,a=he(s.shape),l=t.data.get(s.dataId).values,c=Er([a,a],s.dtype),d=c.values;for(let f=0;f<l.length;f++)d[f*a+f]=l[f];const m=[...s.shape,...s.shape];return t.makeTensorInfo(m,c.dtype,c.values)}},oF={kernelName:Fo,backendName:"cpu",kernelFunc:({inputs:r,backend:e,attrs:t})=>{const{x:s,filter:a}=r,{strides:l,pad:c,dilations:d}=t,m=e,f=m.data.get(s.dataId).values,y=s.shape.length,x=m.data.get(a.dataId).values,_=a.shape.length,{batchSize:A,inHeight:C,inWidth:L,inChannels:P,outHeight:U,outWidth:q,padInfo:X,strideHeight:re,strideWidth:oe,filterHeight:de,filterWidth:Ie,dilationHeight:pe,dilationWidth:Be,outShape:ze}=sp(s.shape,a.shape,l,c,"NHWC",d),Ve=he(ze),Qe=ze.length,nt=Or(s.dtype,Ve);for(let ft=0;ft<A;++ft)for(let yt=0;yt<U;++yt){const Mt=yt*re-X.top;for(let vt=0;vt<q;++vt){const Ct=vt*oe-X.left;for(let bt=0;bt<P;++bt){let Rt=Number.MIN_SAFE_INTEGER;for(let Ut=0;Ut<de;++Ut){const Zt=Mt+Ut*pe;if(Zt>=0&&Zt<C)for(let qt=0;qt<Ie;++qt){const cn=Ct+qt*Be;if(cn>=0&&cn<L){const hn=Wn([ft,Zt,cn,bt],y,Hn(s.shape)),Sn=Wn([Ut,qt,bt],_,Hn(a.shape)),Cn=f[hn]+x[Sn];Cn>Rt&&(Rt=Cn)}}}nt[Wn([ft,yt,vt,bt],Qe,Hn(ze))]=Rt}}}return{dataId:m.write(yn(nt,s.dtype),ze,s.dtype),shape:ze,dtype:s.dtype}}},lF={kernelName:Fu,backendName:"cpu",kernelFunc:({inputs:r,backend:e,attrs:t})=>{const{x:s,filter:a,dy:l}=r,{strides:c,pad:d,dilations:m}=t,f=e,y=ht(s.shape,f.data.get(s.dataId).values),x=ht(a.shape,f.data.get(a.dataId).values),{batchSize:_,inHeight:A,inWidth:C,inChannels:L,outHeight:P,outWidth:U,padInfo:q,strideHeight:X,strideWidth:re,filterHeight:oe,filterWidth:de,dilationHeight:Ie,dilationWidth:pe,outShape:Be}=sp(s.shape,a.shape,c,d,"NHWC",m);Q(l.rank===Be.length,()=>`Error in ${Fu}, dy must have the same rank as output ${Be.length}, but got ${l.rank}`);const ze=ht(Be,f.data.get(l.dataId).values),Ve=Xt(a.shape,a.dtype);for(let Qe=0;Qe<_;++Qe)for(let nt=0;nt<P;++nt){const ft=nt*X-q.top;for(let yt=0;yt<U;++yt){const Mt=yt*re-q.left;for(let vt=0;vt<L;++vt){let Ct=Number.MIN_SAFE_INTEGER,bt=0,Rt=0;for(let Ut=0;Ut<oe;++Ut){const Zt=ft+Ut*Ie;if(Zt>=0&&Zt<A)for(let qt=0;qt<de;++qt){const cn=Mt+qt*pe;if(cn>=0&&cn<C){const hn=y[Qe][Zt][cn][vt]+x[Ut][qt][vt];hn>Ct&&(Ct=hn,bt=Ut,Rt=qt)}}}Ve[bt][Rt][vt]+=ze[Qe][nt][yt][vt]}}}return{dataId:f.write(yn(Ve,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},uF={kernelName:gl,backendName:"cpu",kernelFunc:({inputs:r,backend:e,attrs:t})=>{const{x:s,filter:a,dy:l}=r,{strides:c,pad:d,dilations:m}=t,f=e,y=ht(s.shape,f.data.get(s.dataId).values),x=ht(a.shape,f.data.get(a.dataId).values),{batchSize:_,inHeight:A,inWidth:C,inChannels:L,outHeight:P,outWidth:U,padInfo:q,strideHeight:X,strideWidth:re,filterHeight:oe,filterWidth:de,dilationHeight:Ie,dilationWidth:pe,outShape:Be}=sp(s.shape,a.shape,c,d,"NHWC",m);Q(l.rank===Be.length,()=>`Error in ${gl}, dy must have the same rank as output ${Be.length}, but got ${l.rank}`);const ze=ht(Be,f.data.get(l.dataId).values),Ve=Xt(s.shape,s.dtype);for(let Qe=0;Qe<_;++Qe)for(let nt=0;nt<P;++nt){const ft=nt*X-q.top;for(let yt=0;yt<U;++yt){const Mt=yt*re-q.left;for(let vt=0;vt<L;++vt){let Ct=Number.MIN_SAFE_INTEGER,bt=ft<0?0:ft,Rt=Mt<0?0:Mt;for(let Ut=0;Ut<oe;++Ut){const Zt=ft+Ut*Ie;if(Zt>=0&&Zt<A)for(let qt=0;qt<de;++qt){const cn=Mt+qt*pe;if(cn>=0&&cn<C){const hn=y[Qe][Zt][cn][vt]+x[Ut][qt][vt];hn>Ct&&(Ct=hn,bt=Zt,Rt=cn)}}}Ve[Qe][bt][Rt][vt]+=ze[Qe][nt][yt][vt]}}}return{dataId:f.write(yn(Ve,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},tT=ws((r,e)=>r*e),cF=ZM((r,e,t,s)=>({real:r*t-e*s,imag:r*s+e*t})),Gw=Os(Vi,tT,cF),hF={kernelName:Vi,backendName:"cpu",kernelFunc:Gw};function qx(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s;let d;Vn(a,"sum"),d=a.dtype==="bool"?Op({inputs:{x:a},backend:t,attrs:{dtype:"int32"}}):Sc({inputs:{x:a},backend:t});const m=d.shape.length,f=ir(l,d.shape),y=Hi(f,m);let x=f,_=d;y!=null&&(_=ll({inputs:{x:d},backend:t,attrs:{perm:y}}),x=Ai(x.length,m)),Di("sum",x,_.shape.length);const[A,C]=ts(_.shape,x);let L=Ww(t,A,On(_.dtype,"int32"));const P=he(C),U=t.data.get(L.dataId).values,q=t.data.get(_.dataId).values;for(let X=0;X<U.length;++X){const re=X*P;let oe=0;for(let de=0;de<P;++de)oe+=q[re+de];U[X]=oe}if(c){const X=L;L=Ci({inputs:{x:L},backend:t,attrs:{shape:Gi(L.shape,f)}}),t.disposeIntermediateTensorInfo(X)}return t.disposeIntermediateTensorInfo(d),y!=null&&t.disposeIntermediateTensorInfo(_),L}const dF={kernelName:If,backendName:"cpu",kernelFunc:qx},pF={kernelName:md,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{equation:a}=s,l=e,{allDims:c,summedDims:d,idDims:m}=bx(a,l.length);_x(c.length,m,l);const{path:f,steps:y}=Sx(d,m),x=y.length;let _=null,A=c.length;const C=[];for(let L=0;L<x;++L){for(const P of y[L]){const{permutationIndices:U,expandDims:q}=wx(A,m[P]);let X;Mx(U)?X=l[P]:(X=ll({inputs:{x:l[P]},backend:t,attrs:{perm:U}}),C.push(X));const re=X.shape.slice();for(let oe=0;oe<q.length;++oe)re.splice(q[oe],0,1);Le(X.shape,re)||(X=Ci({inputs:{x:X},backend:t,attrs:{shape:re}}),C.push(X)),_===null?_=X:(_=Gw({inputs:{a:X,b:_},backend:t}),C.push(_))}L<x-1&&(f[L]>=0&&(_=qx({inputs:{x:_},backend:t,attrs:{axis:f[L]-(c.length-A),keepDims:!1}}),C.push(_)),A--)}for(const L of C)L!==_&&t.disposeIntermediateTensorInfo(L);return _}},fF={kernelName:jm,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{dy:s,y:a}=e;Vn([s,a],"eluGrad");const l=new Float32Array(he(a.shape)),c=t.data.get(a.dataId).values,d=t.data.get(s.dataId).values;for(let m=0;m<c.length;++m){const f=c[m];l[m]=f>=1?d[m]:d[m]*(f+1)}return t.makeTensorInfo(a.shape,"float32",l)}},rI=ws((r,e)=>r===e?1:0),iI=Os(ps,rI,null,"bool"),mF={kernelName:ps,backendName:"cpu",kernelFunc:iI},gF=ry,yF=Ep,xF=Sm,vF=xx,bF=iy,wF=sy,_F=si(gd,r=>{const e=Math.sign(r),t=Math.abs(r),s=1/(1+gF*t);return e*(1-((((wF*s+bF)*s+vF)*s+xF)*s+yF)*s*Math.exp(-t*t))}),SF={kernelName:gd,backendName:"cpu",kernelFunc:_F},sI=Fp(r=>Math.exp(r)),aI=xy(yl,sI),MF={kernelName:yl,backendName:"cpu",kernelFunc:aI};function Hw(r){const{inputs:e,backend:t,attrs:s}=r,{input:a}=e,{dim:l}=s,c=a.shape.length,d=a.shape.slice();let m=l;return l<0&&(Q(-(c+1)<=l,()=>`Axis must be in the interval [${-(c+1)}, ${c}]`),m=c+l+1),d.splice(m,0,1),Ci({inputs:{x:a},backend:t,attrs:{shape:d}})}const TF={kernelName:Ou,backendName:"cpu",kernelFunc:Hw},oI=Fp(r=>Math.expm1(r)),EF=xy(Vl,oI),AF={kernelName:Vl,backendName:"cpu",kernelFunc:EF},IF=ws((r,e)=>r/e),nT=Os(Ul,IF),rT={kernelName:Ul,backendName:"cpu",kernelFunc:nT},lI=ws((r,e)=>r-e),CF=ZM((r,e,t,s)=>({real:r-t,imag:e-s})),iT=Os(Gs,lI,CF),kF={kernelName:Gs,backendName:"cpu",kernelFunc:iT};function uI(r,e,t){const s=r.shape,a=s[0],l=s[1],c=t.data.get(r.dataId),d=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=[a,l],y=he(f),x=Ti("float32",y),_=Ti("float32",y);for(let P=0;P<a;P++){const U=Rm({inputs:{x:d},backend:t,attrs:{begin:[P,0],size:[1,l]}}),q=Rm({inputs:{x:m},backend:t,attrs:{begin:[P,0],size:[1,l]}}),X=Co({inputs:{real:U,imag:q},backend:t}),{real:re,imag:oe}=NF(X,e,t),de=mu(re,oe);for(let Ie=0;Ie<l;Ie++){const pe=vx(de,Ie);x[P*l+Ie]=pe.real,_[P*l+Ie]=pe.imag}t.disposeIntermediateTensorInfo(U),t.disposeIntermediateTensorInfo(q),t.disposeIntermediateTensorInfo(X)}const A=t.makeTensorInfo(f,"float32",x),C=t.makeTensorInfo(f,"float32",_),L=Co({inputs:{real:A,imag:C},backend:t});return t.disposeIntermediateTensorInfo(A),t.disposeIntermediateTensorInfo(C),L}function NF(r,e,t){const s=he(r.shape),a=t.data.get(r.dataId),l=t.data.get(a.complexTensorInfos.real.dataId).values,c=t.data.get(a.complexTensorInfos.imag.dataId).values;if(((d=s)&d-1)==0){const m=sT(l,c,s,e,t),f=[r.shape[0],r.shape[1]];if(e){const y=t.makeTensorInfo(f,"float32",m.real),x=t.makeTensorInfo(f,"float32",m.imag),_=t.makeTensorInfo([],"float32",qo(s,"float32")),A=Sc({inputs:{x:_},backend:t}),C=rT.kernelFunc({inputs:{a:y,b:_},backend:t}),L=rT.kernelFunc({inputs:{a:x,b:A},backend:t}),P=t.data.get(C.dataId).values,U=t.data.get(L.dataId).values;return t.disposeIntermediateTensorInfo(y),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(_),t.disposeIntermediateTensorInfo(A),t.disposeIntermediateTensorInfo(C),t.disposeIntermediateTensorInfo(L),{real:P,imag:U}}return m}return jb(function(m,f,y){const x=new Float32Array(2*f);for(let _=0;_<f;_++){let A=0,C=0;for(let L=0;L<f;L++){const P=Zb(_*L,f,y),U=vx(m,L);A+=U.real*P.real-U.imag*P.imag,C+=U.real*P.imag+U.imag*P.real}y&&(A/=f,C/=f),Yb(x,A,C,_)}return x}(mu(l,c),s,e));var d}function sT(r,e,t,s,a){if(t===1)return{real:r,imag:e};const l=mu(r,e),c=t/2,d=qb(l),m=d.real,f=d.imag,y=[m.length],x=a.makeTensorInfo(y,"float32",m),_=a.makeTensorInfo(y,"float32",f),A=Co({inputs:{real:x,imag:_},backend:a}),C=Xb(l),L=C.real,P=C.imag,U=[L.length],q=a.makeTensorInfo(U,"float32",L),X=a.makeTensorInfo(U,"float32",P),re=Co({inputs:{real:q,imag:X},backend:a}),oe=sT(m,f,c,s,a),de=oe.real,Ie=oe.imag,pe=[de.length],Be=a.makeTensorInfo(pe,"float32",de),ze=a.makeTensorInfo(pe,"float32",Ie),Ve=Co({inputs:{real:Be,imag:ze},backend:a}),Qe=sT(L,P,c,s,a),nt=Qe.real,ft=Qe.imag,yt=[nt.length],Mt=a.makeTensorInfo(yt,"float32",nt),vt=a.makeTensorInfo(yt,"float32",ft),Ct=Co({inputs:{real:Mt,imag:vt},backend:a}),bt=Kb(t,s),Rt=[bt.real.length],Ut=a.makeTensorInfo(Rt,"float32",bt.real),Zt=a.makeTensorInfo(Rt,"float32",bt.imag),qt=Co({inputs:{real:Ut,imag:Zt},backend:a}),cn=Gw({inputs:{a:qt,b:Ct},backend:a}),hn=jx({inputs:{a:Ve,b:cn},backend:a}),Sn=iT({inputs:{a:Ve,b:cn},backend:a}),Cn=Nm({inputs:{input:hn},backend:a}),jn=Nm({inputs:{input:Sn},backend:a}),ar=vy({inputs:{input:hn},backend:a}),lr=vy({inputs:{input:Sn},backend:a}),Qn=by({inputs:[Cn,jn],backend:a,attrs:{axis:0}}),vr=by({inputs:[ar,lr],backend:a,attrs:{axis:0}}),Ar=a.data.get(Qn.dataId).values,Dr=a.data.get(vr.dataId).values;return a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(A),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(X),a.disposeIntermediateTensorInfo(re),a.disposeIntermediateTensorInfo(Be),a.disposeIntermediateTensorInfo(ze),a.disposeIntermediateTensorInfo(Ve),a.disposeIntermediateTensorInfo(Mt),a.disposeIntermediateTensorInfo(vt),a.disposeIntermediateTensorInfo(Ct),a.disposeIntermediateTensorInfo(Ut),a.disposeIntermediateTensorInfo(Zt),a.disposeIntermediateTensorInfo(qt),a.disposeIntermediateTensorInfo(cn),a.disposeIntermediateTensorInfo(hn),a.disposeIntermediateTensorInfo(Sn),a.disposeIntermediateTensorInfo(Cn),a.disposeIntermediateTensorInfo(ar),a.disposeIntermediateTensorInfo(jn),a.disposeIntermediateTensorInfo(lr),a.disposeIntermediateTensorInfo(Qn),a.disposeIntermediateTensorInfo(vr),{real:Ar,imag:Dr}}const RF={kernelName:mf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{input:s}=e,a=he(s.shape),l=s.shape[s.shape.length-1],c=Ci({inputs:{x:s},backend:t,attrs:{shape:[a/l,l]}}),d=uI(c,!1,t),m=Ci({inputs:{x:d},backend:t,attrs:{shape:s.shape}});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(d),m}};function aT(r){const{backend:e,attrs:t}=r,{shape:s,value:a,dtype:l}=t,c=l||Ga(a),d=Or(c,he(s));return function(m,f,y){m.fill(f)}(d,a),e.makeTensorInfo(s,c,d)}const LF={kernelName:yd,backendName:"cpu",kernelFunc:aT},DF={kernelName:xd,backendName:"cpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{const{image:s}=r,a=t,l=Ti(s.dtype,he(s.shape)),[c,d,m,f]=s.shape,y=a.data.get(s.dataId).values;for(let x=0;x<c;x++){const _=x*m*d*f;for(let A=0;A<d;A++){const C=A*(m*f);for(let L=0;L<m;L++){const P=L*f;for(let U=0;U<f;U++){const q=Math.round(m-L-1),X=_+C+P+U;let re=y[X];q>=0&&q<m&&(re=y[_+C+q*f+U]),l[X]=re}}}}return{dataId:a.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},cI=Fp(r=>Math.floor(r)),PF=xy(zu,cI),FF={kernelName:zu,backendName:"cpu",kernelFunc:PF},OF=ws((r,e)=>Math.floor(r/e)),zF=Os(jc,OF,null,"int32"),BF={kernelName:jc,backendName:"cpu",kernelFunc:zF},$F={kernelName:Jl,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l,bias:c,preluActivationWeights:d}=e,{strides:m,pad:f,dataFormat:y,dilations:x,dimRoundingMode:_,activation:A,leakyreluAlpha:C}=s;let L=tI({inputs:{x:a,filter:l},backend:t,attrs:{strides:m,pad:f,dataFormat:y,dilations:x,dimRoundingMode:_}});if(c){const P=L;L=jx({inputs:{a:L,b:c},backend:t}),t.disposeIntermediateTensorInfo(P)}if(A){const P=L;L=KM(t,L,A,d,C),t.disposeIntermediateTensorInfo(P)}return L}},UF={kernelName:Nf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l,bias:c,preluActivationWeights:d}=e,{strides:m,pad:f,dataFormat:y,dilations:x,dimRoundingMode:_,activation:A,leakyreluAlpha:C}=s;let L=nI({inputs:{x:a,filter:l},backend:t,attrs:{strides:m,pad:f,dataFormat:y,dilations:x,dimRoundingMode:_}});if(c){const P=L;L=jx({inputs:{a:L,b:c},backend:t}),t.disposeIntermediateTensorInfo(P)}if(A){const P=L;L=KM(t,L,A,d,C),t.disposeIntermediateTensorInfo(P)}return L}};function hI(r,e,t,s,a,l,c,d,m){const f=Er([s,l],t);for(let y=0;y<s;y++){const x=[];let _=0;for(let A=0;A<a;A++){const C=r[y*a+A];_+=C*c[A],x.push(C)}if(_<0||_>=m/l)throw new Error(`Invalid indices: ${x} does not index into ${d}`);for(let A=0;A<l;A++)f.values[y*l+A]=e.get(...e.indexToLoc(_*l+A))}return f}const VF={kernelName:gf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{params:s,indices:a}=e,l=he(s.shape),c=a.shape,d=c[c.length-1],[m,f,y,x]=mg(s,a);if(f===0)return t.makeTensorInfo(m,s.dtype,[]);const _=hI(t.data.get(a.dataId).values,t.bufferSync(s),s.dtype,f,d,y,x,s.shape,l);return t.makeTensorInfo(m,s.dtype,_.values)}};function dI(r,e,t){const s=Er(t,r.dtype);for(let a=0;a<s.size;++a){const l=s.indexToLoc(a).slice(),c=l[0],d=l[2],m=e.locToIndex([c,d]);l[2]=e.values[m];const f=r.locToIndex(l);s.values[a]=r.values[f]}return s}const WF={kernelName:Oo,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,indices:l}=e,{axis:c,batchDims:d}=s;Vn([a,l],"gatherV2");let m=d;d==null&&(m=0);const f=he(l.shape),y=Ex(a,l,ir(c,a.shape)[0],m),x=Ci({inputs:{x:a},backend:t,attrs:{shape:[y.batchSize,y.outerSize,y.dimSize,y.sliceSize]}}),_=Ci({inputs:{x:l},backend:t,attrs:{shape:[y.batchSize,f/y.batchSize]}}),A=[y.batchSize,y.outerSize,f/y.batchSize,y.sliceSize],C=t.bufferSync(_),L=dI(t.bufferSync(x),C,A);return t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(_),t.makeTensorInfo(y.outputShape,L.dtype,L.values)}},pI=ws((r,e)=>r>e?1:0),GF=Os(yf,pI,null,"bool"),HF={kernelName:yf,backendName:"cpu",kernelFunc:GF},fI=ws((r,e)=>r>=e?1:0),jF=Os(Wl,fI,null,"bool"),qF={kernelName:Wl,backendName:"cpu",kernelFunc:jF},XF={kernelName:qm,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{input:s}=e,a=he(s.shape),l=s.shape[s.shape.length-1],c=Ci({inputs:{x:s},backend:t,attrs:{shape:[a/l,l]}}),d=uI(c,!0,t),m=Ci({inputs:{x:d},backend:t,attrs:{shape:s.shape}});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(d),m}},YF=si(wd,r=>Number.isFinite(r)?1:0,"bool"),KF={kernelName:wd,backendName:"cpu",kernelFunc:YF},ZF=si(_d,r=>Math.abs(r)===1/0?1:0,"bool"),JF={kernelName:_d,backendName:"cpu",kernelFunc:ZF},QF=si(Sd,r=>Number.isNaN(r)?1:0,"bool"),eO={kernelName:Sd,backendName:"cpu",kernelFunc:QF},mI=ws((r,e)=>r<e?1:0),tO=Os(vf,mI,null,"bool"),nO={kernelName:vf,backendName:"cpu",kernelFunc:tO},gI=ws((r,e)=>r<=e?1:0),rO=Os(bf,gI,null,"bool"),iO={kernelName:bf,backendName:"cpu",kernelFunc:rO};function yI(r,e,t){const s=(e-r)/(t-1),a=xt(t,"float32");a[0]=r;for(let l=1;l<a.length;l++)a[l]=a[l-1]+s;return a}const sO={kernelName:Ym,backendName:"cpu",kernelFunc:function(r){const{backend:e,attrs:t}=r,{start:s,stop:a,num:l}=t,c=yI(s,a,l);return e.makeTensorInfo([c.length],"float32",c)}},xI=Fp(r=>Math.log(r)),aO=xy(Md,xI),oO={kernelName:Md,backendName:"cpu",kernelFunc:aO},lO=si(Td,r=>Math.log1p(r)),uO={kernelName:Td,backendName:"cpu",kernelFunc:lO},cO=ws((r,e)=>r&&e),hO=Os(wf,cO,null,"bool"),dO={kernelName:wf,backendName:"cpu",kernelFunc:hO},pO=si(Ed,r=>r?0:1,"bool"),fO={kernelName:Ed,backendName:"cpu",kernelFunc:pO},mO=ws((r,e)=>r||e),gO=Os(xl,mO,null,"bool"),yO={kernelName:xl,backendName:"cpu",kernelFunc:gO},xO={kernelName:_f,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{depthRadius:l,bias:c,alpha:d,beta:m}=s;Vn(a,"LRN");const f=a.shape[3],y=f-1,x=t.data.get(a.dataId).values,_=he(a.shape),A=new Float32Array(_);function C(L){const P=L%f;let U=L-P+Math.max(0,P-l);const q=L-P+Math.min(P+l,y);let X=0;for(;U<=q;U++){const re=x[U];X+=re*re}return X}for(let L=0;L<_;L++){const P=C(L),U=x[L]*Math.pow(c+d*P,-m);A[L]=U}return t.makeTensorInfo(a.shape,a.dtype,A)}},vO={kernelName:Km,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,y:l,dy:c}=e,{depthRadius:d,bias:m,alpha:f,beta:y}=s;Vn(c,"LRNGrad");const x=he(c.shape),_=c.shape[3],A=t.data.get(c.dataId).values,C=t.data.get(a.dataId).values,L=t.data.get(l.dataId).values,P=new Float32Array(x),U=x;for(let q=0;q<U;q++){const X=q%_,re=q-X+Math.max(0,X-d),oe=q-X+Math.min(_,X+d+1);let de=0;for(let Ie=re;Ie<oe;Ie++)de+=Math.pow(C[Ie],2);de=f*de+m;for(let Ie=re;Ie<oe;Ie++){let pe=-2*f*y*C[Ie]*L[q]/de;q===Ie&&(pe+=Math.pow(de,-y)),pe*=A[q],P[Ie]+=pe}}return t.makeTensorInfo(c.shape,a.dtype,P)}};function vI(r,e,t,s){const a=Ti(s,he(t));for(let l=0;l<a.length;++l){const c=l*e;let d=r[c];for(let m=0;m<e;++m){const f=r[c+m];(Number.isNaN(f)||f>d)&&(d=f)}a[l]=d}return a}function bI(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{reductionIndices:l,keepDims:c}=s,d=t;let m=a.shape;const f=m.length,y=ir(l,m);let x=y;const _=Hi(x,f);let A=d.data.get(a.dataId).values;if(_!=null){const X=new Array(f);for(let re=0;re<X.length;re++)X[re]=m[_[re]];A=JM(A,m,a.dtype,_,X),x=Ai(x.length,f),m=X}Vn(a,"max"),Di("max",x,f);const[C,L]=ts(m,x),P=vI(A,he(L),C,a.dtype),U=d.write(P,C,a.dtype);let q=C;return c&&(q=Gi(C,y)),{dataId:U,shape:q,dtype:a.dtype}}const bO={kernelName:Sf,backendName:"cpu",kernelFunc:bI},wI=ws((r,e)=>Math.max(r,e)),wO=Os(Ad,wI),_O={kernelName:Ad,backendName:"cpu",kernelFunc:wO},SO={kernelName:Mf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e;Vn(a,"maxPool");const{filterSize:l,strides:c,pad:d,dimRoundingMode:m}=s;Q(es(c,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${c} and dilations '1'`);const f=ma(a.shape,l,c,1,d,m);let y;if(f.filterWidth===1&&f.filterHeight===1&&Le(f.inShape,f.outShape))y=Sc({inputs:{x:a},backend:t});else{const x=t.data.get(a.dataId).values,_=Hn(a.shape),A=QM(x,a.shape,a.dtype,_,f,"max");y=t.makeTensorInfo(f.outShape,a.dtype,A.values)}return y}},MO={kernelName:Tf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{filterSize:l,strides:c,pad:d,dimRoundingMode:m,dataFormat:f}=s;Vn(a,"maxPool3d");const y=bo(a.shape,l,c,1,d,m,f),x=KA(t.data.get(a.dataId).values,a.shape,a.dtype,Hn(a.shape),y,"max");return t.makeTensorInfo(x.shape,"float32",x.values)}},TO={kernelName:Jm,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,input:l}=e,{filterSize:c,strides:d,pad:m,dimRoundingMode:f}=s;Vn([a,l],"maxPool3DGrad");const y=bo(l.shape,c,d,1,m,f),x=function(ze,Ve){const Qe=Er(Ve.outShape,"int32"),nt=Ve.strideDepth,ft=Ve.strideHeight,yt=Ve.strideWidth,Mt=Ve.dilationDepth,vt=Ve.dilationHeight,Ct=Ve.dilationWidth,bt=Ve.effectiveFilterDepth,Rt=Ve.effectiveFilterHeight,Ut=Ve.effectiveFilterWidth,Zt=Ve.padInfo.front,qt=Ve.padInfo.top,cn=Ve.padInfo.left;for(let hn=0;hn<Ve.batchSize;++hn)for(let Sn=0;Sn<Ve.inChannels;++Sn)for(let Cn=0;Cn<Ve.outDepth;++Cn){const jn=Cn*nt-Zt;let ar=jn;for(;ar<0;)ar+=Mt;const lr=Math.min(Ve.inDepth,bt+jn);for(let Qn=0;Qn<Ve.outHeight;++Qn){const vr=Qn*ft-qt;let Ar=vr;for(;Ar<0;)Ar+=vt;const Dr=Math.min(Ve.inHeight,Rt+vr);for(let yr=0;yr<Ve.outWidth;++yr){const kr=yr*yt-cn;let qr=kr;for(;qr<0;)qr+=Ct;const Cs=Math.min(Ve.inWidth,Ut+kr);let _a=Number.NEGATIVE_INFINITY,sa=-1;for(let _i=ar;_i<lr;_i+=Mt){const No=_i-jn;for(let aa=Ar;aa<Dr;aa+=vt){const Ro=aa-vr;for(let Eu=qr;Eu<Cs;Eu+=Ct){const $p=Eu-kr,qh=ze.get(hn,_i,aa,Eu,Sn);qh>=_a&&(_a=qh,sa=No*Rt*Ut+Ro*Rt+$p)}}}Qe.set(sa,hn,Cn,Qn,yr,Sn)}}}return Qe}(t.bufferSync(l),y),_=y.strideDepth,A=y.strideHeight,C=y.strideWidth,L=y.dilationDepth,P=y.dilationHeight,U=y.dilationWidth,q=y.effectiveFilterDepth,X=y.effectiveFilterHeight,re=y.effectiveFilterWidth,oe=q-1-y.padInfo.front,de=re-1-y.padInfo.left,Ie=X-1-y.padInfo.top,pe=Er(l.shape,"float32"),Be=t.bufferSync(a);for(let ze=0;ze<y.batchSize;++ze)for(let Ve=0;Ve<y.inChannels;++Ve)for(let Qe=0;Qe<y.inDepth;++Qe)for(let nt=0;nt<y.inHeight;++nt)for(let ft=0;ft<y.inWidth;++ft){const yt=Qe-oe,Mt=nt-Ie,vt=ft-de;let Ct=0;for(let bt=0;bt<q;bt+=L){const Rt=(yt+bt)/_;if(!(Rt<0||Rt>=y.outDepth||Math.floor(Rt)!==Rt))for(let Ut=0;Ut<X;Ut+=P){const Zt=(Mt+Ut)/A;if(!(Zt<0||Zt>=y.outHeight||Math.floor(Zt)!==Zt))for(let qt=0;qt<re;qt+=U){const cn=(vt+qt)/C;if(cn<0||cn>=y.outWidth||Math.floor(cn)!==cn)continue;const hn=q*X*re-1-x.get(ze,Rt,Zt,cn,Ve)===bt*X*re+Ut*re+qt?1:0;hn!==0&&(Ct+=Be.get(ze,Rt,Zt,cn,Ve)*hn)}}}pe.set(Ct,ze,Qe,nt,ft,Ve)}return t.makeTensorInfo(pe.shape,pe.dtype,pe.values)}},EO={kernelName:Zm,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,input:l,output:c}=e,d=l;Vn([l,c],"maxPoolGrad");const{filterSize:m,strides:f,pad:y,dimRoundingMode:x}=s,_=ma(d.shape,m,f,1,y,x),A=t.data.get(d.dataId).values,C=Er(_.outShape,d.dtype,YA(A,d.shape,d.dtype,_).values),L=_.strideHeight,P=_.strideWidth,U=_.dilationHeight,q=_.dilationWidth,X=_.effectiveFilterHeight,re=_.effectiveFilterWidth,oe=re-1-_.padInfo.left,de=X-1-_.padInfo.top,Ie=Er(d.shape,"float32"),pe=t.data.get(a.dataId).values,Be=Er(a.shape,"float32",pe);for(let ze=0;ze<_.batchSize;++ze)for(let Ve=0;Ve<_.inChannels;++Ve)for(let Qe=0;Qe<_.inHeight;++Qe)for(let nt=0;nt<_.inWidth;++nt){const ft=Qe-de,yt=nt-oe;let Mt=0;for(let vt=0;vt<X;vt+=U){const Ct=(ft+vt)/L;if(!(Ct<0||Ct>=_.outHeight||Math.floor(Ct)!==Ct))for(let bt=0;bt<re;bt+=q){const Rt=(yt+bt)/P;if(Rt<0||Rt>=_.outWidth||Math.floor(Rt)!==Rt)continue;const Ut=X*re-1-C.get(ze,Ct,Rt,Ve)===vt*re+bt?1:0;Ut!==0&&(Mt+=Be.get(ze,Ct,Rt,Ve)*Ut)}}Ie.set(Mt,ze,Qe,nt,Ve)}return t.makeTensorInfo(Ie.shape,Ie.dtype,Ie.values)}},AO={kernelName:Id,backendName:"cpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{const{x:s}=r,{filterSize:a,strides:l,pad:c,includeBatchInIndex:d}=e,m=t;Vn(s,"MaxPoolWithArgmax");const f=m.data.get(s.dataId).values,y=ma(s.shape,a,l,[1,1],c),[x,_]=function(L,P,U,q,X){const re=QM(L,0,U,Hn(P),X,"max"),oe=YA(L,P,U,X,!0,q);return[re.values,oe.values]}(f,s.shape,s.dtype,d,y),A=m.write(x,y.outShape,s.dtype),C=m.write(_,y.outShape,s.dtype);return[{dataId:A,shape:y.outShape,dtype:s.dtype},{dataId:C,shape:y.outShape,dtype:"int32"}]}},IO={kernelName:co,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s,d=ir(l,a.shape),m=he(ts(a.shape,d)[1]),f=[],y=t.makeTensorInfo([],"float32",new Float32Array([m]));f.push(y);const x=Op({inputs:{x:a},backend:t,attrs:{dtype:"float32"}});f.push(x);const _=nT({inputs:{a:x,b:y},backend:t});f.push(_);const A=qx({inputs:{x:_},backend:t,attrs:{axis:l,keepDims:c}});return f.forEach(C=>t.disposeIntermediateTensorInfo(C)),A}},CO={kernelName:Ki,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s;Vn(a,"min");const d=ir(l,a.shape);let m=d;const f=Hi(m,a.shape.length);let y=a;f!=null&&(y=ll({inputs:{x:a},backend:t,attrs:{perm:f}}),m=Ai(m.length,a.shape.length)),Di("min",m,y.shape.length);const[x,_]=ts(y.shape,m),A=he(_),C=xt(he(x),y.dtype),L=t.data.get(y.dataId).values;for(let U=0;U<C.length;++U){const q=U*A;let X=L[q];for(let re=0;re<A;++re){const oe=L[q+re];(Number.isNaN(oe)||oe<X)&&(X=oe)}C[U]=X}f!=null&&t.disposeIntermediateTensorInfo(y);const P=t.makeTensorInfo(x,y.dtype,C);if(c){const U=Ci({inputs:{x:P},backend:t,attrs:{shape:Gi(x,d)}});return t.disposeIntermediateTensorInfo(P),U}return P}},_I=ws((r,e)=>Math.min(r,e)),kO=Os(Gl,_I),NO={kernelName:Gl,backendName:"cpu",kernelFunc:kO},RO={kernelName:zo,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{paddings:l,mode:c}=s;Vn(a,"mirrorPad");const d=l.map((q,X)=>q[0]+a.shape[X]+q[1]),m=l.map(q=>q[0]),f=l.map((q,X)=>q[0]+a.shape[X]),y=c==="reflect"?0:1,x=t.data.get(a.dataId).values,_=a.shape.length,A=Hn(a.shape),C=he(d),L=d.length,P=Hn(d),U=Ti(a.dtype,C);for(let q=0;q<C;q++){let X=Zn(q,L,P);for(let oe=0;oe<L;oe++)X[oe]<m[oe]?X[oe]=2*m[oe]-X[oe]-y:X[oe]>=f[oe]&&(X[oe]=2*(f[oe]-1)-X[oe]+y);X=X.map((oe,de)=>oe-m[de]);const re=Wn(X,_,A);U[q]=x[re]}return{dataId:t.write(U,d,a.dtype),shape:d,dtype:a.dtype}}},LO=ws((r,e)=>{const t=r%e;return r<0&&e<0||r>=0&&e>=0?t:(t+e)%e}),DO=Os(vl,LO),PO={kernelName:vl,backendName:"cpu",kernelFunc:DO};function SI(r){const{inputs:e,backend:t,attrs:s}=r,{logits:a}=e,{dim:l}=s,c=a.shape.length;let d=l;if(d===-1&&(d=c-1),d!==c-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${c} and dim was ${d}`);const m=ir([d],a.shape),f=bI({inputs:{x:a},backend:t,attrs:{reductionIndices:m,keepDims:!1}}),y=Gi(f.shape,m),x=Ci({inputs:{x:f},backend:t,attrs:{shape:y}}),_=iT({inputs:{a,b:x},backend:t}),A=aI({inputs:{x:_},backend:t}),C=qx({inputs:{x:A},backend:t,attrs:{axis:m,keepDims:!1}}),L=Ci({inputs:{x:C},backend:t,attrs:{shape:y}}),P=nT({inputs:{a:A,b:L},backend:t});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(_),t.disposeIntermediateTensorInfo(A),t.disposeIntermediateTensorInfo(C),t.disposeIntermediateTensorInfo(L),P}const FO={kernelName:Jc,backendName:"cpu",kernelFunc:SI},OO={kernelName:Vs,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{logits:a}=e,{numSamples:l,seed:c,normalized:d}=s;Vn(a,"multinomial");const m=d?a:SI({inputs:{logits:a},backend:t,attrs:{dim:-1}}),f=m.shape[0],y=m.shape[1],x=t.data.get(m.dataId).values,_=[f,l],A=xt(he(_),"int32");for(let C=0;C<f;++C){const L=C*y,P=new Float32Array(y-1);P[0]=x[L];for(let X=1;X<P.length;++X)P[X]=P[X-1]+x[L+X];const U=dc.alea(c.toString()),q=C*l;for(let X=0;X<l;++X){const re=U();A[q+X]=P.length;for(let oe=0;oe<P.length;oe++)if(re<P[oe]){A[q+X]=oe;break}}}return d||t.disposeIntermediateTensorInfo(m),t.makeTensorInfo(_,"int32",A)}};function MI(r,e,t){const s=qo(-1,t);return tT([],e,s,r,t)}const zO={kernelName:Xc,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{x:s}=e;Vn(s,"neg");const a=t.data.get(s.dataId).values,[l,c]=MI(a,s.shape,s.dtype);return t.makeTensorInfo(c,s.dtype,l)}},BO=Rl,$O={kernelName:Cd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{boxes:a,scores:l}=e,{maxOutputSize:c,iouThreshold:d,scoreThreshold:m}=s;Vn(a,"NonMaxSuppression");const f=t.data.get(a.dataId).values,y=t.data.get(l.dataId).values,{selectedIndices:x}=BO(f,y,c,d,m);return t.makeTensorInfo([x.length],"int32",new Int32Array(x))}},UO=jg,VO={kernelName:Ef,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{boxes:a,scores:l}=e,{maxOutputSize:c,iouThreshold:d,scoreThreshold:m,padToMaxOutputSize:f}=s;Vn(a,"NonMaxSuppressionPadded");const y=t.data.get(a.dataId).values,x=t.data.get(l.dataId).values,{selectedIndices:_,validOutputs:A}=UO(y,x,c,d,m,f);return[t.makeTensorInfo([_.length],"int32",new Int32Array(_)),t.makeTensorInfo([],"int32",new Int32Array([A]))]}},WO=vm,GO={kernelName:Af,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{boxes:a,scores:l}=e,{maxOutputSize:c,iouThreshold:d,scoreThreshold:m,softNmsSigma:f}=s;Vn(a,"NonMaxSuppressionWithScore");const y=t.data.get(a.dataId).values,x=t.data.get(l.dataId).values,_=c,A=d,C=m,L=f,{selectedIndices:P,selectedScores:U}=WO(y,x,_,A,C,L);return[t.makeTensorInfo([P.length],"int32",new Int32Array(P)),t.makeTensorInfo([U.length],"float32",new Float32Array(U))]}},TI=ws((r,e)=>r!==e?1:0),HO=Os(Hl,TI,null,"bool"),jO={kernelName:Hl,backendName:"cpu",kernelFunc:HO},qO={kernelName:Qt,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{indices:a}=e,{depth:l,onValue:c,offValue:d}=s;Vn(a,"oneHot");const m=he(a.shape),f=new Float32Array(m*l);f.fill(d);const y=t.data.get(a.dataId).values;for(let x=0;x<m;++x)y[x]>=0&&y[x]<l&&(f[x*l+y[x]]=c);return t.makeTensorInfo([...a.shape,l],"int32",f)}};function jw(r){const{inputs:e,backend:t}=r,{x:s}=e;if(s.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(s.dtype==="complex64"){const a=Nm({inputs:{input:s},backend:t}),l=jw({inputs:{x:a},backend:t}),c=vy({inputs:{input:s},backend:t}),d=jw({inputs:{x:c},backend:t}),m=Co({inputs:{real:l,imag:d},backend:t});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(d),m}return aT({backend:t,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const XO={kernelName:kf,backendName:"cpu",kernelFunc:jw},YO={kernelName:kd,backendName:"cpu",kernelFunc:function r(e){const{inputs:t,backend:s}=e,{x:a}=t;if(a.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(a.dtype==="complex64"){const l=Nm({inputs:{input:a},backend:s}),c=r({inputs:{x:l},backend:s}),d=vy({inputs:{input:a},backend:s}),m=jw({inputs:{x:d},backend:s}),f=Co({inputs:{real:c,imag:m},backend:s});return s.disposeIntermediateTensorInfo(l),s.disposeIntermediateTensorInfo(c),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(m),f}return aT({backend:s,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function EI(r){const{inputs:e,backend:t,attrs:s}=r,{axis:a}=s;if(e.length===1)return Hw({inputs:{input:e[0]},backend:t,attrs:{dim:a}});const l=e[0].shape,c=e[0].dtype;e.forEach(f=>{Ze(l,f.shape,"All tensors passed to stack must have matching shapes"),Q(c===f.dtype,()=>"All tensors passed to stack must have matching dtypes")});const d=[],m=by({inputs:e.map(f=>{const y=Hw({inputs:{input:f},backend:t,attrs:{dim:a}});return d.push(y),y}),backend:t,attrs:{axis:a}});return d.forEach(f=>t.disposeIntermediateTensorInfo(f)),m}const KO={kernelName:Ni,backendName:"cpu",kernelFunc:EI},AI={kernelName:bl,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{paddings:l,constantValue:c}=s;Vn(a,"pad");const d=l.map((U,q)=>U[0]+a.shape[q]+U[1]),m=l.map(U=>U[0]),f=t.data.get(a.dataId).values,y=he(a.shape),x=a.shape.length,_=Hn(a.shape),A=he(d),C=d.length,L=Hn(d),P=Ti(a.dtype,A);c!==0&&P.fill(c);for(let U=0;U<y;U++)P[Wn(Zn(U,x,_).map((q,X)=>q+m[X]),C,L)]=f[U];return{dataId:t.write(P,d,a.dtype),shape:d,dtype:a.dtype}}},ZO=ws((r,e)=>Math.pow(r,e)),JO=Os(Nd,ZO),QO={kernelName:Nd,backendName:"cpu",kernelFunc:JO};function II(r,e,t,s){const[a,l]=ts(r,s),c=On(e,"int32"),d=xt(he(a),c),m=he(l);for(let f=0;f<d.length;++f){const y=f*m;let x=1;for(let _=0;_<m;++_)x*=t[y+_];d[f]=x}return{outVals:d,outShape:a,outDtype:c}}const ez={kernelName:Rd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s;Vn(a,"prod");const d=a.shape.length,m=ir(l,a.shape),f=Hi(m,d);let y=m,x=a;const _=[];f!=null&&(x=ll({inputs:{x:a},backend:t,attrs:{perm:f}}),_.push(x),y=Ai(y.length,d));const A=t.data.get(x.dataId).values,{outVals:C,outShape:L,outDtype:P}=II(x.shape,x.dtype,A,y);let U=L;return c&&(U=Gi(L,m)),_.forEach(q=>t.disposeIntermediateTensorInfo(q)),t.makeTensorInfo(U,P,C)}};function CI(r,e,t,s){if(r===e||r<e&&t<0||e<r&&t>1)return xt(0,s);const a=xt(Math.abs(Math.ceil((e-r)/t)),s);e<r&&t===1&&(t=-1),a[0]=r;for(let l=1;l<a.length;l++)a[l]=a[l-1]+t;return a}const tz={kernelName:Xr,backendName:"cpu",kernelFunc:function(r){const{backend:e,attrs:t}=r,{start:s,stop:a,dtype:l,step:c}=t,d=CI(s,a,c,l);return e.makeTensorInfo([d.length],l,d)}},nz=si(Kc,r=>1/r),rz={kernelName:Kc,backendName:"cpu",kernelFunc:nz},iz={kernelName:Dd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{images:a}=e,{alignCorners:l,halfPixelCenters:c,size:d}=s;Vn(a,"resizeBilinear");const m=Hn(a.shape),[f,y]=d,[x,_,A,C]=a.shape,L=t.data.get(a.dataId).values,P=new Float32Array(he([x,f,y,C])),U=[l&&f>1?_-1:_,l&&y>1?A-1:A],q=[l&&f>1?f-1:f,l&&y>1?y-1:y];let X=0;const re=U[0]/q[0],oe=U[1]/q[1];for(let de=0;de<x;de++)for(let Ie=0;Ie<f;Ie++){let pe;pe=c?re*(Ie+.5)-.5:re*Ie;const Be=Math.max(0,Math.floor(pe)),ze=pe-Be,Ve=Math.min(_-1,Math.ceil(pe)),Qe=de*m[0]+Be*m[1],nt=de*m[0]+Ve*m[1];for(let ft=0;ft<y;ft++){let yt;yt=c?oe*(ft+.5)-.5:oe*ft;const Mt=Math.max(0,Math.floor(yt)),vt=yt-Mt,Ct=Math.min(A-1,Math.ceil(yt)),bt=Qe+Mt*m[2],Rt=nt+Mt*m[2],Ut=Qe+Ct*m[2],Zt=nt+Ct*m[2];for(let qt=0;qt<C;qt++){const cn=L[bt+qt],hn=L[Rt+qt],Sn=cn+(L[Ut+qt]-cn)*vt,Cn=Sn+(hn+(L[Zt+qt]-hn)*vt-Sn)*ze;P[X++]=Cn}}}return t.makeTensorInfo([x,f,y,C],"float32",P)}},sz={kernelName:Ws,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{images:a,dy:l}=e,{alignCorners:c}=s;Vn([l,a],"resizeBilinearGrad");const d=Hn(a.shape),[m,f,y,x]=a.shape,[,_,A]=l.shape,C=new Float32Array(m*f*y*x),L=[c&&_>1?f-1:f,c&&A>1?y-1:y],P=[c&&_>1?_-1:_,c&&A>1?A-1:A],U=L[0]/P[0],q=L[1]/P[1],X=t.data.get(l.dataId).values;let re=0;for(let oe=0;oe<m;oe++){const de=oe*d[0];for(let Ie=0;Ie<_;Ie++){const pe=Ie*U,Be=Math.floor(pe),ze=Math.min(Math.ceil(pe),f-1),Ve=de+Be*d[1],Qe=de+ze*d[1],nt=pe-Be,ft=1-nt;for(let yt=0;yt<A;yt++){const Mt=yt*q,vt=Math.floor(Mt),Ct=Math.min(Math.ceil(Mt),y-1),bt=Mt-vt,Rt=1-bt,Ut=Ve+vt*d[2],Zt=Ve+Ct*d[2],qt=Qe+vt*d[2],cn=Qe+Ct*d[2],hn=ft*Rt,Sn=ft*bt,Cn=nt*Rt,jn=nt*bt;for(let ar=0;ar<x;ar++){const lr=X[re++];C[Ut+ar]+=lr*hn,C[Zt+ar]+=lr*Sn,C[qt+ar]+=lr*Cn,C[cn+ar]+=lr*jn}}}}return t.makeTensorInfo([m,y,f,x],"float32",C)}},az={kernelName:Te,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{images:a}=e,{alignCorners:l,halfPixelCenters:c,size:d}=s;Vn(a,"resizeNearestNeighbor");const m=Hn(a.shape),[f,y]=d,[x,_,A,C]=a.shape,L=t.data.get(a.dataId).values,P=new Float32Array(x*f*y*C),U=[l&&f>1?_-1:_,l&&y>1?A-1:A],q=[l&&f>1?f-1:f,l&&y>1?y-1:y],X=U[0]/q[0],re=U[1]/q[1];let oe=0;for(let de=0;de<x;de++){const Ie=de*m[0];for(let pe=0;pe<f;pe++){const Be=c?X*(pe+.5):X*pe;let ze=Math.min(_-1,l?Math.round(Be):Math.floor(Be));c&&(ze=Math.max(0,ze));const Ve=Ie+ze*m[1];for(let Qe=0;Qe<y;Qe++){const nt=c?re*(Qe+.5):re*Qe;let ft=Math.min(A-1,l?Math.round(nt):Math.floor(nt));c&&(ft=Math.max(0,ft));const yt=Ve+ft*m[2];for(let Mt=0;Mt<C;Mt++){const vt=L[yt+Mt];P[oe++]=vt}}}}return t.makeTensorInfo([x,f,y,C],a.dtype,P)}},oz={kernelName:Ld,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{images:a,dy:l}=e,{alignCorners:c}=s;Vn([l,a],"resizeNearestNeighborGrad");const d=Hn(a.shape),m=Hn(l.shape),[f,y,x,_]=a.shape,[,A,C]=l.shape,L=new Float32Array(f*y*x*_),P=t.data.get(l.dataId).values,U=[c&&A>1?y-1:y,c&&C>1?x-1:x],q=[c&&A>1?A-1:A,c&&C>1?C-1:C],X=U[0]/q[0],re=U[1]/q[1],oe=1/X,de=1/re,Ie=2*Math.ceil(oe)+2,pe=2*Math.ceil(de)+2;for(let Be=0;Be<f;Be++){const ze=Be*d[0];for(let Ve=0;Ve<y;Ve++){const Qe=ze+Ve*d[1],nt=Math.floor(Ve*oe),ft=Math.floor(nt-Ie/2);for(let yt=0;yt<x;yt++){const Mt=Qe+yt*d[2],vt=Math.floor(yt*de),Ct=Math.floor(vt-pe/2);for(let bt=0;bt<_;bt++){let Rt=0;for(let Ut=0;Ut<Ie;Ut++){const Zt=Ut+ft;if(Zt<0||Zt>=A)continue;const qt=ze+Zt*m[1],cn=Zt*X;if(Ve===Math.min(y-1,c?Math.round(cn):Math.floor(cn)))for(let hn=0;hn<pe;hn++){const Sn=hn+Ct;if(Sn<0||Sn>=C)continue;const Cn=qt+Sn*m[2],jn=Sn*re;yt===Math.min(x-1,c?Math.round(jn):Math.floor(jn))&&(Rt+=P[Cn+bt])}}L[Mt+bt]=Rt}}}}return t.makeTensorInfo(a.shape,a.dtype,L)}},lz={kernelName:jl,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{dims:l}=s;Vn(a,"reverse");const c=a.shape.length,d=ir(l,a.shape);if(c===0)return Sc({inputs:{x:a},backend:t});const m=new pn(a.shape,a.dtype),f=t.bufferSync(a);for(let y=0;y<m.size;y++){const x=m.indexToLoc(y),_=x.slice();d.forEach(A=>_[A]=a.shape[A]-1-_[A]),m.set(f.get(..._),...x)}return t.makeTensorInfo(m.shape,m.dtype,m.values)}},uz={kernelName:go,backendName:"cpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{const{image:s}=r,{radians:a,fillValue:l,center:c}=e,d=t,m=Ti(s.dtype,he(s.shape)),[f,y,x,_]=s.shape,[A,C]=Mp(c,y,x),L=Math.sin(a),P=Math.cos(a),U=d.data.get(s.dataId).values;for(let q=0;q<f;q++){const X=q*x*y*_;for(let re=0;re<y;re++){const oe=re*(x*_);for(let de=0;de<x;de++){const Ie=de*_;for(let pe=0;pe<_;pe++){const Be=[f,re,de,pe],ze=Be[2],Ve=Be[1];let Qe=(ze-A)*P-(Ve-C)*L,nt=(ze-A)*L+(Ve-C)*P;Qe=Math.round(Qe+A),nt=Math.round(nt+C);let ft=l;typeof l!="number"&&(ft=pe===3?255:l[pe]),Qe>=0&&Qe<x&&nt>=0&&nt<y&&(ft=U[X+nt*(x*_)+Qe*_+pe]),m[X+oe+Ie+pe]=ft}}}}return{dataId:d.write(m,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},cz=si($u,r=>{const e=Math.floor(r);return r-e<.5?Math.floor(r):r-e>.5?Math.ceil(r):e%2==0?e:e+1}),hz={kernelName:$u,backendName:"cpu",kernelFunc:cz},kI=Fp(r=>1/Math.sqrt(r)),dz=xy(Bo,kI),pz={kernelName:Bo,backendName:"cpu",kernelFunc:dz};function NI(r,e,t,s,a,l,c,d,m,f){const y=[s/a,a],x=r.values,_=e.values;if(s===0)return Er(t,e.dtype);const A=Er(y,e.dtype);A.values.fill(m);for(let C=0;C<l;C++){const L=[];let P=0;for(let U=0;U<c;U++){const q=x[C*c+U];L.push(q),P+=q*d[U]}if(P<0||P>=s/a)throw new Error(`Invalid indices: ${L} does not index into ${t}`);for(let U=0;U<a;U++)f?A.values[P*a+U]+=_[C*a+U]:A.values[P*a+U]=e.rank===0?_[0]:_[C*a+U]}return A}const fz={kernelName:ql,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{indices:a,updates:l}=e,{shape:c}=s,{sliceRank:d,numUpdates:m,sliceSize:f,strides:y,outputSize:x}=ep(0,a,c),_=NI(t.bufferSync(a),t.bufferSync(l),c,x,f,m,d,y,0,!0);return t.makeTensorInfo(c,_.dtype,_.values)}},mz={kernelName:wl,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{condition:s,t:a,e:l}=e;Vn([s,a,l],"select");const c=s.shape.length,d=t.data.get(s.dataId).values,m=t.data.get(a.dataId).values,f=t.data.get(l.dataId).values,y=On(a.dtype,l.dtype),x=xt(he(a.shape),y);let _=0;const A=c===0||c>1||a.shape.length===1?1:he(a.shape.slice(1));for(let C=0;C<d.length;C++)for(let L=0;L<A;L++)d[C]===1?x[_++]=m[C]:x[_++]=f[C];return t.makeTensorInfo(a.shape,y,x)}},gz=ty,yz=ny,xz=si(qa,r=>r>=0?yz*r:gz*(Math.exp(r)-1)),vz={kernelName:qa,backendName:"cpu",kernelFunc:xz},bz=si(Xl,r=>r<0?-1:r>0?1:0),wz={kernelName:Xl,backendName:"cpu",kernelFunc:bz},_z=si(po,r=>Math.sin(r)),Sz={kernelName:po,backendName:"cpu",kernelFunc:_z},Mz=si(_l,r=>Math.sinh(r)),Tz={kernelName:_l,backendName:"cpu",kernelFunc:Mz},RI=Math.log(11920928955078125e-23)+2,Ez=si(fo,r=>{const e=r>-RI,t=r<RI,s=Math.exp(r);let a;return a=t?s:e?r:Math.log(1+s),a}),Az={kernelName:fo,backendName:"cpu",kernelFunc:Ez},Iz={kernelName:Pd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{blockShape:l,paddings:c}=s;Vn([a],"spaceToBatchND");const d=he(l),m=[[0,0]];m.push(...c);for(let P=1+l.length;P<a.shape.length;++P)m.push([0,0]);const f=AI.kernelFunc({inputs:{x:a},backend:t,attrs:{paddings:m,constantValue:0}}),y=pi(f.shape,l,d,!1),x=_m(y.length,l.length,!1),_=wi(f.shape,l,d,!1),A=Ci({inputs:{x:f},backend:t,attrs:{shape:y}}),C=ll({inputs:{x:A},backend:t,attrs:{perm:x}}),L=Ci({inputs:{x:C},backend:t,attrs:{shape:_}});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(A),t.disposeIntermediateTensorInfo(C),L}};function LI(r,e,t,s,a,l,c){const d=e[0],m=l[0],f=new Array(m),y=new Array(d),x=e[1];if(m===0){if(d!==0)throw new Error(`Received SparseTensor with denseShape[0] = 0 but
         indices.shape[0] = ${d}`);return[Or(t,0),[0,x],Or(a,0),f,y]}let _=!0,A=0;const C=new Array(m).fill(0);for(let P=0;P<d;++P){const U=r[P*x];if(U<0)throw new Error(`indices(${P}, 0) is invalid: ${U} < 0`);if(U>=m)throw new Error(`indices(${P}, 0) is invalid: ${U} >= ${m}`);++C[U],_=_&&U>=A,A=U}let L=!0;for(let P=0;P<m;++P){const U=C[P]===0;f[P]=U,L=L&&!U,C[P]=Math.max(C[P],1),P>0&&(C[P]+=C[P-1])}if(L&&_){const P=r,U=s;for(let q=0;q<d;++q)y[q]=q;return[P,[d,x],U,f,y]}{const P=C[m-1],U=Or(t,P*x),q=Or(a,P),X=new Array(m).fill(0);for(let re=0;re<d;++re){const oe=r[re*x],de=X[oe],Ie=(oe===0?0:C[oe-1])+de;X[oe]++;for(let pe=0;pe<x;++pe)U[Ie*x+pe]=r[re*x+pe];q[Ie]=s[re],y[re]=Ie}for(let re=0;re<m;++re)if(X[re]===0){const oe=re===0?0:C[re-1];U[oe*x+0]=re;for(let de=1;de<x;++de)U[oe*x+de]=0;q[oe]=c}return[U,[P,x],q,f,y]}}const Cz={kernelName:$o,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{indices:s,values:a,denseShape:l,defaultValue:c}=e;if(l.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${l.shape}`);if(s.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);if(a.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${a.shape}`);if(c.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${c.shape}`);const d=t.data.get(s.dataId).values,m=t.data.get(a.dataId).values,f=t.data.get(l.dataId).values,y=t.data.get(c.dataId).values[0],[x,_,A,C,L]=LI(d,s.shape,s.dtype,m,a.dtype,f,y);return[t.makeTensorInfo(_,s.dtype,x),t.makeTensorInfo([_[0]],a.dtype,A),t.makeTensorInfo([C.length],"bool",new Uint8Array(C.map(P=>Number(P)))),t.makeTensorInfo([L.length],s.dtype,new Int32Array(L))]}};function DI(r,e,t,s,a){const l=he(s),c=e[0],d=a.length,m=[];let f=1,y=-1;for(let P=0;P<d;++P){const U=a[P];if(U===-1){if(y!==-1)throw new Error(`only one output dimension may be -1, not both ${y} and ${P}`);y=P,m.push(1)}else{if(U<0)throw new Error(`size ${P} must be non-negative, not ${U}`);f*=U,m.push(U)}}if(y!==-1){if(f<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const P=Math.trunc(l/f);if(f*P!==l)throw new Error(`Input to reshape is a SparseTensor with ${l}
          dense values, but the requested shape requires a multiple of ${f}. inputShape=${s} outputShape= ${m}`);m[y]=P}const x=he(m);if(x!==l)throw new Error(`Input to reshape is a tensor with ${l} dense values, but the requested shape has ${x}. inputShape=${s} outputShape=${m}`);const _=s.length,A=[];if(_>0){A[_-1]=1;for(let P=_-2;P>=0;--P)A[P]=A[P+1]*s[P+1]}const C=[];if(d>0){C[d-1]=1;for(let P=d-2;P>=0;--P)C[P]=C[P+1]*m[P+1]}const L=Or(t,c*d);for(let P=0;P<c;++P){let U=0;for(let q=0;q<_;++q)U+=r[P*_+q]*A[q];for(let q=0;q<d;++q)L[P*d+q]=Math.trunc(U/C[q]),U%=C[q]}return[L,[c,d],m]}const kz={kernelName:mo,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{inputIndices:s,inputShape:a,newShape:l}=e;if(s.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);if(a.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${a.shape}`);if(l.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${l.shape}`);const c=Array.from(t.data.get(a.dataId).values),d=t.data.get(s.dataId).values,m=Array.from(t.data.get(l.dataId).values),[f,y,x]=DI(d,s.shape,s.dtype,c,m);return[t.makeTensorInfo(y,s.dtype,f),t.makeTensorInfo([x.length],l.dtype,new Int32Array(x))]}};function oT(r,e,t,s,a,l=!1,c=0){const d=s.length;if(d!==a.length)throw new Error("segmentIds and indices should have same size.");const m=[e[0],r.length/e[0]],f=m[1],y=d>0?a[d-1]+1:0;if(y<0)throw new Error("segment ids must be >= 0");const x=e.slice();x[0]=y;const _=Or(t,x.reduce((U,q)=>U*q,1));if(d===0)return y>0&&_.fill(c),[_,x];if(y<=0)throw new Error("segment ids must be >= 0");let A=0,C=1,L=0,P=a[A];for(;;){let U=0;if(C<d){if(U=a[C],P===U){++C;continue}if(P>=U)throw new Error("segment ids are not increasing")}if(P<0||P>=y)throw new Error(`Segment id ${P} out of range [0, ${y}), possibly because segmentIds input is not sorted.`);P>L&&_.fill(c,L*f,P*f);for(let q=A;q<C;++q){const X=s[q];if(X<0||X>=m[0])throw new Error(`Bad: indices[${q}] == ${s[q]} out of range [0, ${m[0]})`);for(let re=0;re<f;re++)_[P*f+re]+=r[X*f+re]}if(l)for(let q=0;q<f;q++)_[P*f+q]/=C-A;if(A=C,++C,L=P+1,P=U,C>d)break}return L<y&&_.fill(c,L*f,y*f),[_,x]}const Nz={kernelName:Fd,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{data:s,indices:a,segmentIds:l}=e;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(a.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${a.shape}`);if(l.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${l.shape}`);const c=t.data.get(s.dataId).values,d=t.data.get(a.dataId).values,m=t.data.get(l.dataId).values,[f,y]=oT(c,s.shape,s.dtype,d,m,!0);return t.makeTensorInfo(y,s.dtype,f)}},Rz={kernelName:Qc,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t}=r,{data:s,indices:a,segmentIds:l}=e;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(a.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${a.shape}`);if(l.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${l.shape}`);const c=t.data.get(s.dataId).values,d=t.data.get(a.dataId).values,m=t.data.get(l.dataId).values,[f,y]=oT(c,s.shape,s.dtype,d,m);return t.makeTensorInfo(y,s.dtype,f)}},Lz={kernelName:Uo,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{sparseIndices:a,sparseValues:l,defaultValue:c}=e,{outputShape:d}=s,{sliceRank:m,numUpdates:f,sliceSize:y,strides:x,outputSize:_}=ep(0,a,d),A=NI(t.bufferSync(a),t.bufferSync(l),d,_,y,f,m,x,t.data.get(c.dataId).values[0],!1);return t.makeTensorInfo(d,A.dtype,A.values)}},Dz={kernelName:Zc,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{numOrSizeSplits:l,axis:c}=s,d=ir(c,a.shape)[0],m=Tx(a,l,d),f=new Array(a.shape.length).fill(0),y=a.shape.slice();return m.map(x=>{const _=[...y];_[d]=x;const A=Rm({inputs:{x:a},backend:t,attrs:{begin:f,size:_}});return f[d]+=x,A})}},Pz=Fp(r=>Math.sqrt(r)),Fz=si(Uu,r=>Math.sqrt(r)),Oz={kernelName:Uu,backendName:"cpu",kernelFunc:Fz},zz={kernelName:eh,backendName:"cpu",kernelFunc:({inputs:r,backend:e})=>{const{x:t}=r,s=e;Vn(t,"square");const a=s.data.get(t.dataId).values,l=new Float32Array(a.length);for(let c=0;c<a.length;++c){const d=a[c];l[c]=d*d}return{dataId:s.write(l,t.shape,t.dtype),shape:t.shape,dtype:t.dtype}}},PI=ws((r,e)=>{const t=r-e;return t*t}),Bz=Os(Vu,PI),$z={kernelName:Vu,backendName:"cpu",kernelFunc:Bz},Uz=si(rh,(r,e)=>{const t=e;return isNaN(r)?NaN:r>0?1:t.alpha}),Vz={kernelName:rh,backendName:"cpu",kernelFunc:Uz};function FI(r,e,t,s){const a=Er(r,e.dtype);for(let l=0;l<a.size;l++){const c=a.indexToLoc(l),d=new Array(c.length);for(let m=0;m<d.length;m++)d[m]=c[m]*t[m]+s[m];a.set(e.get(...d),...c)}return a}const Wz={kernelName:Od,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{begin:l,end:c,strides:d,beginMask:m,endMask:f,ellipsisMask:y,newAxisMask:x,shrinkAxisMask:_}=s;Vn(a,"stridedSlice");const{nonStrided:A,$begin:C,$strides:L,size:P,newShape:U,outShape:q}=F0(a.shape,l,c,d,m,f,y,x,_),X=Ci({inputs:{x:a},backend:t,attrs:{shape:U}});let re;if(A){const de=Rm({inputs:{x:X},backend:t,attrs:{begin:C,size:P}});re=Ci({inputs:{x:de},backend:t,attrs:{shape:q}}),t.disposeIntermediateTensorInfo(de)}else if(q.some(de=>de===0))re=t.makeTensorInfo(q,a.dtype,[]);else{const de=FI(q,t.bufferSync(X),L,C);re=t.makeTensorInfo(de.shape,de.dtype,de.values)}const oe=Ci({inputs:{x:re},backend:t,attrs:{shape:q}});return t.disposeIntermediateTensorInfo(X),t.disposeIntermediateTensorInfo(re),oe}};class Gz{constructor(e,t,s,a,l,c){this.separator=Ya(e),this.nGramWidths=t,this.leftPad=Ya(s),this.rightPad=Ya(a),this.padWidth=l,this.preserveShort=c}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const s=this.getPadWidth(t);return Math.max(0,e+2*s-t+1)}createNGrams(e,t,s,a,l,c){for(let d=0;d<l;++d){const m=this.getPadWidth(c),f=Math.max(0,m-d),y=Math.max(0,m-(l-(d+1))),x=c-(f+y),_=t+(f>0?0:d-m);let A=0;A+=f*this.leftPad.length;for(let U=0;U<x;++U)A+=e[_+U].length;A+=y*this.rightPad.length,A+=(f+y+x-1)*this.separator.length,s[a+d]=new Uint8Array(A);const C=s[a+d];let L=0;const P=U=>U.forEach(q=>C[L++]=q);for(let U=0;U<f;++U)P(this.leftPad),P(this.separator);for(let U=0;U<x-1;++U)P(e[_+U]),P(this.separator);if(x>0){P(e[_+x-1]);for(let U=0;U<y;++U)P(this.separator),P(this.rightPad)}else{for(let U=0;U<y-1;++U)P(this.rightPad),P(this.separator);P(this.rightPad)}}}compute(e,t){const s=e.length,a=t.length;if(a>0){let m=t[0];if(m!==0)throw new Error(`First split value must be 0, got ${m}`);for(let f=1;f<a;++f){let y=t[f]>=m;if(y=y&&t[f]<=s,!y)throw new Error(`Invalid split value ${t[f]}, must be in [${m}, ${s}]`);m=t[f]}if(m!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${m}`)}const l=a-1,c=Or("int32",a);if(s===0||a===0){const m=new Array(s);for(let f=0;f<=l;++f)c[f]=0;return[m,c]}c[0]=0;for(let m=1;m<=l;++m){const f=t[m]-t[m-1];let y=0;this.nGramWidths.forEach(x=>{y+=this.getNumNGrams(f,x)}),this.preserveShort&&f>0&&y===0&&(y=1),c[m]=c[m-1]+y}const d=new Array(c[l]);for(let m=0;m<l;++m){const f=t[m];let y=c[m];if(this.nGramWidths.forEach(x=>{const _=t[m+1]-t[m],A=this.getNumNGrams(_,x);this.createNGrams(e,f,d,y,A,x),y+=A}),this.preserveShort&&y===c[m]){const x=t[m+1]-t[m];if(x===0)continue;const _=x+2*this.padWidth,A=1;this.createNGrams(e,f,d,y,A,_)}}return[d,c]}}function OI(r,e,t,s,a,l,c,d){return new Gz(t,s,a,l,c,d).compute(r,e)}const Hz={kernelName:Vo,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{separator:a,nGramWidths:l,leftPad:c,rightPad:d,padWidth:m,preserveShortSequences:f}=s,{data:y,dataSplits:x}=e,_=t.data.get(y.dataId).values,A=t.data.get(x.dataId).values,[C,L]=OI(_,A,a,l,c,d,m,f);return[t.makeTensorInfo([C.length],"string",C),t.makeTensorInfo(x.shape,"int32",L)]}};function jz(r,e,t,s){if(!r.length)return;if(e.length===0){for(let l=0;l<r.length;++l)s.push(r.subarray(l,l+1));return}if(e.length===1){const l=e[0];let c=r.indexOf(l);for(;c!==-1;){const d=r.subarray(0,c);t&&d.length===0||s.push(d),c=(r=r.subarray(c+1)).indexOf(l)}return void(t&&r.length===0||s.push(r))}let a=0;for(let l=0;l<r.length+1;l++)if(l===r.length||e.indexOf(r[l])!==-1){const c=r.subarray(a,l);t&&c.length===0||s.push(c),a=l+1}}function zI(r,e,t){const s=r.length,a=[];let l=0,c=0;const d=new Array(s);for(let _=0;_<s;++_){const A=a.length;jz(r[_],e,t,a);const C=a.length-A;d[_]=C,l+=C,c=Math.max(c,C)}const m=Or("int32",2*l),f=new Array(l),y=[s,c];let x=0;for(let _=0;_<s;++_)for(let A=0;A<d[_];++A)m[2*x]=_,m[2*x+1]=A,f[x]=a[x],++x;return[m,f,y]}const qz={kernelName:Gn,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{skipEmpty:a}=s,{input:l,delimiter:c}=e;if(l.dtype!=="string")throw new Error("Input must be of datatype string");if(l.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${l.shape}`);if(c.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${c.shape}`);const d=t.data.get(l.dataId).values,m=t.data.get(c.dataId).values[0],[f,y,x]=zI(d,m,a),_=y.length;return[t.makeTensorInfo([_,2],"int32",f),t.makeTensorInfo([_],"string",y),t.makeTensorInfo([2],"int32",new Int32Array(x))]}};function BI(r,e){const t=Or("int32",r.length);for(let s=0;s<r.length;++s)t[s]=ng(r[s]).modulo(e).getLowBitsUnsigned();return t}const Xz={kernelName:Kl,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{numBuckets:a}=s,{input:l}=e;if(l.dtype!=="string")throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const c=BI(t.data.get(l.dataId).values,a);return t.makeTensorInfo(l.shape,"int32",c)}},Yz=si(zd,r=>Math.tan(r)),Kz={kernelName:zd,backendName:"cpu",kernelFunc:Yz},Zz=si(Bd,r=>Math.tanh(r));function $I(r,e){const t=new Array(r.rank);for(let a=0;a<t.length;a++)t[a]=r.shape[a]*e[a];const s=Er(t,r.dtype);for(let a=0;a<s.values.length;++a){const l=s.indexToLoc(a),c=new Array(r.rank);for(let m=0;m<c.length;m++)c[m]=l[m]%r.shape[m];const d=r.locToIndex(c);s.values[a]=r.values[d]}return s}const Xx=(r,e)=>{const t=e.value-r.value;return t===0?r.index-e.index:t};function UI(r,e,t=0,s=r.length-1){for(;s>t;){if(s-t>600){const d=s-t+1,m=e-t+1,f=Math.log(d),y=.5*Math.exp(2*f/3),x=.5*Math.sqrt(f*y*(d-y)/d)*Math.sign(m-d/2);UI(r,e,Math.max(t,Math.floor(e-m*y/d+x)),Math.min(s,Math.floor(e+(d-m)*y/d+x)))}const a=r[e];let l=t,c=s;for(ye(r,t,e),Xx(r[s],a)>0&&ye(r,t,s);l<c;){for(ye(r,l,c),l++,c--;Xx(r[l],a)<0;)l+=1;for(;Xx(r[c],a)>0;)c-=1}Xx(r[t],a)===0?ye(r,t,c):(c+=1,ye(r,c,s)),c<=e&&(t=c+1),e<=c&&(s=c-1)}}function VI(r,e,t,s,a){const l=e[e.length-1],[c,d]=[r.length/l,l],m=Ti(t,c*s),f=Ti("int32",c*s);for(let x=0;x<c;x++){const _=x*d,A=r.subarray(_,_+d);let C=new Array(A.length);A.forEach((q,X)=>C[X]={value:q,index:X}),s<C.length&&(UI(C,s),C=C.slice(0,s)),a&&C.sort(Xx);const L=x*s,P=m.subarray(L,L+s),U=f.subarray(L,L+s);for(let q=0;q<s;q++)P[q]=C[q].value,U[q]=C[q].index}const y=e.slice();return y[y.length-1]=s,[Er(y,t,m),Er(y,"int32",f)]}function WI(r,e,t){switch(t){case"reflect":return function(s,a){let l=s;if(l<0)if(a<=1)l=0;else{const c=2*a;l<c&&(l=c*Math.trunc(-l/c)+l),l=l<-a?l+c:-l-1}else if(l>a-1)if(a<=1)l=0;else{const c=2*a;l-=c*Math.trunc(l/c),l>=a&&(l=c-l-1)}return Re(0,l,a-1)}(r,e);case"wrap":return function(s,a){let l=s;if(l<0)if(a<=1)l=0;else{const c=a-1;l+=a*(Math.trunc(-l/c)+1)}else if(l>a-1)if(a<=1)l=0;else{const c=a-1;l-=a*Math.trunc(l/c)}return Re(0,l,a-1)}(r,e);case"nearest":return function(s,a){return Re(0,s,a-1)}(r,e);case"constant":default:return function(s,a){return s}(r)}}function Yx(r,e,t,s,a,l,c,d,m,f,y){return 0<=d&&d<e&&0<=m&&m<t?r[c*s+d*a+m*l+f]:y}function Jz(r,e,t,s,a,l,c,d,m,f,y){return Yx(r,e,t,s,a,l,c,Math.round(d),Math.round(m),f,y)}function Qz(r,e,t,s,a,l,c,d,m,f,y){const x=Math.floor(d),_=Math.floor(m),A=x+1,C=_+1;return(A-d)*((C-m)*Yx(r,e,t,s,a,l,c,x,_,f,y)+(m-_)*Yx(r,e,t,s,a,l,c,x,C,f,y))+(d-x)*((C-m)*Yx(r,e,t,s,a,l,c,A,_,f,y)+(m-_)*Yx(r,e,t,s,a,l,c,A,C,f,y))}function GI(r,e,t,s){const a=ir(e,t)[0],l=[1,t[0],1];for(let C=0;C<a;C++)l[0]*=t[C];l[1]=t[a];for(let C=a+1;C<t.length;C++)l[2]*=t[C];const c={},d=new Int32Array(t[a]),m=new pn(l,s,r),f=[],y=l[0]===1&&l[2]===1;for(let C=0;C<t[a];C++){let L;if(y)L=r[C].toString();else{const P=[];for(let U=0;U<l[0];U++)for(let q=0;q<l[2];q++)P.push(m.get(U,C,q));L=P.join(",")}if(c[L]!==void 0)d[C]=c[L];else{const P=Object.keys(c).length;c[L]=P,d[C]=P,f.push(C)}}const x=l.slice();x[1]=Object.keys(c).length;const _=new pn(x,s);f.forEach((C,L)=>{for(let P=0;P<l[0];P++)for(let U=0;U<l[2];U++)_.set(m.get(P,C,U),P,L,U)});const A=t.slice();return A[a]=x[1],{outputValues:_.values,outputShape:A,indices:d}}const eB=[iP,sP,oP,uP,tP,cP,dP,pP,fP,mP,yP,vP,wP,MP,EP,AP,IP,CP,kP,rP,NP,LP,DP,PP,QD,OP,BP,ZD,$P,VP,GP,HP,WP,qP,XP,jP,KP,JP,QP,eF,tF,nF,rF,iF,sF,aF,oF,uF,lF,rT,pF,VD,fF,mF,SF,MF,TF,AF,RF,LF,DF,FF,BF,$F,UF,VF,WF,HF,qF,WD,XF,UP,KF,JF,eO,GD,nO,iO,sO,oO,uO,dO,fO,yO,xO,vO,_O,SO,MO,TO,EO,AO,bO,IO,CO,NO,RO,PO,OO,hF,zO,$O,VO,GO,jO,qO,YO,KO,AI,QO,jD,ez,tz,JD,rz,qD,XD,nP,iz,sz,az,oz,lz,uz,hz,pz,fz,mz,vz,KD,wz,Sz,Tz,RP,FO,Az,Iz,Cz,kz,Nz,Rz,Lz,Dz,Oz,zz,$z,Vz,Wz,Hz,qz,Xz,kF,dF,Kz,{kernelName:Bd,backendName:"cpu",kernelFunc:Zz},{kernelName:Xa,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{reps:l}=s;Vn(a,"tile");const c=$I(t.bufferSync(a),l);return t.makeTensorInfo(c.shape,c.dtype,c.values)}},{kernelName:th,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{k:l,sorted:c}=s;Vn(a,"topk");const d=t.data.get(a.dataId).values,[m,f]=VI(d,a.shape,a.dtype,l,c);return[t.makeTensorInfo(m.shape,m.dtype,m.values),t.makeTensorInfo(f.shape,f.dtype,f.values)]}},hP,{kernelName:Hs,backendName:"cpu",kernelFunc:function(r){const{inputs:e,attrs:t,backend:s}=r,{image:a,transforms:l}=e,{interpolation:c,fillMode:d,fillValue:m,outputShape:f}=t,[y,x,_,A]=a.shape,[C,L]=f!=null?f:[x,_],P=[y,C,L,A],U=Hn(a.shape),q=U[0],X=U[1],re=U[2],oe=Ti(a.dtype,he(P));oe.fill(m);const de=s.data.get(a.dataId).values,Ie=s.data.get(l.dataId).values;for(let pe=0;pe<y;++pe){const Be=l.shape[0]===1?Ie:Ie.subarray(8*pe,8*pe+8);for(let ze=0;ze<C;++ze)for(let Ve=0;Ve<L;++Ve)for(let Qe=0;Qe<A;++Qe){let nt;const ft=Be[6]*Ve+Be[7]*ze+1;if(ft===0)continue;const yt=(Be[0]*Ve+Be[1]*ze+Be[2])/ft,Mt=(Be[3]*Ve+Be[4]*ze+Be[5])/ft,vt=WI(yt,_,d),Ct=WI(Mt,x,d);switch(c){case"nearest":nt=Jz(de,x,_,q,X,re,pe,Ct,vt,Qe,m);break;case"bilinear":nt=Qz(de,x,_,q,X,re,pe,Ct,vt,Qe,m);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${c}`)}oe[pe*q+ze*X+Ve*re+Qe]=nt}return s.makeTensorInfo(P,a.dtype,oe)}return{dataId:s.write(oe,P,a.dtype),shape:a.shape,dtype:a.dtype}}},{kernelName:Cf,backendName:"cpu",kernelFunc:function(r){const{inputs:e,attrs:t,backend:s}=r,{axis:a}=t,{x:l}=e;Vn(l,"unique");const c=s.data.get(l.dataId).values,{outputValues:d,outputShape:m,indices:f}=GI(c,a,l.shape,l.dtype);return[s.makeTensorInfo(m,l.dtype,d),s.makeTensorInfo([f.length],"int32",f)]}},{kernelName:Wo,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{value:a}=e;let{axis:l}=s;l<0&&(l+=a.shape.length);const c=a.shape.length,d=a.shape[l],m=new Array(c-1);let f=0;for(let A=0;A<c;A++)A!==l&&(m[f++]=a.shape[A]);const y=new Array(c).fill(0),x=a.shape.slice();x[l]=1;const _=new Array(d);for(let A=0;A<_.length;A++){y[l]=A;const C=Rm({inputs:{x:a},backend:t,attrs:{begin:y,size:x}});_[A]=Ci({inputs:{x:C},backend:t,attrs:{shape:m}}),t.disposeIntermediateTensorInfo(C)}return _}},{kernelName:nh,backendName:"cpu",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,segmentIds:l}=e,{numSegments:c}=s;Vn(a,"unsortedSegmentSum");const d=[],m=[],f=a.shape.length-l.shape.length;let y=l;for(let _=0;_<f;++_){const A=Hw({inputs:{input:y},backend:t,attrs:{dim:_+1}});y=A,m.push(A)}for(let _=0;_<c;++_){const A=qo(_,"int32"),C=t.makeTensorInfo([],"int32",A),L=iI({inputs:{a:C,b:y},backend:t}),P=Op({inputs:{x:L},backend:t,attrs:{dtype:"float32"}}),U=Gw({inputs:{a:P,b:a},backend:t}),q=qx({inputs:{x:U},backend:t,attrs:{axis:0,keepDims:!1}});d.push(q),m.push(C),m.push(L),m.push(P),m.push(U),m.push(q)}const x=EI({inputs:d,backend:t,attrs:{axis:0}});return m.forEach(_=>t.disposeIntermediateTensorInfo(_)),x}},XO];for(const r of eB)Lf(r);const Lm={},lT={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Mc(r){if(!(r in Lm)){const t=function(s){if(s!==1&&s!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const a=function(l){if(typeof OffscreenCanvas!="undefined"&&l===2)return new OffscreenCanvas(300,150);if(typeof document!="undefined")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(s);return a.addEventListener("webglcontextlost",l=>{l.preventDefault(),delete Lm[s]},!1),s===1?a.getContext("webgl",lT)||a.getContext("experimental-webgl",lT):a.getContext("webgl2",lT)}(r);if(t===null)return console.log("Could not get context for WebGL version",r),null;Lm[r]=t}const e=Lm[r];return e.isContextLost()?(delete Lm[r],Mc(r)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Lm[r])}var Kx,ul,ra;function Zx(r,e){return[e,r]}function qw(r){const e=he(r);return on(Math.ceil(e/4))}function wy(r,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(r/2))]}function uT(r,e){const t=r;let s,a,l,c,d,m,f,y,x,_;return At().getNumber("WEBGL_VERSION")===2?(s=t.R32F,a=t.R16F,l=t.RGBA16F,c=t.RGBA32F,d=t.RED,f=4,y=1,x=t.HALF_FLOAT,_=t.FLOAT):(s=r.RGBA,a=r.RGBA,l=r.RGBA,c=t.RGBA,d=r.RGBA,f=4,y=4,x=e!=null?e.HALF_FLOAT_OES:null,_=r.FLOAT),m=r.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:l,internalFormatPackedFloat:c,textureFormatFloat:d,downloadTextureFormat:m,downloadUnpackNumChannels:f,defaultNumChannels:y,textureTypeHalfFloat:x,textureTypeFloat:_}}function Kn(r,e){const t=e();return At().getBool("DEBUG")&&function(s){const a=s.getError();if(a!==s.NO_ERROR)throw new Error("WebGL Error: "+function(l,c){switch(c){case l.NO_ERROR:return"NO_ERROR";case l.INVALID_ENUM:return"INVALID_ENUM";case l.INVALID_VALUE:return"INVALID_VALUE";case l.INVALID_OPERATION:return"INVALID_OPERATION";case l.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case l.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case l.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${c}`}}(s,a))}(r),t}function tB(r){return!!(At().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||596e-10<Math.abs(r)&&Math.abs(r)<65504)}function Xw(r,e){return jh(r,()=>r.getExtension(e),'Extension "'+e+'" not supported on this browser.')}(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(Kx||(Kx={})),function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"}(ul||(ul={})),function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(ra||(ra={}));const nB=/ERROR: [0-9]+:([0-9]+):/g;function cT(r,e){if(Kn(r,()=>r.validateProgram(e)),r.getProgramParameter(e,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function HI(r,e,t,s,a,l,c){const d=r.getAttribLocation(e,t);return d!==-1&&(Kn(r,()=>r.bindBuffer(r.ARRAY_BUFFER,s)),Kn(r,()=>r.vertexAttribPointer(d,a,r.FLOAT,!1,l,c)),Kn(r,()=>r.enableVertexAttribArray(d)),!0)}function rB(r,e,t,s){Kn(r,()=>function(a,l,c){(function(d,m){const f=d.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,y=m+d.TEXTURE0;if(y<d.TEXTURE0||y>f)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${f}].`)})(a,c),Kn(a,()=>a.activeTexture(a.TEXTURE0+c)),Kn(a,()=>a.bindTexture(a.TEXTURE_2D,l))}(r,e,s)),Kn(r,()=>r.uniform1i(t,s))}function hT(r,e,t){Kn(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),Kn(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0))}function jI(r,e){Kn(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),Kn(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function Yw(r){const e=r.checkFramebufferStatus(r.FRAMEBUFFER);if(e!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,s){switch(s){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${s}`}}(r,e))}function jh(r,e,t){const s=Kn(r,()=>e());if(s==null)throw new Error(t);return s}function _y(r,e=2){return he(r.slice(0,r.length-e))}function Sy(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function dT(r){let e=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(e=[_y(r),...Sy(r)]),e}function Kw(r){return r%2==0}function Zw(r,e){if(Le(r=r.slice(-2),e=e.slice(-2))||!r.length||!e.length||r[0]===0||r[1]===0||e[0]===0||e[1]===0)return!0;if(r.length!==e.length){const t=r.slice(-1)[0],s=e.slice(-1)[0];if(t===s||Kw(t)&&Kw(s)&&(r[0]===1||e[0]===1))return!0}return r[1]===e[1]&&Kw(r[0])&&Kw(e[0])}let pT,fT;function Fl(r,e){return r.getExtension(e)!=null}function qI(r){try{if(Mc(r)!=null)return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function mT(r){const e=uT(r),t=r.createTexture();r.bindTexture(r.TEXTURE_2D,t),r.texImage2D(r.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0);const a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(t),r.deleteFramebuffer(s),a}function Jx(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&Q(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the WebGL backend.`)})}const tr=At();function Oa(){let r,e,t,s,a,l,c,d,m,f;return At().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",e="in",t="out",s="in",a="texture",l="outputColor",c="out vec4 outputColor;",d=`
      bool isnan_custom(float val) {
        return (val > 0.0 || val < 0.0) ? false : val != 0.0;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `,m="",f=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",e="attribute",t="varying",s="varying",a="texture2D",l="gl_FragColor",c="",d=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,m=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,f=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:e,varyingVs:t,varyingFs:s,texture2D:a,output:l,defineOutput:c,defineSpecialNaN:d,defineSpecialInf:m,defineRound:f}}function Dm(r,e,t="index"){const s=Hn(e);return s.map((a,l)=>`int ${r[l]} = ${t} / ${a}; ${l===s.length-1?`int ${r[l+1]} = ${t} - ${r[l]} * ${a}`:`index -= ${r[l]} * ${a}`};`).join("")}function Jw(r,e,t="index"){const s=Hn(e);return s.map((a,l)=>`int ${r[l]} = ${t} / outShapeStrides[${l}]; ${l===s.length-1?`int ${r[l+1]} = ${t} - ${r[l]} * outShapeStrides[${l}]`:`index -= ${r[l]} * outShapeStrides[${l}]`};`).join("")}function gT(r){const e=Hn(r).map(t=>t.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`}tr.registerFlag("HAS_WEBGL",()=>tr.getNumber("WEBGL_VERSION")>0),tr.registerFlag("WEBGL_VERSION",()=>qI(2)?2:qI(1)?1:0),tr.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),tr.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>tr.get("WEBGL_VERSION")===2),tr.registerFlag("WEBGL_CPU_FORWARD",()=>!0),tr.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),tr.registerFlag("WEBGL_PACK",()=>tr.getBool("HAS_WEBGL")),tr.registerFlag("WEBGL_PACK_NORMALIZATION",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_PACK_CLIP",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_PACK_REDUCE",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_LAZILY_UNPACK",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_CONV_IM2COL",()=>tr.getBool("WEBGL_PACK")),tr.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(r){if(pT==null){const e=Mc(r);pT=e.getParameter(e.MAX_TEXTURE_SIZE)}return pT}(tr.getNumber("WEBGL_VERSION"))),tr.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(r){if(fT==null){const e=Mc(r);fT=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,fT)}(tr.getNumber("WEBGL_VERSION"))),tr.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const r=tr.getNumber("WEBGL_VERSION");return r===0?0:function(e){if(e===0)return 0;let t;const s=Mc(e);return t=Fl(s,"EXT_disjoint_timer_query_webgl2")&&e===2?2:Fl(s,"EXT_disjoint_timer_query")?1:0,t}(r)}),tr.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>tr.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!jd()),tr.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(r){if(r===0)return!1;const e=Mc(r);if(r===1){if(!Fl(e,"OES_texture_float"))return!1}else if(!Fl(e,"EXT_color_buffer_float"))return!1;return mT(e)}(tr.getNumber("WEBGL_VERSION"))),tr.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!tr.getBool("WEBGL_FORCE_F16_TEXTURES")&&tr.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),tr.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function(r){if(r===0)return!1;const e=Mc(r);if(r!==1){if(Fl(e,"EXT_color_buffer_float"))return mT(e);const t="EXT_color_buffer_half_float";if(Fl(e,t)){const s=e.getExtension(t);return function(a,l){const c=uT(a,l),d=a.createTexture();a.bindTexture(a.TEXTURE_2D,d),a.texImage2D(a.TEXTURE_2D,0,c.internalFormatHalfFloat,1,1,0,c.textureFormatFloat,c.textureTypeHalfFloat,null);const m=a.createFramebuffer();a.bindFramebuffer(a.FRAMEBUFFER,m),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,d,0);const f=a.checkFramebufferStatus(a.FRAMEBUFFER)===a.FRAMEBUFFER_COMPLETE;return a.bindTexture(a.TEXTURE_2D,null),a.bindFramebuffer(a.FRAMEBUFFER,null),a.deleteTexture(d),a.deleteFramebuffer(m),f}(e,s)}return!1}return!!Fl(e,"OES_texture_float")&&!!Fl(e,"WEBGL_color_buffer_float")&&mT(e)}(tr.getNumber("WEBGL_VERSION"))),tr.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return(r=tr.getNumber("WEBGL_VERSION"))===2&&Mc(r).fenceSync!=null;var r}),tr.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>tr.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),tr.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)}),tr.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>jd()&&tr.getBool("IS_CHROME")?1:-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)}),tr.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),tr.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),tr.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),tr.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);const XI=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`,{getBroadcastDims:YI}=le;function iB(r,e,t){const s=[];if(r.forEach(_=>{const A=he(_.shapeInfo.logicalShape);if(_.shapeInfo.isUniform?s.push(`uniform float ${_.name}${A>1?`[${A}]`:""};`):(s.push(`uniform sampler2D ${_.name};`),s.push(`uniform int offset${_.name};`)),t.enableShapeUniforms){const{uniformShape:C}=yT(t.packedInputs,_.shapeInfo.logicalShape,_.shapeInfo.texShape);switch(C.length){case 1:s.push(`uniform int ${_.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${_.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${_.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${_.name}Shape;`)}s.push(`uniform ivec2 ${_.name}TexShape;`)}}),t.enableShapeUniforms){switch(e.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}t.customUniforms&&t.customUniforms.forEach(_=>{s.push(`uniform ${_.type} ${_.name}${_.arrayIndex?`[${_.arrayIndex}]`:""};`)});const a=s.join(`
`),l=r.map(_=>function(A,C,L=!1,P){let U="";U+=L?KI(A,P):My(A,P);const q=A.shapeInfo.logicalShape,X=C.logicalShape;return q.length<=X.length&&(U+=L?function(re,oe){const de=re.name,Ie=de.charAt(0).toUpperCase()+de.slice(1),pe="get"+Ie+"AtOutCoords",Be=re.shapeInfo.logicalShape.length,ze=oe.logicalShape.length,Ve=YI(re.shapeInfo.logicalShape,oe.logicalShape),Qe=mi(ze),nt=ze-Be;let ft;const yt=["x","y","z","w","u","v"];ft=Be===0?"":ze<2&&Ve.length>=1?"coords = 0;":Ve.map(Rt=>`coords.${yt[Rt+nt]} = 0;`).join(`
`);let Mt="";Mt=ze<2&&Be>0?"coords":re.shapeInfo.logicalShape.map((Rt,Ut)=>`coords.${yt[Ut+nt]}`).join(", ");let vt="return outputValue;";const Ct=he(re.shapeInfo.logicalShape)===1,bt=he(oe.logicalShape)===1;if(Be!==1||Ct||bt){if(Ct&&!bt)vt=ze===1?`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:`
        return vec4(outputValue.x);
      `;else if(Ve.length){const Rt=Be-2,Ut=Be-1;Ve.indexOf(Rt)>-1&&Ve.indexOf(Ut)>-1?vt="return vec4(outputValue.x);":Ve.indexOf(Rt)>-1?vt="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":Ve.indexOf(Ut)>-1&&(vt="return vec4(outputValue.xx, outputValue.zz);")}}else vt=`
      return vec4(outputValue.xy, outputValue.xy);
    `;return`
    vec4 ${pe}() {
      ${Qe} coords = getOutputCoords();
      ${ft}
      vec4 outputValue = get${Ie}(${Mt});
      ${vt}
    }
  `}(A,C):function(re,oe){const de=re.name,Ie=de.charAt(0).toUpperCase()+de.slice(1),pe="get"+Ie+"AtOutCoords",Be=oe.texShape,ze=re.shapeInfo.texShape,Ve=re.shapeInfo.logicalShape.length,Qe=oe.logicalShape.length;if(!re.shapeInfo.isUniform&&Ve===Qe&&re.shapeInfo.flatOffset==null&&Le(ze,Be))return`
      float ${pe}() {
        return sampleTexture(${de}, resultUV);
      }
    `;const nt=mi(Qe),ft=YI(re.shapeInfo.logicalShape,oe.logicalShape),yt=Qe-Ve;let Mt;const vt=["x","y","z","w","u","v"];Mt=Ve===0?"":Qe<2&&ft.length>=1?"coords = 0;":ft.map(bt=>`coords.${vt[bt+yt]} = 0;`).join(`
`);let Ct="";return Ct=Qe<2&&Ve>0?"coords":re.shapeInfo.logicalShape.map((bt,Rt)=>`coords.${vt[Rt+yt]}`).join(", "),`
    float ${pe}() {
      ${nt} coords = getOutputCoords();
      ${Mt}
      return get${Ie}(${Ct});
    }
  `}(A,C)),U}(_,e,t.packedInputs,t.enableShapeUniforms)).join(`
`),c=e.texShape,d=Oa(),m=function(_){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${_.texture2D}(textureSampler, uv).r;
    }
  `}(d);let f,y,x=function(_){return`${_.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${_.varyingFs} vec2 resultUV;
    ${_.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${_.defineSpecialNaN}
    ${_.defineSpecialInf}
    ${_.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${sB}
    ${aB}
    ${oB}
  `}(d);return e.isPacked?(f=function(_,A,C){switch(_.length){case 0:return`
    int getOutputCoords() {
      return 0;
    }
  `;case 1:return function(L,P,U){const q=[Math.ceil(P[0]/2),Math.ceil(P[1]/2)];return q[0]===1?U?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${q[1]}.0);
      }
    `:q[1]===1?U?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${q[0]}.0);
      }
    `:U?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${q[0]}, ${q[1]}));
      return 2 * (resTexRC.x * ${q[1]} + resTexRC.y);
    }
  `}(0,A,C);case 2:return function(L,P,U){const q=[Math.ceil(P[0]/2),Math.ceil(P[1]/2)];if(Le(L,P))return U?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${q[0]}, ${q[1]}));
      }
    `;const X=Math.ceil(L[1]/2);return U?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${q[0]}, ${q[1]}));

      int index = resTexRC.x * ${q[1]} + resTexRC.y;
      int r = 2 * (index / ${X});
      int c = imod(index, ${X}) * 2;

      return ivec2(r, c);
    }
  `}(_,A,C);case 3:return function(L,P,U){if(U)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;const q=[Math.ceil(P[0]/2),Math.ceil(P[1]/2)],X=Math.ceil(L[2]/2),re=X*Math.ceil(L[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${q[0]}, ${q[1]}));
      int index = resTexRC.x * ${q[1]} + resTexRC.y;

      int b = index / ${re};
      index -= b * ${re};

      int r = 2 * (index / ${X});
      int c = imod(index, ${X}) * 2;

      return ivec3(b, r, c);
    }
  `}(_,A,C);default:return function(L,P,U){if(U)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;const q=[Math.ceil(P[0]/2),Math.ceil(P[1]/2)],X=Math.ceil(L[L.length-1]/2),re=X*Math.ceil(L[L.length-2]/2);let oe=re,de="",Ie="b, r, c";for(let pe=2;pe<L.length-1;pe++)oe*=L[L.length-pe-1],de=`
      int b${pe} = index / ${oe};
      index -= b${pe} * ${oe};
    `+de,Ie=`b${pe}, `+Ie;return`
    ivec${L.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${q[0]}, ${q[1]}));
      int index = resTexRC.x * ${q[1]} + resTexRC.y;

      ${de}

      int b = index / ${re};
      index -= b * ${re};

      int r = 2 * (index / ${X});
      int c = imod(index, ${X}) * 2;

      return ivec${L.length}(${Ie});
    }
  `}(_,A,C)}}(e.logicalShape,c,t.enableShapeUniforms),y=function(_){return`
    void setOutput(vec4 val) {
      ${_.output} = val;
    }
  `}(d)):(f=function(_,A,C){switch(_.length){case 0:return`
    int getOutputCoords() {
      return 0;
    }
  `;case 1:return function(L,P,U){return P[0]===1?U?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${P[1]}.0);
      }
    `:P[1]===1?U?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${P[0]}.0);
      }
    `:U?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${P[0]}, ${P[1]}));
      return resTexRC.x * ${P[1]} + resTexRC.y;
    }
  `}(0,A,C);case 2:return function(L,P,U){return Le(L,P)?U?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${P[0]}, ${P[1]}));
      }
    `:L[1]===1?U?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${P[0]}, ${P[1]}));
        int index = resTexRC.x * ${P[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:L[0]===1?U?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${P[0]}, ${P[1]}));
        int index = resTexRC.x * ${P[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:U?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${P[0]}, ${P[1]}));
      int index = resTexRC.x * ${P[1]} + resTexRC.y;
      int r = index / ${L[1]};
      int c = index - r * ${L[1]};
      return ivec2(r, c);
    }
  `}(_,A,C);case 3:return function(L,P,U){if(U)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Jw(["r","c","d"],L)}
    return ivec3(r, c, d);
  }
`;const q=Dm(["r","c","d"],L);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${P[0]}, ${P[1]}));
      int index = resTexRC.x * ${P[1]} + resTexRC.y;
      ${q}
      return ivec3(r, c, d);
    }
  `}(_,A,C);case 4:return function(L,P,U){if(U)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Jw(["r","c","d","d2"],L)}
      return ivec4(r, c, d, d2);
    }
  `;const q=Dm(["r","c","d","d2"],L);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${P[0]}, ${P[1]}));
      int index = resTexRC.x * ${P[1]} + resTexRC.y;
      ${q}
      return ivec4(r, c, d, d2);
    }
  `}(_,A,C);case 5:return function(L,P){const U=Dm(["r","c","d","d2","d3"],L);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${P[0]},
                             ${P[1]}));

      int index = resTexRC.x * ${P[1]} + resTexRC.y;

      ${U}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}(_,A);case 6:return function(L,P){const U=Dm(["r","c","d","d2","d3","d4"],L);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${P[0]}, ${P[1]}));
      int index = resTexRC.x * ${P[1]} + resTexRC.y;

      ${U}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}(_,A);default:throw new Error(`${_.length}-D output sampling is not yet supported`)}}(e.logicalShape,c,t.enableShapeUniforms),y=function(_){return`
    void setOutput(float val) {
      ${_.output} = vec4(val, 0, 0, 0);
    }
  `}(d)),t.packedInputs&&(x+=lB),[x,m,y,a,f,l,t.userCode].join(`
`)}function My(r,e=!1){const t=r.shapeInfo.logicalShape;switch(t.length){case 0:return function(s,a){const l=s.name,c="get"+l.charAt(0).toUpperCase()+l.slice(1);if(s.shapeInfo.isUniform)return`float ${c}() {return ${l};}`;const[d,m]=s.shapeInfo.texShape;if(d===1&&m===1)return`
      float ${c}() {
        return sampleTexture(${l}, halfCR);
      }
    `;const f=Pm(l);if(a)return`
    float ${c}() {
      vec2 uv = uvFromFlat(${l}TexShape[0], ${l}TexShape[1], ${f});
      return sampleTexture(${l}, uv);
    }
  `;const[y,x]=s.shapeInfo.texShape;return`
    float ${c}() {
      vec2 uv = uvFromFlat(${y}, ${x}, ${f});
      return sampleTexture(${l}, uv);
    }
  `}(r,e);case 1:return function(s,a){const l=s.name,c="get"+l.charAt(0).toUpperCase()+l.slice(1);if(s.shapeInfo.isUniform)return`
      float ${c}(int index) {
        ${Ty(s)}
      }
    `;const d=s.shapeInfo.texShape,m=d[0],f=d[1];if(f===1&&m===1)return`
      float ${c}(int index) {
        return sampleTexture(${l}, halfCR);
      }
    `;const y=Pm(l);return f===1?a?`
      float ${c}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${y}) + 0.5) / float(${l}TexShape[0]));
        return sampleTexture(${l}, uv);
      }
    `:`
      float ${c}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${y}) + 0.5) / ${m}.0);
        return sampleTexture(${l}, uv);
      }
    `:m===1?a?`
      float ${c}(int index) {
        vec2 uv = vec2((float(index + ${y}) + 0.5) / float(${l}TexShape[1]), 0.5);
        return sampleTexture(${l}, uv);
      }
    `:`
      float ${c}(int index) {
        vec2 uv = vec2((float(index + ${y}) + 0.5) / ${f}.0, 0.5);
        return sampleTexture(${l}, uv);
      }
    `:a?`
    float ${c}(int index) {
      vec2 uv = uvFromFlat(${l}TexShape[0], ${l}TexShape[1], index + ${y});
      return sampleTexture(${l}, uv);
    }
  `:`
    float ${c}(int index) {
      vec2 uv = uvFromFlat(${m}, ${f}, index + ${y});
      return sampleTexture(${l}, uv);
    }
  `}(r,e);case 2:return function(s,a){const l=s.shapeInfo.logicalShape,c=s.name,d="get"+c.charAt(0).toUpperCase()+c.slice(1),m=s.shapeInfo.texShape;if(m!=null&&Le(l,m)){if(a)return`
      float ${d}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${c}TexShape[1], ${c}TexShape[0]);
        return sampleTexture(${c}, uv);
      }
    `;const L=m[0];return`
    float ${d}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${m[1]}.0, ${L}.0);
      return sampleTexture(${c}, uv);
    }
  `}const{newShape:f,keptDims:y}=Ui(l),x=f;if(x.length<l.length){const L=["row","col"];return`
      ${My(Ey(s,x),a)}
      float ${d}(int row, int col) {
        return ${d}(${Ay(L,y)});
      }
    `}if(s.shapeInfo.isUniform)return`
      float ${d}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${l[1]}, 1)));
        ${Ty(s)}
      }
    `;const _=m[0],A=m[1],C=Pm(c);return A===1?a?`
      float ${d}(int row, int col) {
        float index = dot(vec3(row, col, ${C}), vec3(${c}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${c}TexShape[0]));
        return sampleTexture(${c}, uv);
      }
    `:`
    float ${d}(int row, int col) {
      float index = dot(vec3(row, col, ${C}), vec3(${l[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${_}.0);
      return sampleTexture(${c}, uv);
    }
  `:_===1?a?`
      float ${d}(int row, int col) {
        float index = dot(vec3(row, col, ${C}), vec3(${c}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${c}TexShape[1]), 0.5);
        return sampleTexture(${c}, uv);
      }
    `:`
    float ${d}(int row, int col) {
      float index = dot(vec3(row, col, ${C}), vec3(${l[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${A}.0, 0.5);
      return sampleTexture(${c}, uv);
    }
  `:a?`
      float ${d}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${c}Shape[1] + col + ${C};
        vec2 uv = uvFromFlat(${c}TexShape[0], ${c}TexShape[1], index);
        return sampleTexture(${c}, uv);
      }
    `:`
  float ${d}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${l[1]} + col + ${C};
    vec2 uv = uvFromFlat(${_}, ${A}, index);
    return sampleTexture(${c}, uv);
  }
`}(r,e);case 3:return function(s,a){const l=s.shapeInfo.logicalShape,c=s.name,d="get"+c.charAt(0).toUpperCase()+c.slice(1),m=l[1]*l[2],f=l[2],{newShape:y,keptDims:x}=Ui(l),_=y;if(_.length<l.length){const q=["row","col","depth"];return`
        ${My(Ey(s,_),a)}
        float ${d}(int row, int col, int depth) {
          return ${d}(${Ay(q,x)});
        }
      `}if(s.shapeInfo.isUniform)return`
      float ${d}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${m}, ${f}, 1)));
        ${Ty(s)}
      }
    `;const A=s.shapeInfo.texShape,C=A[0],L=A[1],P=s.shapeInfo.flatOffset;if(L===m&&P==null)return a?`
      float ${d}(int row, int col, int depth) {
        int stride1 = ${c}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${c}TexShape[1], ${c}TexShape[0]);
        return sampleTexture(${c}, uv);
      }
    `:`
        float ${d}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${f}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${L}.0, ${C}.0);
          return sampleTexture(${c}, uv);
        }
      `;if(L===f&&P==null)return a?`
      float ${d}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${c}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}TexShape[1], ${c}TexShape[0]);
        return sampleTexture(${c}, uv);
      }
    `:`
    float ${d}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${l[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${L}.0, ${C}.0);
      return sampleTexture(${c}, uv);
    }
  `;const U=Pm(c);return a?`
    float ${d}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${c}Shape[1] * ${c}Shape[2];
      int stride1 = ${c}Shape[2];
      int index = row * ${m} + col * ${f} + depth + ${U};
      vec2 uv = uvFromFlat(${c}TexShape[0], ${c}TexShape[1], index);
      return sampleTexture(${c}, uv);
    }
    `:`
      float ${d}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${m} + col * ${f} + depth + ${U};
        vec2 uv = uvFromFlat(${C}, ${L}, index);
        return sampleTexture(${c}, uv);
      }
  `}(r,e);case 4:return function(s,a){const l=s.shapeInfo.logicalShape,c=s.name,d="get"+c.charAt(0).toUpperCase()+c.slice(1),m=l[3],f=l[2]*m,y=l[1]*f,{newShape:x,keptDims:_}=Ui(l);if(x.length<l.length){const oe=["row","col","depth","depth2"];return`
      ${My(Ey(s,x),a)}
      float ${d}(int row, int col, int depth, int depth2) {
        return ${d}(${Ay(oe,_)});
      }
    `}if(s.shapeInfo.isUniform)return`
      float ${d}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${y}, ${f}, ${m}, 1)));
        ${Ty(s)}
      }
    `;const A=s.shapeInfo.flatOffset,C=s.shapeInfo.texShape,L=C[0],P=C[1],U=`int stride2 = ${c}Shape[3];`,q=`int stride1 = ${c}Shape[2] * stride2;`,X=`int stride0 = ${c}Shape[1] * stride1;`;if(P===y&&A==null)return a?`
      float ${d}(int row, int col, int depth, int depth2) {
        ${U}
        ${q}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${c}TexShape[1], ${c}TexShape[0]);
        return sampleTexture(${c}, uv);
      }
    `:`
      float ${d}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${f}, ${m}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${P}.0, ${L}.0);
        return sampleTexture(${c}, uv);
      }
    `;if(P===m&&A==null)return a?`
      float ${d}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${c}Shape[1] * ${c}Shape[2], ${c}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${c}TexShape[1], ${c}TexShape[0]);
        return sampleTexture(${c}, uv);
      }
    `:`
      float ${d}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${l[1]*l[2]}, ${l[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${P}.0, ${L}.0);
        return sampleTexture(${c}, uv);
      }
    `;const re=Pm(c);return a?`
    float ${d}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${U}
      ${q}
      ${X}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${c}TexShape[0], ${c}TexShape[1], index + ${re});
      return sampleTexture(${c}, uv);
    }
  `:`
    float ${d}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${y} + col * ${f} +
          depth * ${m} + depth2;
      vec2 uv = uvFromFlat(${L}, ${P}, index + ${re});
      return sampleTexture(${c}, uv);
    }
  `}(r,e);case 5:return function(s){const a=s.shapeInfo.logicalShape,l=s.name,c="get"+l.charAt(0).toUpperCase()+l.slice(1),d=a[4],m=a[3]*d,f=a[2]*m,y=a[1]*f,{newShape:x,keptDims:_}=Ui(a);if(x.length<a.length){const U=["row","col","depth","depth2","depth3"];return`
      ${My(Ey(s,x))}
      float ${c}(int row, int col, int depth, int depth2, int depth3) {
        return ${c}(${Ay(U,_)});
      }
    `}if(s.shapeInfo.isUniform)return`
      float ${c}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${y}, ${f}, ${m}, ${d})) +
          depth3;
        ${Ty(s)}
      }
    `;const A=s.shapeInfo.flatOffset,C=s.shapeInfo.texShape,L=C[0],P=C[1];return P===y&&A==null?`
      float ${c}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${f}, ${m}, ${d}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${P}.0, ${L}.0);
        return sampleTexture(${l}, uv);
      }
    `:P===d&&A==null?`
      float ${c}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${a[1]*a[2]*a[3]},
               ${a[2]*a[3]}, ${a[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${P}.0, ${L}.0);
        return sampleTexture(${l}, uv);
      }
    `:`
    float ${c}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${y} + col * ${f} + depth * ${m} +
          depth2 * ${d} + depth3 + ${Pm(l)};
      vec2 uv = uvFromFlat(${L}, ${P}, index);
      return sampleTexture(${l}, uv);
    }
  `}(r);case 6:return function(s){const a=s.shapeInfo.logicalShape,l=s.name,c="get"+l.charAt(0).toUpperCase()+l.slice(1),{newShape:d,keptDims:m}=Ui(a);if(d.length<a.length){const q=["row","col","depth","depth2","depth3","depth4"];return`
      ${My(Ey(s,d))}
      float ${c}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${c}(${Ay(q,m)});
      }
    `}const f=a[5],y=a[4]*f,x=a[3]*y,_=a[2]*x,A=a[1]*_;if(s.shapeInfo.isUniform)return`
      float ${c}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${A}, ${_}, ${x}, ${y})) +
          dot(
            vec2(depth3, depth4),
            vec2(${f}, 1)));
        ${Ty(s)}
      }
    `;const C=s.shapeInfo.flatOffset,L=s.shapeInfo.texShape,P=L[0],U=L[1];return U===A&&C==null?`
      float ${c}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${_}, ${x}, ${y}, ${f})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${U}.0, ${P}.0);
        return sampleTexture(${l}, uv);
      }
    `:U===f&&C==null?`
      float ${c}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${a[1]*a[2]*a[3]*a[4]},
               ${a[2]*a[3]*a[4]},
               ${a[3]*a[4]},
               ${a[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${U}.0, ${P}.0);
        return sampleTexture(${l}, uv);
      }
    `:`
    float ${c}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${A} + col * ${_} + depth * ${x} +
          depth2 * ${y} + depth3 * ${f} + depth4 + ${Pm(l)};
      vec2 uv = uvFromFlat(${P}, ${U}, index);
      return sampleTexture(${l}, uv);
    }
  `}(r);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function KI(r,e){switch(r.shapeInfo.logicalShape.length){case 0:return function(t){const s=t.name;return`
    vec4 ${"get"+s.charAt(0).toUpperCase()+s.slice(1)}() {
      return ${Oa().texture2D}(${s}, halfCR);
    }
  `}(r);case 1:return function(t,s){const a=t.name,l="get"+a.charAt(0).toUpperCase()+a.slice(1),c=t.shapeInfo.texShape,d=Oa();if(s)return`
    vec4 ${l}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${d.texture2D}(${a}, uv);
    }
  `;const m=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)];return`
    vec4 ${l}(int index) {
      vec2 uv = packedUVfrom1D(
        ${m[0]}, ${m[1]}, index);
      return ${d.texture2D}(${a}, uv);
    }
  `}(r,e);case 2:return function(t,s){const a=t.shapeInfo.logicalShape,l=t.name,c="get"+l.charAt(0).toUpperCase()+l.slice(1),d=t.shapeInfo.texShape,m=d[0],f=d[1],y=Oa();if(d!=null&&Le(a,d))return s?`
      vec4 ${c}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${l}TexShape[1], ${l}TexShape[0]);

        return ${y.texture2D}(${l}, uv);
      }
    `:`
      vec4 ${c}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${f}.0, ${m}.0);

        return ${y.texture2D}(${l}, uv);
      }
    `;if(s)return`
    vec4 ${c}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${l}TexShape[0]) / 2.0), ceil(float(${l}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${l}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${y.texture2D}(${l}, uv);
    }
  `;const x=[Math.ceil(d[0]/2),Math.ceil(d[1]/2)];return`
    vec4 ${c}(int row, int col) {
      vec2 uv = packedUVfrom2D(${Math.ceil(a[1]/2)}, ${x[0]}, ${x[1]}, row, col);
      return ${y.texture2D}(${l}, uv);
    }
  `}(r,e);case 3:return function(t,s){const a=t.shapeInfo.logicalShape,l=t.name,c="get"+l.charAt(0).toUpperCase()+l.slice(1),d=t.shapeInfo.texShape,m=[Math.ceil(d[0]/2),Math.ceil(d[1]/2)];if(a[0]===1){const A=[1,2],C=["b","row","col"];return`
        ${KI(Ey(t,a.slice(1)),s)}
        vec4 ${c}(int b, int row, int col) {
          return ${c}(${Ay(C,A)});
        }
      `}const f=Oa();if(s)return`
    vec4 ${c}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${l}TexShape[0]) / 2.0), ceil(float(${l}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${l}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${l}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${f.texture2D}(${l}, uv);
    }
  `;const y=m[0],x=m[1],_=Math.ceil(a[2]/2);return`
    vec4 ${c}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${y}, ${x}, ${_*Math.ceil(a[1]/2)}, ${_}, b, row, col);
      return ${f.texture2D}(${l}, uv);
    }
  `}(r,e);default:return function(t,s){const a=t.name,l="get"+a.charAt(0).toUpperCase()+a.slice(1),c=Oa();if(s)return`
    vec4 ${l}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${a}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${a}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${c.texture2D}(${a}, uv);
    }
  `;const d=t.shapeInfo.logicalShape,m=d.length,f=t.shapeInfo.texShape,y=[Math.ceil(f[0]/2),Math.ceil(f[1]/2)],x=y[0],_=y[1],A=Math.ceil(d[m-1]/2);let C=A*Math.ceil(d[m-2]/2),L="int b, int row, int col",P=`b * ${C} + (row / 2) * ${A} + (col / 2)`;for(let U=2;U<m-1;U++)L=`int b${U}, `+L,C*=d[m-U-1],P=`b${U} * ${C} + `+P;return`
    vec4 ${l}(${L}) {
      int index = ${P};
      int texR = index / ${_};
      int texC = index - texR * ${_};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${_}, ${x});
      return ${c.texture2D}(${a}, uv);
    }
  `}(r,e)}}const sB=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,aB=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,oB=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,lB=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function Pm(r){return`offset${r}`}function Ty(r){const e=r.name,t=he(r.shapeInfo.logicalShape);return t<2?`return ${e};`:`
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `}function mi(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function yT(r,e,t){const{newShape:s,keptDims:a}=Ui(e),l=e.length,c=r&&l===3&&e[0]===1,d=c?e.slice(1):s,m=!r&&l>1&&!Le(e,t)&&s.length<l||c;return{useSqueezeShape:m,uniformShape:m?d:e,keptDims:a}}function Ey(r,e){const t=JSON.parse(JSON.stringify(r));return t.shapeInfo.logicalShape=e,t}function Ay(r,e){return e.map(t=>r[t]).join(", ")}function ZI(r,e){if(r.length!==e.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${e.length} inputs`);r.forEach((t,s)=>{const a=t.logicalShape,l=e[s],c=l.shape;if(!Le(a,c))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${a} and ${c} must match`);if(t.isUniform&&l.isUniform)return;const d=t.texShape,m=l.isUniform?null:l.texData.texShape;if(!Le(d,m))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${d} and ${m} must match`)})}function cl(r){return At().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}class uB{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Kx.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Oa();this.outputShape=e,this.enableShapeUniforms=cl(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Jw(["r","c","d"],e):Dm(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}}class cB{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Kx.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Oa();this.outputShape=e,this.enableShapeUniforms=cl(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Jw(["r","c","d"],e):Dm(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}}class hB{constructor(e){this.variableNames=["A"],this.outTexUsage=ul.DOWNLOAD;const t=Oa();this.outputShape=e,this.userCode=`
      ${XI}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}}class dB{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=ul.DOWNLOAD;const t=Oa();this.outputShape=e,this.userCode=`
      ${XI}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}}class pB{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=Oa();this.outputShape=e,this.enableShapeUniforms=cl(this.outputShape.length);let a="result";t&&(a="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`:gT(e)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${s.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${s.output} = vec4(${a}, 0., 0., 0.);
      }
    `}}class fB{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=Oa();this.outputShape=e,this.enableShapeUniforms=cl(this.outputShape.length);let a="",l="result";t&&(l="floor(result * 255. + 0.5)");for(let c=0;c<=1;c++)for(let d=0;d<=1;d++){const m=2*c+d;a+=`
          localCoords = coords;
          if(localCoords[2] + ${d} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${d};
          if (localCoords[1] + ${c} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${c};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${m}] = values[0];
            } else if (offset == 1) {
              result[${m}] = values[1];
            } else if (offset == 2) {
              result[${m}] = values[2];
            } else {
              result[${m}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`:gT(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${a}

          ${s.output} = ${l};
        }
    `}}function Qx(r,e,t,s,a,l){(function(m,f){const y=At().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(m<=0||f<=0)throw new Error(`Requested texture size [${m}x${f}] is invalid.`);if(m>y||f>y)throw new Error(`Requested texture size [${m}x${f}] greater than WebGL maximum on this browser / GPU [${y}x${y}].`)})(e,t);const c=function(m){return jh(m,()=>m.createTexture(),"Unable to create WebGLTexture.")}(r),d=r.TEXTURE_2D;return Kn(r,()=>r.bindTexture(d,c)),Kn(r,()=>r.texParameteri(d,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),Kn(r,()=>r.texParameteri(d,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),Kn(r,()=>r.texParameteri(d,r.TEXTURE_MIN_FILTER,r.NEAREST)),Kn(r,()=>r.texParameteri(d,r.TEXTURE_MAG_FILTER,r.NEAREST)),Kn(r,()=>r.texImage2D(d,0,s,e,t,0,a,l,null)),Kn(r,()=>r.bindTexture(r.TEXTURE_2D,null)),c}function JI(r){return r.internalFormatFloat}function QI(r){return r.internalFormatHalfFloat}function eC(r){return r.downloadTextureFormat}function tC(r){return r.internalFormatPackedFloat}function nC(r){return r.internalFormatPackedHalfFloat}class mB{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=At().getNumber("WEBGL_VERSION");e!=null?(this.gl=e,function(l,c){Lm[l]=c}(t,e)):this.gl=Mc(t);let s="WEBGL_color_buffer_float";const a="EXT_color_buffer_half_float";if(At().getNumber("WEBGL_VERSION")===1){const l="OES_texture_float",c="OES_texture_half_float";if(this.textureFloatExtension=Xw(this.gl,l),Fl(this.gl,c))this.textureHalfFloatExtension=Xw(this.gl,c);else if(At().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),Fl(this.gl,a))this.colorBufferHalfFloatExtension=Xw(this.gl,a);else if(At().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",Fl(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!Fl(this.gl,a))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(a)}this.vertexBuffer=function(l){return function(c,d){const m=jh(c,()=>c.createBuffer(),"Unable to create WebGLBuffer");return Kn(c,()=>c.bindBuffer(c.ARRAY_BUFFER,m)),Kn(c,()=>c.bufferData(c.ARRAY_BUFFER,d,c.STATIC_DRAW)),m}(l,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(l){return function(c,d){const m=jh(c,()=>c.createBuffer(),"Unable to create WebGLBuffer");return Kn(c,()=>c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,m)),Kn(c,()=>c.bufferData(c.ELEMENT_ARRAY_BUFFER,d,c.STATIC_DRAW)),m}(l,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(l){return jh(l,()=>l.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=uT(this.gl,this.textureHalfFloatExtension)}get debug(){return At().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;Kn(e,()=>e.finish()),Kn(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),Kn(e,()=>e.deleteFramebuffer(this.framebuffer)),Kn(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),Kn(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),Kn(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(s,a,l,c){const[d,m]=Zx(a,l);return Qx(s,d,m,JI(c),c.textureFormatFloat,s.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(s,a,l,c){const[d,m]=Zx(a,l);return Qx(s,d,m,QI(c),c.textureFormatFloat,c.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(s,a,l,c){const[d,m]=Zx(a,l);return Qx(s,d,m,eC(c),s.RGBA,s.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(s,a,l){Kn(s,()=>s.bindTexture(s.TEXTURE_2D,a)),l.data instanceof Uint8Array?Kn(s,()=>s.texImage2D(s.TEXTURE_2D,0,s.RGBA,l.width,l.height,0,s.RGBA,s.UNSIGNED_BYTE,l.data)):Kn(s,()=>s.texImage2D(s.TEXTURE_2D,0,s.RGBA,s.RGBA,s.UNSIGNED_BYTE,l)),Kn(s,()=>s.bindTexture(s.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,s,a){this.throwIfDisposed(),function(l,c,d,m,f,y){let x,_,A;Kn(l,()=>l.bindTexture(l.TEXTURE_2D,c)),f instanceof Uint8Array?(x=new Uint8Array(d*m*4),_=l.UNSIGNED_BYTE,A=l.RGBA):(x=new Float32Array(d*m*4),_=l.FLOAT,A=y.internalFormatPackedFloat),x.set(f),Kn(l,()=>l.texImage2D(l.TEXTURE_2D,0,A,d,m,0,l.RGBA,_,x)),Kn(l,()=>l.bindTexture(l.TEXTURE_2D,null))}(this.gl,e,t,s,a,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(s,a,l,c){const[d,m]=wy(a,l);return Qx(s,d,m,nC(c),s.RGBA,c.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(s,a,l,c){const[d,m]=wy(a,l);return Qx(s,d,m,tC(c),s.RGBA,s.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(jI(this.gl,this.framebuffer),this.outputTexture=null),Kn(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,s){return this.downloadMatrixDriver(e,()=>function(a,l,c,d){const[m,f]=Zx(l,c),y=new Uint8Array(l*c*4);return Kn(a,()=>a.readPixels(0,0,m,f,d.downloadTextureFormat,a.UNSIGNED_BYTE,y)),new Float32Array(y.buffer)}(this.gl,t,s,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,s,a,l,c){return function(d,m,f,y,x,_,A,C){const L=d,P=new Float32Array(function(U,q){const[X,re]=wy(U,q);return X*re*4}(_,A));return L.bindBuffer(L.PIXEL_PACK_BUFFER,m),L.getBufferSubData(L.PIXEL_PACK_BUFFER,0,P),L.bindBuffer(L.PIXEL_PACK_BUFFER,null),P}(this.gl,e,0,0,0,l,c,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(s,a,l){const c=s,d=new Float32Array(l);return c.bindBuffer(c.PIXEL_PACK_BUFFER,a),c.getBufferSubData(c.PIXEL_PACK_BUFFER,0,d),c.bindBuffer(c.PIXEL_PACK_BUFFER,null),d}(this.gl,e,t)}createBufferFromTexture(e,t,s){this.bindTextureToFrameBuffer(e);const a=function(l,c,d,m){const f=l.createBuffer();Kn(l,()=>l.bindBuffer(l.PIXEL_PACK_BUFFER,f));const y=16*c*d;return Kn(l,()=>l.bufferData(l.PIXEL_PACK_BUFFER,y,l.STREAM_READ)),Kn(l,()=>l.readPixels(0,0,d,c,l.RGBA,l.FLOAT,0)),Kn(l,()=>l.bindBuffer(l.PIXEL_PACK_BUFFER,null)),f}(this.gl,t,s,this.textureConfig);return this.unbindTextureToFrameBuffer(),a}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,s;if(At().getBool("WEBGL_FENCE_API_ENABLED")){const a=e,l=a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),s=()=>{const c=a.clientWaitSync(l,0,0);return c===a.ALREADY_SIGNALED||c===a.CONDITION_SATISFIED},t=l}else At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(t,At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:t,isFencePassed:s}}downloadMatrixFromPackedTexture(e,t,s){return this.downloadMatrixDriver(e,()=>function(a,l,c){const d=new Float32Array(l*c*4);return Kn(a,()=>a.readPixels(0,0,c,l,a.RGBA,a.FLOAT,d)),d}(this.gl,t,s))}createProgram(e){this.throwIfDisposed();const t=this.gl,s=function(l,c){const d=jh(l,()=>l.createShader(l.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Kn(l,()=>l.shaderSource(d,c)),Kn(l,()=>l.compileShader(d)),l.getShaderParameter(d,l.COMPILE_STATUS)===!1)throw function(m,f){const y=nB.exec(f);if(y==null)return console.log(`Couldn't parse line number in error: ${f}`),void console.log(m);const x=+y[1],_=m.split(`
`),A=_.length.toString().length+2,C=_.map((X,re)=>Ir((re+1).toString(),A)+X);let L=0;for(let X=0;X<C.length;X++)L=Math.max(C[X].length,L);const P=C.slice(0,x-1),U=C.slice(x-1,x),q=C.slice(x);console.log(P.join(`
`)),console.log(f.split(`
`)[0]),console.log(`%c ${Ir(U[0],L)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(q.join(`
`))}(c,l.getShaderInfoLog(d)),new Error("Failed to compile fragment shader.");return d}(t,e);this.vertexShader==null&&(this.vertexShader=function(l){const c=Oa();return function(d,m){const f=jh(d,()=>d.createShader(d.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Kn(d,()=>d.shaderSource(f,m)),Kn(d,()=>d.compileShader(f)),d.getShaderParameter(f,d.COMPILE_STATUS)===!1)throw console.log(d.getShaderInfoLog(f)),new Error("Failed to compile vertex shader.");return f}(l,`${c.version}
    precision highp float;
    ${c.attribute} vec3 clipSpacePos;
    ${c.attribute} vec2 uv;
    ${c.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`)}(t));const a=function(l){return jh(l,()=>l.createProgram(),"Unable to create WebGLProgram.")}(t);return Kn(t,()=>t.attachShader(a,this.vertexShader)),Kn(t,()=>t.attachShader(a,s)),function(l,c){if(Kn(l,()=>l.linkProgram(c)),l.getProgramParameter(c,l.LINK_STATUS)===!1)throw console.log(l.getProgramInfoLog(c)),new Error("Failed to link vertex and fragment shaders.")}(t,a),this.debug&&cT(t,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=function(l,c,d){return Kn(l,()=>l.bindBuffer(l.ARRAY_BUFFER,d)),HI(l,c,"clipSpacePos",d,3,20,0)&&HI(l,c,"uv",d,2,20,12)}(t,this.program,this.vertexBuffer)),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),e!=null&&Kn(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,this.program!=null&&this.debug&&cT(this.gl,this.program),Kn(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,s=!0){return this.throwIfDisposed(),s?function(a,l,c){return jh(a,()=>a.getUniformLocation(l,c),'uniform "'+c+'" not present in program.')}(this.gl,e,t):function(a,l,c){return a.getUniformLocation(l,c)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),Kn(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,s){this.throwIfDisposed(),this.throwIfNoProgram(),rB(this.gl,e,t,s)}setOutputMatrixTexture(e,t,s){this.setOutputMatrixTextureDriver(e,s,t)}setOutputPackedMatrixTexture(e,t,s){this.throwIfDisposed();const[a,l]=wy(t,s);this.setOutputMatrixTextureDriver(e,a,l)}setOutputMatrixWriteRegion(e,t,s,a){this.setOutputMatrixWriteRegionDriver(s,e,a,t)}setOutputPackedMatrixWriteRegion(e,t,s,a){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&cT(this.gl,this.program),Yw(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),Kn(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Kn(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=Xw(this.gl,At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const s=this.gl,a=this.getQueryTimerExtensionWebGL2(),l=s.createQuery();return s.beginQuery(a.TIME_ELAPSED_EXT,l),l}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const t=this.gl,s=this.getQueryTimerExtensionWebGL2();return void t.endQuery(s.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await Sr(()=>this.disposed||this.isQueryAvailable(e,At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(t===0)return null;if(t===2){const s=this.gl;return s.getQueryParameter(e,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(e,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(t===0)return!0;if(t===2){const s=this.gl,a=this.getQueryTimerExtensionWebGL2(),l=s.getQueryParameter(e,s.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(a.GPU_DISJOINT_EXT)),l&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),a=s.getQueryObjectEXT(e,s.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),a&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(t){let s=0;for(;s<t.length&&t[s]();++s);return s-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:s}=this.itemsToPoll[t];s()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||Sr(()=>(this.pollItems(),this.itemsToPoll.length===0))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),hT(this.gl,e,this.framebuffer),this.debug&&Yw(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(hT(this.gl,this.outputTexture,this.framebuffer),this.debug&&Yw(this.gl)):jI(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const s=t();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(e,t,s){this.throwIfDisposed();const a=this.gl;hT(a,e,this.framebuffer),this.debug&&Yw(a),this.outputTexture=e,Kn(a,()=>a.viewport(0,0,t,s)),Kn(a,()=>a.scissor(0,0,t,s))}setOutputMatrixWriteRegionDriver(e,t,s,a){this.throwIfDisposed(),Kn(this.gl,()=>this.gl.scissor(e,t,s,a))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}}const{addImpl:gB,bincountImpl:rC,bincountReduceImpl:yB,ceilImpl:xB,concatImpl:vB,equalImpl:bB,expImpl:wB,expm1Impl:_B,floorImpl:SB,gatherNdImpl:MB,gatherV2Impl:TB,greaterImpl:EB,greaterEqualImpl:AB,lessImpl:IB,lessEqualImpl:CB,linSpaceImpl:kB,logImpl:NB,maxImpl:RB,maximumImpl:LB,minimumImpl:DB,multiplyImpl:PB,negImpl:FB,notEqualImpl:OB,prodImpl:zB,rangeImpl:BB,rsqrtImpl:$B,sigmoidImpl:UB,simpleAbsImpl:iC,sliceImpl:VB,sparseFillEmptyRowsImpl:WB,sparseReshapeImpl:GB,sparseSegmentReductionImpl:sC,sqrtImpl:HB,stridedSliceImpl:jB,stringNGramsImpl:qB,stringSplitImpl:XB,stringToHashBucketFastImpl:YB,subImpl:KB,tileImpl:ZB,topKImpl:JB,transposeImpl:xT,uniqueImpl:QB}=$n;function aC(r,e){return["x","y","z","w","u","v"].slice(0,e).map(t=>`${r}.${t}`)}function za(r,e){return e===1?[r]:aC(r,e)}class e4{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(t===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{const s=za("rc",t),a=mi(t),l=function(m,f,y){if(m===1)return`rc > ${f[0]}`;let x="";for(let _=m-2;_<m;_++)x+=`${y[_]} >= ${f[_]}`,_<m-1&&(x+="||");return x}(t,e,s),c=function(m,f,y,x){if(m===1)return"";const _=x.slice(-2);return`
    int r = ${_[0]};
    int c = ${_[1]};
    int rp1 = r + 1;
    int cp1 = c + 1;

    bool cEdge = cp1 >= ${f};
    bool rEdge = rp1 >= ${y};
  `}(t,e[e.length-1],e[e.length-2],s),d=function(m,f){const y=m.length,x=function(_,A){const C=[];for(let L=0;L<=1;L++)for(let P=0;P<=1;P++){let U=`${L===0?"r":"rp1"}, ${P===0?"c":"cp1"}`;for(let q=2;q<_;q++)U=`${A[A.length-1-q]},`+U;C.push(U)}return C}(y,f);return y===1?`getA(rc),
            rc + 1 >= ${m[0]} ? 0. : getA(rc + 1),
            0, 0`:`getA(${x[0]}),
          cEdge ? 0. : getA(${x[1]}),
          rEdge ? 0. : getA(${x[2]}),
          rEdge || cEdge ? 0. : getA(${x[3]})`}(e,s);this.userCode=`
        void main() {
          ${a} rc = getOutputCoords();

          if(${l}) {
            setOutput(vec4(0));
          } else {
            ${c}

            setOutput(vec4(${d}));
          }
        }
      `}}}class oC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=cl(this.outputShape.length);let s="";for(let c=0;c<4;c++){let d="thisRC = rc;";c%2==1&&(d+="thisRC.z += 1;"),c>1&&(d+="thisRC.y += 1;"),s+=`
        ${d}
        ${c>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${c}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${c>0?"}":""}
      `}var a,l;this.userCode=`
      ${a=t,l=this.enableShapeUniforms,`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${l?function(c,d,m="index"){const f=function(y,x){const _=y.length,A=y.map(L=>`${x}[${L}]`),C=new Array(_-1);C[_-2]=A[_-1];for(let L=_-3;L>=0;--L)C[L]=`(${C[L+1]} * ${A[L+1]})`;return C}(c.map((y,x)=>x),d);return f.map((y,x)=>`int ${c[x]} = ${m} / ${f[x]}; ${x===f.length-1?`int ${c[x+1]} = ${m} - ${c[x]} * ${f[x]}`:`index -= ${c[x]} * ${f[x]}`};`).join("")}(["r","c","d"],"inputShape"):Dm(["r","c","d"],a)}
      return ivec3(r, c, d);
    }
  `}
      ${this.enableShapeUniforms?`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`:gT(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${s}

        setOutput(result);
      }
    `}}class t4{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,s){const a=uC(t,s),l=cC(e,a,s);l in this.freeTextures||(this.freeTextures[l]=[]),l in this.usedTextures||(this.usedTextures[l]=[]);const c=lC(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[l].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=c,this.log();const m=this.freeTextures[l].shift();return this.usedTextures[l].push(m),m}let d;return a===ra.PACKED_2X2_FLOAT32?d=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===ra.PACKED_2X2_FLOAT16?d=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===ra.UNPACKED_FLOAT32?d=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===ra.UNPACKED_FLOAT16?d=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===ra.PACKED_4X1_UNSIGNED_BYTE&&(d=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[l].push(d),this.numUsedTextures++,this._numBytesAllocated+=c,this.log(),d}releaseTexture(e,t,s,a){if(this.freeTextures==null)return;const l=uC(s,a),c=cC(t,l,a);c in this.freeTextures||(this.freeTextures[c]=[]);const d=lC(t,l,this.gpgpu.gl,this.gpgpu.textureConfig,a),m=At().get("WEBGL_DELETE_TEXTURE_THRESHOLD");m!==-1&&this._numBytesAllocated>m?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=d):(this.freeTextures[c].push(e),this.numFreeTextures++,this._numBytesFree+=d),this.numUsedTextures--;const f=this.usedTextures[c],y=f.indexOf(e);if(y<0)throw new Error("Cannot release a texture that was never provided by this texture manager");f.splice(y,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(const e in this.freeTextures)this.freeTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const e in this.usedTextures)this.usedTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function lC(r,e,t,s,a){const l=function(d,m){switch(d){case ra.PACKED_2X2_FLOAT32:return tC(m);case ra.PACKED_2X2_FLOAT16:return nC(m);case ra.UNPACKED_FLOAT32:return JI(m);case ra.UNPACKED_FLOAT16:return QI(m);case ra.PACKED_4X1_UNSIGNED_BYTE:return eC(m);default:throw new Error(`Unknown physical texture type ${d}`)}}(e,s);let c;if(a){const[d,m]=wy(r[0],r[1]);c=d*m}else{const[d,m]=Zx(r[0],r[1]);c=d*m}return c*function(d,m){const f=d;if(m===f.R32F)return 4;if(m===f.R16F)return 2;if(m===f.RGBA32F||m===d.RGBA)return 16;if(m===f.RGBA16F)return 8;throw new Error(`Unknown internal format ${m}`)}(t,l)}function uC(r,e){if(r===ul.UPLOAD)return ra.PACKED_2X2_FLOAT32;if(r===ul.RENDER||r==null)return function(t){return At().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?ra.PACKED_2X2_FLOAT32:ra.UNPACKED_FLOAT32:t?ra.PACKED_2X2_FLOAT16:ra.UNPACKED_FLOAT16}(e);if(r===ul.DOWNLOAD||r===ul.PIXELS)return ra.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function cC(r,e,t){return`${r[0]}_${r[1]}_${e}_${t}`}class zp{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=cl(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}}const hC="return abs(x);",Qw="return x;";class Iy{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=cl(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}}class n4{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,s=za("rc",t),a=mi(t),l=function(m,f){if(m===1)return"rc";let y="";for(let x=0;x<m;x++)y+=f[x],x<m-1&&(y+=",");return y}(t,s),c=s.slice(-2),d=t<=1?"rc":`vec2(${c.join(",")})`;this.userCode=`
      void main() {
        ${a} rc = getOutputCoords();
        vec4 packedInput = getA(${l});

        setOutput(getChannel(packedInput, ${d}));
      }
    `}}const r4=wp,vT={},i4=At().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class e1 extends Jt{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!At().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(e==null){const s=Mc(At().getNumber("WEBGL_VERSION"));this.binaryCache=((t=At().getNumber("WEBGL_VERSION"))in vT||(vT[t]={}),vT[t]),this.gpgpu=new mB(s),this.canvas=s.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new t4(this.gpgpu),this.numMBBeforeWarning=At().global.screen==null?1024:At().global.screen.height*At().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Ft(this,Ju())}nextDataId(){return e1.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,s){if((At().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||At().getBool("DEBUG"))&&this.checkNumericalProblems(e),s==="complex64"&&e!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const a={id:this.nextDataId()};return this.texData.set(a,{shape:t,dtype:s,values:e,usage:ul.UPLOAD,refCount:1}),a}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,s,a,l){if(At().getBool("DEBUG")&&this.checkNumericalProblems(t),a==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:s,dtype:a,values:t,usage:ul.UPLOAD,refCount:l})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:s,dtype:a,complexTensorInfos:l,slice:c,shape:d,isPacked:m}=t;if(c!=null){let _;_=m?new Iy(d,Qw):new zp(d,Qw);const A=this.runWebGLProgram(_,[{dataId:e,shape:d,dtype:a}],a),C=this.readSync(A.dataId);return this.disposeIntermediateTensorInfo(A),C}if(s!=null)return this.convertAndCacheOnCPU(e);if(a==="string")return s;const f=this.activeTimers!=null;let y,x;return f&&(y=di()),x=a==="complex64"?mu(this.readSync(l.real.dataId),this.readSync(l.imag.dataId)):this.getValuesFromTexture(e),f&&(this.downloadWaitMs+=di()-y),this.convertAndCacheOnCPU(e,x)}async read(e){if(this.pendingRead.has(e)){const C=this.pendingRead.get(e);return new Promise(L=>C.push(L))}const t=this.texData.get(e),{values:s,shape:a,slice:l,dtype:c,complexTensorInfos:d,isPacked:m}=t;if(l!=null){let C;C=m?new Iy(a,Qw):new zp(a,Qw);const L=this.runWebGLProgram(C,[{dataId:e,shape:a,dtype:c}],c),P=this.read(L.dataId);return this.disposeIntermediateTensorInfo(L),P}if(s!=null)return this.convertAndCacheOnCPU(e);if(!At().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&At().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let f,y,x=null;if(c!=="complex64"&&At().get("WEBGL_BUFFER_SUPPORTED")){f=this.decode(e);const C=this.texData.get(f.dataId);x=this.gpgpu.createBufferFromTexture(C.texture,...qw(a))}if(this.pendingRead.set(e,[]),c!=="complex64"&&await this.gpgpu.createAndWaitForFence(),c==="complex64"){const C=await Promise.all([this.read(d.real.dataId),this.read(d.imag.dataId)]);y=mu(C[0],C[1])}else if(x==null)y=this.getValuesFromTexture(e);else{const C=he(a);y=this.gpgpu.downloadFloat32MatrixFromBuffer(x,C)}if(f!=null&&this.disposeIntermediateTensorInfo(f),x!=null){const C=this.gpgpu.gl;Kn(C,()=>C.deleteBuffer(x))}const _=this.convertAndCacheOnCPU(e,y),A=this.pendingRead.get(e);return this.pendingRead.delete(e),A.forEach(C=>C(_)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Ju().removeDataId(e,this),this.pendingDeletes--),_}bufferSync(e){const t=this.readSync(e.dataId);let s=t;if(e.dtype==="string")try{s=t.map(a=>Mr(a))}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Er(e.shape,e.dtype,s)}checkNumericalProblems(e){if(e!=null)for(let t=0;t<e.length;t++){const s=e[t];if(!tB(s))throw At().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${s} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:t,dtype:s,isPacked:a}=this.texData.get(e),l=he(t);if(At().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const _=this.decode(e),A=this.texData.get(_.dataId),C=this.gpgpu.downloadMatrixFromPackedTexture(A.texture,...qw(t)).subarray(0,l);return this.disposeIntermediateTensorInfo(_),C}const c=At().getBool("WEBGL_PACK")&&a===!0,d=c?dT(t):t,m=c?new dB(d):new hB(d),f=this.runWebGLProgram(m,[{shape:d,dtype:s,dataId:e}],"float32"),y=this.texData.get(f.dataId),x=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(y.texture,y.texShape[0],y.texShape[1]).subarray(0,l);return this.disposeIntermediateTensorInfo(f),x}timerAvailable(){return At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,s=[];let a=!1;this.programTimersStack==null?(this.programTimersStack=s,a=!0):this.activeTimers.push(s),this.activeTimers=s,e();const l=at(this.activeTimers.map(m=>m.query)).filter(m=>m!=null),c=at(this.activeTimers.map(m=>m.name)).filter(m=>m!=null);this.activeTimers=t,a&&(this.programTimersStack=null);const d={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const m=await Promise.all(l);d.kernelMs=se(m),d.getExtraProfileInfo=()=>m.map((f,y)=>({name:c[y],ms:f})).map(f=>`${f.name}: ${f.ms}`).join(", ")}else d.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,d}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:di(),endMs:null}}endTimer(e){return At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=di(),e)}async getQueryTime(e){if(At().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:s}=this.texData.get(e);return s!=null&&(this.disposeData(s.real.dataId,t),this.disposeData(s.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:s,texShape:a,usage:l,isPacked:c,slice:d}=this.texData.get(e),m=d&&d.origDataId||e,f=this.dataRefCount.get(m);f>1?this.dataRefCount.set(m,f-1):(this.dataRefCount.delete(m),t!=null&&(this.numBytesInGPU-=this.computeBytes(a,s),this.textureManager.releaseTexture(t,a,l,c)));const y=this.texData.get(e);y.texture=null,y.texShape=null,y.isPacked=!1,y.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=i4){return At().getBool("WEBGL_CPU_FORWARD")&&e.every(s=>this.texData.get(s.dataId).texture==null&&he(s.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){sr("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return r4(e.shape,t)}packedUnaryOp(e,t,s){const a=new Iy(e.shape,t),l=this.compileAndRun(a,[e],s);return Ju().makeTensorFromDataId(l.dataId,l.shape,l.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&e.dtype!=="complex64"){const a=iC(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,a)}if(At().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,hC,e.dtype);const t=new zp(e.shape,hC),s=this.compileAndRun(t,[e]);return Ju().makeTensorFromDataId(s.dataId,s.shape,s.dtype)}makeTensorInfo(e,t,s){let a;if(t==="string"&&s!=null&&s.length>0&&$s(s[0])){const l=s.map(c=>Ya(c));a=this.write(l,e,t)}else a=this.write(s,e,t);return this.texData.get(a).usage=null,{dataId:a,shape:e,dtype:t}}makeOutput(e,t,s){const{dataId:a}=this.makeTensorInfo(e,t,s);return Ju().makeTensorFromDataId(a,e,t,this)}unpackTensor(e){const t=new n4(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new e4(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const s=[_y(e.shape),...Sy(e.shape)],a={dtype:e.dtype,shape:s,dataId:e.dataId},l=[_y(t),...Sy(t)],c=new oC(l,s),d=[s],m=this.runWebGLProgram(c,[a],e.dtype,d,!0);return{dataId:m.dataId,shape:t,dtype:m.dtype}}decode(e){const t=this.texData.get(e),{isPacked:s,shape:a,dtype:l}=t,c=dT(a);let d;const m=qw(c);d=s?new cB(c):new uB(c);const f=[m];return{dtype:l,shape:a,dataId:this.runWebGLProgram(d,[{shape:c,dtype:l,dataId:e}],l,f,!0).dataId}}runWebGLProgram(e,t,s,a,l=!1){const c=this.makeTensorInfo(e.outputShape,s),d=this.texData.get(c.dataId);if(e.packedOutput&&(d.isPacked=!0),e.outPackingScheme===Kx.DENSE){const P=qw(e.outputShape);d.texShape=P.map(U=>2*U)}if(e.outTexUsage!=null&&(d.usage=e.outTexUsage),he(c.shape)===0)return d.values=Ti(c.dtype,0),c;const m=[],f=t.map(P=>{if(P.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let U=this.texData.get(P.dataId);if(U.texture==null){if(!e.packedInputs&&he(P.shape)<=At().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:P.shape,texData:null,isUniform:!0,uniformValues:U.values};e.packedInputs&&(U.isPacked=!0,U.shape=P.shape)}else if(!!U.isPacked!=!!e.packedInputs)P=U.isPacked?this.unpackTensor(P):this.packTensor(P),m.push(P),U=this.texData.get(P.dataId);else if(U.isPacked&&!Zw(U.shape,P.shape)){const q=P,X=P.shape;P.shape=U.shape,P=this.packedReshape(P,X),m.push(P),U=this.texData.get(P.dataId),q.shape=X}return this.uploadToGPU(P.dataId),{shape:P.shape,texData:U,isUniform:!1}});this.uploadToGPU(c.dataId);const y={shape:c.shape,texData:d,isUniform:!1},x=function(P,U,q){let X="";U.concat(q).forEach(de=>{const Ie=de.texData!=null&&de.texData.slice!=null&&de.texData.slice.flatOffset>0;if(P.enableShapeUniforms&&!de.isUniform){const pe=de.texData.texShape,{useSqueezeShape:Be,uniformShape:ze,keptDims:Ve}=yT(P.packedInputs,de.shape,pe);let Qe="",nt="",ft="";if(ze.length===1&&P.packedInputs){const Ut=[Math.ceil(pe[0]/2),Math.ceil(pe[1]/2)];Qe=`${Ut[0]>1}_${Ut[1]>1}`}else if(ze.length!==2||P.packedInputs){if(ze.length>2&&!P.packedInputs){const Ut=Hn(ze);ft=`${Ut[0]===pe[1]}_${Ut[Ut.length-1]===pe[1]}`}}else nt=`${ze[0]>1}_${ze[1]>1}`;const yt=de.shape.length,Mt=ze.length===2&&Le(de.shape,pe),vt=he(de.shape)===1,Ct=gh(de.shape,q.shape),bt=!P.packedInputs&&yt===q.shape.length&&Le(pe,q.texData.texShape),Rt=P.packedInputs||ze.length>2?"":`${pe[0]>1}_${pe[1]>1}`;X+=`${yt}_${bt}_${Be?Ve:""}_${ze.length}_${vt}_${Ct}_${Mt}_${Qe}_${nt}_${ft}_${Rt}_${Ie}`}else{const pe=de.isUniform?"uniform":de.texData.texShape;X+=`${de.shape}_${pe}_${Ie}`}});const re=P.userCode;let oe=P.constructor.name;return oe+="_"+X+"_"+re+`${At().getNumber("WEBGL_VERSION")}`,oe}(e,f,y),_=this.getAndSaveBinary(x,()=>function(P,U,q,X){const re=q.map((bt,Rt)=>{const Ut={logicalShape:bt.shape,texShape:bt.isUniform?null:bt.texData.texShape,isUniform:bt.isUniform,isPacked:!bt.isUniform&&bt.texData.isPacked,flatOffset:null};return bt.texData!=null&&bt.texData.slice!=null&&bt.texData.slice.flatOffset>0&&(Ut.flatOffset=bt.texData.slice.flatOffset),{name:U.variableNames[Rt],shapeInfo:Ut}}),oe=re.map(bt=>bt.shapeInfo),de={logicalShape:X.shape,texShape:X.texData.texShape,isUniform:!1,isPacked:X.texData.isPacked,flatOffset:null},Ie=iB(re,de,U),pe=P.createProgram(Ie);let Be=null;const ze=P.getUniformLocation(pe,"NAN",!1);At().getNumber("WEBGL_VERSION")===1&&(Be=P.getUniformLocation(pe,"INFINITY",!1));const Ve=!1,Qe={},nt={},ft={};for(let bt=0;bt<U.variableNames.length;bt++){const Rt=U.variableNames[bt];Qe[Rt]=P.getUniformLocation(pe,Rt,Ve),Qe[`offset${Rt}`]=P.getUniformLocation(pe,`offset${Rt}`,Ve),U.enableShapeUniforms&&(nt[`${Rt}Shape`]=P.getUniformLocation(pe,`${Rt}Shape`,Ve),ft[`${Rt}TexShape`]=P.getUniformLocation(pe,`${Rt}TexShape`,Ve))}let yt,Mt,vt;U.enableShapeUniforms&&(yt=P.getUniformLocation(pe,"outShape",Ve),vt=P.getUniformLocation(pe,"outShapeStrides",Ve),Mt=P.getUniformLocation(pe,"outTexShape",Ve));const Ct=[];return U.customUniforms&&U.customUniforms.forEach((bt,Rt)=>{Ct[Rt]=P.getUniformLocation(pe,bt.name,Ve)}),{program:U,source:Ie,webGLProgram:pe,uniformLocations:Qe,customUniformLocations:Ct,inShapeInfos:oe,outShapeInfo:de,infLoc:Be,nanLoc:ze,inShapesLocations:nt,inTexShapesLocations:ft,outShapeLocation:yt,outShapeStridesLocation:vt,outTexShapeLocation:Mt}}(this.gpgpu,e,f,y)),A=this.activeTimers!=null;let C;A&&(C=this.startTimer()),function(P,U,q,X,re){U.program.enableShapeUniforms||(ZI(U.inShapeInfos,q),ZI([U.outShapeInfo],[X]));const oe=X.texData.texture,de=X.texData.texShape;X.texData.isPacked?P.setOutputPackedMatrixTexture(oe,de[0],de[1]):P.setOutputMatrixTexture(oe,de[0],de[1]),P.setProgram(U.webGLProgram),At().getNumber("WEBGL_VERSION")===1&&U.infLoc!==null&&P.gl.uniform1f(U.infLoc,1/0),U.nanLoc!==null&&P.gl.uniform1f(U.nanLoc,NaN),q.forEach((pe,Be)=>{const ze=U.program.variableNames[Be],Ve=U.uniformLocations[ze],Qe=U.uniformLocations[`offset${ze}`],nt=U.inShapesLocations[`${ze}Shape`],ft=U.inTexShapesLocations[`${ze}TexShape`];if(nt){const{uniformShape:yt}=yT(U.program.packedInputs,pe.shape,pe.texData.texShape);switch(yt.length){case 1:P.gl.uniform1iv(nt,new Int32Array(yt));break;case 2:P.gl.uniform2iv(nt,new Int32Array(yt));break;case 3:P.gl.uniform3iv(nt,new Int32Array(yt));break;case 4:P.gl.uniform4iv(nt,new Int32Array(yt))}}if(ft&&P.gl.uniform2i(ft,pe.texData.texShape[0],pe.texData.texShape[1]),Ve!=null)if(pe.isUniform)if(he(pe.shape)<2)P.gl.uniform1f(Ve,pe.uniformValues[0]);else{let yt=pe.uniformValues;yt instanceof Float32Array||(yt=new Float32Array(yt)),P.gl.uniform1fv(Ve,yt)}else pe.texData.slice!=null&&Qe!=null&&P.gl.uniform1i(Qe,pe.texData.slice.flatOffset),P.setInputMatrixTexture(pe.texData.texture,Ve,Be)});const Ie=U.outShapeLocation;if(Ie)switch(X.shape.length){case 1:P.gl.uniform1iv(Ie,new Int32Array(X.shape));break;case 2:P.gl.uniform2iv(Ie,new Int32Array(X.shape));break;case 3:P.gl.uniform3iv(Ie,new Int32Array(X.shape));break;case 4:P.gl.uniform4iv(Ie,new Int32Array(X.shape))}if(U.outShapeStridesLocation){const pe=Hn(X.shape);switch(X.shape.length){case 2:P.gl.uniform1iv(U.outShapeStridesLocation,new Int32Array(pe));break;case 3:P.gl.uniform2iv(U.outShapeStridesLocation,new Int32Array(pe));break;case 4:P.gl.uniform3iv(U.outShapeStridesLocation,new Int32Array(pe))}}U.outTexShapeLocation&&P.gl.uniform2i(U.outTexShapeLocation,X.texData.texShape[0],X.texData.texShape[1]),U.program.customUniforms&&re&&U.program.customUniforms.forEach((pe,Be)=>{const ze=U.customUniformLocations[Be],Ve=re[Be];if(pe.type==="float")P.gl.uniform1fv(ze,Ve);else if(pe.type==="vec2")P.gl.uniform2fv(ze,Ve);else if(pe.type==="vec3")P.gl.uniform3fv(ze,Ve);else if(pe.type==="vec4")P.gl.uniform4fv(ze,Ve);else if(pe.type==="int")P.gl.uniform1iv(ze,Ve);else if(pe.type==="ivec2")P.gl.uniform2iv(ze,Ve);else if(pe.type==="ivec3")P.gl.uniform3iv(ze,Ve);else{if(pe.type!=="ivec4")throw Error(`uniform type ${pe.type} is not supported yet.`);P.gl.uniform4iv(ze,Ve)}}),P.executeProgram()}(this.gpgpu,_,f,y,a),m.forEach(P=>this.disposeIntermediateTensorInfo(P)),A&&(C=this.endTimer(C),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(C)}));const L=At().get("WEBGL_FLUSH_THRESHOLD");if(L>0){const P=di();P-this.lastGlFlushTime>L&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=P)}if(!At().getBool("WEBGL_LAZILY_UNPACK")&&d.isPacked&&l===!1){const P=this.unpackTensor(c);return this.disposeIntermediateTensorInfo(c),P}return c}compileAndRun(e,t,s,a,l=!1){return s=s||t[0].dtype,this.runWebGLProgram(e,t,s,a,l)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(At().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement!="undefined"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=st(()=>{if(!At().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=At().getBool("DEBUG");At().set("DEBUG",!1);const t=this.abs(Yn(1e-8)).dataSync()[0];if(At().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:s,dtype:a,values:l,texture:c,usage:d,isPacked:m}=t;if(c!=null)return;const f=this.activeTimers!=null;let y;f&&(y=di());let x=t.texShape;if(x==null&&(x=function(_,A=!1){let C=At().getNumber("WEBGL_MAX_TEXTURE_SIZE");A&&(C*=2,(_=_.map((P,U)=>U>=_.length-2?Ce(_[U]):_[U])).length===1&&(_=[2,_[0]])),_.length!==2&&(_=Ui(_).newShape);let L=he(_);if(_.length<=1&&L<=C)return[1,L];if(_.length===2&&_[0]<=C&&_[1]<=C)return _;if(_.length===3&&_[0]*_[1]<=C&&_[2]<=C)return[_[0]*_[1],_[2]];if(_.length===3&&_[0]<=C&&_[1]*_[2]<=C)return[_[0],_[1]*_[2]];if(_.length===4&&_[0]*_[1]*_[2]<=C&&_[3]<=C)return[_[0]*_[1]*_[2],_[3]];if(_.length===4&&_[0]<=C&&_[1]*_[2]*_[3]<=C)return[_[0],_[1]*_[2]*_[3]];if(A){const P=_y(_);let U=2,q=2;return _.length&&([U,q]=Sy(_)),L=P*(U/2)*(q/2),on(L).map(X=>2*X)}return on(L)}(s,m),t.texShape=x),l!=null){const _=dT(s);let A,C=x[1],L=x[0];const P=l instanceof Uint8Array;m?([C,L]=wy(x[0],x[1]),A=new fB(_,P)):A=new pB(_,P);const U=this.makeTensorInfo([L,C],a);this.texData.get(U.dataId).usage=P?ul.PIXELS:ul.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(U.dataId),C,L,l);const q=[[L,C]],X=!0,re=this.runWebGLProgram(A,[U],a,q,X),oe=this.texData.get(re.dataId);t.texture=oe.texture,t.texShape=oe.texShape,t.isPacked=oe.isPacked,t.usage=oe.usage,this.disposeIntermediateTensorInfo(U),this.texData.delete(re.dataId),t.values=null,f&&(this.uploadWaitMs+=di()-y)}else{const _=this.acquireTexture(x,d,a,m);t.texture=_}}convertAndCacheOnCPU(e,t){const s=this.texData.get(e),{dtype:a}=s;return this.releaseGPUData(e),t!=null&&(s.values=function(l,c){if(c==="float32"||c==="complex64")return l;if(c==="int32"||c==="bool"){const d=c==="int32"?new Int32Array(l.length):new Uint8Array(l.length);for(let m=0;m<d.length;++m)d[m]=Math.round(l[m]);return d}throw new Error(`Unknown dtype ${c}`)}(t,a)),s.values}acquireTexture(e,t,s,a){if(this.numBytesInGPU+=this.computeBytes(e,s),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const l=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${l} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,a)}computeBytes(e,t){return e[0]*e[1]*Wa(t)}}e1.nextDataId=0,qd()&&$0("webgl",()=>new e1,2);class Cy{constructor(e,t,s){this.variableNames=["A","B"],this.outputShape=mr(t,s),this.enableShapeUniforms=cl(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}}class ev{constructor(e,t,s,a=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=mr(t,s);const l=this.outputShape.length;this.enableShapeUniforms=cl(l);let c="";if(a)if(l===0||he(this.outputShape)===1)c=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(c=`
          ${mi(l)} coords = getOutputCoords();
        `,l===1)this.enableShapeUniforms?c+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:c+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{const d=za("coords",l);this.enableShapeUniforms?c+=`
            bool nextRowOutOfBounds =
              (${d[l-2]} + 1) >= outShape[${l} - 2];
            bool nextColOutOfBounds =
              (${d[l-1]} + 1) >= outShape[${l} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:c+=`
            bool nextRowOutOfBounds =
              (${d[l-2]} + 1) >= ${this.outputShape[l-2]};
            bool nextColOutOfBounds =
              (${d[l-1]} + 1) >= ${this.outputShape[l-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${c}

        setOutput(result);
      }
    `}}function ko(r){const{inputs:e,backend:t}=r,{x:s}=e;return t.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const s4={kernelName:bd,backendName:"webgl",kernelFunc:ko};function Bp(r){const{inputs:e,backend:t}=r,{real:s,imag:a}=e,l=t.makeTensorInfo(s.shape,"complex64"),c=t.texData.get(l.dataId),d=ko({inputs:{x:s},backend:t}),m=ko({inputs:{x:a},backend:t});return c.complexTensorInfos={real:d,imag:m},l}const a4={kernelName:lf,backendName:"webgl",kernelFunc:Bp},dC="return (a < 0.) ? b * a : a;",pC=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,o4={kernelName:xf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{alpha:l}=s,c=t.makeTensorInfo([],"float32",qo(l,"float32")),d=At().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ev(pC,a.shape,c.shape):new Cy(dC,a.shape,c.shape),m=t.runWebGLProgram(d,[a,c],a.dtype);return t.disposeIntermediateTensorInfo(c),m}},fC="return (a < 0.) ? b * a : a;",mC=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,l4={kernelName:Ri,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{x:s,alpha:a}=e,l=At().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ev(mC,s.shape,a.shape):new Cy(fC,s.shape,a.shape);return t.runWebGLProgram(l,[s,a],s.dtype)}};function jr({opSnippet:r,packedOpSnippet:e,cpuKernelImpl:t,dtype:s}){return({inputs:a,backend:l})=>{const{x:c}=a,d=l,m=s||c.dtype;if(d.shouldExecuteOnCPU([c])&&t!=null){const y=d.texData.get(c.dataId),x=t(y.values,m);return d.makeTensorInfo(c.shape,m,x)}let f;return f=At().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&e!=null?new Iy(c.shape,e):new zp(c.shape,r),d.runWebGLProgram(f,[c],m)}}function ia({opSnippet:r,packedOpSnippet:e,checkOutOfBounds:t=!1,supportsComplex:s=!1,cpuKernelImpl:a,dtype:l}){return({inputs:c,backend:d})=>{const{a:m,b:f}=c,y=d;if(s&&m.dtype==="complex64"){const A=y.texData.get(m.dataId),C=y.texData.get(f.dataId),[L,P]=[[A.complexTensorInfos.real,C.complexTensorInfos.real],[A.complexTensorInfos.imag,C.complexTensorInfos.imag]].map(q=>{const[X,re]=q,oe={dataId:X.dataId,dtype:X.dtype,shape:m.shape},de={dataId:re.dataId,dtype:re.dtype,shape:f.shape},Ie=new Cy(r,m.shape,f.shape);return y.runWebGLProgram(Ie,[oe,de],On(X.dtype,re.dtype))}),U=Bp({inputs:{real:L,imag:P},backend:y});return y.disposeIntermediateTensorInfo(L),y.disposeIntermediateTensorInfo(P),U}const x=l||On(m.dtype,f.dtype);if((m.dtype==="string"||f.dtype==="string"||y.shouldExecuteOnCPU([m,f]))&&a!=null){const A=y.texData.get(m.dataId).values,C=y.texData.get(f.dataId).values,L=m.dtype==="string"?Uh(A):A,P=m.dtype==="string"?Uh(C):C,[U,q]=a(m.shape,f.shape,L,P,x),X=y.makeTensorInfo(q,x);return y.texData.get(X.dataId).values=U,X}let _;return _=At().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&e!=null?new ev(e,m.shape,f.shape,t):new Cy(r,m.shape,f.shape),y.runWebGLProgram(_,[m,f],x)}}function t1(r,e=!1){if(r==="linear")return"return x;";if(r==="relu")return e?`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`:`if (isnan(x)) return x;
  return (x < 0.0) ? 0.0 : x;
`;if(r==="elu")return e?`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`:"return (x >= 0.0) ? x : (exp(x) - 1.0);";if(r==="relu6")return e?`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`:`if (isnan(x)) return x;
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;if(r==="prelu")return e?mC:fC;if(r==="leakyrelu")return e?pC:dC;if(r==="sigmoid")return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}class gC{constructor(e,t,s,a=!1,l=!1,c=!1,d=null,m=!1,f=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=cl(this.outputShape.length);const y=a?e[1]:e[2],x=Math.ceil(y/2),_=a?"i * 2, rc.y":"rc.y, i * 2",A=l?"rc.z, i * 2":"i * 2, rc.z",C=a?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],L=l?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let P="",U="";d&&(P=m?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${d}
        }`:f?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${d}
        }`:`vec4 activation(vec4 x) {
          ${d}
        }`,U="result = activation(result);");const q=c?"result += getBiasAtOutCoords();":"";c&&this.variableNames.push("bias"),m&&this.variableNames.push("preluActivationWeights"),f&&this.variableNames.push("leakyreluAlpha");let X="rc.x",re="rc.x";e[0]<t[0]?X=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(re=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`
      ${P}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${x}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${x}; i++) {
          int batchA = ${X};
          int batchB = ${re};
          vec4 a = getMatrixA(batchA, ${_});
          vec4 b = getMatrixB(batchB, ${A});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${C[0]} * ${L[0]});
          result += (${C[1]} * ${L[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${q}

        ${U}

        setOutput(result);
      }
    `}}class yC{constructor(e,t,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=mr(t,s),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}}const xC="return a * b;";function bT(r){const{inputs:e,backend:t}=r,{a:s,b:a}=e,l=On(s.dtype,a.dtype);if(s.dtype==="complex64"){const d=t.texData.get(s.dataId),m=t.texData.get(a.dataId),f=new yC("return areal * breal - aimag * bimag;",s.shape,a.shape),y=new yC("return areal * bimag + aimag * breal;",s.shape,a.shape),x=[{dataId:d.complexTensorInfos.real.dataId,dtype:d.complexTensorInfos.real.dtype,shape:s.shape},{dataId:d.complexTensorInfos.imag.dataId,dtype:d.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:m.complexTensorInfos.real.dataId,dtype:m.complexTensorInfos.real.dtype,shape:a.shape},{dataId:m.complexTensorInfos.imag.dataId,dtype:m.complexTensorInfos.imag.dtype,shape:a.shape}],_=t.runWebGLProgram(f,x,"float32"),A=t.runWebGLProgram(y,x,"float32"),C=Bp({inputs:{real:_,imag:A},backend:t});return t.disposeIntermediateTensorInfo(_),t.disposeIntermediateTensorInfo(A),C}if(t.shouldExecuteOnCPU([s,a])){const d=t.texData.get(s.dataId),m=t.texData.get(a.dataId),[f,y]=PB(s.shape,a.shape,d.values,m.values,l),x=t.makeTensorInfo(y,l);return t.texData.get(x.dataId).values=f,x}let c;return c=At().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ev(xC,s.shape,a.shape):new Cy(xC,s.shape,a.shape),t.runWebGLProgram(c,[s,a],l)}const u4={kernelName:Vi,backendName:"webgl",kernelFunc:bT};function Rn(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{shape:l}=s,c=t,d=he(a.shape),m=Kr(l,d),f=he(m);Q(d===f,()=>`The new shape (${m}) has ${f} elements and the old shape (${a.shape}) has ${d} elements. The new shape and old shape must have the same number of elements.`);const y=c.texData.get(a.dataId);return!y.isPacked||Zw(a.shape,m)||y.texture!==null&&Zw(y.shape,m)?(c.incRef(a.dataId),{dataId:a.dataId,shape:m,dtype:a.dtype}):function(x,_,A){const C=[_y(x.shape),...Sy(x.shape)],L={dtype:x.dtype,shape:C,dataId:x.dataId},P=[_y(_),...Sy(_)],U=new oC(P,C),q=[C],X=A.runWebGLProgram(U,[L],x.dtype,q,!0);return{dataId:X.dataId,shape:_,dtype:X.dtype}}(a,m,c)}const c4={kernelName:Zi,backendName:"webgl",kernelFunc:Rn};class vC{constructor(e,t){this.variableNames=["x"];const{windowSize:s,batchSize:a,inSize:l,outSize:c}=e;this.outputShape=[a,c];const d=4*Math.floor(s/4),m=s%4;let f="sumValue += dot(values, ones);";if(t!=null){const x=1/t;f=`sumValue += dot(values * ${_t(x)?x.toPrecision(2):x}, ones);`}let y="";l%s>0&&(y=`
        if (inIdx < 0 || inIdx >= ${l}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${y}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${d}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${f}
        }

        int inIdx = inOffset + ${d};
        if (${m===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${f}
        } else if (${m===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${f}
        } else if (${m===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${f}
        }
        setOutput(sumValue);
      }
    `}}class h4{constructor(e,t){this.variableNames=["x"];const{windowSize:s,batchSize:a,inSize:l,outSize:c}=e;this.outputShape=[a,c];let d="0.0",m="";t==="prod"?d="1.0":t==="min"?(d="1.0 / 1e-20",m="min"):t==="max"&&(d="-1.0 / 1e-20",m="max");let f=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="sum"?f="sumValue":t==="prod"?f="prodValue":t==="all"?f="allValue":t==="any"&&(f="anyValue");const y=4*Math.floor(s/4),x=s%4;let _=`
      if (${t==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${t==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${m}(values, minMaxValue);
        if (${t==="min"} || ${t==="max"}) {
          minMaxValue = ${m}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,A="vec4";t==="all"?(d="1.0",_=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,A="bvec4"):t==="any"&&(d="0.0",_=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,A="bvec4");let C="";l%s>0&&(C=`
        if (inIdx < 0 || inIdx >= ${l}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${d};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${C}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${d});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${y}; i += 4) {
          int inIdx = inOffset + i;
          ${A} values = ${A}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${_}
        }

        int inIdx = inOffset + ${y};
        if (${x===1}) {
          ${A} values = ${A}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${_}
        } else if (${x===2}) {
          ${A} values = ${A}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${_}
        } else if (${x===3}) {
          ${A} values = ${A}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${_}
        }
        setOutput(${f});
      }
    `}}function Fm(r,e,t,s){const a=function(c){const d=[];for(;d.length===0||d[d.length-1].outSize!==1;){const m=d.length?d[d.length-1].outSize:c[1],f=Qg(m);d.push({inSize:m,windowSize:f,outSize:Math.ceil(m/f)})}return d}(r.shape);let l=r;for(let c=0;c<a.length;c++){const{inSize:d,windowSize:m,outSize:f}=a[c];let y,x;y=t==="mean"?c===0?new vC({windowSize:m,inSize:d,batchSize:r.shape[0],outSize:f},d):new vC({windowSize:m,inSize:d,batchSize:r.shape[0],outSize:f}):new h4({windowSize:m,inSize:d,batchSize:r.shape[0],outSize:f},t),x=l,l=s.runWebGLProgram(y,[l],e),x.dataId!==r.dataId&&s.disposeIntermediateTensorInfo(x)}return l}class d4{constructor(e,t){this.variableNames=["A"];const s=new Array(e.length);for(let c=0;c<s.length;c++)s[c]=e[t[c]];this.outputShape=s,this.rank=s.length;const a=mi(this.rank),l=function(c){const d=c.length;if(d>6)throw Error(`Transpose for rank ${d} is not yet supported`);const m=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],f=new Array(d);for(let y=0;y<c.length;y++)f[c[y]]=m[y];return f.join()}(t);this.userCode=`
    void main() {
      ${a} resRC = getOutputCoords();
      setOutput(getA(${l}));
    }
    `}}class p4{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(e.length);for(let y=0;y<s.length;y++)s[y]=e[t[y]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const a=mi(this.rank),l=aC("rc",this.rank),c=new Array(this.rank);for(let y=0;y<t.length;y++)c[t[y]]=l[y];const d=`vec2(${c.slice(-2).join()})`,m=`++${l[this.rank-1]} < ${s[this.rank-1]}`,f=`getChannel(getA(${c.join()}), ${d})`;this.userCode=`
    void main() {
      ${a} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${f};
      if(${m}) {
        result[1] = ${f};
      }
      --${l[this.rank-1]};
      if(++${l[this.rank-2]} < ${s[this.rank-2]}) {
        result[2] = ${f};
        if(${m}) {
          result[3] = ${f};
        }
      }
      setOutput(result);
    }
    `}}function n1(r,e,t){const s=At().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new p4(r.shape,e):new d4(r.shape,e);return t.runWebGLProgram(s,[r],r.dtype)}function r1(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s;return function(d,m,f,y){const x=m,_=d.shape.length,A=ir(x,d.shape);let C=A;const L=Hi(C,_),P=L!=null;let U=d;P&&(U=n1(d,L,y),C=Ai(C.length,_)),Di("sum",C,_);const[q,X]=ts(U.shape,C);let re=q;f&&(re=Gi(q,A));const oe=he(X),de=Rn({inputs:{x:U},attrs:{shape:[he(d.shape)/oe,oe]},backend:y}),Ie=Fm(de,Ff(d.dtype),"sum",y),pe=Rn({inputs:{x:Ie},attrs:{shape:re},backend:y});return y.disposeIntermediateTensorInfo(de),y.disposeIntermediateTensorInfo(Ie),P&&y.disposeIntermediateTensorInfo(U),pe}(a,l,c,t)}const f4={kernelName:If,backendName:"webgl",kernelFunc:r1};function Ba(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{perm:l}=s,c=t,d=a.shape.length,m=new Array(d);for(let y=0;y<m.length;y++)m[y]=a.shape[l[y]];let f;if(c.shouldExecuteOnCPU([a])){const y=c.texData.get(a.dataId).values,x=xT(y,a.shape,a.dtype,l,m);f=c.makeTensorInfo(m,a.dtype),c.texData.get(f.dataId).values=x}else f=n1(a,l,c);return f}const m4={kernelName:$d,backendName:"webgl",kernelFunc:Ba};function i1({a:r,b:e,transposeA:t,transposeB:s,backend:a,bias:l=null,preluActivationWeights:c=null,leakyreluAlpha:d=0,activation:m=null}){const f=r.shape.length,y=e.shape.length,x=t?r.shape[f-2]:r.shape[f-1],_=s?e.shape[y-1]:e.shape[y-2],A=t?r.shape[f-1]:r.shape[f-2],C=s?e.shape[y-2]:e.shape[y-1],L=r.shape.slice(0,-2),P=e.shape.slice(0,-2),U=he(L),q=he(P);Q(f>=2&&y>=2&&(U===q||U===1||q===1),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${L}) and (${P}).`);const X=(U>q?r.shape.slice(0,-2):e.shape.slice(0,-2)).concat([A,C]);Q(x===_,()=>`Error in matMul: inner shapes (${x}) and (${_}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t} and transposeB=${s} must match.`);const re=t?[U,x,A]:[U,A,x],oe=s?[q,C,_]:[q,_,C],de=Rn({inputs:{x:r},backend:a,attrs:{shape:re}}),Ie=Rn({inputs:{x:e},backend:a,attrs:{shape:oe}}),pe=[de,Ie],Be=Math.max(U,q),ze=t?de.shape[1]:de.shape[2],Ve=l!=null,Qe=c!=null,nt=m==="leakyrelu",ft=m!=null?t1(m,!0):null;let yt;if((A===1||C===1)&&ze>1e3&&(Ve||Qe||nt||ft!=null)===!1){let vt=de,Ct=Ie;t&&(vt=Ba({inputs:{x:de},backend:a,attrs:{perm:[0,2,1]}}),pe.push(vt)),s&&(Ct=Ba({inputs:{x:Ie},backend:a,attrs:{perm:[0,2,1]}}),pe.push(Ct));const bt=C===1;let Rt=vt;C!==1&&(Rt=Rn({inputs:{x:vt},backend:a,attrs:{shape:[Be,ze,1]}}),pe.push(Rt));const Ut=C===1?2:1;let Zt=Ct;bt&&(Zt=Rn({inputs:{x:Ct},backend:a,attrs:{shape:[Be,1,ze]}}),pe.push(Zt));const qt=bT({inputs:{a:Rt,b:Zt},backend:a});yt=r1({inputs:{x:qt},backend:a,attrs:{axis:Ut,keepDims:!0}}),pe.push(qt)}else{const vt=On(r.dtype,e.dtype),Ct=new gC(re,oe,[Be,A,C],t,s,Ve,ft,Qe,nt),bt=[de,Ie];if(l!=null&&bt.push(l),Qe&&bt.push(c),nt){const Rt=a.makeTensorInfo([],"float32",qo(d,"float32"));bt.push(Rt),pe.push(Rt)}yt=a.runWebGLProgram(Ct,bt,vt)}const Mt=Rn({inputs:{x:yt},backend:a,attrs:{shape:X}});pe.push(yt);for(const vt of pe)a.disposeIntermediateTensorInfo(vt);return Mt}const g4={kernelName:Wu,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{a,b:l,bias:c,preluActivationWeights:d}=e,{transposeA:m,transposeB:f,activation:y,leakyreluAlpha:x}=s;return i1({a,b:l,transposeA:m,transposeB:f,backend:t,bias:c,preluActivationWeights:d,leakyreluAlpha:x,activation:y})}},bC="return abs(x);",y4={kernelName:Us,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{x:s}=e;if(t.shouldExecuteOnCPU([s])&&s.dtype!=="complex64"){const l=t.texData.get(s.dataId),c=iC(l.values);return t.makeTensorInfo(s.shape,s.dtype,c)}let a;return a=At().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Iy(s.shape,bC):new zp(s.shape,bC),t.runWebGLProgram(a,[s],s.dtype)}},x4=jr({opSnippet:`if (isnan(x)) return x;
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`}),v4={kernelName:oi,backendName:"webgl",kernelFunc:x4},b4=jr({opSnippet:`if (isnan(x)) return x;
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`}),w4={kernelName:ds,backendName:"webgl",kernelFunc:b4},wC="return a + b;",_4=ia({opSnippet:wC,packedOpSnippet:wC,supportsComplex:!0,cpuKernelImpl:gB}),S4={kernelName:li,backendName:"webgl",kernelFunc:_4};class M4{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((l,c)=>`T${c}`);const s=[];this.variableNames.forEach(l=>{s.push(`float v${l} = get${l}AtOutCoords();`)});const a=this.variableNames.map(l=>`v${l}`).join(" + ");this.userCode=`
      void main() {
        ${s.join(`
        `)}

        float result = ${a};
        setOutput(result);
      }
    `}}class T4{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((l,c)=>`T${c}`);const s=[];this.variableNames.forEach(l=>{s.push(`vec4 v${l} = get${l}AtOutCoords();`)});const a=this.variableNames.map(l=>`v${l}`).join(" + ");this.userCode=`
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${a};
        setOutput(result);
      }
    `}}const E4={kernelName:Lc,backendName:"webgl",kernelFunc:function r(e){const{inputs:t,backend:s}=e,a=t;if(a.length===1)return ko({inputs:{x:a[0]},backend:s});if(a.length>At().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const m=Math.floor(a.length/2),f=r({inputs:a.slice(0,m),backend:s}),y=r({inputs:a.slice(m),backend:s});return r({inputs:[f,y],backend:s})}const l=a.map(m=>m.dtype).reduce((m,f)=>On(m,f)),c=a.map(m=>m.shape),d=At().getBool("WEBGL_PACK")?new T4(a[0].shape,c):new M4(a[0].shape,c);return s.runWebGLProgram(d,a,l)}},A4={kernelName:td,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s,d=a.shape.length,m=ir(l,a.shape);let f=m;const y=Hi(f,d);let x=a;y!=null&&(x=Ba({inputs:{x:a},backend:t,attrs:{perm:y}}),f=Ai(f.length,d)),Di("all",f,d);const[_,A]=ts(x.shape,f),C=Rn({inputs:{x},backend:t,attrs:{shape:[-1,he(A)]}}),L=Fm(C,C.dtype,"all",t);let P;return P=Rn(c?{inputs:{x:L},backend:t,attrs:{shape:Gi(_,m)}}:{inputs:{x:L},backend:t,attrs:{shape:_}}),t.disposeIntermediateTensorInfo(C),t.disposeIntermediateTensorInfo(L),y!=null&&t.disposeIntermediateTensorInfo(x),P}},I4={kernelName:nd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s,d=a.shape.length,m=ir(l,a.shape);let f=m;const y=Hi(f,d);let x=a;y!=null&&(x=Ba({inputs:{x:a},backend:t,attrs:{perm:y}}),f=Ai(f.length,d)),Di("any",f,d);const[_,A]=ts(x.shape,f),C=Rn({inputs:{x},backend:t,attrs:{shape:[-1,he(A)]}}),L=Fm(C,C.dtype,"any",t);let P;return P=Rn(c?{inputs:{x:L},backend:t,attrs:{shape:Gi(_,m)}}:{inputs:{x:L},backend:t,attrs:{shape:_}}),t.disposeIntermediateTensorInfo(C),t.disposeIntermediateTensorInfo(L),y!=null&&t.disposeIntermediateTensorInfo(x),P}};class C4{constructor(e,t,s){this.variableNames=["A"];const{windowSize:a,batchSize:l,outSize:c}=e;s||this.variableNames.push("bestIndicesA"),this.outputShape=[l,c];const d=t==="max"?">":"<",m=s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${a};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${a}; i++) {
          int inIdx = ${m};
          float candidate = getA(batch, inIdx);
          if (candidate ${d} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}}class k4{constructor(e,t,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Q(e.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const l=e[e.length-1],c=Math.ceil(l/t);this.outputShape=e.slice(0,-1),c>1&&this.outputShape.push(c),a||this.variableNames.push("bestIndicesA");const d=this.outputShape,m=d.length,f=mi(m),y=za("coords",m);let x,_;if(c===1){_=m+1;const pe=mi(_);x=`
        ${pe} sourceLocR = ${pe}(${y.join()}, 0);
        ++${y[m-1]};
        ${pe} sourceLocG = ${pe}(${y.join()}, 0);
        ++${y[m-2]};
        ${pe} sourceLocA = ${pe}(${y.join()}, 0);
        --${y[m-1]};
        ${pe} sourceLocB = ${pe}(${y.join()}, 0);
        --${y[m-2]};`}else _=m,x=`
        ${f} sourceLocR = coords;
        ++${y[m-1]};
        ${f} sourceLocG = coords;
        ++${y[m-2]};
        ${f} sourceLocA = coords;
        --${y[m-1]};
        ${f} sourceLocB = coords;
        --${y[m-2]};`;const A=["x","y","z","w","u","v"].slice(0,_),C="."+A[_-1],L=A.map(pe=>"int "+pe),P=za("sourceLocR",_-1).concat("inIdx.r"),U=za("sourceLocG",_-1).concat("inIdx.g"),q=za("sourceLocB",_-1).concat("inIdx.b"),X=za("sourceLocA",_-1).concat("inIdx.a"),re=s==="max"?"greaterThan":"lessThan",oe=a?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${P.join()}),
                             getBestIndicesAChannel(${U.join()}),
                             getBestIndicesAChannel(${q.join()}),
                             getBestIndicesAChannel(${X.join()})));`,de=`vec4(
            getAChannel(${P.join()}),
            hasNextCol ? getAChannel(${U.join()}) : 0.,
            hasNextRow ? getAChannel(${q.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${X.join()}) : 0.)`,Ie=a?"":`
      float getBestIndicesAChannel(${L.join()}) {
        return getChannel(getBestIndicesA(${A.join()}),
                                          vec2(${A.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${L.join()}) {
        return getChannel(getA(${A.join()}),
                               vec2(${A.slice(-2).join()}));
      }
      ${Ie}
      void main() {
        ${f} coords = getOutputCoords();
        bool hasNextCol = ${y[m-1]} < ${d[m-1]-1};
        bool hasNextRow = ${y[m-2]} < ${d[m-2]-1};
        ${x}
        ivec4 srcIdx = ivec4(sourceLocR${C}, sourceLocG${C},
          sourceLocB${C}, sourceLocA${C}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${de};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${oe}
          vec4 candidate = ${de};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${re}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}}function _C(r,e,t,s=null){let a=e.shape[0],l=e.shape[1];s!=null&&(a=s.shape[0],l=s.shape[1]);const c=Qg(l),d={windowSize:c,inSize:l,batchSize:a,outSize:Math.ceil(l/c)},m=new C4(d,t,s==null),f=[e];s!=null&&f.push(s);const y=r.runWebGLProgram(m,f,"int32");if(y.shape[1]===1)return y;const x=_C(r,e,t,y);return r.disposeIntermediateTensorInfo(y),x}function SC(r,e,t,s=null){const a=s!=null?s.shape:e.shape,l=Qg(a[a.length-1]),c=new k4(a,l,t,s==null),d=s==null?[e]:[e,s],m=r.runWebGLProgram(c,d,"int32");if(m.shape.length===e.shape.length){const f=SC(r,e,t,m);return r.disposeIntermediateTensorInfo(m),f}return m}function MC(r,e,t,s){const a=[t];if(Di("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,e.shape.length),!At().getBool("WEBGL_PACK_REDUCE")||e.shape.length<=2){const l=[],c=r.texData.get(e.dataId);let d=e;c!==null&&c.isPacked&&(d=r.unpackTensor(e),l.push(d));const[m,f]=ts(d.shape,a),y=he(f),x=Rn({inputs:{x:d},backend:r,attrs:{shape:[-1,y]}});l.push(x);const _=_C(r,x,s);l.push(_);const A=Rn({inputs:{x:_},backend:r,attrs:{shape:m}});return l.forEach(C=>r.disposeIntermediateTensorInfo(C)),A}return SC(r,e,s)}const N4={kernelName:rd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l}=s;let c=ir(l,a.shape);const d=Hi(c,a.shape.length);let m=a;const f=[];d!=null&&(m=Ba({inputs:{x:a},backend:t,attrs:{perm:d}}),f.push(m),c=Ai(c.length,m.shape.length)),Di("argMax",[c[0]],m.shape.length);const y=MC(t,m,c[0],"max");return f.forEach(x=>t.disposeIntermediateTensorInfo(x)),y}},R4={kernelName:Dc,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l}=s;let c=ir(l,a.shape);const d=Hi(c,a.shape.length);let m=a;const f=[];d!=null&&(m=Ba({inputs:{x:a},backend:t,attrs:{perm:d}}),f.push(m),c=Ai(c.length,m.shape.length)),Di("argMin",[c[0]],m.shape.length);const y=MC(t,m,c[0],"min");return f.forEach(x=>t.disposeIntermediateTensorInfo(x)),y}},L4=jr({opSnippet:`if (isnan(x)) return x;
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`}),D4={kernelName:Lu,backendName:"webgl",kernelFunc:L4},P4=jr({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),F4={kernelName:Pc,backendName:"webgl",kernelFunc:P4},O4=jr({opSnippet:`if (isnan(x)) return x;
  return atan(x);
`}),z4={kernelName:Fc,backendName:"webgl",kernelFunc:O4},B4=ia({opSnippet:`
  if (isnan(a)) return a;
  if (isnan(b)) return b;

  return atan(a, b);
`,packedOpSnippet:`
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;

  return result;
`}),$4={kernelName:zc,backendName:"webgl",kernelFunc:B4},U4=jr({opSnippet:`if (isnan(x)) return x;
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`}),V4={kernelName:Oc,backendName:"webgl",kernelFunc:U4};class tv{constructor(e,t,s,a=!1,l=!1){if(this.variableNames=["x"],t==="avg"&&s)throw new Error("Cannot compute positions for average pool.");const c=e.filterWidth,d=e.strideHeight,m=e.strideWidth,f=e.dilationHeight,y=e.dilationWidth,x=e.effectiveFilterHeight,_=e.effectiveFilterWidth,A=e.padInfo.top,C=e.padInfo.left;this.outputShape=e.outShape;const L=t==="avg",P=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,U=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let q="0.0";if(L||(q="-1.0 / 1e-20"),s){const Ie=">=";return void(this.userCode=`
        const ivec2 strides = ivec2(${d}, ${m});
        const ivec2 pads = ivec2(${A}, ${C});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${x};
              wR += ${f}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${_};
                wC += ${y}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${Ie} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${a?l?P:U:`wR * ${_} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `)}let X=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(X="avgValue / count");const re=4*Math.floor(c/4),oe=c%4,de=`
      if (${L}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${d}, ${m});
      const ivec2 pads = ivec2(${A}, ${C});
      const float initializationValue = ${q};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${q});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${x};
            wR += ${f}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${re}; wC += 4) {
            int xC = xCCorner + wC * ${y};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${y}, d),
              getValue(batch, xR, xC + 2 * ${y}, d),
              getValue(batch, xR, xC + 3 * ${y}, d)
            );

            ${de}
          }

          int xC = xCCorner + ${re};
          if (${oe===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${de}
          } else if (${oe===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${y}, d),
              initializationValue,
              initializationValue
            );

            ${de}
          } else if (${oe===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${y}, d),
              getValue(batch, xR, xC + 2 * ${y}, d),
              initializationValue
            );

            ${de}
          }
        }
        setOutput(${X});
      }
    `}}class wT{constructor(e,t,s,a=!1,l=!1){if(this.variableNames=["x"],t==="avg"&&s)throw new Error("Cannot compute positions for average pool.");const c=e.filterWidth,d=e.strideDepth,m=e.strideHeight,f=e.strideWidth,y=e.dilationDepth,x=e.dilationHeight,_=e.dilationWidth,A=e.effectiveFilterDepth,C=e.effectiveFilterHeight,L=e.effectiveFilterWidth,P=e.padInfo.front,U=e.padInfo.top,q=e.padInfo.left;this.outputShape=e.outShape;const X=t==="avg";let re="0.0";if(X||(re="-1.0 / 1e-20"),s){const Be=">=";return void(this.userCode=`
        const ivec3 strides =
            ivec3(${d}, ${m}, ${f});
        const ivec3 pads = ivec3(${P}, ${U}, ${q});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${A};
              wD += ${y}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${C};
                wR += ${x}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${L};
                  wC += ${_}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${Be} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${a?l?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${C} * ${L} +
                      wR * ${L} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `)}let oe=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(oe="avgValue / count");const de=4*Math.floor(c/4),Ie=c%4,pe=`
      if (${X}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${d}, ${m}, ${f});
      const ivec3 pads = ivec3(${P}, ${U}, ${q});
      const float initializationValue = ${re};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${re});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${A};
            wD += ${y}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${C};
            wR += ${x}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${de}; wC += 4) {
              int xC = xCCorner + wC * ${_};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${_}, ch),
                getValue(batch, xD, xR, xC + 2 * ${_}, ch),
                getValue(batch, xD, xR, xC + 3 * ${_}, ch)
              );

              ${pe}
            }

            int xC = xCCorner + ${de};
            if (${Ie===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${pe}
            } else if (${Ie===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${_}, ch),
                initializationValue,
                initializationValue
              );

              ${pe}
            } else if (${Ie===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${_}, ch),
                getValue(batch, xD, xR, xC + 2 * ${_}, ch),
                initializationValue
              );

              ${pe}
            }
          }
          setOutput(${oe});
        }
      }
    `}}const W4={kernelName:id,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e;Jx(a,"avgPool");const{filterSize:l,strides:c,pad:d,dimRoundingMode:m}=s;Q(es(c,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${c} and dilations '1'`);const f=ma(a.shape,l,c,1,d,m);if(f.filterWidth===1&&f.filterHeight===1&&Le(f.inShape,f.outShape))return ko({inputs:{x:a},backend:t});const y=new tv(f,"avg",!1);return t.runWebGLProgram(y,[a],"float32")}},G4={kernelName:sd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{filterSize:l,strides:c,pad:d,dimRoundingMode:m,dataFormat:f}=s,y=bo(a.shape,l,c,[1,1,1],d,m,f),x=new wT(y,"avg",!1);return t.runWebGLProgram(x,[a],"float32")}};class H4{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,s=e.filterWidth,a=e.strideHeight,l=e.strideWidth,c=e.dilationHeight,d=e.dilationWidth,m=e.effectiveFilterHeight,f=e.effectiveFilterWidth,y=m-1-e.padInfo.top,x=f-1-e.padInfo.left,_=1/(t*s);this.userCode=`
      const ivec2 pads = ivec2(${y}, ${x});
      const float avgMultiplier = float(${_});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m};
            wR += ${c}) {
          float dyR = float(dyRCorner + wR) / ${a}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${f};
            wC+= ${d}) {
            float dyC = float(dyCCorner + wC) / ${l}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}}class j4{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,s=e.filterHeight,a=e.filterWidth,l=e.strideDepth,c=e.strideHeight,d=e.strideWidth,m=e.dilationDepth,f=e.dilationHeight,y=e.dilationWidth,x=e.effectiveFilterDepth,_=e.effectiveFilterHeight,A=e.effectiveFilterWidth,C=x-1-e.padInfo.front,L=_-1-e.padInfo.top,P=A-1-e.padInfo.left,U=1/(t*s*a);this.userCode=`
      const ivec3 pads = ivec3(${C}, ${L}, ${P});
      const float avgMultiplier = float(${U});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${x};
            wD += ${m}) {
          float dyD = float(dyDCorner + wD) / ${l}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${_};
              wR += ${f}) {
            float dyR = float(dyRCorner + wR) / ${c}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${A};
                wC += ${y}) {
              float dyC = float(dyCCorner + wC) / ${d}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}const q4={kernelName:af,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,input:l}=e,c=l,{filterSize:d,strides:m,pad:f,dimRoundingMode:y}=s,x=bo(c.shape,d,m,[1,1,1],f,y),_=new j4(x);return t.runWebGLProgram(_,[a],c.dtype)}},X4={kernelName:sf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,input:l}=e,c=l;Jx([a,l],"avgPoolGrad");const{filterSize:d,strides:m,pad:f}=s,y=ma(c.shape,d,m,1,f),x=new H4(y);return t.runWebGLProgram(x,[a],c.dtype)}},Y4={kernelName:ad,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{a,b:l}=e,{transposeA:c,transposeB:d}=s;return i1({a,b:l,transposeA:c,transposeB:d,backend:t})}};class K4{constructor(e,t,s,a,l,c){this.outputShape=[],this.variableNames=["x","mean","variance"],mr(e,t),mr(e,s);let d="0.0";a!=null&&(mr(e,a),this.variableNames.push("offset"),d="getOffsetAtOutCoords()");let m="1.0";l!=null&&(mr(e,l),this.variableNames.push("scale"),m="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${d};
        float scale = ${m};
        float inv = scale * inversesqrt(variance + float(${c}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}}class Z4{constructor(e,t,s,a,l,c){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],mr(e,t),mr(e,s);let d="vec4(0.0)";a!=null&&(mr(e,a),this.variableNames.push("offset"),d="getOffsetAtOutCoords()");let m="vec4(1.0)";l!=null&&(mr(e,l),this.variableNames.push("scale"),m="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${d};
        vec4 scale = ${m};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${c}));

        setOutput((x - mean) * inv + offset);
      }
    `}}const J4={kernelName:vd,backendName:"webgl",kernelFunc:({inputs:r,backend:e,attrs:t})=>{const{x:s,mean:a,variance:l,offset:c,scale:d}=r;Q(a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),Q(c==null||a.shape.length===c.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),Q(d==null||a.shape.length===d.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:m}=t;m==null&&(m=.001);const f=[s,a,l];let y=null;c!=null&&(y=c.shape,f.push(c));let x=null;d!=null&&(x=d.shape,f.push(d));const _=At().getBool("WEBGL_PACK_NORMALIZATION")?new Z4(s.shape,a.shape,l.shape,y,x,m):new K4(s.shape,a.shape,l.shape,y,x,m);return e.runWebGLProgram(_,f,f[0].dtype)}};class Q4{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=mi(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function(l){if(l===1)return"sourceLoc";if(l<=6)return _T.slice(0,l).map(c=>"sourceLoc."+c).join(",");throw Error(`Slicing for rank ${l} is not yet supported`)}(this.rank);let a;a=`
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${e.map((l,c)=>`sourceLoc.${_T[c]} = start[${c}] + coords.${_T[c]};`).join(`
`)}
      `,this.userCode=`
      void main() {
        ${a}
        setOutput(getSource(${s}));
      }
    `}}const _T=["x","y","z","w","u","v"];class e${constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=mi(this.rank),s=za("coords",this.rank),a=za("sourceLoc",this.rank),l=this.rank===1?"sourceLoc":`vec2(${a.slice(-2).join()})`,c=`getChannel(getSource(${a.join()}), ${l})`,d=`
      result.x = ${c};
      if (++${s[this.rank-1]} < ${e[this.rank-1]}) {
        ++${a[this.rank-1]};
        result.y = ${c};
        --${a[this.rank-1]};
      }
    `,m=this.rank===1?"":`
      --${s[this.rank-1]};
      if (++${s[this.rank-2]} < ${e[this.rank-2]}) {
        ++${a[this.rank-2]};
        result.z = ${c};
        if (++${s[this.rank-1]} < ${e[this.rank-1]}) {
          ++${a[this.rank-1]};
          result.w = ${c};
        }
      }
    `,f=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((y,x)=>`start[${x}]`).join()});`:e.map((y,x)=>`${a[x]} = ${s[x]} + start[${x}];`).join(`
`);this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${f}
        vec4 result = vec4(0.);
        ${d}
        ${m}
        setOutput(result);
      }
    `}}function ky(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{begin:l,size:c}=s,[d,m]=yg(a,l,c);if(L0(a,d,m),he(m)===0)return t.makeTensorInfo(m,a.dtype,[]);if(t.shouldExecuteOnCPU([a])||a.dtype==="string"){const x=t.texData.get(a.dataId),_=VB(x.values,d,m,a.shape,a.dtype);return t.makeTensorInfo(m,a.dtype,_)}const{isPacked:f}=t.texData.get(a.dataId),y=D0(a.shape,d,m);if(f||!y){const x=At().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new e$(m):new Q4(m),_=[d];return t.runWebGLProgram(x,[a],a.dtype,_)}return t.uploadToGPU(a.dataId),function(x,_,A,C){const L=C.texData.get(x.dataId),P=C.makeTensorInfo(A,x.dtype),U=C.texData.get(P.dataId);Object.assign(U,L),U.refCount=1,U.shape=A,U.dtype=x.dtype;let q=P0(_,Hn(x.shape));L.slice&&(q+=L.slice.flatOffset),U.slice={flatOffset:q,origDataId:L.slice&&L.slice.origDataId||x.dataId};const X=C.dataRefCount.get(U.slice.origDataId)||1;return C.dataRefCount.set(U.slice.origDataId,X+1),P}(a,d,m,t)}const t$={kernelName:ho,backendName:"webgl",kernelFunc:ky},n$={kernelName:od,backendName:"webgl",kernelFunc:r=>{const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{blockShape:l,crops:c}=s;Q(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const d=l.reduce((q,X)=>q*X),m=pi(a.shape,l,d),f=_m(m.length,l.length),y=wi(a.shape,l,d),x=Tp(c,l.length),_=ey(y,c,l.length),A=[],C=Rn({inputs:{x:a},backend:t,attrs:{shape:m}}),L=Ba({inputs:{x:C},backend:t,attrs:{perm:f}}),P=Rn({inputs:{x:L},backend:t,attrs:{shape:y}}),U=ky({inputs:{x:P},backend:t,attrs:{begin:x,size:_}});return A.push(C),A.push(L),A.push(P),A.forEach(q=>t.disposeIntermediateTensorInfo(q)),U}},r$={kernelName:of,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,weights:l}=e,{size:c}=s,d=t.readSync(a.dataId),m=t.readSync(l.dataId),f=rC(d,m,l.dtype,l.shape,c);return t.makeTensorInfo([c],l.dtype,f)}},TC=ia({opSnippet:"return float(a != b);",cpuKernelImpl:OB,dtype:"bool"}),i$={kernelName:Hl,backendName:"webgl",kernelFunc:TC};function nv(r){const{inputs:e,backend:t}=r,{input:s}=e;return ko({inputs:{x:t.texData.get(s.dataId).complexTensorInfos.real},backend:t})}const s$={kernelName:Ea,backendName:"webgl",kernelFunc:nv},a$={kernelName:Bc,backendName:"webgl",kernelFunc:function r(e){const{inputs:t,backend:s,attrs:a}=e,{x:l}=t,{dtype:c}=a;if(c==="complex64"){if(l.dtype==="complex64")return ko({inputs:{x:l},backend:s});const d=ji(l.shape),m=r({inputs:{x:l},backend:s,attrs:{dtype:"float32"}}),f=Bp({inputs:{real:m,imag:d},backend:s});return d.dispose(),s.disposeIntermediateTensorInfo(m),f}if(l.dtype==="complex64"){const d=nv({inputs:{input:l},backend:s}),m=r({inputs:{x:d},backend:s,attrs:{dtype:c}});return s.disposeIntermediateTensorInfo(d),m}if(!Ns(l.dtype,c)){const d=ko({inputs:{x:l},backend:s});return{dataId:d.dataId,shape:d.shape,dtype:c}}if(c==="int32")return function(d,m){const f=new zp(d.shape,"return float(int(x));"),y=m.runWebGLProgram(f,[d],"int32");return{dataId:y.dataId,shape:y.shape,dtype:y.dtype}}(l,s);if(c==="bool"){const d=s.makeTensorInfo([],"bool",Ti("bool",1)),m=TC({inputs:{a:l,b:d},backend:s});return s.disposeIntermediateTensorInfo(d),m}throw new Error(`Error in Cast: failed to cast ${l.dtype} to ${c}`)}},EC="return ceil(x);",o$=jr({opSnippet:EC,packedOpSnippet:EC,cpuKernelImpl:xB}),l$={kernelName:$c,backendName:"webgl",kernelFunc:o$};class u${constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}}class c${constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}}const h$={kernelName:Uc,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{clipValueMin:l,clipValueMax:c}=s;let d;d=At().getBool("WEBGL_PACK_CLIP")?new c$(a.shape):new u$(a.shape);const m=[[l],[c]];return t.runWebGLProgram(d,[a],a.dtype,m)}};class d${constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}}function AC(r,e){return{dataId:e.dataId,dtype:e.dtype,shape:r.shape}}const p$={kernelName:ld,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{x:s}=e,a=t.texData.get(s.dataId),l=new d$(s.shape),c=[AC(s,a.complexTensorInfos.real),AC(s,a.complexTensorInfos.imag)];return t.runWebGLProgram(l,c,c[0].dtype)}};class f${constructor(e){this.outputShape=[],this.outputShape=ro(e,1),this.variableNames=e.map((c,d)=>`T${d}`);const t=new Array(e.length-1);t[0]=e[0][1];for(let c=1;c<t.length;c++)t[c]=t[c-1]+e[c][1];const s=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let c=1;c<t.length;c++){const d=t[c-1];s.push(`else if (yC < ${t[c]}) setOutput(getT${c}(yR, yC-${d}));`)}const a=t.length,l=t[t.length-1];s.push(`else setOutput(getT${a}(yR, yC-${l}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `}}class m${constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=ro(e,t);const s=this.outputShape,a=s.length,l=mi(a),c=za("coords",a),d=["x","y","z","w","u","v"].slice(0,a);this.variableNames=e.map((L,P)=>`T${P}`);const m=new Array(e.length-1);m[0]=e[0][t];for(let L=1;L<m.length;L++)m[L]=m[L-1]+e[L][t];const f=d[t],y=d.slice(-2),x=d.join();let _=`if (${f} < ${m[0]}) {
        return getChannel(
            getT0(${x}), vec2(${y.join()}));
        }`;for(let L=1;L<m.length;L++){const P=m[L-1];_+=`
        if (${f} < ${m[L]}  && ${f} >= ${m[L-1]}) {
          return getChannel(
            getT${L}(${s1(d,f,P)}),
            vec2(${s1(y,f,P)}));
        }`}const A=m.length,C=m[m.length-1];_+=`
        return getChannel(
          getT${A}(${s1(d,f,C)}),
          vec2(${s1(y,f,C)}));`,this.userCode=`
      float getValue(${d.map(L=>"int "+L)}) {
        ${_}
      }

      void main() {
        ${l} coords = getOutputCoords();
        vec4 result = vec4(getValue(${c}), 0., 0., 0.);

        ${c[a-1]} = ${c[a-1]} + 1;
        if (${c[a-1]} < ${s[a-1]}) {
          result.g = getValue(${c});
        }

        ${c[a-2]} = ${c[a-2]} + 1;
        if (${c[a-2]} < ${s[a-2]}) {
          result.a = getValue(${c});
        }

        ${c[a-1]} = ${c[a-1]} - 1;
        if (${c[a-2]} < ${s[a-2]} &&
            ${c[a-1]} < ${s[a-1]}) {
          result.b = getValue(${c});
        }
        setOutput(result);
      }
    `}}function s1(r,e,t){const s=r.indexOf(e);return r.map((a,l)=>l===s?`${a} - ${t}`:a).join()}function a1(r){const{inputs:e,backend:t}=r,{input:s}=e;return ko({inputs:{x:t.texData.get(s.dataId).complexTensorInfos.imag},backend:t})}const g$={kernelName:Xm,backendName:"webgl",kernelFunc:a1};function Ny(r,e,t){const s=r[0].dtype;if(s==="complex64"){const y=r.map(L=>nv({inputs:{input:L},backend:t})),x=r.map(L=>a1({inputs:{input:L},backend:t})),_=Ny(y,e,t),A=Ny(x,e,t),C=Bp({inputs:{real:_,imag:A},backend:t});return y.forEach(L=>t.disposeIntermediateTensorInfo(L)),x.forEach(L=>t.disposeIntermediateTensorInfo(L)),t.disposeIntermediateTensorInfo(_),t.disposeIntermediateTensorInfo(A),C}let a=t.shouldExecuteOnCPU(r);if(s==="string"&&(a=!0),a){const y=r.map(U=>{const q=he(U.shape.slice(e));return Rn({inputs:{x:U},backend:t,attrs:{shape:[-1,q]}})}),x=y.map(U=>({vals:t.readSync(U.dataId),shape:U.shape})),_=ro(y.map(U=>U.shape),1),A=y[0].shape[0]===1,C=vB(x,_,s,A),L=ro(r.map(U=>U.shape),e),P=t.makeTensorInfo(L,s,C);return y.forEach(U=>t.disposeIntermediateTensorInfo(U)),P}if(r.length>At().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const y=Math.floor(r.length/2),x=Ny(r.slice(0,y),e,t),_=Ny(r.slice(y),e,t),A=Ny([x,_],e,t);return t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(_),A}if(At().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&r[0].shape.length>1){const y=new m$(r.map(x=>x.shape),e);return t.runWebGLProgram(y,r,s)}const{tensors2D:l,outShape:c}=function(y,x,_){const A=ro(y.map(C=>C.shape),x);return{tensors2D:y.map(C=>Rn({inputs:{x:C},attrs:{shape:[-1,he(C.shape.slice(x))]},backend:_})),outShape:A}}(r,e,t),d=new f$(l.map(y=>y.shape)),m=t.runWebGLProgram(d,l,s);l.forEach(y=>t.disposeIntermediateTensorInfo(y));const f=Rn({inputs:{x:m},attrs:{shape:c},backend:t});return t.disposeIntermediateTensorInfo(m),f}function IC(r){const{inputs:e,backend:t,attrs:s}=r,{axis:a}=s,l=ir(a,e[0].shape)[0],c=ro(e.map(m=>m.shape),l);if(he(c)===0)return t.makeTensorInfo(c,e[0].dtype,[]);const d=e.filter(m=>he(m.shape)>0);return d.length===1?ko({inputs:{x:d[0]},backend:t}):(Zg(d.map(m=>m.shape),l),Ny(d,l,t))}const y$={kernelName:ud,backendName:"webgl",kernelFunc:IC};class CC{constructor(e,t=!1,s=null,a=!1,l=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const c=e.padInfo.top,d=e.padInfo.left,m=e.strideHeight,f=e.strideWidth,y=e.dilationHeight,x=e.dilationWidth,_=e.filterHeight,A=e.filterWidth,C=4*Math.floor(e.inChannels/4),L=e.inChannels%4,P=e.dataFormat==="channelsLast",U=P?1:2,q=P?2:3,X=P?3:1;let re="",oe="";s&&(re=a?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`:l?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`:`
          float activation(float x) {
            ${s}
          }
        `,oe="result = activation(result);");const de=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${re}

      const ivec2 strides = ivec2(${m}, ${f});
      const ivec2 pads = ivec2(${c}, ${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${X}];

        ivec2 xRCCorner =
            ivec2(coords[${U}], coords[${q}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${_}; wR++) {
          int xR = xRCorner + wR * ${y};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${A}; wC++) {
            int xC = xCCorner + wC * ${x};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${C}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${P}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${L===1}) {

              if (${P}) {
                dotProd +=
                    getX(batch, xR, xC, ${C}) *
                    getW(wR, wC, ${C}, d2);
              } else {
                dotProd +=
                    getX(batch, ${C}, xR, xC) *
                    getW(wR, wC, ${C}, d2);
              }

            } else if (${L===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${C}, d2),
                getW(wR, wC, ${C} + 1, d2)
              );

              if (${P}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${C}),
                  getX(batch, xR, xC, ${C} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${C}, xR, xC),
                  getX(batch, ${C} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${L===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${C}, d2),
                getW(wR, wC, ${C} + 1, d2),
                getW(wR, wC, ${C} + 2, d2)
              );

              if (${P}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${C}),
                  getX(batch, xR, xC, ${C} + 1),
                  getX(batch, xR, xC, ${C} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${C}, xR, xC),
                  getX(batch, ${C} + 1, xR, xC),
                  getX(batch, ${C} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${de}
        ${oe}
        setOutput(result);
      }
    `}}class x${constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,s=e.padInfo.top,a=e.padInfo.left,l=e.strideDepth,c=e.strideHeight,d=e.strideWidth,m=e.dilationDepth,f=e.dilationHeight,y=e.dilationWidth,x=e.filterDepth,_=e.filterHeight,A=e.filterWidth,C=4*Math.floor(e.inChannels/4),L=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${l}, ${c}, ${d});
      const ivec3 pads = ivec3(${t}, ${s}, ${a});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${x}; wF++) {
          int xF = xFCorner + wF * ${m};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${_}; wR++) {
            int xR = xRCorner + wR * ${f};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${A}; wC++) {
              int xC = xCCorner + wC * ${y};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${C}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${L===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${C}) *
                  getW(wF, wR, wC, ${C}, d2);
              } else if (${L===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${C}),
                  getX(batch, xF, xR, xC, ${C} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${C}, d2),
                  getW(wF, wR, wC, ${C} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${L===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${C}),
                  getX(batch, xF, xR, xC, ${C} + 1),
                  getX(batch, xF, xR, xC, ${C} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${C}, d2),
                  getW(wF, wR, wC, ${C} + 1, d2),
                  getW(wF, wR, wC, ${C} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class v${constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=cl(this.outputShape.length);const{dataFormat:s}=t,a=Oa(),l=s==="channelsLast",c=l?0:1,d=l?1:2,m=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let f="";for(let y=0;y<=1;y++)for(let x=0;x<=1;x++)f+=`
          blockIndex = rc.y + ${x};
          pos = rc.x + ${y};

          ${m}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${c}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${d}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${l}) {
                  innerDims = vec2(d1, ch);
                  result[${2*y+x}] = getChannel(
                    getA(d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${2*y+x}] = getChannel(
                    getA(ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec2 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${f}

        ${a.output} = result;
      }
    `}}function kC({x:r,filter:e,convInfo:t,backend:s,bias:a=null,preluActivationWeights:l=null,leakyreluAlpha:c=0,activation:d=null}){const m=r.shape,f=s.texData.get(r.dataId),y=t.inChannels,x=m[0]*m[1]*m[2],_=t.outChannels,A=t.dataFormat==="channelsLast";let C;const L=[];if((x!==1&&_!==1||!(y>1e3))&&f.isPacked&&A&&f.texture!=null&&m[2]%2!=0&&Le(f.shape.slice(-3),m.slice(-3))){const P=m[0]*m[1]*(m[2]+1),U={dataId:r.dataId,shape:[1,P,t.inChannels],dtype:r.dtype},q=f.shape;f.shape=f.shape.slice(),f.shape[f.shape.length-2]++,Q(Zw(f.shape,U.shape),()=>`packed reshape ${f.shape} to ${U.shape} isn't free`);const X=Rn({inputs:{x:e},backend:s,attrs:{shape:[1,t.inChannels,t.outChannels]}});L.push(X);const re=i1({a:U,b:X,backend:s,transposeA:!1,transposeB:!1,bias:a,activation:d,preluActivationWeights:l,leakyreluAlpha:c}),oe=s.texData.get(re.dataId);Q(oe.isPacked,()=>"batchMatMul result is expected to be packed"),f.shape=q,oe.shape=t.outShape,C=ko({inputs:{x:re},backend:s}),C.shape=t.outShape,L.push(re)}else{const P=Rn({inputs:{x:r},backend:s,attrs:{shape:[1,A?m[0]*m[1]*m[2]:m[0]*m[2]*m[3],t.inChannels]}}),U=Rn({inputs:{x:e},backend:s,attrs:{shape:[1,t.inChannels,t.outChannels]}}),q=i1({a:P,b:U,transposeA:!1,transposeB:!1,backend:s,bias:a,activation:d,preluActivationWeights:l,leakyreluAlpha:c});C=Rn({inputs:{x:q},backend:s,attrs:{shape:t.outShape}}),L.push(P),L.push(U),L.push(q)}for(const P of L)s.disposeIntermediateTensorInfo(P);return C}function NC({x:r,filter:e,convInfo:t,backend:s,bias:a=null,preluActivationWeights:l=null,leakyreluAlpha:c=0,activation:d=null}){const{filterWidth:m,filterHeight:f,inChannels:y,outWidth:x,outHeight:_,dataFormat:A}=t,C=A==="channelsLast",L=m*f*y,P=_*x,U=[L,P],q=[],X=Rn({inputs:{x:r},backend:s,attrs:{shape:r.shape.slice(1)}}),re=Rn({inputs:{x:e},backend:s,attrs:{shape:[1,L,he(e.shape)/L]}});q.push(X),q.push(re);const oe=new v$(U,t),de=[X.shape,[t.padInfo.top,t.padInfo.left],[t.strideHeight,t.strideWidth],[t.dilationHeight,t.dilationWidth],[t.inChannels],[t.filterWidth*t.inChannels],[t.outWidth]],Ie=s.runWebGLProgram(oe,[X],"float32",de),pe=Rn({inputs:{x:Ie},backend:s,attrs:{shape:[1,U[0],U[1]]}});q.push(Ie),q.push(pe);const Be=a!=null,ze=l!=null,Ve=d==="leakyrelu",Qe=d?t1(d,!0):null,nt=new gC(pe.shape,re.shape,[1,P,t.outChannels],!0,!1,Be,Qe,ze,Ve),ft=[pe,re];if(a&&ft.push(a),ze&&ft.push(l),Ve){const vt=s.makeTensorInfo([],"float32",qo(c,"float32"));ft.push(vt),q.push(vt)}const yt=s.runWebGLProgram(nt,ft,"float32"),Mt=Rn({inputs:{x:yt},backend:s,attrs:{shape:C?[1,_,x,t.outChannels]:[1,t.outChannels,_,x]}});q.push(yt);for(const vt of q)s.disposeIntermediateTensorInfo(vt);return Mt}const b$={kernelName:cd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l}=e,{strides:c,pad:d,dataFormat:m,dilations:f,dimRoundingMode:y}=s,x=wo(m),_=Wi(a.shape,l.shape,c,f,d,y,!1,x);let A;if(_.filterHeight!==1||_.filterWidth!==1||_.dilationHeight!==1||_.dilationWidth!==1||_.strideHeight!==1||_.strideWidth!==1||_.padInfo.type!=="SAME"&&_.padInfo.type!=="VALID")if(At().getBool("WEBGL_CONV_IM2COL")&&a.shape[0]===1)A=NC({x:a,filter:l,convInfo:_,backend:t});else{const L=new CC(_);A=t.runWebGLProgram(L,[a,l],"float32")}else A=kC({x:a,filter:l,convInfo:_,backend:t});const C=Rn({inputs:{x:A},backend:t,attrs:{shape:_.outShape}});return t.disposeIntermediateTensorInfo(A),C}};class w${constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,s=e.strideWidth,a=e.padInfo.top,l=e.padInfo.left,c=e.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${a};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${l};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${c}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class _${constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,s=e.filterWidth,a=e.strideHeight,l=e.strideWidth,c=e.dataFormat==="channelsLast",d=t-1-e.padInfo.top,m=s-1-e.padInfo.left,f=c?1:2,y=c?2:3,x=c?3:1;this.userCode=`
      const ivec2 pads = ivec2(${d}, ${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${x}];

        ivec2 dyCorner = ivec2(coords[${f}], coords[${y}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${a}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${l}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${c}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class S${constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,s=e.strideHeight,a=e.strideWidth,l=e.padInfo.front,c=e.padInfo.top,d=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${l};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${c};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${a} - ${d};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class M${constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,s=e.filterHeight,a=e.filterWidth,l=e.strideDepth,c=e.strideHeight,d=e.strideWidth,m=t-1-e.padInfo.front,f=s-1-e.padInfo.top,y=a-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${m}, ${f}, ${y});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${l}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${c}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${a}; wC++) {
              float dyC = float(dyCCorner + wC) / ${d}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${a} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}const T$={kernelName:uf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,dy:l}=e,{strides:c,pad:d,dataFormat:m,dimRoundingMode:f,filterShape:y}=s,x=wo(m),_=Wi(a.shape,y,c,1,d,f,!1,x),A=new w$(_);return t.runWebGLProgram(A,[a,l],"float32")}},E$={kernelName:hd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,filter:l}=e,{inputShape:c,strides:d,pad:m,dataFormat:f,dimRoundingMode:y}=s,x=wo(f),_=Wi(c,l.shape,d,1,m,y,!1,x),A=new _$(_);return t.runWebGLProgram(A,[a,l],"float32")}},A$={kernelName:dd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l}=e,{strides:c,pad:d,dilations:m}=s,f=ou(a.shape,l.shape,c,m,d),y=new x$(f);return t.runWebGLProgram(y,[a,l],"float32")}},I$={kernelName:cf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,dy:l}=e,{strides:c,pad:d,filterShape:m}=s,f=ou(a.shape,m,c,1,d),y=new S$(f);return t.runWebGLProgram(y,[a,l],"float32")}},C$={kernelName:hf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,filter:l}=e,{pad:c,strides:d,inputShape:m}=s,f=ou(m,l.shape,d,1,c),y=new M$(f);return t.runWebGLProgram(y,[a,l],"float32")}},k$=jr({opSnippet:`if (isnan(x)) return x;
  return cos(x);
`}),N$={kernelName:Vc,backendName:"webgl",kernelFunc:k$},R$=jr({opSnippet:`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`}),L$={kernelName:Wc,backendName:"webgl",kernelFunc:R$};class D${constructor(e,t,s,a,l){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[c,d,m,f]=e,[y]=t,[x,_]=s;this.outputShape=[y,x,_,f];const A=a==="bilinear"?1:0,[C,L]=[d-1+".0",m-1+".0"],[P,U,q]=x>1?[""+(d-1)/(x-1),"(y2-y1) * height_ratio",`y1*${C} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${C}`],[X,re,oe]=_>1?[""+(m-1)/(_-1),"(x2-x1) * width_ratio",`x1*${L} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${L}`];this.userCode=`
      const float height_ratio = float(${P});
      const float width_ratio = float(${X});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${c}) {
          return;
        }

        float height_scale = ${U};
        float width_scale = ${re};

        float in_y = ${q};
        if( in_y < 0.0 || in_y > ${C} ) {
          setOutput(float(${l}));
          return;
        }
        float in_x = ${oe};
        if( in_x < 0.0 || in_x > ${L} ) {
          setOutput(float(${l}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${A} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}}const P$={kernelName:df,backendName:"webgl",kernelFunc:r=>{const{inputs:e,backend:t,attrs:s}=r,{image:a,boxes:l,boxInd:c}=e,{cropSize:d,method:m,extrapolationValue:f}=s,y=new D$(a.shape,l.shape,d,m,f);return t.runWebGLProgram(y,[a,l,c],"float32")}};class RC{constructor(e,t,s){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const a=e.length,l=t?"0.0":`getX(${LC(a,"coords")})`,c=e[e.length-1];let d="",m="";t?(d=s?"end != "+(c-1):"end != 0",m=s?"end + 1":"end - 1"):(d=s?`end + pow2 < ${c}`:"end >= pow2",m=s?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${mi(a)} coords = getOutputCoords();
        int end = ${DC(a,"coords")};
        float val = ${l};
        int pow2 = int(pow(2.0, index));
        if (${d}) {
          int idx = ${m};
          ${DC(a,"coords")} = idx;
          val += getX(${LC(a,"coords")});
        }
        setOutput(val);
      }
    `}}function LC(r,e){if(r===1)return`${e}`;if(r===2)return`${e}.x, ${e}.y`;if(r===3)return`${e}.x, ${e}.y, ${e}.z`;if(r===4)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${r} is not yet supported`)}function DC(r,e){if(r===1)return`${e}`;if(r===2)return`${e}.y`;if(r===3)return`${e}.z`;if(r===4)return`${e}.w`;throw Error(`Cumulative sum for rank ${r} is not yet supported`)}const F$={kernelName:pd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,exclusive:c,reverse:d}=s,m=a.shape.length,f=Hi([l],m);let y=a;f!=null&&(y=Ba({inputs:{x:a},backend:t,attrs:{perm:f}}));const x=Ai(1,m)[0];if(x!==m-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${a.shape.length-1} but got axis=${l}`);const _=y.shape[x];let A=ko({inputs:{x:y},backend:t});for(let C=0;C<=Math.ceil(Math.log2(_))-1;C++){const L=new RC(y.shape,!1,d),P=[[C]],U=A;A=t.runWebGLProgram(L,[A],A.dtype,P),t.disposeIntermediateTensorInfo(U)}if(c){const C=new RC(y.shape,c,d),L=A;A=t.runWebGLProgram(C,[A],A.dtype),t.disposeIntermediateTensorInfo(L)}if(f!=null){const C=Ba({inputs:{x:A},backend:t,attrs:{perm:ni(f)}});return t.disposeIntermediateTensorInfo(A),t.disposeIntermediateTensorInfo(y),C}return A}},O$={kernelName:pf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,weights:l}=e,{size:c,binaryOutput:d}=s;if(a.shape.length===1){const m=t.readSync(a.dataId),f=t.readSync(l.dataId),y=rC(m,f,l.dtype,l.shape,c);return t.makeTensorInfo([c],l.dtype,y)}if(a.shape.length===2){const m=t.bufferSync(a),f=t.bufferSync(l),y=yB(m,f,c,d);return t.makeTensorInfo(y.shape,l.dtype,y.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class z${constructor(e,t,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=s,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const B$={kernelName:ff,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{blockSize:l,dataFormat:c}=s;Q(l>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${l}`);const d=a.shape[0],m=c==="NHWC"?a.shape[1]:a.shape[2],f=c==="NHWC"?a.shape[2]:a.shape[3],y=c==="NHWC"?a.shape[3]:a.shape[1],x=m*l,_=f*l,A=y/(l*l),C=new z$(c==="NHWC"?[d,x,_,A]:[d,A,x,_],l,c);return t.runWebGLProgram(C,[a],a.dtype)}};class PC{constructor(e,t=!1,s=null,a=!1,l=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=cl(this.outputShape.length);const c=e.filterHeight,d=e.filterWidth,m=e.outChannels/e.inChannels;let f="",y="";s&&(f=a?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`:l?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`:`
          float activation(float x) {
            ${s}
          }
        `,y="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${m};
        int q = d2 - d1 * ${m};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${c}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${x}
        ${y}
        setOutput(result);
      }
    `}}class FC{constructor(e,t=!1,s=null,a=!1,l=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=cl(this.outputShape.length);const c=e.outChannels/e.inChannels,d=e.padInfo.left,m=e.strideWidth,f=e.dilationWidth,y=e.filterHeight,x=e.filterWidth,_=x;let A=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let U=0;U<x;U++)A+=`
          vec4 xTexelC${2*U};
          int xTexelC${2*U}Ready;
          vec4 xTexelC${2*U+1};
          int xTexelC${2*U+1}Ready;
          vec4 xC${U};`;for(let U=0;U<y;U++){for(let q=0;q<x;q++)A+=`
          xTexelC${2*q} = vec4(0.0);
          xTexelC${2*q}Ready = 0;
          xTexelC${2*q+1} = vec4(0.0);
          xTexelC${2*q+1}Ready = 0;
          xC${q} = vec4(0.0);`;A+=`
        xR = xRCorner + ${U} * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let q=0;q<(_+1)/2;q++){const X=2*q;if(A+=`
          xC = xCCorner + ${X*f};
          `,m===1){if(X<x&&(d%2==1?(A+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${X}Ready == 0) {
                  xTexelC${X} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${X}.zw = vec2(0.0);
                  }
                  xTexelC${X}Ready = 1;
                }
              `,A+=f===1&&X>0?`
                xC${X} = vec4(xTexelC${X-2}.zw, xTexelC${X}.xy);
                `:`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${X} = vec4(previous.zw, xTexelC${X}.xy);
                  } else {
                    xC${X} = vec4(0.0, 0.0, xTexelC${X}.xy);
                  }
                  `):A+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${X}Ready == 0) {
                  xTexelC${X} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${X}.zw = vec2(0.0);
                  }
                  xTexelC${X}Ready = 1;
                }

                xC${X} = xTexelC${X};
                `,X+1<x)){const re=d%2==0?Ce(f):f;f%2==0&&d%2==1||f%2!=0&&d%2!=1?(A+=`
                  xCOffset = xC + imod(pads[1], 2) + ${re};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${X+1}Ready == 0) {
                    xTexelC${X+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${X+1}.zw = vec2(0.0);
                    }
                    xTexelC${X+1}Ready = 1;
                  }
                  `,f>1&&(A+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${X}Ready == 0) {
                      xTexelC${X} = getX(batch, xR, xCOffset, d1);
                      xTexelC${X}Ready = 1;
                    }
                    `),A+=`
                  xC${X+1} = vec4(xTexelC${X}.zw, xTexelC${X+1}.xy);
                  `):A+=re===1?`
                    xC${X+1} = xTexelC${X};
                    `:`
                    xCOffset = xC + ${re};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${X+1}Ready == 0) {
                      xTexelC${X+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${X+1}.zw = vec2(0.0);
                      }
                      xTexelC${X+1}Ready = 1;
                    }

                    xC${X+1} = xTexelC${X+1};
                    `}}else X<x&&(d%2==1?(A+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${X}Ready == 0) {
                  xTexelC${X} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${X}.zw = vec2(0.0);
                  }
                  xTexelC${X}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${X+1}Ready == 0) {
                  xTexelC${X+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${X+1}.zw = vec2(0.0);
                  }
                  xTexelC${X+1}Ready = 1;
                }

                xC${X} = vec4(xTexelC${X}.zw, xTexelC${X+1}.zw);
              `,X+1<x&&(A+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${X+1} = vec4(xTexelC${X+1}.xy, final.xy);
                `)):(A+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${X}Ready == 0) {
                  xTexelC${X} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${X}.zw = vec2(0.0);
                  }
                  xTexelC${X}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${X+1}Ready == 0) {
                  xTexelC${X+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${X+1}.zw = vec2(0.);
                  }
                  xTexelC${X+1}Ready = 1;
                }

                xC${X} = vec4(
                  xTexelC${X}.xy, xTexelC${X+1}.xy);
              `,X+1<x&&(A+=`
                  xC${X+1} = vec4(xTexelC${X}.zw, xTexelC${X+1}.zw);
                `)));X<x&&(A+=`
            wTexel = getW(${U}, ${X}, d1, q);
            dotProd += xC${X} * vec4(wTexel.xz, wTexel.xz);
          `,X+1<x&&(A+=`
              wTexel = getW(${U}, ${X+1}, d1, q);
              dotProd += xC${X+1} * vec4(wTexel.xz, wTexel.xz);
            `))}A+=`
        }
      `}let C="",L="";s&&(C=a?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`:l?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`:`vec4 activation(vec4 x) {
          ${s}
        }`,L="result = activation(result);");const P=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${C}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${c};
        int q = d2 - d1 * ${c};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${A}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${P}
        ${L}
        setOutput(result);
      }
    `}}const $$={kernelName:fd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l}=e,{strides:c,pad:d,dilations:m,dimRoundingMode:f}=s;let y=m;y==null&&(y=[1,1]),Q(es(c,y),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${c} and dilations '${y}'`);const x=Wi(a.shape,l.shape,c,y,d,f,!0);let _;_=At().getBool("WEBGL_PACK_DEPTHWISECONV")&&x.strideWidth<=2&&x.outChannels/x.inChannels==1?new FC(x):new PC(x);const A=[[x.padInfo.top,x.padInfo.left],[x.strideHeight,x.strideWidth],[x.dilationHeight,x.dilationWidth],[x.inHeight,x.inWidth]];return t.runWebGLProgram(_,[a,l],"float32",A)}};class U${constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,s=e.strideWidth,a=e.padInfo.top,l=e.padInfo.left,c=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${c} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${a};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${l};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class V${constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,s=e.filterWidth,a=e.strideHeight,l=e.strideWidth,c=t-1-e.padInfo.top,d=s-1-e.padInfo.left,m=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${c}, ${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${a}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${l}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${m}; dm++) {
              int d2 = d1 * ${m} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}const W$={kernelName:Du,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,dy:l}=e,{strides:c,dilations:d,pad:m,dimRoundingMode:f,filterShape:y}=s,x=Wi(a.shape,y,c,d,m,f,!0),_=new U$(x);return t.runWebGLProgram(_,[a,l],"float32")}},G$={kernelName:Pu,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,filter:l}=e,{strides:c,dilations:d,pad:m,dimRoundingMode:f,inputShape:y}=s,x=Wi(y,l.shape,c,d,m,f,!0),_=new V$(x);return t.runWebGLProgram(_,[a,l],"float32")}};class H${constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}}const j$={kernelName:Gc,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{x:s}=e,a=[...s.shape,...s.shape],l=he(s.shape),c=Rn({inputs:{x:s},backend:t,attrs:{shape:[l]}}),d=new H$(l),m=t.runWebGLProgram(d,[c],c.dtype),f=Rn({inputs:{x:m},backend:t,attrs:{shape:a}});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(m),f}};class q${constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:s,padInfo:a,strideHeight:l,strideWidth:c,filterHeight:d,filterWidth:m,dilationHeight:f,dilationWidth:y}=e,{top:x,left:_}=a;this.userCode=`
      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${x}, ${_});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${d}; h++) {
          int hIn = hBeg + h * ${f};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${m}; w++) {
              int wIn = wBeg + w * ${y};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}}const X$={kernelName:Fo,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l}=e,{strides:c,pad:d,dilations:m}=s,f=sp(a.shape,l.shape,c,d,"NHWC",m);let y;const x=new q$(f);y=t.runWebGLProgram(x,[a,l],"float32");const _=Rn({inputs:{x:y},backend:t,attrs:{shape:f.outShape}});return t.disposeIntermediateTensorInfo(y),_}},Y$={kernelName:md,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{equation:a}=s,l=e,{allDims:c,summedDims:d,idDims:m}=bx(a,l.length);_x(c.length,m,l);const{path:f,steps:y}=Sx(d,m),x=y.length;let _=null,A=c.length;const C=[];for(let L=0;L<x;++L){for(const P of y[L]){const{permutationIndices:U,expandDims:q}=wx(A,m[P]);let X;Mx(U)?X=l[P]:(X=Ba({inputs:{x:l[P]},backend:t,attrs:{perm:U}}),C.push(X));const re=X.shape.slice();for(let oe=0;oe<q.length;++oe)re.splice(q[oe],0,1);Le(X.shape,re)||(X=Rn({inputs:{x:X},backend:t,attrs:{shape:re}}),C.push(X)),_===null?_=X:(_=bT({inputs:{a:X,b:_},backend:t}),C.push(_))}L<x-1&&(f[L]>=0&&(_=r1({inputs:{x:_},backend:t,attrs:{axis:f[L]-(c.length-A),keepDims:!1}}),C.push(_)),A--)}for(const L of C)L!==_&&t.disposeIntermediateTensorInfo(L);return _}},K$=jr({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`}),Z$={kernelName:Hc,backendName:"webgl",kernelFunc:K$},J$={kernelName:jm,backendName:"webgl",kernelFunc:r=>{const{inputs:e,backend:t}=r,{dy:s,y:a}=e,l=At().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ev(`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,s.shape,a.shape):new Cy("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,a.shape);return t.runWebGLProgram(l,[s,a],s.dtype)}},Q$=ia({opSnippet:"return float(a == b);",packedOpSnippet:`
  return vec4(equal(a, b));
`,dtype:"bool",cpuKernelImpl:bB}),eU={kernelName:ps,backendName:"webgl",kernelFunc:Q$},tU=jr({opSnippet:`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${ry};
  float a1 = ${Ep};
  float a2 = ${Sm};
  float a3 = ${xx};
  float a4 = ${iy};
  float a5 = ${sy};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`}),nU={kernelName:gd,backendName:"webgl",kernelFunc:tU},OC="return exp(x);",zC=jr({opSnippet:OC,packedOpSnippet:OC,cpuKernelImpl:wB}),rU={kernelName:yl,backendName:"webgl",kernelFunc:zC};function ST(r){const{inputs:e,attrs:t,backend:s}=r,{dim:a}=t,{input:l}=e,c=l.shape.length,d=l.shape.slice();let m=a;return a<0&&(Q(-(c+1)<=a,()=>`Axis must be in the interval [${-(c+1)}, ${c}]`),m=c+a+1),d.splice(m,0,1),Rn({inputs:{x:l},backend:s,attrs:{shape:d}})}const iU={kernelName:Ou,backendName:"webgl",kernelFunc:ST},BC="return exp(x) - 1.0;",sU=jr({opSnippet:BC,packedOpSnippet:BC,cpuKernelImpl:_B}),aU={kernelName:Vl,backendName:"webgl",kernelFunc:sU};class $C{constructor(e,t,s){this.variableNames=["real","imag"];const a=t[1];this.outputShape=t;const l=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,c=s?`${a}.0`:"1.0";let d;if(e==="real")d="return real * expR - imag * expI;";else{if(e!=="imag")throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);d="return real * expI + imag * expR;"}this.userCode=`
      const float exponentMultiplier = ${l};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${d}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${a});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${a}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${c};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}}function UC(r,e,t){const s=t.texData.get(r.dataId),a=he(r.shape),l=r.shape[r.shape.length-1],c=Rn({inputs:{x:r},backend:t,attrs:{shape:[a/l,l]}}),d=c.shape,m=new $C("real",d,e),f=new $C("imag",d,e),y=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:d},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:d}],x=t.runWebGLProgram(m,y,"float32"),_=t.runWebGLProgram(f,y,"float32"),A=Bp({inputs:{real:x,imag:_},backend:t});t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(_);const C=Rn({inputs:{x:A},backend:t,attrs:{shape:r.shape}});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(A),C}const oU={kernelName:mf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{input:s}=e;return UC(s,!1,t)}};class lU{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}}function rv(r){const{backend:e,attrs:t}=r,{shape:s,value:a}=t;let{dtype:l}=t;if(l=l||Ga(a),l==="string"){const c=Or(l,he(s));return c.fill(a),e.makeTensorInfo(s,l,c)}{const c=new lU(s,a),d=[[a]];return e.runWebGLProgram(c,[],l,d)}}const uU={kernelName:yd,backendName:"webgl",kernelFunc:rv};class cU{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}}const hU={kernelName:xd,backendName:"webgl",kernelFunc:({inputs:r,backend:e})=>{const{image:t}=r,s=e,a=new cU(t.shape);return s.runWebGLProgram(a,[t],t.dtype)}},VC="return floor(x);",dU=jr({opSnippet:VC,packedOpSnippet:VC,cpuKernelImpl:SB}),pU={kernelName:zu,backendName:"webgl",kernelFunc:dU},fU=ia({opSnippet:`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,packedOpSnippet:`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,dtype:"int32"}),mU={kernelName:jc,backendName:"webgl",kernelFunc:fU};class gU{constructor(e){this.variableNames=["A"];const t=Oa(),[s,a]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}.0, ${s}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}}class yU{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=Oa(),[s,a]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${a}.0, ${s}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}}const xU={kernelName:Zl,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r;let{pixels:a}=e;const{numChannels:l}=s,c=typeof HTMLVideoElement!="undefined"&&a instanceof HTMLVideoElement,d=typeof HTMLImageElement!="undefined"&&a instanceof HTMLImageElement,[m,f]=c?[a.videoWidth,a.videoHeight]:[a.width,a.height],y=[f,m],x=[f,m,l];(d||c)&&(Ry==null&&(Ry=document.createElement("canvas").getContext("2d")),Ry.canvas.width=m,Ry.canvas.height=f,Ry.drawImage(a,0,0,m,f),a=Ry.canvas);const _=t.makeTensorInfo(y,"int32");t.texData.get(_.dataId).usage=ul.PIXELS,t.gpgpu.uploadPixelDataToTexture(t.getTexture(_.dataId),a);const A=At().getBool("WEBGL_PACK")?new yU(x):new gU(x),C=t.runWebGLProgram(A,[_],"int32");return t.disposeData(_.dataId),C}};let Ry;const vU={kernelName:Jl,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l,bias:c,preluActivationWeights:d}=e,{strides:m,pad:f,dataFormat:y,dilations:x,dimRoundingMode:_,activation:A,leakyreluAlpha:C}=s,L=wo(y),P=Wi(a.shape,l.shape,m,x,f,_,!1,L);let U;const q=[];if(P.filterHeight!==1||P.filterWidth!==1||P.dilationHeight!==1||P.dilationWidth!==1||P.strideHeight!==1||P.strideWidth!==1||P.padInfo.type!=="SAME"&&P.padInfo.type!=="VALID")if(At().getBool("WEBGL_CONV_IM2COL")&&a.shape[0]===1)U=NC({x:a,filter:l,convInfo:P,backend:t,bias:c,activation:A,preluActivationWeights:d,leakyreluAlpha:C});else{const re=c!=null,oe=d!=null,de=A==="leakyrelu",Ie=A?t1(A,!1):null,pe=new CC(P,re,Ie,oe,de),Be=[a,l];if(c&&Be.push(c),d&&Be.push(d),de){const ze=t.makeTensorInfo([],"float32",qo(C,"float32"));Be.push(ze),q.push(ze)}U=t.runWebGLProgram(pe,Be,"float32")}else U=kC({x:a,filter:l,convInfo:P,backend:t,bias:c,activation:A,preluActivationWeights:d,leakyreluAlpha:C});const X=Rn({inputs:{x:U},backend:t,attrs:{shape:P.outShape}});return q.push(U),q.forEach(re=>t.disposeIntermediateTensorInfo(re)),X}},bU={kernelName:Nf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,filter:l,bias:c,preluActivationWeights:d}=e,{strides:m,pad:f,dilations:y,dimRoundingMode:x,activation:_,leakyreluAlpha:A}=s,C=[];let L=y;L==null&&(L=[1,1]),Q(es(m,L),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${m} and dilations '${L}'`);const P=Wi(a.shape,l.shape,m,L,f,x,!0),U=At().getBool("WEBGL_PACK_DEPTHWISECONV")&&P.strideWidth<=2&&P.outChannels/P.inChannels==1,q=_?t1(_,U):null,X=[a,l],re=c!=null,oe=d!=null,de=_==="leakyrelu";if(re&&X.push(c),oe&&X.push(d),de){const ze=t.makeTensorInfo([],"float32",qo(A,"float32"));X.push(ze),C.push(ze)}let Ie;Ie=U?new FC(P,re,q,oe,de):new PC(P,re,q,oe,de);const pe=[[P.padInfo.top,P.padInfo.left],[P.strideHeight,P.strideWidth],[P.dilationHeight,P.dilationWidth],[P.inHeight,P.inWidth]],Be=t.runWebGLProgram(Ie,X,"float32",pe);return C.forEach(ze=>t.disposeIntermediateTensorInfo(ze)),Be}};class wU{constructor(e,t,s){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=s;const a=mi(t.length),l=mi(s.length),c=this.sliceDim>1?"strides[j]":"strides";this.userCode=`
        ${a} strides = ${a}(${this.strides});
         void main() {
          ${l} coords = getOutputCoords();
          int flattenIndex = 0;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            flattenIndex += index * ${c};
          }
          setOutput(getX(flattenIndex, coords[1]));
        }
      `}}const _U={kernelName:gf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{params:s,indices:a}=e,l=a.shape,c=l[l.length-1],d=he(s.shape),[m,f,y,x]=mg(s,a),_=Rn({inputs:{x:a},backend:t,attrs:{shape:[f,c]}}),A=Rn({inputs:{x:s},backend:t,attrs:{shape:[he(s.shape)/y,y]}});if(t.shouldExecuteOnCPU([s,a])||s.dtype==="string"){const U=t.readSync(a.dataId),q=t.bufferSync(s),X=MB(U,q,s.dtype,f,c,y,x,s.shape,d);return t.makeTensorInfo(m,s.dtype,X.values)}const C=new wU(c,x,[f,y]),L=t.runWebGLProgram(C,[A,_],A.dtype),P=Rn({inputs:{x:L},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(_),t.disposeIntermediateTensorInfo(A),t.disposeIntermediateTensorInfo(L),P}};class SU{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const s=mi(this.rank),a=function(l,c){const d=["resRC.x","resRC.y","resRC.z","resRC.w"],m=[];for(let f=0;f<l.length;f++)f===2?m.push("int(getIndices(resRC.x, resRC.z))"):m.push(`${d[f]}`);return m.join()}(e);this.userCode=`
      void main() {
        ${s} resRC = getOutputCoords();
        setOutput(getA(${a}));
      }
    `}}function WC(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,indices:l}=e,{axis:c,batchDims:d}=s,m=Ex(a,l,ir(c,a.shape)[0],d),f=he(l.shape),y=[],x=Rn({inputs:{x:a},backend:t,attrs:{shape:[m.batchSize,m.outerSize,m.dimSize,m.sliceSize]}}),_=Rn({inputs:{x:l},backend:t,attrs:{shape:[m.batchSize,f/m.batchSize]}});y.push(x),y.push(_);const A=[m.batchSize,m.outerSize,f/m.batchSize,m.sliceSize];if(t.shouldExecuteOnCPU([a,l])||a.dtype==="string"){const U=t.bufferSync(_),q=t.bufferSync(x),X=TB(q,U,A);return y.forEach(re=>t.disposeIntermediateTensorInfo(re)),t.makeTensorInfo(m.outputShape,X.dtype,X.values)}const C=new SU(x.shape,A),L=t.runWebGLProgram(C,[x,_],x.dtype);y.push(L);const P=Rn({inputs:{x:L},backend:t,attrs:{shape:m.outputShape}});return y.forEach(U=>t.disposeIntermediateTensorInfo(U)),P}const MU={kernelName:Oo,backendName:"webgl",kernelFunc:WC},TU=ia({opSnippet:"return float(a > b);",packedOpSnippet:`
  return vec4(greaterThan(a, b));
`,cpuKernelImpl:EB,dtype:"bool"}),EU={kernelName:yf,backendName:"webgl",kernelFunc:TU},AU=ia({opSnippet:"return float(a >= b);",packedOpSnippet:`
  return vec4(greaterThanEqual(a, b));
`,dtype:"bool",cpuKernelImpl:AB}),IU={kernelName:Wl,backendName:"webgl",kernelFunc:AU},CU={kernelName:qm,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{input:s}=e;return UC(s,!0,t)}},kU=jr({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),NU={kernelName:wd,backendName:"webgl",kernelFunc:kU},RU=jr({opSnippet:"return float(isinf(x));",dtype:"bool"}),LU={kernelName:_d,backendName:"webgl",kernelFunc:RU},DU=jr({opSnippet:"return float(isnan(x));",dtype:"bool"}),PU={kernelName:Sd,backendName:"webgl",kernelFunc:DU},FU=ia({opSnippet:"return float(a < b);",packedOpSnippet:`
  return vec4(lessThan(a, b));
`,cpuKernelImpl:IB,dtype:"bool"}),OU={kernelName:vf,backendName:"webgl",kernelFunc:FU},zU=ia({opSnippet:"return float(a <= b);",packedOpSnippet:`
  return vec4(lessThanEqual(a, b));
`,cpuKernelImpl:CB,dtype:"bool"}),BU={kernelName:bf,backendName:"webgl",kernelFunc:zU},$U={kernelName:Ym,backendName:"webgl",kernelFunc:function(r){const{backend:e,attrs:t}=r,{start:s,stop:a,num:l}=t,c=kB(s,a,l);return e.makeTensorInfo([c.length],"float32",c)}},UU=jr({opSnippet:`if (x < 0.0) return NAN;
  return log(x);`,packedOpSnippet:`
  vec4 result = log(x);
  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));
  result.r = isNaN.r == 1.0 ? NAN : result.r;
  result.g = isNaN.g == 1.0 ? NAN : result.g;
  result.b = isNaN.b == 1.0 ? NAN : result.b;
  result.a = isNaN.a == 1.0 ? NAN : result.a;

  return result;
`,cpuKernelImpl:NB}),VU={kernelName:Md,backendName:"webgl",kernelFunc:UU},WU=jr({opSnippet:"return log(1.0 + x);"}),GU={kernelName:Td,backendName:"webgl",kernelFunc:WU},HU=ia({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,dtype:"bool"}),jU={kernelName:wf,backendName:"webgl",kernelFunc:HU},qU=jr({opSnippet:"return float(!(x >= 1.0));"}),XU={kernelName:Ed,backendName:"webgl",kernelFunc:qU},YU=ia({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,dtype:"bool"}),KU={kernelName:xl,backendName:"webgl",kernelFunc:YU};class ZU{constructor(e,t,s,a,l){this.variableNames=["x"],this.outputShape=[];const c=t,d=e[3]-1;let m;this.outputShape=e;const f=`float(${s}) + float(${a}) * sum`;m=l===.5?`inversesqrt(${f})`:l===1?`1.0/(${f})`:`exp(log(${f}) * float(-${l}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${c}; j <= ${c}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${d}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${m};
        setOutput(val);
      }
    `}}class JU{constructor(e,t,s,a,l){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const c=t,d=e[3]-1;let m;this.outputShape=e;const f=`float(${s}) + float(${a}) * sum`;m=l===.5?`inversesqrt(${f})`:l===1?`1.0/(${f})`:`exp(log(${f}) * float(-${l}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${c};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${c}; j <= ${c}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${d}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${m};
        setOutput(result);
      }
    `}}const QU={kernelName:_f,backendName:"webgl",kernelFunc:r=>{const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{depthRadius:l,bias:c,alpha:d,beta:m}=s,f=At().getBool("WEBGL_PACK_NORMALIZATION")?new JU(a.shape,l,c,d,m):new ZU(a.shape,l,c,d,m);return t.runWebGLProgram(f,[a],a.dtype)}};class eV{constructor(e,t,s,a,l){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=s,this.alpha=a,this.beta=l,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${a}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${a})
                * float(${l})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${l});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}}const tV={kernelName:Km,backendName:"webgl",kernelFunc:r=>{const{inputs:e,backend:t,attrs:s}=r,{x:a,y:l,dy:c}=e,{depthRadius:d,bias:m,alpha:f,beta:y}=s,x=new eV(a.shape,d,m,f,y);return t.runWebGLProgram(x,[a,l,c],a.dtype)}};function GC(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{reductionIndices:l,keepDims:c}=s,d=a.shape.length,m=ir(l,a.shape);let f=m;const y=Hi(f,d),x=y!=null,_=t.shouldExecuteOnCPU([a]);let A=a;if(x){if(_){const q=t.texData.get(A.dataId).values,X=new Array(d);for(let oe=0;oe<X.length;oe++)X[oe]=a.shape[y[oe]];const re=xT(q,a.shape,a.dtype,y,X);A=t.makeTensorInfo(X,a.dtype),t.texData.get(A.dataId).values=re}else A=n1(a,y,t);f=Ai(f.length,d)}Di("max",f,d);const[C,L]=ts(A.shape,f);let P,U=C;if(c&&(U=Gi(C,m)),_){const q=t.texData.get(A.dataId).values,X=RB(q,he(L),U,a.dtype);P=t.makeTensorInfo(U,a.dtype),t.texData.get(P.dataId).values=X}else P=function(q,X,re,oe){const de=he(X),Ie=Rn({inputs:{x:q},attrs:{shape:[he(q.shape)/de,de]},backend:oe}),pe=Fm(Ie,q.dtype,"max",oe),Be=Rn({inputs:{x:pe},attrs:{shape:re},backend:oe});return oe.disposeIntermediateTensorInfo(Ie),oe.disposeIntermediateTensorInfo(pe),Be}(A,L,U,t);return x&&t.disposeIntermediateTensorInfo(A),P}const nV={kernelName:Sf,backendName:"webgl",kernelFunc:GC},rV=ia({opSnippet:`
  if (isnan(a)) return a;
  if (isnan(b)) return b;

  return max(a, b);
`,packedOpSnippet:`
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;

  return result;
`,cpuKernelImpl:LB}),iV={kernelName:Ad,backendName:"webgl",kernelFunc:rV},sV={kernelName:Mf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e;Jx(a,"maxPool");const{filterSize:l,strides:c,pad:d,dimRoundingMode:m}=s;Q(es(c,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${c} and dilations '1'`);const f=ma(a.shape,l,c,1,d,m);if(f.filterWidth===1&&f.filterHeight===1&&Le(f.inShape,f.outShape))return ko({inputs:{x:a},backend:t});const y=new tv(f,"max",!1);return t.runWebGLProgram(y,[a],a.dtype)}},aV={kernelName:Tf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{filterSize:l,strides:c,pad:d,dataFormat:m,dimRoundingMode:f}=s,y=bo(a.shape,l,c,[1,1,1],d,f,m),x=new wT(y,"max",!1);return t.runWebGLProgram(x,[a],a.dtype)}};class oV{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,l=e.effectiveFilterHeight,c=e.effectiveFilterWidth,d=l-1-e.padInfo.top,m=c-1-e.padInfo.left,f=l*c-1;this.userCode=`
      const ivec2 pads = ivec2(${d}, ${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
          wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${f} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${c} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}}class lV{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,s=e.strideHeight,a=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,d=e.dilationWidth,m=e.effectiveFilterDepth,f=e.effectiveFilterHeight,y=e.effectiveFilterWidth,x=m-1-e.padInfo.front,_=f-1-e.padInfo.top,A=y-1-e.padInfo.left,C=m*f*y-1;this.userCode=`
      const ivec3 pads = ivec3(${x}, ${_}, ${A});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${m};
           wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${f};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${y};
                wC += ${d}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${C} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${f} * ${y} +
                  wR * ${y} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}const uV={kernelName:Jm,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,input:l}=e,c=l,{filterSize:d,strides:m,pad:f,dimRoundingMode:y}=s,x=bo(c.shape,d,m,[1,1,1],f,y),_=new wT(x,"max",!0),A=t.runWebGLProgram(_,[c],c.dtype),C=new lV(x),L=t.runWebGLProgram(C,[a,A],c.dtype);return t.disposeIntermediateTensorInfo(A),L}},cV={kernelName:Zm,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{dy:a,input:l,output:c}=e,d=l;Jx([l,c],"maxPoolGrad");const{filterSize:m,strides:f,pad:y,dimRoundingMode:x}=s,_=ma(d.shape,m,f,1,y,x),A=new tv(_,"max",!0),C=t.runWebGLProgram(A,[d],d.dtype),L=new oV(_),P=t.runWebGLProgram(L,[a,C],d.dtype);return t.disposeIntermediateTensorInfo(C),P}},hV={kernelName:Id,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{const{x:s}=r,{filterSize:a,strides:l,pad:c,includeBatchInIndex:d}=e,m=t;Q(s.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const f=[1,1];Q(es(l,f),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${l} and dilations '${f}'`);const y=ma(s.shape,a,l,f,c),[x,_]=function(A,C,L,P){let U=new tv(L,"max",!1);const q=P.runWebGLProgram(U,[A],"float32");return U=new tv(L,"max",!0,!0,C),[q,P.runWebGLProgram(U,[A],"float32")]}(s,d,y,m);return[x,_]}},dV={kernelName:co,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{const{x:s}=r,{keepDims:a,axis:l}=e,c=t,d=s.shape.length,m=ir(l,s.shape);let f=m;const y=Hi(f,d),x=y!=null,_=c.shouldExecuteOnCPU([s]),A=[];let C=s;if(x){if(_){const X=c.texData.get(C.dataId).values,re=new Array(d);for(let de=0;de<re.length;de++)re[de]=s.shape[y[de]];const oe=xT(X,s.shape,s.dtype,y,re);C=c.makeTensorInfo(re,s.dtype),c.texData.get(C.dataId).values=oe}else C=n1(s,y,c);A.push(C),f=Ai(f.length,d)}Di("sum",f,d);const[L,P]=ts(C.shape,f);let U=L;a&&(U=Gi(L,m));const q=function(X,re,oe,de){const Ie=he(re),pe=Rn({inputs:{x:X},attrs:{shape:[he(X.shape)/Ie,Ie]},backend:de}),Be=Fm(pe,"float32","mean",de),ze=Rn({inputs:{x:Be},attrs:{shape:oe},backend:de});return de.disposeIntermediateTensorInfo(pe),de.disposeIntermediateTensorInfo(Be),ze}(C,P,U,c);for(const X of A)c.disposeIntermediateTensorInfo(X);return q}},pV={kernelName:Ki,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s,d=a.shape.length,m=ir(l,a.shape);let f=m;const y=Hi(f,d);let x=a;y!=null&&(x=Ba({inputs:{x:a},backend:t,attrs:{perm:y}}),f=Ai(f.length,a.shape.length)),Di("min",f,d);const[_,A]=ts(x.shape,f),C=Rn({inputs:{x},backend:t,attrs:{shape:[-1,he(A)]}}),L=Fm(C,C.dtype,"min",t);let P;return P=Rn(c?{inputs:{x:L},backend:t,attrs:{shape:Gi(_,m)}}:{inputs:{x:L},backend:t,attrs:{shape:_}}),t.disposeIntermediateTensorInfo(C),t.disposeIntermediateTensorInfo(L),y!=null&&t.disposeIntermediateTensorInfo(x),P}},fV=ia({opSnippet:`
  if (isnan(a)) return a;
  if (isnan(b)) return b;

  return min(a, b);
`,packedOpSnippet:`
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;

  return result;
`,cpuKernelImpl:DB}),mV={kernelName:Gl,backendName:"webgl",kernelFunc:fV};class gV{constructor(e,t,s){this.variableNames=["x"],this.outputShape=t.map((y,x)=>y[0]+e[x]+y[1]);const a=e.length,l=mi(a),c=t.map(y=>y[0]).join(","),d=t.map((y,x)=>y[0]+e[x]).join(","),m=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a),f=s==="reflect"?0:1;this.userCode=a!==1?`
      ${l} start = ${l}(${c});
      ${l} end = ${l}(${d});

      void main() {
        ${l} outC = getOutputCoords();
        for (int i = 0; i < ${a}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${f};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${f};
          }
        }
        ${l} coords = outC - start;
        setOutput(getX(${m}));
      }
    `:`
        int start = ${c};
        int end = ${d};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${f};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${f};
          }
          setOutput(getX(outC - start));
        }
      `}}class yV{constructor(e,t,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((C,L)=>C[0]+e[L]+C[1]);const a=e.length,l=mi(a),c=t.map(C=>C[0]).join(","),d=t.map((C,L)=>C[0]+e[L]).join(","),m=za("rc",a),f=za("source",a),y=`${m[a-1]} < ${this.outputShape[a-1]}`,x=a===1?"source":`vec2(${f.slice(-2).join()})`,_=s==="reflect"?0:1;let A="";if(a===1){const C=`
        ${l} source = rc;
        if (source < start) {
          source = start * 2 - source - ${_};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${_};
        }
        source -= start;
      `;A=`
        ${l} rc = outputLoc;
        ${C}
        result[0] = getChannel(getX(${f.join()}), ${x});
        ${m[a-1]} += 1;
        if(${y}) {
          ${C}
          result[1] = getChannel(getX(${f.join()}), ${x});
        }
      `}else{const C=`
        ${l} source = rc;
        ${l} lt = ${l}(lessThan(source, start));
        ${l} gte = ${l}(greaterThanEqual(source, end));
        ${l} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${_}) +
                gte * ((end - 1) * 2 - source + ${_});
        source -= start;
      `;A=`
        ${l} rc = outputLoc;
        ${C}
        result[0] = getChannel(getX(${f.join()}), ${x});
        ${m[a-1]} += 1;
        if(${y}) {
          ${C}
          result[1] = getChannel(getX(${f.join()}), ${x});
        }
        rc = outputLoc;
        ${m[a-2]} += 1;
        if(${m[a-2]} < ${this.outputShape[a-2]}) {
          ${C}
          result[2] = getChannel(getX(${f.join()}), ${x});
          ${m[a-1]} += 1;
          if(${y}) {
            ${C}
            result[3] = getChannel(getX(${f.join()}), ${x});
          }
        }
      `}this.userCode=`
      const ${l} start = ${l}(${c});
      const ${l} end = ${l}(${d});

      void main() {
        ${l} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${A}
        setOutput(result);
      }
    `}}const xV={kernelName:zo,backendName:"webgl",kernelFunc:({inputs:r,backend:e,attrs:t})=>{const{x:s}=r,{paddings:a,mode:l}=t,c=At().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yV(s.shape,a,l):new gV(s.shape,a,l);return e.runWebGLProgram(c,[s],s.dtype)}},vV=ia({opSnippet:`if (b == 0.0) return NAN;
  return mod(a, b);`,packedOpSnippet:`
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;

  return result;
`}),bV={kernelName:vl,backendName:"webgl",kernelFunc:vV};class wV{constructor(e,t,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,s],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}}const HC=ia({opSnippet:`
if (a == b) {
  return 1.0;
};
return a / b;`,packedOpSnippet:`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,checkOutOfBounds:!0}),_V={kernelName:Ul,backendName:"webgl",kernelFunc:HC},jC="return a - b;",qC=ia({opSnippet:jC,packedOpSnippet:jC,supportsComplex:!0,cpuKernelImpl:KB}),SV={kernelName:Gs,backendName:"webgl",kernelFunc:qC};function XC(r){const{inputs:e,backend:t,attrs:s}=r,{logits:a}=e,{dim:l}=s,c=ir([l],a.shape),d=GC({inputs:{x:a},backend:t,attrs:{reductionIndices:c,keepDims:!1}}),m=Gi(d.shape,c),f=Rn({inputs:{x:d},backend:t,attrs:{shape:m}}),y=qC({inputs:{a,b:f},backend:t}),x=zC({inputs:{x:y},backend:t}),_=r1({inputs:{x},backend:t,attrs:{axis:c,keepDims:!1}}),A=Rn({inputs:{x:_},backend:t,attrs:{shape:m}}),C=HC({inputs:{a:x,b:A},backend:t});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(y),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(_),t.disposeIntermediateTensorInfo(A),C}const MV={kernelName:Jc,backendName:"webgl",kernelFunc:XC},TV={kernelName:Vs,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{logits:a}=e,{numSamples:l,seed:c,normalized:d}=s,m=d?a:XC({inputs:{logits:a},backend:t,attrs:{dim:a.shape.length-1}}),f=m.shape[0],y=m.shape[1],x=new wV(f,y,l),_=[[c]],A=t.runWebGLProgram(x,[m],"int32",_);return d||t.disposeIntermediateTensorInfo(m),A}},YC="return -x;",EV={kernelName:Xc,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{x:s}=e;if(t.shouldExecuteOnCPU([s])){const l=t.texData.get(s.dataId),[c,d]=FB(l.values,s.shape,s.dtype);return t.makeTensorInfo(d,s.dtype,c)}let a;return a=At().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Iy(s.shape,YC):new zp(s.shape,YC),t.runWebGLProgram(a,[s],s.dtype)}},AV=Rl,IV={kernelName:Cd,backendName:"webgl",kernelFunc:function(r){sr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:s}=r,{boxes:a,scores:l}=e,{maxOutputSize:c,iouThreshold:d,scoreThreshold:m}=s,f=t.readSync(a.dataId),y=t.readSync(l.dataId),{selectedIndices:x}=AV(f,y,c,d,m);return t.makeTensorInfo([x.length],"int32",new Int32Array(x))}},CV=jg,kV={kernelName:Ef,backendName:"webgl",kernelFunc:function(r){sr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:s}=r,{boxes:a,scores:l}=e,{maxOutputSize:c,iouThreshold:d,scoreThreshold:m,padToMaxOutputSize:f}=s,y=t.readSync(a.dataId),x=t.readSync(l.dataId),{selectedIndices:_,validOutputs:A}=CV(y,x,c,d,m,f);return[t.makeTensorInfo([_.length],"int32",new Int32Array(_)),t.makeTensorInfo([],"int32",new Int32Array([A]))]}},NV=vm,RV={kernelName:Af,backendName:"webgl",kernelFunc:function(r){sr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:t,attrs:s}=r,{boxes:a,scores:l}=e,{maxOutputSize:c,iouThreshold:d,scoreThreshold:m,softNmsSigma:f}=s,y=t.readSync(a.dataId),x=t.readSync(l.dataId),_=c,A=d,C=m,L=f,{selectedIndices:P,selectedScores:U}=NV(y,x,_,A,C,L);return[t.makeTensorInfo([P.length],"int32",new Int32Array(P)),t.makeTensorInfo([U.length],"float32",new Float32Array(U))]}};class LV{constructor(e,t,s,a){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${a}), float(${s}),
                      float(index == coords.y)));
      }
    `}}const DV={kernelName:Qt,backendName:"webgl",kernelFunc:r=>{const{inputs:e,backend:t,attrs:s}=r,{indices:a}=e,{depth:l,onValue:c,offValue:d}=s,m=he(a.shape),f=new LV(m,l,c,d),y=Rn({inputs:{x:a},backend:t,attrs:{shape:[m]}}),x=t.runWebGLProgram(f,[y],a.dtype);t.disposeIntermediateTensorInfo(y);const _=Rn({inputs:{x},backend:t,attrs:{shape:[...a.shape,l]}});return t.disposeIntermediateTensorInfo(x),_}};function o1(r){const{inputs:e,backend:t}=r,{x:s}=e;if(s.dtype==="complex64"){const a=nv({inputs:{input:s},backend:t}),l=o1({inputs:{x:a},backend:t}),c=a1({inputs:{input:s},backend:t}),d=o1({inputs:{x:c},backend:t}),m=Bp({inputs:{real:l,imag:d},backend:t});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(d),m}return rv({attrs:{shape:s.shape,dtype:s.dtype,value:s.dtype==="string"?"":0},backend:t})}const PV={kernelName:kf,backendName:"webgl",kernelFunc:o1},FV={kernelName:kd,backendName:"webgl",kernelFunc:function r(e){const{inputs:t,backend:s}=e,{x:a}=t;if(a.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(a.dtype==="complex64"){const l=nv({inputs:{input:a},backend:s}),c=r({inputs:{x:l},backend:s}),d=a1({inputs:{input:a},backend:s}),m=o1({inputs:{x:d},backend:s}),f=Bp({inputs:{real:c,imag:m},backend:s});return s.disposeIntermediateTensorInfo(l),s.disposeIntermediateTensorInfo(c),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(m),f}return rv({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:s})}},OV={kernelName:Ni,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{axis:a}=s;if(e.length===1)return ST({inputs:{input:e[0]},backend:t,attrs:{dim:a}});const l=e[0].shape,c=e[0].dtype;e.forEach(f=>{Ze(l,f.shape,"All tensors passed to stack must have matching shapes"),Q(c===f.dtype,()=>"All tensors passed to stack must have matching dtypes")});const d=[],m=IC({inputs:e.map(f=>{const y=ST({inputs:{input:f},backend:t,attrs:{dim:a}});return d.push(y),y}),backend:t,attrs:{axis:a}});return d.forEach(f=>t.disposeIntermediateTensorInfo(f)),m}};class zV{constructor(e,t,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((f,y)=>f[0]+e[y]+f[1]);const a=e.length,l=mi(a),c=t.map(f=>f[0]).join(","),d=t.map((f,y)=>f[0]+e[y]).join(","),m=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a);this.userCode=a!==1?`
      ${l} start = ${l}(${c});
      ${l} end = ${l}(${d});

      void main() {
        ${l} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${l} coords = outC - start;
          setOutput(getX(${m}));
        }
      }
    `:`
        int start = ${c};
        int end = ${d};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `}}class BV{constructor(e,t,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((L,P)=>L[0]+e[P]+L[1]);const a=e.length,l=mi(a),c=t.map(L=>L[0]).join(","),d=t.map((L,P)=>L[0]+e[P]).join(","),m=za("rc",a),f=za("source",a),y=`${m[a-1]} < ${this.outputShape[a-1]}`,x=a===1?"source":`vec2(${f.slice(-2).join()})`,_=[`${l} rc = outputLoc;`,`${m[a-1]} += 1;
       if(${y}) {
      `,a===1?"":`}
       rc = outputLoc;
       ${m[a-2]} += 1;
       if(${m[a-2]} < ${this.outputShape[a-2]}) {`,a===1?"":`  ${m[a-1]} += 1;
         if(${y}) {`],A=a===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let C="";for(let L=0,P=a===1?2:4;L<P;L++)C+=`
        ${_[L]}
        if (${A}) {
          result[${L}] = float(value);
        } else {
          ${l} source = rc - start;
          result[${L}] = getChannel(getX(${f.join()}), ${x});
        }
      `;C+=a===1?"} ":"}}",this.userCode=`
      const ${l} start = ${l}(${c});
      const ${l} end = ${l}(${d});

      void main() {
        ${l} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${C}
        setOutput(result);
      }
    `}}const KC=r=>{const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{paddings:l,constantValue:c}=s;if(he(a.shape)===0)return rv({backend:t,attrs:{shape:l.map((f,y)=>f[0]+a.shape[y]+f[1]),value:c,dtype:a.dtype}});const d=At().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new BV(a.shape,l,c):new zV(a.shape,l,c),m=[[c]];return t.runWebGLProgram(d,[a],a.dtype,m)},$V={kernelName:bl,backendName:"webgl",kernelFunc:KC},UV=ia({opSnippet:`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,packedOpSnippet:`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;

  return result;
`}),VV={kernelName:Nd,backendName:"webgl",kernelFunc:UV},WV={kernelName:Rd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{axis:l,keepDims:c}=s,d=a.shape.length,m=[],f=ir(l,a.shape);let y=f;const x=Hi(y,d);let _,A=a;if(x!=null&&(A=Ba({inputs:{x:a},backend:t,attrs:{perm:x}}),y=Ai(y.length,d),m.push(A)),Di("prod",y,d),t.shouldExecuteOnCPU([A])){const C=t.texData.get(A.dataId).values,{outVals:L,outShape:P,outDtype:U}=zB(A.shape,A.dtype,C,y);_=t.makeTensorInfo(P,U,L)}else{const[C,L]=ts(A.shape,y),P=he(L),U=Rn({inputs:{x:A},backend:t,attrs:{shape:[-1,P]}}),q=Fm(U,Ff(a.dtype),"prod",t);_=Rn({inputs:{x:q},backend:t,attrs:{shape:C}}),m.push(U),m.push(q)}if(c){m.push(_);const C=Gi(_.shape,f);_=Rn({inputs:{x:_},backend:t,attrs:{shape:C}})}return m.forEach(C=>t.disposeIntermediateTensorInfo(C)),_}},ZC=r=>{const{backend:e,attrs:t}=r,{start:s,stop:a,step:l,dtype:c}=t,d=BB(s,a,l,c);return e.makeTensorInfo([d.length],c,d)},GV={kernelName:Xr,backendName:"webgl",kernelFunc:ZC},HV=jr({opSnippet:"return 1.0 / x;"}),jV={kernelName:Kc,backendName:"webgl",kernelFunc:HV},qV=jr({opSnippet:`if (isnan(x)) return x;
  return (x < 0.0) ? 0.0 : x;
`,packedOpSnippet:`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`}),XV={kernelName:Bu,backendName:"webgl",kernelFunc:qV},YV=jr({opSnippet:`if (isnan(x)) return x;
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,packedOpSnippet:`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`}),KV={kernelName:Aa,backendName:"webgl",kernelFunc:YV};class ZV{constructor(e,t,s,a,l){this.variableNames=["A"],this.outputShape=[];const[c,d,m,f]=e;this.outputShape=[c,t,s,f];const y=[a&&t>1?d-1:d,a&&s>1?m-1:m],x=[a&&t>1?t-1:t,a&&s>1?s-1:s];let _;_=l?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${y[0]/x[0]},
          ${y[1]/x[1]});
      const vec2 inputShapeRC = vec2(${d}.0, ${m}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${_};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}}class JV{constructor(e,t,s,a,l){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[c,d,m,f]=e;this.outputShape=[c,t,s,f];const y=[a&&t>1?d-1:d,a&&s>1?m-1:m],x=[a&&t>1?t-1:t,a&&s>1?s-1:s];let _;_=l?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${y[0]/x[0]},
          ${y[1]/x[1]},
          ${y[1]/x[1]});
      const vec3 inputShapeRC = vec3(${d}.0, ${m}.0,
                                     ${m}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${_};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${f-1};
        bool hasNextRow = coords.z < ${s-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}}const QV={kernelName:Dd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{images:a}=e,{alignCorners:l,halfPixelCenters:c,size:d}=s,[m,f]=d,y=At().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new JV(a.shape,m,f,l,c):new ZV(a.shape,m,f,l,c);return t.runWebGLProgram(y,[a],"float32")}};class eW{constructor(e,t,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,a,l]=t,[,c,d]=e,m=[s&&c>1?a-1:a,s&&d>1?l-1:l],f=[s&&c>1?c-1:c,s&&d>1?d-1:d],y=m[0]/f[0],x=m[1]/f[1],_=1/y,A=1/x,C=2*Math.ceil(_)+2,L=2*Math.ceil(A)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${y});
        const float widthScale = float(${x});

        const float invHeightScale = float(${_});
        const float invWidthScale = float(${A});

        const int winHeight = int(${C});
        const int winWidth = int(${L});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${c}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${d}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${a-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${l-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}const tW={kernelName:Ws,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{images:a,dy:l}=e,{alignCorners:c}=s,d=new eW(l.shape,a.shape,c);return t.runWebGLProgram(d,[l],l.dtype)}};class nW{constructor(e,t,s,a,l){this.variableNames=["A"],this.outputShape=[];const[c,d,m,f]=e;this.outputShape=[c,t,s,f];const y=[a&&t>1?d-1:d,a&&s>1?m-1:m],x=[a&&t>1?t-1:t,a&&s>1?s-1:s],_=a?"0.5":"0.0";let A;A=l?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${y[0]/x[0]},
          ${y[1]/x[1]});
      const vec2 inputShapeRC = vec2(${d}.0, ${m}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${A};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${_})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}}class rW{constructor(e,t,s,a,l){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[c,d,m,f]=e;this.outputShape=[c,t,s,f];const y=[a&&t>1?d-1:d,a&&s>1?m-1:m],x=[a&&t>1?t-1:t,a&&s>1?s-1:s],_=a?"0.5":"0.0";let A;A=l?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${y[0]/x[0]},
          ${y[1]/x[1]},
          ${y[1]/x[1]});
      const vec3 inputShapeRC = vec3(${d}.0, ${m}.0,
                                     ${m}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${A};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${_})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${f-1};
        bool hasNextRow = coords.z < ${s-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}}const iW={kernelName:Te,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{images:a}=e,{alignCorners:l,halfPixelCenters:c,size:d}=s,[m,f]=d,y=At().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new rW(a.shape,m,f,l,c):new nW(a.shape,m,f,l,c);return t.runWebGLProgram(y,[a],a.dtype)}};class sW{constructor(e,t,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,a,l]=t,[,c,d]=e,m=[s&&c>1?a-1:a,s&&d>1?l-1:l],f=[s&&c>1?c-1:c,s&&d>1?d-1:d],y=m[0]/f[0],x=m[1]/f[1],_=1/y,A=1/x,C=2*Math.ceil(_)+2,L=2*Math.ceil(A)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${y});
        const float widthScale = float(${x});

        const float invHeightScale = float(${_});
        const float invWidthScale = float(${A});

        const int winHeight = int(${C});
        const int winWidth = int(${L});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${c}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${d}) {
              continue;
            }

            float sourceFracRow =
              float(${m[0]}) *
                (float(dyR) / float(${f[0]}));

            float sourceFracCol =
                float(${m[1]}) *
                  (float(dyC) / float(${f[1]}));

            int sourceNearestRow = int(min(
                float(int(${a}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${l}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}const aW={kernelName:Ld,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{images:a,dy:l}=e,{alignCorners:c}=s,d=new sW(l.shape,a.shape,c);return t.runWebGLProgram(d,[l],l.dtype)}};class oW{constructor(e,t){this.variableNames=["x"];const s=e.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=e,s===1)return void(this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `);const a=e.map((c,d)=>(m=>t.indexOf(m)!==-1&&e[m]!==1?`${e[m]} - coords[${m}] - 1`:`coords[${m}]`)(d)).join(","),l=mi(s);this.userCode=`
      void main() {
        ${l} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}}class lW{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=e.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=e;const a=za("rc",s),l=`${a[s-1]} + 1 < ${this.outputShape[s-1]}`,c=`${a[s-2]} + 1 < ${this.outputShape[s-2]}`,d=mi(s);function m(f){const y=e.map((x,_)=>function(A,C){return t.indexOf(A)!==-1&&e[A]!==1?`${e[A]} - ${C[A]} - 1`:`${C[A]}`}(_,f));return`getChannel(getX(${y.join(",")}), vec2(${y.slice(-2).join(",")}))`}this.userCode=s===1?`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${l}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:`
        void main() {
          ${d} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${function(f){return m(f)}(a.slice())};
          if(${l}){
            result.g = ${function(f){return f[s-1]="("+f[s-1]+" + 1)",m(f)}(a.slice())};
          }
          if(${c}) {
            result.b = ${function(f){return f[s-2]="("+f[s-2]+" + 1)",m(f)}(a.slice())};
            if(${l}) {
              result.a = ${function(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",m(f)}(a.slice())};
            }
          }
          setOutput(result);
        }
    `}}const uW={kernelName:jl,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{dims:l}=s,c=a.shape.length,d=ir(l,a.shape);if(c===0)return ko({inputs:{x:a},backend:t});const m=At().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lW(a.shape,d):new oW(a.shape,d);return t.runWebGLProgram(m,[a],a.dtype)}};class cW{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=e[1],a=e[2];this.outputShape=e;let l="";l=typeof t=="number"?`float outputValue = ${t.toFixed(2)};`:`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${l}
          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}}const hW={kernelName:go,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{const{image:s}=r,{radians:a,fillValue:l,center:c}=e,d=t,m=new cW(s.shape,l),[f,y]=Mp(c,s.shape[1],s.shape[2]),x=[[f,y,Math.sin(a),Math.cos(a)]];return d.runWebGLProgram(m,[s],s.dtype,x)}},dW=jr({opSnippet:`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`}),pW={kernelName:$u,backendName:"webgl",kernelFunc:dW},fW=jr({opSnippet:"return inversesqrt(x);",cpuKernelImpl:$B}),mW={kernelName:Bo,backendName:"webgl",kernelFunc:fW};class JC{constructor(e,t,s,a,l,c,d=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=c;const m=mi(l.length),f=mi(c.length);let y="";s===1?y="i":s===2&&(y="i, j");const x=`getIndices(${y})`;let _="";a===1?_="i":a===2&&(_="i, coords[1]");const A=`getUpdates(${_})`,C=t>1?"strides[j]":"strides";this.userCode=`
        ${m} strides = ${m}(${l});

        void main() {
          ${f} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${x});
              flattenedIndex += index * ${C};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${A};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}}const gW={kernelName:ql,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{indices:a,updates:l}=e,{shape:c}=s,{sliceRank:d,numUpdates:m,sliceSize:f,strides:y,outputSize:x}=ep(0,a,c),_=[x/f,f];if(x===0)return t.makeTensorInfo(c,a.dtype);const A=Rn({inputs:{x:a},backend:t,attrs:{shape:[m,d]}}),C=Rn({inputs:{x:l},backend:t,attrs:{shape:[m,f]}}),L=t.makeTensorInfo([],"float32",new Float32Array([0])),P=new JC(m,d,A.shape.length,C.shape.length,y,_),U=t.runWebGLProgram(P,[C,A,L],C.dtype),q=Rn({inputs:{x:U},backend:t,attrs:{shape:c}});return t.disposeIntermediateTensorInfo(A),t.disposeIntermediateTensorInfo(C),t.disposeIntermediateTensorInfo(U),t.disposeIntermediateTensorInfo(L),q}};class yW{constructor(e,t,s){let a,l;if(this.variableNames=["c","a","b"],this.outputShape=t,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(s===1)l="resRC",a="resRC";else{const d=["resRC.x","resRC.y","resRC.z","resRC.w"],m=[],f=[];for(let y=0;y<t.length;y++)f.push(`${d[y]}`),y<e&&m.push(`${d[y]}`);a=m.join(),l=f.join()}const c=mi(s);this.userCode=`
      void main() {
        ${c} resRC = getOutputCoords();
        float cVal = getC(${a});
        if (cVal >= 1.0) {
          setOutput(getA(${l}));
        } else {
          setOutput(getB(${l}));
        }
      }
    `}}const xW={kernelName:wl,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{condition:s,t:a,e:l}=e,c=new yW(s.shape.length,a.shape,a.shape.length);return t.runWebGLProgram(c,[s,a,l],On(a.dtype,l.dtype))}},vW=jr({opSnippet:`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${ty};
  float scale = ${ny};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`}),bW={kernelName:qa,backendName:"webgl",kernelFunc:vW},QC="return 1.0 / (1.0 + exp(-1.0 * x));",wW=jr({opSnippet:QC,packedOpSnippet:QC,cpuKernelImpl:UB}),_W={kernelName:Yl,backendName:"webgl",kernelFunc:wW},SW=jr({opSnippet:`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`}),MW={kernelName:Xl,backendName:"webgl",kernelFunc:SW},TW=jr({opSnippet:`if (isnan(x)) return x;
  return sin(x);
`}),EW={kernelName:po,backendName:"webgl",kernelFunc:TW},AW=jr({opSnippet:`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`}),IW={kernelName:_l,backendName:"webgl",kernelFunc:AW},CW=jr({opSnippet:`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`}),kW={kernelName:fo,backendName:"webgl",kernelFunc:CW},NW={kernelName:Pd,backendName:"webgl",kernelFunc:r=>{const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{blockShape:l,paddings:c}=s;Q(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const d=l.reduce((U,q)=>U*q),m=[[0,0]];m.push(...c);for(let U=1+l.length;U<a.shape.length;++U)m.push([0,0]);const f=[],y=KC({inputs:{x:a},backend:t,attrs:{paddings:m,constantValue:0}}),x=pi(y.shape,l,d,!1),_=_m(x.length,l.length,!1),A=wi(y.shape,l,d,!1),C=Rn({inputs:{x:y},backend:t,attrs:{shape:x}}),L=Ba({inputs:{x:C},backend:t,attrs:{perm:_}}),P=Rn({inputs:{x:L},backend:t,attrs:{shape:A}});return f.push(y),f.push(C),f.push(L),f.forEach(U=>t.disposeIntermediateTensorInfo(U)),P}},RW={kernelName:$o,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{indices:s,values:a,denseShape:l,defaultValue:c}=e;if(l.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${l.shape}`);if(s.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);if(a.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${a.shape}`);if(c.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${c.shape}`);const d=t.readSync(s.dataId),m=t.readSync(a.dataId),f=t.readSync(l.dataId),y=t.readSync(c.dataId)[0],[x,_,A,C,L]=WB(d,s.shape,s.dtype,m,a.dtype,f,y);return[t.makeTensorInfo(_,s.dtype,x),t.makeTensorInfo([_[0]],a.dtype,A),t.makeTensorInfo([C.length],"bool",new Uint8Array(C.map(P=>Number(P)))),t.makeTensorInfo([L.length],s.dtype,new Int32Array(L))]}},LW={kernelName:mo,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{inputIndices:s,inputShape:a,newShape:l}=e;if(s.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(a.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${a.shape}`);if(l.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${l.shape}`);const c=Array.from(t.readSync(a.dataId)),d=t.readSync(s.dataId),m=Array.from(t.readSync(l.dataId)),[f,y,x]=GB(d,s.shape,s.dtype,c,m);return[t.makeTensorInfo(y,s.dtype,f),t.makeTensorInfo([x.length],l.dtype,new Int32Array(x))]}},DW={kernelName:Fd,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{data:s,indices:a,segmentIds:l}=e;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(a.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${a.shape}`);if(l.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${l.shape}`);const c=t.readSync(s.dataId),d=t.readSync(a.dataId),m=t.readSync(l.dataId),[f,y]=sC(c,s.shape,s.dtype,d,m,!0);return t.makeTensorInfo(y,s.dtype,f)}},PW={kernelName:Qc,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t}=r,{data:s,indices:a,segmentIds:l}=e;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(a.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${a.shape}`);if(l.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${l.shape}`);const c=t.readSync(s.dataId),d=t.readSync(a.dataId),m=t.readSync(l.dataId),[f,y]=sC(c,s.shape,s.dtype,d,m);return t.makeTensorInfo(y,s.dtype,f)}},FW={kernelName:Uo,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{sparseIndices:a,sparseValues:l,defaultValue:c}=e,{outputShape:d}=s,{sliceRank:m,numUpdates:f,strides:y,outputSize:x}=ep(0,a,d),_=new JC(f,m,a.shape.length,l.shape.length,y,[x,1],!1),A=t.runWebGLProgram(_,[l,a,c],l.dtype),C=Rn({inputs:{x:A},backend:t,attrs:{shape:d}});return t.disposeIntermediateTensorInfo(A),C}},OW={kernelName:Zc,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{numOrSizeSplits:l,axis:c}=s,d=ir(c,a.shape)[0],m=Tx(a,l,d),f=a.shape.length,y=new Array(f).fill(0),x=a.shape.slice();return m.map(_=>{const A=[...x];A[d]=_;const C=ky({inputs:{x:a},backend:t,attrs:{begin:y,size:A}});return y[d]+=_,C})}},ek="return sqrt(x);",zW=jr({opSnippet:ek,packedOpSnippet:ek,cpuKernelImpl:HB}),BW={kernelName:Uu,backendName:"webgl",kernelFunc:zW},$W=jr({opSnippet:"return x * x;"}),UW={kernelName:eh,backendName:"webgl",kernelFunc:$W},tk="return (a - b) * (a - b);",VW=ia({opSnippet:tk,packedOpSnippet:tk}),WW={kernelName:Vu,backendName:"webgl",kernelFunc:VW},GW={kernelName:rh,backendName:"webgl",kernelFunc:function({inputs:r,attrs:e,backend:t}){const{x:s}=r,a=`if (isnan(x)) return x;
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `,l=new zp(s.shape,a);return t.runWebGLProgram(l,[s],s.dtype)}};class HW{constructor(e,t,s){this.variableNames=["x"],this.outputShape=s;const a=s.length,l=mi(s.length),c=mi(s.length);let d="";if(a===1)d="coords * strides + begin";else{let m=0;d=s.map((f,y)=>(m++,s.length===1?`coords * strides[${y}] + begin[${y}]`:`coords[${m-1}] * strides[${y}] + begin[${y}]`)).join(",")}this.userCode=`
      ${l} begin = ${l}(${e});
      ${l} strides = ${l}(${t});

      void main() {
        ${c} coords = getOutputCoords();
        setOutput(getX(${d}));
      }
    `}}const jW={kernelName:Od,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{begin:l,end:c,strides:d,beginMask:m,endMask:f,ellipsisMask:y,newAxisMask:x,shrinkAxisMask:_}=s,{nonStrided:A,$begin:C,$strides:L,size:P,newShape:U,outShape:q}=F0(a.shape,l,c,d,m,f,y,x,_),X=Rn({inputs:{x:a},backend:t,attrs:{shape:U}});let re;if(A){const de=ky({inputs:{x:X},backend:t,attrs:{begin:C,size:P}});re=Rn({inputs:{x:de},backend:t,attrs:{shape:q}}),t.disposeIntermediateTensorInfo(de)}else if(q.some(de=>de===0))re=t.makeTensorInfo(q,a.dtype,[]);else if(t.shouldExecuteOnCPU([X])){const de=t.texData.get(X.dataId).values,Ie=Er(X.shape,X.dtype,de),pe=jB(q,Ie,L,C);re=t.makeTensorInfo(q,X.dtype,pe.values)}else{const de=new HW(C,L,q);re=t.runWebGLProgram(de,[X],X.dtype)}const oe=Rn({inputs:{x:re},backend:t,attrs:{shape:q}});return t.disposeIntermediateTensorInfo(X),t.disposeIntermediateTensorInfo(re),oe}},qW={kernelName:Vo,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{separator:a,nGramWidths:l,leftPad:c,rightPad:d,padWidth:m,preserveShortSequences:f}=s,{data:y,dataSplits:x}=e,_=t.readSync(y.dataId),A=t.readSync(x.dataId),[C,L]=qB(_,A,a,l,c,d,m,f);return[t.makeTensorInfo([C.length],"string",C),t.makeTensorInfo(x.shape,"int32",L)]}},XW={kernelName:Gn,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{skipEmpty:a}=s,{input:l,delimiter:c}=e;if(l.dtype!=="string")throw new Error("Input must be of datatype string");if(l.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${l.shape}`);if(c.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${c.shape}`);const d=t.readSync(l.dataId),m=t.readSync(c.dataId)[0],[f,y,x]=XB(d,m,a),_=y.length;return[t.makeTensorInfo([_,2],"int32",f),t.makeTensorInfo([_],"string",y),t.makeTensorInfo([2],"int32",new Int32Array(x))]}},YW={kernelName:Kl,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{numBuckets:a}=s,{input:l}=e;if(l.dtype!=="string")throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const c=t.readSync(l.dataId),d=YB(c,a);return t.makeTensorInfo(l.shape,"int32",d)}},KW=jr({opSnippet:"return tan(x);"}),ZW={kernelName:zd,backendName:"webgl",kernelFunc:KW},JW=jr({opSnippet:`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`}),QW={kernelName:Bd,backendName:"webgl",kernelFunc:JW};class eG{constructor(e,t){this.variableNames=["A"];const s=new Array(e.length);for(let c=0;c<s.length;c++)s[c]=e[c]*t[c];this.outputShape=s,this.rank=s.length;const a=mi(this.rank),l=function(c){const d=c.length;if(d>5)throw Error(`Tile for rank ${d} is not yet supported`);if(d===1)return`imod(resRC, ${c[0]})`;const m=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],f=[];for(let y=0;y<c.length;y++)f.push(`imod(${m[y]}, ${c[y]})`);return f.join()}(e);this.userCode=`
      void main() {
        ${a} resRC = getOutputCoords();
        setOutput(getA(${l}));
      }
    `}}function nk(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{reps:l}=s;if(a.dtype==="string"||a.shape.length>5){const d=t.readSync(a.dataId),m=a.dtype==="string"?d.map(x=>Mr(x)):d,f=Er(a.shape,a.dtype,m),y=ZB(f,l);return t.makeTensorInfo(y.shape,y.dtype,y.values)}const c=new eG(a.shape,l);return t.runWebGLProgram(c,[a],a.dtype)}const tG={kernelName:Xa,backendName:"webgl",kernelFunc:nk};class nG{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}}class rG{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}}function Om(r,e){e!==null&&r.disposeIntermediateTensorInfo(e)}function rk(r){let e=1;for(;e<r;)e*=2;return e}const iG={kernelName:th,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a}=e,{k:l,sorted:c}=s,d=At().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),m=At().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),f=a.shape,y=f[f.length-1];if(t.shouldExecuteOnCPU([a])||y<d||l>m){const Be=t.readSync(a.dataId),[ze,Ve]=JB(Be,f,a.dtype,l,c);return[t.makeTensorInfo(ze.shape,ze.dtype,ze.values),t.makeTensorInfo(Ve.shape,Ve.dtype,Ve.values)]}if(l===0)return f[f.length-1]=0,[t.makeTensorInfo(f,a.dtype,[]),t.makeTensorInfo(f,"int32",[])];if(y===1)return[a,rv({attrs:{shape:f,dtype:"int32",value:0},backend:t})];const x=t.texData.get(a.dataId),_=x!==null&&x.isPacked,A=_?t.unpackTensor(a):a,C=he(f)/y,L=Rn({inputs:{x:A},attrs:{shape:[C,y]},backend:t});_&&Om(t,A);const P=rk(l),U=rk(y);let q=null;const X=()=>q===null?[L,L]:[L,q],re=(Be,ze,Ve)=>{const Qe=X(),nt=new nG(Ve),ft=[[y],[q===null?1:0],[Number.NEGATIVE_INFINITY],[Be],[ze]],yt=q;q=t.runWebGLProgram(nt,Qe,"int32",ft),Om(t,yt)};for(let Be=1;Be<P;Be*=2){const ze=2*Be;for(let Ve=Be;Ve>=1;Ve/=2)re(ze,Ve,[C,U])}for(let Be=U;Be>P;Be/=2){const ze=X(),Ve=new rG([C,Be/2]),Qe=[[y],[q===null?1:0],[P]],nt=q;q=t.runWebGLProgram(Ve,ze,"int32",Qe),Om(t,nt);const ft=P/2,yt=2*ft;for(let Mt=ft;Mt>=1;Mt/=2)re(yt,Mt,q.shape)}let oe=q;q=ky({inputs:{x:q},backend:t,attrs:{begin:0,size:[C,l]}}),Om(t,oe);let de=WC({inputs:{x:L,indices:q},backend:t,attrs:{axis:1,batchDims:1}});Om(t,L);const Ie=f.slice(0,-1);Ie.push(l),oe=q,q=Rn({inputs:{x:q},attrs:{shape:Ie},backend:t}),Om(t,oe);const pe=de;return de=Rn({inputs:{x:de},attrs:{shape:Ie},backend:t}),Om(t,pe),[de,q]}};class sG{constructor(e,t,s,a,l,c){this.variableNames=["Image","Transforms"],this.outputShape=c;const d=s==="nearest"?1:2;let m;switch(a){case"constant":m=1;break;case"reflect":m=2;break;case"wrap":m=3;break;case"nearest":m=4;break;default:m=1}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${m} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${m} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${m} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${l});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${l});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${d} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}}const aG={kernelName:Hs,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{image:a,transforms:l}=e,{interpolation:c,fillMode:d,fillValue:m,outputShape:f}=s,[y,x,_,A]=a.shape,[C,L]=f!=null?f:[x,_],P=new sG(x,_,c,d,m,[y,C,L,A]);return t.runWebGLProgram(P,[a,l],"float32")}},oG={kernelName:Cf,backendName:"webgl",kernelFunc:function(r){const{inputs:e,attrs:t,backend:s}=r,{axis:a}=t,{x:l}=e;Jx(l,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const c=s.readSync(l.dataId),{outputValues:d,outputShape:m,indices:f}=QB(c,a,l.shape,l.dtype);return[s.makeTensorInfo(m,l.dtype,d),s.makeTensorInfo([f.length],"int32",f)]}},lG={kernelName:Wo,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{value:a}=e;let{axis:l}=s;l<0&&(l+=a.shape.length);const c=a,d=c.shape.length,m=a.shape[l],f=new Array(d-1);let y=0;for(let L=0;L<d;L++)L!==l&&(f[y++]=c.shape[L]);const x=[],_=new Array(d).fill(0),A=c.shape.slice();A[l]=1;const C=new Array(m);for(let L=0;L<C.length;L++){_[l]=L;const P=ky({inputs:{x:c},backend:t,attrs:{begin:_,size:A}}),U=Rn({inputs:{x:P},backend:t,attrs:{shape:f}});C[L]=U,x.push(P)}return x.forEach(L=>t.disposeIntermediateTensorInfo(L)),C}};class uG{constructor(e,t){this.variableNames=["x","segmentIds"];const s=e.windowSize,a=e.batchSize,l=e.inSize,c=e.numSegments,d=c*Math.ceil(l/s);this.outputShape=[a,d];const m=4*Math.floor(s/4),f=s%4,y=`
        sumValue += dot(values, segFilter);
    `;let x="";l%s>0&&(x=`
        if (inIdx < 0 || inIdx >= ${l}) {
          return initializationValue;
        }
      `);let _="";l%s>0&&(_=`
        if (inIdx < 0 || inIdx >= ${l}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = 0.0;

      float getValue(int batch, int inIdx) {
        ${x}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${_}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${c})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${c})));

        float sumValue = 0.0;

        for (int i = 0; i < ${m}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${y}
        }

        int inIdx = inOffset + ${m};
        if (${f===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${y}
        } else if (${f===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${y}
        } else if (${f===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${y}
        }
        setOutput(sumValue);
      }
    `}}const cG=[QU,tV,g4,y4,v4,w4,S4,E4,A4,I4,N4,R4,D4,F4,$4,z4,V4,G4,W4,q4,X4,Y4,J4,n$,r$,a$,l$,h$,p$,a4,y$,T$,E$,b$,I$,C$,A$,N$,L$,P$,F$,O$,B$,W$,G$,$$,j$,X$,Y$,Z$,J$,eU,nU,rU,iU,aU,oU,uU,hU,pU,mU,xU,vU,bU,_U,MU,EU,IU,s4,CU,g$,NU,LU,PU,o4,OU,BU,$U,GU,VU,jU,XU,KU,nV,aV,sV,uV,cV,hV,iV,dV,pV,mV,xV,bV,TV,u4,EV,IV,kV,RV,i$,DV,FV,OV,$V,VV,l4,WV,GV,s$,_V,jV,KV,XV,c4,QV,tW,iW,aW,uW,hW,pW,mW,gW,xW,bW,_W,MW,EW,IW,t$,MV,kW,NW,RW,LW,DW,PW,FW,OW,BW,UW,WW,GW,jW,qW,XW,YW,SV,f4,ZW,QW,tG,iG,aG,m4,oG,lG,{kernelName:nh,backendName:"webgl",kernelFunc:function(r){const{inputs:e,backend:t,attrs:s}=r,{x:a,segmentIds:l}=e,{numSegments:c}=s,d=a.shape.length,m=[];let f=0;const y=Hi([f],d);let x=a;y!=null&&(x=Ba({inputs:{x:a},backend:t,attrs:{perm:y}}),m.push(x),f=Ai(1,d)[0]);const _=Qb(x.shape,f,c),A=he([x.shape[f]]),C=Rn({inputs:{x},backend:t,attrs:{shape:[-1,A]}});m.push(C);const L=Ff(a.dtype),P=(X,re,oe,de,Ie)=>{const pe=X.shape[0],Be=X.shape[1],ze=Jb(Be,Ie),Ve=new uG({windowSize:ze,inSize:Be,batchSize:pe,numSegments:Ie},re),Qe=t.compileAndRun(Ve,[X,oe],de);if(m.push(Qe),Qe.shape[1]===Ie)return Qe;const nt=ZC({backend:t,attrs:{start:0,stop:Ie,step:1,dtype:"float32"}}),ft=nk({inputs:{x:nt},backend:t,attrs:{reps:[Be/ze]}});return m.push(nt),m.push(ft),P(Qe,re,ft,de,Ie)},U=Rn({inputs:{x:P(C,"unsortedSegmentSum",l,L,c)},backend:t,attrs:{shape:_}});let q=U;if(y!=null){m.push(U);const X=ni(y);q=Ba({inputs:{x:q},backend:t,attrs:{perm:X}})}return m.forEach(X=>t.disposeIntermediateTensorInfo(X)),q}},PV];for(const r of cG)Lf(r);const hG={"tfjs-core":B0,"tfjs-backend-cpu":"3.9.0","tfjs-backend-webgl":"3.9.0","tfjs-data":BA,"tfjs-layers":Ew,"tfjs-converter":bA,tfjs:"3.9.0"}},58485:(g,v,b)=>{b.d(v,{Z:()=>F});var M=b(23645),N=b.n(M)()(function(D){return D[1]});N.push([g.id,`.mindar-ui-overlay{display:flex;align-items:center;justify-content:center;position:absolute;left:0;right:0;top:0;bottom:0;background:transparent;z-index:2}.mindar-ui-overlay.hidden{display:none}.mindar-ui-loading .loader{border:16px solid #222;border-top:16px solid #fff;opacity:0.8;border-radius:50%;width:120px;height:120px;animation:spin 2s linear infinite}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.mindar-ui-compatibility .content{background:black;color:white;opacity:0.8;text-align:center;margin:20px;padding:20px;min-height:50vh}@media (min-aspect-ratio: 1 / 1){.mindar-ui-scanning .scanning{width:50vh;height:50vh}}@media (max-aspect-ratio: 1 / 1){.mindar-ui-scanning .scanning{width:80vw;height:80vw}}.mindar-ui-scanning .scanning .inner{position:relative;width:100%;height:100%;opacity:0.8;background:linear-gradient(to right, #fff 10px, transparent 10px) 0 0,linear-gradient(to right, #fff 10px, transparent 10px) 0 100%,linear-gradient(to left, #fff 10px, transparent 10px) 100% 0,linear-gradient(to left, #fff 10px, transparent 10px) 100% 100%,linear-gradient(to bottom, #fff 10px, transparent 10px) 0 0,linear-gradient(to bottom, #fff 10px, transparent 10px) 100% 0,linear-gradient(to top, #fff 10px, transparent 10px) 0 100%,linear-gradient(to top, #fff 10px, transparent 10px) 100% 100%;background-repeat:no-repeat;background-size:40px 40px}.mindar-ui-scanning .scanning .inner .scanline{position:absolute;width:100%;height:10px;background:#fff;animation:move 2s linear infinite}@keyframes move{0%,100%{top:0%}50%{top:calc(100% - 10px)}}
`,""]);const F=N},23645:g=>{g.exports=function(v){var b=[];return b.toString=function(){return this.map(function(M){var N=v(M);return M[2]?"@media ".concat(M[2]," {").concat(N,"}"):N}).join("")},b.i=function(M,N,F){typeof M=="string"&&(M=[[null,M,""]]);var D={};if(F)for(var O=0;O<this.length;O++){var z=this[O][0];z!=null&&(D[z]=!0)}for(var B=0;B<M.length;B++){var W=[].concat(M[B]);F&&D[W[0]]||(N&&(W[2]?W[2]="".concat(N," and ").concat(W[2]):W[2]=N),b.push(W))}},b}},97676:(g,v,b)=>{b.d(v,{Z:()=>M});const M='<div class="mindar-ui-overlay mindar-ui-compatibility"> <div class="content"> <h1>Failed to launch :(</h1> <p> Looks like your device/browser is not compatible. </p> <br/> <br/> <p> Please try the following recommended browsers: </p> <p> For Android device - Chrome </p> <p> For iOS device - Safari </p> </div> </div> '},69894:(g,v,b)=>{b.d(v,{Z:()=>M});const M='<div class="mindar-ui-overlay mindar-ui-loading"> <div class="loader"/> </div> '},22810:(g,v,b)=>{b.d(v,{Z:()=>M});const M='<div class="mindar-ui-overlay mindar-ui-scanning"> <div class="scanning"> <div class="inner"> <div class="scanline"/> </div> </div> </div> '},43720:g=>{g.exports=b;var v=null;try{v=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function b(ue,Se,je){this.low=0|ue,this.high=0|Se,this.unsigned=!!je}function M(ue){return(ue&&ue.__isLong__)===!0}b.prototype.__isLong__,Object.defineProperty(b.prototype,"__isLong__",{value:!0}),b.isLong=M;var N={},F={};function D(ue,Se){var je,rt,et;return Se?(et=0<=(ue>>>=0)&&ue<256)&&(rt=F[ue])?rt:(je=z(ue,(0|ue)<0?-1:0,!0),et&&(F[ue]=je),je):(et=-128<=(ue|=0)&&ue<128)&&(rt=N[ue])?rt:(je=z(ue,ue<0?-1:0,!1),et&&(N[ue]=je),je)}function O(ue,Se){if(isNaN(ue))return Se?fe:le;if(Se){if(ue<0)return fe;if(ue>=J)return Ke}else{if(ue<=-V)return Ye;if(ue+1>=V)return We}return ue<0?O(-ue,Se).neg():z(ue%K|0,ue/K|0,Se)}function z(ue,Se,je){return new b(ue,Se,je)}b.fromInt=D,b.fromNumber=O,b.fromBits=z;var B=Math.pow;function W(ue,Se,je){if(ue.length===0)throw Error("empty string");if(ue==="NaN"||ue==="Infinity"||ue==="+Infinity"||ue==="-Infinity")return le;if(typeof Se=="number"?(je=Se,Se=!1):Se=!!Se,(je=je||10)<2||36<je)throw RangeError("radix");var rt;if((rt=ue.indexOf("-"))>0)throw Error("interior hyphen");if(rt===0)return W(ue.substring(1),Se,je).neg();for(var et=O(B(je,8)),ot=le,Et=0;Et<ue.length;Et+=8){var tn=Math.min(8,ue.length-Et),ln=parseInt(ue.substring(Et,Et+tn),je);if(tn<8){var Vt=O(B(je,tn));ot=ot.mul(Vt).add(O(ln))}else ot=(ot=ot.mul(et)).add(O(ln))}return ot.unsigned=Se,ot}function G(ue,Se){return typeof ue=="number"?O(ue,Se):typeof ue=="string"?W(ue,Se):z(ue.low,ue.high,typeof Se=="boolean"?Se:ue.unsigned)}b.fromString=W,b.fromValue=G;var K=4294967296,J=K*K,V=J/2,Z=D(1<<24),le=D(0);b.ZERO=le;var fe=D(0,!0);b.UZERO=fe;var be=D(1);b.ONE=be;var Me=D(1,!0);b.UONE=Me;var ce=D(-1);b.NEG_ONE=ce;var We=z(-1,2147483647,!1);b.MAX_VALUE=We;var Ke=z(-1,-1,!0);b.MAX_UNSIGNED_VALUE=Ke;var Ye=z(0,-2147483648,!1);b.MIN_VALUE=Ye;var xe=b.prototype;xe.toInt=function(){return this.unsigned?this.low>>>0:this.low},xe.toNumber=function(){return this.unsigned?(this.high>>>0)*K+(this.low>>>0):this.high*K+(this.low>>>0)},xe.toString=function(ue){if((ue=ue||10)<2||36<ue)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(Ye)){var Se=O(ue),je=this.div(Se),rt=je.mul(Se).sub(this);return je.toString(ue)+rt.toInt().toString(ue)}return"-"+this.neg().toString(ue)}for(var et=O(B(ue,6),this.unsigned),ot=this,Et="";;){var tn=ot.div(et),ln=(ot.sub(tn.mul(et)).toInt()>>>0).toString(ue);if((ot=tn).isZero())return ln+Et;for(;ln.length<6;)ln="0"+ln;Et=""+ln+Et}},xe.getHighBits=function(){return this.high},xe.getHighBitsUnsigned=function(){return this.high>>>0},xe.getLowBits=function(){return this.low},xe.getLowBitsUnsigned=function(){return this.low>>>0},xe.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Ye)?64:this.neg().getNumBitsAbs();for(var ue=this.high!=0?this.high:this.low,Se=31;Se>0&&(ue&1<<Se)==0;Se--);return this.high!=0?Se+33:Se+1},xe.isZero=function(){return this.high===0&&this.low===0},xe.eqz=xe.isZero,xe.isNegative=function(){return!this.unsigned&&this.high<0},xe.isPositive=function(){return this.unsigned||this.high>=0},xe.isOdd=function(){return(1&this.low)==1},xe.isEven=function(){return(1&this.low)==0},xe.equals=function(ue){return M(ue)||(ue=G(ue)),(this.unsigned===ue.unsigned||this.high>>>31!=1||ue.high>>>31!=1)&&this.high===ue.high&&this.low===ue.low},xe.eq=xe.equals,xe.notEquals=function(ue){return!this.eq(ue)},xe.neq=xe.notEquals,xe.ne=xe.notEquals,xe.lessThan=function(ue){return this.comp(ue)<0},xe.lt=xe.lessThan,xe.lessThanOrEqual=function(ue){return this.comp(ue)<=0},xe.lte=xe.lessThanOrEqual,xe.le=xe.lessThanOrEqual,xe.greaterThan=function(ue){return this.comp(ue)>0},xe.gt=xe.greaterThan,xe.greaterThanOrEqual=function(ue){return this.comp(ue)>=0},xe.gte=xe.greaterThanOrEqual,xe.ge=xe.greaterThanOrEqual,xe.compare=function(ue){if(M(ue)||(ue=G(ue)),this.eq(ue))return 0;var Se=this.isNegative(),je=ue.isNegative();return Se&&!je?-1:!Se&&je?1:this.unsigned?ue.high>>>0>this.high>>>0||ue.high===this.high&&ue.low>>>0>this.low>>>0?-1:1:this.sub(ue).isNegative()?-1:1},xe.comp=xe.compare,xe.negate=function(){return!this.unsigned&&this.eq(Ye)?Ye:this.not().add(be)},xe.neg=xe.negate,xe.add=function(ue){M(ue)||(ue=G(ue));var Se=this.high>>>16,je=65535&this.high,rt=this.low>>>16,et=65535&this.low,ot=ue.high>>>16,Et=65535&ue.high,tn=ue.low>>>16,ln=0,Vt=0,En=0,Bt=0;return En+=(Bt+=et+(65535&ue.low))>>>16,Vt+=(En+=rt+tn)>>>16,ln+=(Vt+=je+Et)>>>16,ln+=Se+ot,z((En&=65535)<<16|(Bt&=65535),(ln&=65535)<<16|(Vt&=65535),this.unsigned)},xe.subtract=function(ue){return M(ue)||(ue=G(ue)),this.add(ue.neg())},xe.sub=xe.subtract,xe.multiply=function(ue){if(this.isZero())return le;if(M(ue)||(ue=G(ue)),v)return z(v.mul(this.low,this.high,ue.low,ue.high),v.get_high(),this.unsigned);if(ue.isZero())return le;if(this.eq(Ye))return ue.isOdd()?Ye:le;if(ue.eq(Ye))return this.isOdd()?Ye:le;if(this.isNegative())return ue.isNegative()?this.neg().mul(ue.neg()):this.neg().mul(ue).neg();if(ue.isNegative())return this.mul(ue.neg()).neg();if(this.lt(Z)&&ue.lt(Z))return O(this.toNumber()*ue.toNumber(),this.unsigned);var Se=this.high>>>16,je=65535&this.high,rt=this.low>>>16,et=65535&this.low,ot=ue.high>>>16,Et=65535&ue.high,tn=ue.low>>>16,ln=65535&ue.low,Vt=0,En=0,Bt=0,sn=0;return Bt+=(sn+=et*ln)>>>16,En+=(Bt+=rt*ln)>>>16,Bt&=65535,En+=(Bt+=et*tn)>>>16,Vt+=(En+=je*ln)>>>16,En&=65535,Vt+=(En+=rt*tn)>>>16,En&=65535,Vt+=(En+=et*Et)>>>16,Vt+=Se*ln+je*tn+rt*Et+et*ot,z((Bt&=65535)<<16|(sn&=65535),(Vt&=65535)<<16|(En&=65535),this.unsigned)},xe.mul=xe.multiply,xe.divide=function(ue){if(M(ue)||(ue=G(ue)),ue.isZero())throw Error("division by zero");var Se,je,rt;if(v)return this.unsigned||this.high!==-2147483648||ue.low!==-1||ue.high!==-1?z((this.unsigned?v.div_u:v.div_s)(this.low,this.high,ue.low,ue.high),v.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?fe:le;if(this.unsigned){if(ue.unsigned||(ue=ue.toUnsigned()),ue.gt(this))return fe;if(ue.gt(this.shru(1)))return Me;rt=fe}else{if(this.eq(Ye))return ue.eq(be)||ue.eq(ce)?Ye:ue.eq(Ye)?be:(Se=this.shr(1).div(ue).shl(1)).eq(le)?ue.isNegative()?be:ce:(je=this.sub(ue.mul(Se)),rt=Se.add(je.div(ue)));if(ue.eq(Ye))return this.unsigned?fe:le;if(this.isNegative())return ue.isNegative()?this.neg().div(ue.neg()):this.neg().div(ue).neg();if(ue.isNegative())return this.div(ue.neg()).neg();rt=le}for(je=this;je.gte(ue);){Se=Math.max(1,Math.floor(je.toNumber()/ue.toNumber()));for(var et=Math.ceil(Math.log(Se)/Math.LN2),ot=et<=48?1:B(2,et-48),Et=O(Se),tn=Et.mul(ue);tn.isNegative()||tn.gt(je);)tn=(Et=O(Se-=ot,this.unsigned)).mul(ue);Et.isZero()&&(Et=be),rt=rt.add(Et),je=je.sub(tn)}return rt},xe.div=xe.divide,xe.modulo=function(ue){return M(ue)||(ue=G(ue)),v?z((this.unsigned?v.rem_u:v.rem_s)(this.low,this.high,ue.low,ue.high),v.get_high(),this.unsigned):this.sub(this.div(ue).mul(ue))},xe.mod=xe.modulo,xe.rem=xe.modulo,xe.not=function(){return z(~this.low,~this.high,this.unsigned)},xe.and=function(ue){return M(ue)||(ue=G(ue)),z(this.low&ue.low,this.high&ue.high,this.unsigned)},xe.or=function(ue){return M(ue)||(ue=G(ue)),z(this.low|ue.low,this.high|ue.high,this.unsigned)},xe.xor=function(ue){return M(ue)||(ue=G(ue)),z(this.low^ue.low,this.high^ue.high,this.unsigned)},xe.shiftLeft=function(ue){return M(ue)&&(ue=ue.toInt()),(ue&=63)==0?this:ue<32?z(this.low<<ue,this.high<<ue|this.low>>>32-ue,this.unsigned):z(0,this.low<<ue-32,this.unsigned)},xe.shl=xe.shiftLeft,xe.shiftRight=function(ue){return M(ue)&&(ue=ue.toInt()),(ue&=63)==0?this:ue<32?z(this.low>>>ue|this.high<<32-ue,this.high>>ue,this.unsigned):z(this.high>>ue-32,this.high>=0?0:-1,this.unsigned)},xe.shr=xe.shiftRight,xe.shiftRightUnsigned=function(ue){if(M(ue)&&(ue=ue.toInt()),(ue&=63)==0)return this;var Se=this.high;return ue<32?z(this.low>>>ue|Se<<32-ue,Se>>>ue,this.unsigned):z(ue===32?Se:Se>>>ue-32,0,this.unsigned)},xe.shru=xe.shiftRightUnsigned,xe.shr_u=xe.shiftRightUnsigned,xe.toSigned=function(){return this.unsigned?z(this.low,this.high,!1):this},xe.toUnsigned=function(){return this.unsigned?this:z(this.low,this.high,!0)},xe.toBytes=function(ue){return ue?this.toBytesLE():this.toBytesBE()},xe.toBytesLE=function(){var ue=this.high,Se=this.low;return[255&Se,Se>>>8&255,Se>>>16&255,Se>>>24,255&ue,ue>>>8&255,ue>>>16&255,ue>>>24]},xe.toBytesBE=function(){var ue=this.high,Se=this.low;return[ue>>>24,ue>>>16&255,ue>>>8&255,255&ue,Se>>>24,Se>>>16&255,Se>>>8&255,255&Se]},b.fromBytes=function(ue,Se,je){return je?b.fromBytesLE(ue,Se):b.fromBytesBE(ue,Se)},b.fromBytesLE=function(ue,Se){return new b(ue[0]|ue[1]<<8|ue[2]<<16|ue[3]<<24,ue[4]|ue[5]<<8|ue[6]<<16|ue[7]<<24,Se)},b.fromBytesBE=function(ue,Se){return new b(ue[4]<<24|ue[5]<<16|ue[6]<<8|ue[7],ue[0]<<24|ue[1]<<16|ue[2]<<8|ue[3],Se)}},36377:(g,v,b)=>{var M=b(84832),N=b(68652),F=b(90801),D=b(92030),O=b(3618),z=b(89049),B=b(51971);B.alea=M,B.xor128=N,B.xorwow=F,B.xorshift7=D,B.xor4096=O,B.tychei=z,g.exports=B},84832:function(g,v,b){var M;(function(N,F,D){function O(W){var G,K=this,J=(G=4022871197,function(V){V=V.toString();for(var Z=0;Z<V.length;Z++){var le=.02519603282416938*(G+=V.charCodeAt(Z));le-=G=le>>>0,G=(le*=G)>>>0,G+=4294967296*(le-=G)}return 23283064365386963e-26*(G>>>0)});K.next=function(){var V=2091639*K.s0+23283064365386963e-26*K.c;return K.s0=K.s1,K.s1=K.s2,K.s2=V-(K.c=0|V)},K.c=1,K.s0=J(" "),K.s1=J(" "),K.s2=J(" "),K.s0-=J(W),K.s0<0&&(K.s0+=1),K.s1-=J(W),K.s1<0&&(K.s1+=1),K.s2-=J(W),K.s2<0&&(K.s2+=1),J=null}function z(W,G){return G.c=W.c,G.s0=W.s0,G.s1=W.s1,G.s2=W.s2,G}function B(W,G){var K=new O(W),J=G&&G.state,V=K.next;return V.int32=function(){return 4294967296*K.next()|0},V.double=function(){return V()+11102230246251565e-32*(2097152*V()|0)},V.quick=V,J&&(typeof J=="object"&&z(J,K),V.state=function(){return z(K,{})}),V}F&&F.exports?F.exports=B:b.amdD&&b.amdO?(M=function(){return B}.call(v,b,v,F))===void 0||(F.exports=M):this.alea=B})(0,g=b.nmd(g),b.amdD)},89049:function(g,v,b){var M;(function(N,F,D){function O(W){var G=this,K="";G.next=function(){var V=G.b,Z=G.c,le=G.d,fe=G.a;return V=V<<25^V>>>7^Z,Z=Z-le|0,le=le<<24^le>>>8^fe,fe=fe-V|0,G.b=V=V<<20^V>>>12^Z,G.c=Z=Z-le|0,G.d=le<<16^Z>>>16^fe,G.a=fe-V|0},G.a=0,G.b=0,G.c=-1640531527,G.d=1367130551,W===Math.floor(W)?(G.a=W/4294967296|0,G.b=0|W):K+=W;for(var J=0;J<K.length+20;J++)G.b^=0|K.charCodeAt(J),G.next()}function z(W,G){return G.a=W.a,G.b=W.b,G.c=W.c,G.d=W.d,G}function B(W,G){var K=new O(W),J=G&&G.state,V=function(){return(K.next()>>>0)/4294967296};return V.double=function(){do var Z=((K.next()>>>11)+(K.next()>>>0)/4294967296)/2097152;while(Z===0);return Z},V.int32=K.next,V.quick=V,J&&(typeof J=="object"&&z(J,K),V.state=function(){return z(K,{})}),V}F&&F.exports?F.exports=B:b.amdD&&b.amdO?(M=function(){return B}.call(v,b,v,F))===void 0||(F.exports=M):this.tychei=B})(0,g=b.nmd(g),b.amdD)},68652:function(g,v,b){var M;(function(N,F,D){function O(W){var G=this,K="";G.x=0,G.y=0,G.z=0,G.w=0,G.next=function(){var V=G.x^G.x<<11;return G.x=G.y,G.y=G.z,G.z=G.w,G.w^=G.w>>>19^V^V>>>8},W===(0|W)?G.x=W:K+=W;for(var J=0;J<K.length+64;J++)G.x^=0|K.charCodeAt(J),G.next()}function z(W,G){return G.x=W.x,G.y=W.y,G.z=W.z,G.w=W.w,G}function B(W,G){var K=new O(W),J=G&&G.state,V=function(){return(K.next()>>>0)/4294967296};return V.double=function(){do var Z=((K.next()>>>11)+(K.next()>>>0)/4294967296)/2097152;while(Z===0);return Z},V.int32=K.next,V.quick=V,J&&(typeof J=="object"&&z(J,K),V.state=function(){return z(K,{})}),V}F&&F.exports?F.exports=B:b.amdD&&b.amdO?(M=function(){return B}.call(v,b,v,F))===void 0||(F.exports=M):this.xor128=B})(0,g=b.nmd(g),b.amdD)},3618:function(g,v,b){var M;(function(N,F,D){function O(W){var G=this;G.next=function(){var K,J,V=G.w,Z=G.X,le=G.i;return G.w=V=V+1640531527|0,J=Z[le+34&127],K=Z[le=le+1&127],J^=J<<13,K^=K<<17,J^=J>>>15,K^=K>>>12,J=Z[le]=J^K,G.i=le,J+(V^V>>>16)|0},function(K,J){var V,Z,le,fe,be,Me=[],ce=128;for(J===(0|J)?(Z=J,J=null):(J+="\0",Z=0,ce=Math.max(ce,J.length)),le=0,fe=-32;fe<ce;++fe)J&&(Z^=J.charCodeAt((fe+32)%J.length)),fe===0&&(be=Z),Z^=Z<<10,Z^=Z>>>15,Z^=Z<<4,Z^=Z>>>13,fe>=0&&(be=be+1640531527|0,le=(V=Me[127&fe]^=Z+be)==0?le+1:0);for(le>=128&&(Me[127&(J&&J.length||0)]=-1),le=127,fe=512;fe>0;--fe)Z=Me[le+34&127],V=Me[le=le+1&127],Z^=Z<<13,V^=V<<17,Z^=Z>>>15,V^=V>>>12,Me[le]=Z^V;K.w=be,K.X=Me,K.i=le}(G,W)}function z(W,G){return G.i=W.i,G.w=W.w,G.X=W.X.slice(),G}function B(W,G){W==null&&(W=+new Date);var K=new O(W),J=G&&G.state,V=function(){return(K.next()>>>0)/4294967296};return V.double=function(){do var Z=((K.next()>>>11)+(K.next()>>>0)/4294967296)/2097152;while(Z===0);return Z},V.int32=K.next,V.quick=V,J&&(J.X&&z(J,K),V.state=function(){return z(K,{})}),V}F&&F.exports?F.exports=B:b.amdD&&b.amdO?(M=function(){return B}.call(v,b,v,F))===void 0||(F.exports=M):this.xor4096=B})(0,g=b.nmd(g),b.amdD)},92030:function(g,v,b){var M;(function(N,F,D){function O(W){var G=this;G.next=function(){var K,J,V=G.x,Z=G.i;return K=V[Z],J=(K^=K>>>7)^K<<24,J^=(K=V[Z+1&7])^K>>>10,J^=(K=V[Z+3&7])^K>>>3,J^=(K=V[Z+4&7])^K<<7,K=V[Z+7&7],J^=(K^=K<<13)^K<<9,V[Z]=J,G.i=Z+1&7,J},function(K,J){var V,Z=[];if(J===(0|J))Z[0]=J;else for(J=""+J,V=0;V<J.length;++V)Z[7&V]=Z[7&V]<<15^J.charCodeAt(V)+Z[V+1&7]<<13;for(;Z.length<8;)Z.push(0);for(V=0;V<8&&Z[V]===0;++V);for(V==8?Z[7]=-1:Z[V],K.x=Z,K.i=0,V=256;V>0;--V)K.next()}(G,W)}function z(W,G){return G.x=W.x.slice(),G.i=W.i,G}function B(W,G){W==null&&(W=+new Date);var K=new O(W),J=G&&G.state,V=function(){return(K.next()>>>0)/4294967296};return V.double=function(){do var Z=((K.next()>>>11)+(K.next()>>>0)/4294967296)/2097152;while(Z===0);return Z},V.int32=K.next,V.quick=V,J&&(J.x&&z(J,K),V.state=function(){return z(K,{})}),V}F&&F.exports?F.exports=B:b.amdD&&b.amdO?(M=function(){return B}.call(v,b,v,F))===void 0||(F.exports=M):this.xorshift7=B})(0,g=b.nmd(g),b.amdD)},90801:function(g,v,b){var M;(function(N,F,D){function O(W){var G=this,K="";G.next=function(){var V=G.x^G.x>>>2;return G.x=G.y,G.y=G.z,G.z=G.w,G.w=G.v,(G.d=G.d+362437|0)+(G.v=G.v^G.v<<4^V^V<<1)|0},G.x=0,G.y=0,G.z=0,G.w=0,G.v=0,W===(0|W)?G.x=W:K+=W;for(var J=0;J<K.length+64;J++)G.x^=0|K.charCodeAt(J),J==K.length&&(G.d=G.x<<10^G.x>>>4),G.next()}function z(W,G){return G.x=W.x,G.y=W.y,G.z=W.z,G.w=W.w,G.v=W.v,G.d=W.d,G}function B(W,G){var K=new O(W),J=G&&G.state,V=function(){return(K.next()>>>0)/4294967296};return V.double=function(){do var Z=((K.next()>>>11)+(K.next()>>>0)/4294967296)/2097152;while(Z===0);return Z},V.int32=K.next,V.quick=V,J&&(typeof J=="object"&&z(J,K),V.state=function(){return z(K,{})}),V}F&&F.exports?F.exports=B:b.amdD&&b.amdO?(M=function(){return B}.call(v,b,v,F))===void 0||(F.exports=M):this.xorwow=B})(0,g=b.nmd(g),b.amdD)},51971:(g,v,b)=>{var M;(function(N,F){var D,O=this,z=256,B=F.pow(z,6),W=F.pow(2,52),G=2*W,K=255;function J(Me,ce,We){var Ke=[],Ye=fe(le((ce=ce==1?{entropy:!0}:ce||{}).entropy?[Me,be(N)]:Me==null?function(){try{var Se;return D&&(Se=D.randomBytes)?Se=Se(z):(Se=new Uint8Array(z),(O.crypto||O.msCrypto).getRandomValues(Se)),be(Se)}catch{var je=O.navigator,rt=je&&je.plugins;return[+new Date,O,rt,O.screen,be(N)]}}():Me,3),Ke),xe=new V(Ke),ue=function(){for(var Se=xe.g(6),je=B,rt=0;Se<W;)Se=(Se+rt)*z,je*=z,rt=xe.g(1);for(;Se>=G;)Se/=2,je/=2,rt>>>=1;return(Se+rt)/je};return ue.int32=function(){return 0|xe.g(4)},ue.quick=function(){return xe.g(4)/4294967296},ue.double=ue,fe(be(xe.S),N),(ce.pass||We||function(Se,je,rt,et){return et&&(et.S&&Z(et,xe),Se.state=function(){return Z(xe,{})}),rt?(F.random=Se,je):Se})(ue,Ye,"global"in ce?ce.global:this==F,ce.state)}function V(Me){var ce,We=Me.length,Ke=this,Ye=0,xe=Ke.i=Ke.j=0,ue=Ke.S=[];for(We||(Me=[We++]);Ye<z;)ue[Ye]=Ye++;for(Ye=0;Ye<z;Ye++)ue[Ye]=ue[xe=K&xe+Me[Ye%We]+(ce=ue[Ye])],ue[xe]=ce;(Ke.g=function(Se){for(var je,rt=0,et=Ke.i,ot=Ke.j,Et=Ke.S;Se--;)je=Et[et=K&et+1],rt=rt*z+Et[K&(Et[et]=Et[ot=K&ot+je])+(Et[ot]=je)];return Ke.i=et,Ke.j=ot,rt})(z)}function Z(Me,ce){return ce.i=Me.i,ce.j=Me.j,ce.S=Me.S.slice(),ce}function le(Me,ce){var We,Ke=[],Ye=typeof Me;if(ce&&Ye=="object")for(We in Me)try{Ke.push(le(Me[We],ce-1))}catch{}return Ke.length?Ke:Ye=="string"?Me:Me+"\0"}function fe(Me,ce){for(var We,Ke=Me+"",Ye=0;Ye<Ke.length;)ce[K&Ye]=K&(We^=19*ce[K&Ye])+Ke.charCodeAt(Ye++);return be(ce)}function be(Me){return String.fromCharCode.apply(0,Me)}if(F.seedrandom=J,fe(F.random(),N),g.exports){g.exports=J;try{D=b(63906)}catch{}}else(M=function(){return J}.call(v,b,v,g))===void 0||(g.exports=M)})([],Math)},74412:(g,v,b)=>{b.r(v),b.d(v,{default:()=>D});var M=b(93379),N=b.n(M),F=b(58485);N()(F.Z,{insert:"head",singleton:!1});const D=F.Z.locals||{}},93379:(g,v,b)=>{var M,N=function(){var le={};return function(fe){if(le[fe]===void 0){var be=document.querySelector(fe);if(window.HTMLIFrameElement&&be instanceof window.HTMLIFrameElement)try{be=be.contentDocument.head}catch{be=null}le[fe]=be}return le[fe]}}(),F=[];function D(le){for(var fe=-1,be=0;be<F.length;be++)if(F[be].identifier===le){fe=be;break}return fe}function O(le,fe){for(var be={},Me=[],ce=0;ce<le.length;ce++){var We=le[ce],Ke=fe.base?We[0]+fe.base:We[0],Ye=be[Ke]||0,xe="".concat(Ke," ").concat(Ye);be[Ke]=Ye+1;var ue=D(xe),Se={css:We[1],media:We[2],sourceMap:We[3]};ue!==-1?(F[ue].references++,F[ue].updater(Se)):F.push({identifier:xe,updater:Z(Se,fe),references:1}),Me.push(xe)}return Me}function z(le){var fe=document.createElement("style"),be=le.attributes||{};if(be.nonce===void 0){var Me=b.nc;Me&&(be.nonce=Me)}if(Object.keys(be).forEach(function(We){fe.setAttribute(We,be[We])}),typeof le.insert=="function")le.insert(fe);else{var ce=N(le.insert||"head");if(!ce)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");ce.appendChild(fe)}return fe}var B,W=(B=[],function(le,fe){return B[le]=fe,B.filter(Boolean).join(`
`)});function G(le,fe,be,Me){var ce=be?"":Me.media?"@media ".concat(Me.media," {").concat(Me.css,"}"):Me.css;if(le.styleSheet)le.styleSheet.cssText=W(fe,ce);else{var We=document.createTextNode(ce),Ke=le.childNodes;Ke[fe]&&le.removeChild(Ke[fe]),Ke.length?le.insertBefore(We,Ke[fe]):le.appendChild(We)}}function K(le,fe,be){var Me=be.css,ce=be.media,We=be.sourceMap;if(ce?le.setAttribute("media",ce):le.removeAttribute("media"),We&&typeof btoa!="undefined"&&(Me+=`
/*# sourceMappingURL=data:application/json;base64,`.concat(btoa(unescape(encodeURIComponent(JSON.stringify(We))))," */")),le.styleSheet)le.styleSheet.cssText=Me;else{for(;le.firstChild;)le.removeChild(le.firstChild);le.appendChild(document.createTextNode(Me))}}var J=null,V=0;function Z(le,fe){var be,Me,ce;if(fe.singleton){var We=V++;be=J||(J=z(fe)),Me=G.bind(null,be,We,!1),ce=G.bind(null,be,We,!0)}else be=z(fe),Me=K.bind(null,be,fe),ce=function(){(function(Ke){if(Ke.parentNode===null)return!1;Ke.parentNode.removeChild(Ke)})(be)};return Me(le),function(Ke){if(Ke){if(Ke.css===le.css&&Ke.media===le.media&&Ke.sourceMap===le.sourceMap)return;Me(le=Ke)}else ce()}}g.exports=function(le,fe){(fe=fe||{}).singleton||typeof fe.singleton=="boolean"||(fe.singleton=(M===void 0&&(M=Boolean(window&&document&&document.all&&!window.atob)),M));var be=O(le=le||[],fe);return function(Me){if(Me=Me||[],Object.prototype.toString.call(Me)==="[object Array]"){for(var ce=0;ce<be.length;ce++){var We=D(be[ce]);F[We].references--}for(var Ke=O(Me,fe),Ye=0;Ye<be.length;Ye++){var xe=D(be[Ye]);F[xe].references===0&&(F[xe].updater(),F.splice(xe,1))}be=Ke}}}},2212:(g,v,b)=>{b.r(v),b.d(v,{ACESFilmicToneMapping:()=>Q,AddEquation:()=>ue,AddOperation:()=>Ce,AdditiveAnimationBlendMode:()=>md,AdditiveBlending:()=>We,AlphaFormat:()=>xt,AlwaysDepth:()=>wn,AlwaysStencilFunc:()=>Ed,AmbientLight:()=>Ug,AmbientLightProbe:()=>cx,AnimationClip:()=>fc,AnimationLoader:()=>Og,AnimationMixer:()=>Ob,AnimationObjectGroup:()=>Pb,AnimationUtils:()=>Zr,ArcCurve:()=>Zs,ArrayCamera:()=>np,ArrowHelper:()=>xx,Audio:()=>yc,AudioAnalyser:()=>vm,AudioContext:()=>_p,AudioListener:()=>A_,AudioLoader:()=>Hg,AxesHelper:()=>iy,AxisHelper:()=>H_,BackSide:()=>Z,BasicDepthPacking:()=>jc,BasicShadowMap:()=>W,BinaryTextureLoader:()=>K_,Bone:()=>wo,BooleanKeyframeTrack:()=>os,BoundingBoxHelper:()=>j_,Box2:()=>Sp,Box3:()=>Ws,Box3Helper:()=>ty,BoxBufferGeometry:()=>Ka,BoxGeometry:()=>Ka,BoxHelper:()=>ey,BufferAttribute:()=>Mr,BufferGeometry:()=>On,BufferGeometryLoader:()=>sx,ByteType:()=>rf,Cache:()=>mc,Camera:()=>Xs,CameraHelper:()=>_m,CanvasRenderer:()=>J_,CanvasTexture:()=>Kf,CatmullRomCurve3:()=>hu,CineonToneMapping:()=>Fe,CircleBufferGeometry:()=>Eh,CircleGeometry:()=>Eh,ClampToEdgeWrapping:()=>qn,Clock:()=>dx,Color:()=>yn,ColorKeyframeTrack:()=>ex,CompressedTexture:()=>Th,CompressedTextureLoader:()=>cm,ConeBufferGeometry:()=>nl,ConeGeometry:()=>nl,CubeCamera:()=>uh,CubeReflectionMapping:()=>at,CubeRefractionMapping:()=>he,CubeTexture:()=>Xd,CubeTextureLoader:()=>vp,CubeUVReflectionMapping:()=>_t,CubeUVRefractionMapping:()=>Wt,CubicBezierCurve:()=>tm,CubicBezierCurve3:()=>Ng,CubicInterpolant:()=>yp,CullFaceBack:()=>O,CullFaceFront:()=>z,CullFaceFrontBack:()=>B,CullFaceNone:()=>D,Curve:()=>Es,CurvePath:()=>Qs,CustomBlending:()=>xe,CustomToneMapping:()=>Ze,CylinderBufferGeometry:()=>Il,CylinderGeometry:()=>Il,Cylindrical:()=>F_,DataTexture:()=>Xe,DataTexture2DArray:()=>I0,DataTexture3D:()=>cg,DataTextureLoader:()=>Lh,DataUtils:()=>jb,DecrementStencilOp:()=>Xm,DecrementWrapStencilOp:()=>_d,DefaultLoadingManager:()=>um,DepthFormat:()=>sr,DepthStencilFormat:()=>br,DepthTexture:()=>Zf,DirectionalLight:()=>Pa,DirectionalLightHelper:()=>Qg,DiscreteInterpolant:()=>To,DodecahedronBufferGeometry:()=>ic,DodecahedronGeometry:()=>ic,DoubleSide:()=>le,DstAlphaFactor:()=>Bt,DstColorFactor:()=>Mn,DynamicBufferAttribute:()=>Jb,DynamicCopyUsage:()=>Zm,DynamicDrawUsage:()=>qc,DynamicReadUsage:()=>Sf,EdgesGeometry:()=>kg,EdgesHelper:()=>q_,EllipseCurve:()=>Ah,EqualDepth:()=>Ft,EqualStencilFunc:()=>bf,EquirectangularReflectionMapping:()=>It,EquirectangularRefractionMapping:()=>Le,Euler:()=>Wo,EventDispatcher:()=>co,ExtrudeBufferGeometry:()=>rl,ExtrudeGeometry:()=>rl,FaceColors:()=>Yb,FileLoader:()=>to,FlatShading:()=>fe,Float16BufferAttribute:()=>Hd,Float32Attribute:()=>W_,Float32BufferAttribute:()=>pn,Float64Attribute:()=>G_,Float64BufferAttribute:()=>Xo,FloatType:()=>hs,Fog:()=>mr,FogExp2:()=>Ei,Font:()=>ym,FontLoader:()=>Gg,FrontSide:()=>V,Frustum:()=>$f,GLBufferAttribute:()=>zb,GLSL1:()=>Jm,GLSL3:()=>Id,GammaEncoding:()=>Ou,GreaterDepth:()=>nn,GreaterEqualDepth:()=>Jt,GreaterEqualStencilFunc:()=>wf,GreaterStencilFunc:()=>Md,GridHelper:()=>Hb,Group:()=>vo,HalfFloatType:()=>uo,HemisphereLight:()=>ea,HemisphereLightHelper:()=>$h,HemisphereLightProbe:()=>ux,IcosahedronBufferGeometry:()=>il,IcosahedronGeometry:()=>il,ImageBitmapLoader:()=>Vg,ImageLoader:()=>pu,ImageUtils:()=>Yc,ImmediateRenderObject:()=>Wb,IncrementStencilOp:()=>qm,IncrementWrapStencilOp:()=>wd,InstancedBufferAttribute:()=>Rs,InstancedBufferGeometry:()=>ix,InstancedInterleavedBuffer:()=>Ll,InstancedMesh:()=>nc,Int16Attribute:()=>ew,Int16BufferAttribute:()=>Ov,Int32Attribute:()=>U_,Int32BufferAttribute:()=>_0,Int8Attribute:()=>Qb,Int8BufferAttribute:()=>Dv,IntType:()=>$l,InterleavedBuffer:()=>Tl,InterleavedBufferAttribute:()=>Qo,Interpolant:()=>Ra,InterpolateDiscrete:()=>Du,InterpolateLinear:()=>Pu,InterpolateSmooth:()=>Gc,InvertStencilOp:()=>Sd,JSONLoader:()=>Q_,KeepStencilOp:()=>Wl,KeyframeTrack:()=>La,LOD:()=>Mg,LatheBufferGeometry:()=>uc,LatheGeometry:()=>uc,Layers:()=>nh,LensFlare:()=>tS,LessDepth:()=>Nn,LessEqualDepth:()=>$n,LessEqualStencilFunc:()=>Ym,LessStencilFunc:()=>vf,Light:()=>ls,LightProbe:()=>gm,Line:()=>tl,Line3:()=>Vb,LineBasicMaterial:()=>fs,LineCurve:()=>Ih,LineCurve3:()=>cp,LineDashedMaterial:()=>Q0,LineLoop:()=>Cg,LinePieces:()=>Xb,LineSegments:()=>ga,LineStrip:()=>qb,LinearEncoding:()=>ps,LinearFilter:()=>Or,LinearInterpolant:()=>am,LinearMipMapLinearFilter:()=>Yi,LinearMipMapNearestFilter:()=>nf,LinearMipmapLinearFilter:()=>Ns,LinearMipmapNearestFilter:()=>Rc,LinearToneMapping:()=>se,Loader:()=>gs,LoaderUtils:()=>Ph,LoadingManager:()=>lm,LogLuvEncoding:()=>mf,LoopOnce:()=>pf,LoopPingPong:()=>fd,LoopRepeat:()=>ff,LuminanceAlphaFormat:()=>Zn,LuminanceFormat:()=>Wn,MOUSE:()=>N,Material:()=>fr,MaterialLoader:()=>rx,Math:()=>kd,MathUtils:()=>kd,Matrix3:()=>Ni,Matrix4:()=>Gn,MaxEquation:()=>et,Mesh:()=>Ji,MeshBasicMaterial:()=>di,MeshDepthMaterial:()=>xg,MeshDistanceMaterial:()=>qf,MeshFaceMaterial:()=>Zb,MeshLambertMaterial:()=>Z0,MeshMatcapMaterial:()=>J0,MeshNormalMaterial:()=>sm,MeshPhongMaterial:()=>K0,MeshPhysicalMaterial:()=>gp,MeshStandardMaterial:()=>hc,MeshToonMaterial:()=>dc,MinEquation:()=>rt,MirroredRepeatWrapping:()=>Ir,MixOperation:()=>Re,MultiMaterial:()=>B_,MultiplyBlending:()=>Ye,MultiplyOperation:()=>vn,NearestFilter:()=>Sr,NearestMipMapLinearFilter:()=>Ti,NearestMipMapNearestFilter:()=>ir,NearestMipmapLinearFilter:()=>Ui,NearestMipmapNearestFilter:()=>Kr,NeverDepth:()=>Bn,NeverStencilFunc:()=>xf,NoBlending:()=>Me,NoColors:()=>vx,NoToneMapping:()=>ye,NormalAnimationBlendMode:()=>Ul,NormalBlending:()=>ce,NotEqualDepth:()=>Dn,NotEqualStencilFunc:()=>Td,NumberKeyframeTrack:()=>om,Object3D:()=>Cr,ObjectLoader:()=>ax,ObjectSpaceNormalMap:()=>gf,OctahedronBufferGeometry:()=>du,OctahedronGeometry:()=>du,OneFactor:()=>Et,OneMinusDstAlphaFactor:()=>sn,OneMinusDstColorFactor:()=>St,OneMinusSrcAlphaFactor:()=>En,OneMinusSrcColorFactor:()=>ln,OrthographicCamera:()=>Uf,PCFShadowMap:()=>G,PCFSoftShadowMap:()=>K,PMREMGenerator:()=>pa,ParametricBufferGeometry:()=>Rh,ParametricGeometry:()=>Rh,Particle:()=>wx,ParticleBasicMaterial:()=>Mx,ParticleSystem:()=>_x,ParticleSystemMaterial:()=>$_,Path:()=>fu,PerspectiveCamera:()=>ss,Plane:()=>Ko,PlaneBufferGeometry:()=>ch,PlaneGeometry:()=>ch,PlaneHelper:()=>ny,PointCloud:()=>bx,PointCloudMaterial:()=>Sx,PointLight:()=>bp,PointLightHelper:()=>z_,Points:()=>Mh,PointsMaterial:()=>rc,PolarGridHelper:()=>Kg,PolyhedronBufferGeometry:()=>Cl,PolyhedronGeometry:()=>Cl,PositionalAudio:()=>jg,PropertyBinding:()=>Gr,PropertyMixer:()=>qg,QuadraticBezierCurve:()=>Ch,QuadraticBezierCurve3:()=>kl,Quaternion:()=>Zi,QuaternionKeyframeTrack:()=>xp,QuaternionLinearInterpolant:()=>Eb,REVISION:()=>M,RGBADepthPacking:()=>vd,RGBAFormat:()=>Xn,RGBAIntegerFormat:()=>ca,RGBA_ASTC_10x10_Format:()=>v0,RGBA_ASTC_10x5_Format:()=>ad,RGBA_ASTC_10x6_Format:()=>od,RGBA_ASTC_10x8_Format:()=>of,RGBA_ASTC_12x10_Format:()=>Hm,RGBA_ASTC_12x12_Format:()=>Bc,RGBA_ASTC_4x4_Format:()=>Pc,RGBA_ASTC_5x4_Format:()=>Fc,RGBA_ASTC_5x5_Format:()=>Oc,RGBA_ASTC_6x5_Format:()=>zc,RGBA_ASTC_6x6_Format:()=>id,RGBA_ASTC_8x5_Format:()=>sf,RGBA_ASTC_8x6_Format:()=>sd,RGBA_ASTC_8x8_Format:()=>af,RGBA_BPTC_Format:()=>$c,RGBA_ETC2_EAC_Format:()=>Lu,RGBA_PVRTC_2BPPV1_Format:()=>nd,RGBA_PVRTC_4BPPV1_Format:()=>td,RGBA_S3TC_DXT1_Format:()=>Us,RGBA_S3TC_DXT3_Format:()=>oi,RGBA_S3TC_DXT5_Format:()=>ds,RGBDEncoding:()=>zu,RGBEEncoding:()=>Vl,RGBEFormat:()=>dr,RGBFormat:()=>Xt,RGBIntegerFormat:()=>Ha,RGBM16Encoding:()=>xd,RGBM7Encoding:()=>yd,RGB_ETC1_Format:()=>rd,RGB_ETC2_Format:()=>Dc,RGB_PVRTC_2BPPV1_Format:()=>Lc,RGB_PVRTC_4BPPV1_Format:()=>li,RGB_S3TC_DXT1_Format:()=>ja,RGFormat:()=>At,RGIntegerFormat:()=>yi,RawShaderMaterial:()=>ka,Ray:()=>Vo,Raycaster:()=>D_,RectAreaLight:()=>wp,RedFormat:()=>zr,RedIntegerFormat:()=>or,ReinhardToneMapping:()=>we,RepeatWrapping:()=>on,ReplaceStencilOp:()=>bd,ReverseSubtractEquation:()=>je,RingBufferGeometry:()=>dp,RingGeometry:()=>dp,SRGB8_ALPHA8_ASTC_10x10_Format:()=>Wc,SRGB8_ALPHA8_ASTC_10x5_Format:()=>cf,SRGB8_ALPHA8_ASTC_10x6_Format:()=>hf,SRGB8_ALPHA8_ASTC_10x8_Format:()=>Vc,SRGB8_ALPHA8_ASTC_12x10_Format:()=>pd,SRGB8_ALPHA8_ASTC_12x12_Format:()=>df,SRGB8_ALPHA8_ASTC_4x4_Format:()=>Uc,SRGB8_ALPHA8_ASTC_5x4_Format:()=>lf,SRGB8_ALPHA8_ASTC_5x5_Format:()=>ld,SRGB8_ALPHA8_ASTC_6x5_Format:()=>ud,SRGB8_ALPHA8_ASTC_6x6_Format:()=>cd,SRGB8_ALPHA8_ASTC_8x5_Format:()=>uf,SRGB8_ALPHA8_ASTC_8x6_Format:()=>hd,SRGB8_ALPHA8_ASTC_8x8_Format:()=>dd,Scene:()=>Qa,SceneUtils:()=>eS,ShaderChunk:()=>Tr,ShaderLib:()=>Za,ShaderMaterial:()=>qs,ShadowMaterial:()=>Fg,Shape:()=>sl,ShapeBufferGeometry:()=>cc,ShapeGeometry:()=>cc,ShapePath:()=>Cb,ShapeUtils:()=>Wr,ShortType:()=>$s,Skeleton:()=>bi,SkeletonHelper:()=>no,SkinnedMesh:()=>es,SmoothShading:()=>be,Sphere:()=>$o,SphereBufferGeometry:()=>eo,SphereGeometry:()=>eo,Spherical:()=>P_,SphericalHarmonics3:()=>mm,SplineCurve:()=>nm,SpotLight:()=>nx,SpotLightHelper:()=>O_,Sprite:()=>ma,SpriteMaterial:()=>yh,SrcAlphaFactor:()=>Vt,SrcAlphaSaturateFactor:()=>zn,SrcColorFactor:()=>tn,StaticCopyUsage:()=>Mf,StaticDrawUsage:()=>xl,StaticReadUsage:()=>Km,StereoCamera:()=>T_,StreamCopyUsage:()=>Tf,StreamDrawUsage:()=>_f,StreamReadUsage:()=>Ad,StringKeyframeTrack:()=>Nl,SubtractEquation:()=>Se,SubtractiveBlending:()=>Ke,TOUCH:()=>F,TangentSpaceNormalMap:()=>Oo,TetrahedronBufferGeometry:()=>ms,TetrahedronGeometry:()=>ms,TextBufferGeometry:()=>Pg,TextGeometry:()=>Pg,Texture:()=>Ri,TextureLoader:()=>hm,TorusBufferGeometry:()=>Na,TorusGeometry:()=>Na,TorusKnotBufferGeometry:()=>pp,TorusKnotGeometry:()=>pp,Triangle:()=>Li,TriangleFanDrawMode:()=>gd,TriangleStripDrawMode:()=>jm,TrianglesDrawMode:()=>Hc,TubeBufferGeometry:()=>fp,TubeGeometry:()=>fp,UVMapping:()=>Je,Uint16Attribute:()=>tw,Uint16BufferAttribute:()=>Gu,Uint32Attribute:()=>V_,Uint32BufferAttribute:()=>sh,Uint8Attribute:()=>Ex,Uint8BufferAttribute:()=>Pv,Uint8ClampedAttribute:()=>Uh,Uint8ClampedBufferAttribute:()=>Fv,Uniform:()=>ys,UniformsLib:()=>_n,UniformsUtils:()=>nu,UnsignedByteType:()=>Wa,UnsignedInt248Type:()=>lt,UnsignedIntType:()=>Ga,UnsignedShort4444Type:()=>Hn,UnsignedShort5551Type:()=>Ee,UnsignedShort565Type:()=>ht,UnsignedShortType:()=>Ru,VSMShadowMap:()=>J,Vector2:()=>Qt,Vector3:()=>Te,Vector4:()=>Xr,VectorKeyframeTrack:()=>pc,Vertex:()=>Tx,VertexColors:()=>Kb,VideoTexture:()=>j0,WebGL1Renderer:()=>gh,WebGLCubeRenderTarget:()=>Yd,WebGLMultipleRenderTargets:()=>Kc,WebGLMultisampleRenderTarget:()=>Bu,WebGLRenderTarget:()=>Ea,WebGLRenderTargetCube:()=>Z_,WebGLRenderer:()=>ur,WebGLUtils:()=>Ml,WireframeGeometry:()=>Y0,WireframeHelper:()=>X_,WrapAroundEnding:()=>Fu,XHRLoader:()=>Y_,ZeroCurvatureEnding:()=>Fo,ZeroFactor:()=>ot,ZeroSlopeEnding:()=>gl,ZeroStencilOp:()=>yf,sRGBEncoding:()=>yl});const M="132",N={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},F={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},D=0,O=1,z=2,B=3,W=0,G=1,K=2,J=3,V=0,Z=1,le=2,fe=1,be=2,Me=0,ce=1,We=2,Ke=3,Ye=4,xe=5,ue=100,Se=101,je=102,rt=103,et=104,ot=200,Et=201,tn=202,ln=203,Vt=204,En=205,Bt=206,sn=207,Mn=208,St=209,zn=210,Bn=0,wn=1,Nn=2,$n=3,Ft=4,Jt=5,nn=6,Dn=7,vn=0,Re=1,Ce=2,ye=0,se=1,we=2,Fe=3,Q=4,Ze=5,Je=300,at=301,he=302,It=303,Le=304,_t=306,Wt=307,on=1e3,qn=1001,Ir=1002,Sr=1003,Kr=1004,ir=1004,Ui=1005,Ti=1005,Or=1006,Rc=1007,nf=1007,Ns=1008,Yi=1008,Wa=1009,rf=1010,$s=1011,Ru=1012,$l=1013,Ga=1014,hs=1015,uo=1016,Hn=1017,Ee=1018,ht=1019,lt=1020,xt=1021,Xt=1022,Xn=1023,Wn=1024,Zn=1025,dr=Xn,sr=1026,br=1027,zr=1028,or=1029,At=1030,yi=1031,Ha=1032,ca=1033,ja=33776,Us=33777,oi=33778,ds=33779,li=35840,Lc=35841,td=35842,nd=35843,rd=36196,Dc=37492,Lu=37496,Pc=37808,Fc=37809,Oc=37810,zc=37811,id=37812,sf=37813,sd=37814,af=37815,ad=37816,od=37817,of=37818,v0=37819,Hm=37820,Bc=37821,$c=36492,Uc=37840,lf=37841,ld=37842,ud=37843,cd=37844,uf=37845,hd=37846,dd=37847,cf=37848,hf=37849,Vc=37850,Wc=37851,pd=37852,df=37853,pf=2200,ff=2201,fd=2202,Du=2300,Pu=2301,Gc=2302,Fo=2400,gl=2401,Fu=2402,Ul=2500,md=2501,Hc=0,jm=1,gd=2,ps=3e3,yl=3001,Ou=3007,Vl=3002,mf=3003,yd=3004,xd=3005,zu=3006,jc=3200,vd=3201,Oo=0,gf=1,yf=0,Wl=7680,bd=7681,qm=7682,Xm=7683,wd=34055,_d=34056,Sd=5386,xf=512,vf=513,bf=514,Ym=515,Md=516,Td=517,wf=518,Ed=519,xl=35044,qc=35048,_f=35040,Km=35045,Sf=35049,Ad=35041,Mf=35046,Zm=35050,Tf=35042,Jm="100",Id="300 es";class co{addEventListener(n,o){this._listeners===void 0&&(this._listeners={});const h=this._listeners;h[n]===void 0&&(h[n]=[]),h[n].indexOf(o)===-1&&h[n].push(o)}hasEventListener(n,o){if(this._listeners===void 0)return!1;const h=this._listeners;return h[n]!==void 0&&h[n].indexOf(o)!==-1}removeEventListener(n,o){if(this._listeners===void 0)return;const h=this._listeners[n];if(h!==void 0){const p=h.indexOf(o);p!==-1&&h.splice(p,1)}}dispatchEvent(n){if(this._listeners===void 0)return;const o=this._listeners[n.type];if(o!==void 0){n.target=this;const h=o.slice(0);for(let p=0,w=h.length;p<w;p++)h[p].call(this,n);n.target=null}}}const Ki=[];for(let T=0;T<256;T++)Ki[T]=(T<16?"0":"")+T.toString(16);let Gl=1234567;const zo=Math.PI/180,vl=180/Math.PI;function Vs(){const T=4294967295*Math.random()|0,n=4294967295*Math.random()|0,o=4294967295*Math.random()|0,h=4294967295*Math.random()|0;return(Ki[255&T]+Ki[T>>8&255]+Ki[T>>16&255]+Ki[T>>24&255]+"-"+Ki[255&n]+Ki[n>>8&255]+"-"+Ki[n>>16&15|64]+Ki[n>>24&255]+"-"+Ki[63&o|128]+Ki[o>>8&255]+"-"+Ki[o>>16&255]+Ki[o>>24&255]+Ki[255&h]+Ki[h>>8&255]+Ki[h>>16&255]+Ki[h>>24&255]).toUpperCase()}function Vi(T,n,o){return Math.max(n,Math.min(o,T))}function Xc(T,n){return(T%n+n)%n}function Hl(T,n,o){return(1-o)*T+o*n}function Cd(T){return(T&T-1)==0&&T!==0}function Ef(T){return Math.pow(2,Math.ceil(Math.log(T)/Math.LN2))}function Af(T){return Math.pow(2,Math.floor(Math.log(T)/Math.LN2))}var kd=Object.freeze({__proto__:null,DEG2RAD:zo,RAD2DEG:vl,generateUUID:Vs,clamp:Vi,euclideanModulo:Xc,mapLinear:function(T,n,o,h,p){return h+(T-n)*(p-h)/(o-n)},inverseLerp:function(T,n,o){return T!==n?(o-T)/(n-T):0},lerp:Hl,damp:function(T,n,o,h){return Hl(T,n,1-Math.exp(-o*h))},pingpong:function(T,n=1){return n-Math.abs(Xc(T,2*n)-n)},smoothstep:function(T,n,o){return T<=n?0:T>=o?1:(T=(T-n)/(o-n))*T*(3-2*T)},smootherstep:function(T,n,o){return T<=n?0:T>=o?1:(T=(T-n)/(o-n))*T*T*(T*(6*T-15)+10)},randInt:function(T,n){return T+Math.floor(Math.random()*(n-T+1))},randFloat:function(T,n){return T+Math.random()*(n-T)},randFloatSpread:function(T){return T*(.5-Math.random())},seededRandom:function(T){return T!==void 0&&(Gl=T%2147483647),Gl=16807*Gl%2147483647,(Gl-1)/2147483646},degToRad:function(T){return T*zo},radToDeg:function(T){return T*vl},isPowerOfTwo:Cd,ceilPowerOfTwo:Ef,floorPowerOfTwo:Af,setQuaternionFromProperEuler:function(T,n,o,h,p){const w=Math.cos,S=Math.sin,I=w(o/2),k=S(o/2),R=w((n+h)/2),$=S((n+h)/2),j=w((n-h)/2),H=S((n-h)/2),Y=w((h-n)/2),ee=S((h-n)/2);switch(p){case"XYX":T.set(I*$,k*j,k*H,I*R);break;case"YZY":T.set(k*H,I*$,k*j,I*R);break;case"ZXZ":T.set(k*j,k*H,I*$,I*R);break;case"XZX":T.set(I*$,k*ee,k*Y,I*R);break;case"YXY":T.set(k*Y,I*$,k*ee,I*R);break;case"ZYZ":T.set(k*ee,k*Y,I*$,I*R);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+p)}}});class Qt{constructor(n=0,o=0){this.x=n,this.y=o}get width(){return this.x}set width(n){this.x=n}get height(){return this.y}set height(n){this.y=n}set(n,o){return this.x=n,this.y=o,this}setScalar(n){return this.x=n,this.y=n,this}setX(n){return this.x=n,this}setY(n){return this.y=n,this}setComponent(n,o){switch(n){case 0:this.x=o;break;case 1:this.y=o;break;default:throw new Error("index is out of range: "+n)}return this}getComponent(n){switch(n){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+n)}}clone(){return new this.constructor(this.x,this.y)}copy(n){return this.x=n.x,this.y=n.y,this}add(n,o){return o!==void 0?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(n,o)):(this.x+=n.x,this.y+=n.y,this)}addScalar(n){return this.x+=n,this.y+=n,this}addVectors(n,o){return this.x=n.x+o.x,this.y=n.y+o.y,this}addScaledVector(n,o){return this.x+=n.x*o,this.y+=n.y*o,this}sub(n,o){return o!==void 0?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(n,o)):(this.x-=n.x,this.y-=n.y,this)}subScalar(n){return this.x-=n,this.y-=n,this}subVectors(n,o){return this.x=n.x-o.x,this.y=n.y-o.y,this}multiply(n){return this.x*=n.x,this.y*=n.y,this}multiplyScalar(n){return this.x*=n,this.y*=n,this}divide(n){return this.x/=n.x,this.y/=n.y,this}divideScalar(n){return this.multiplyScalar(1/n)}applyMatrix3(n){const o=this.x,h=this.y,p=n.elements;return this.x=p[0]*o+p[3]*h+p[6],this.y=p[1]*o+p[4]*h+p[7],this}min(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this}max(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this}clamp(n,o){return this.x=Math.max(n.x,Math.min(o.x,this.x)),this.y=Math.max(n.y,Math.min(o.y,this.y)),this}clampScalar(n,o){return this.x=Math.max(n,Math.min(o,this.x)),this.y=Math.max(n,Math.min(o,this.y)),this}clampLength(n,o){const h=this.length();return this.divideScalar(h||1).multiplyScalar(Math.max(n,Math.min(o,h)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(n){return this.x*n.x+this.y*n.y}cross(n){return this.x*n.y-this.y*n.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(n){return Math.sqrt(this.distanceToSquared(n))}distanceToSquared(n){const o=this.x-n.x,h=this.y-n.y;return o*o+h*h}manhattanDistanceTo(n){return Math.abs(this.x-n.x)+Math.abs(this.y-n.y)}setLength(n){return this.normalize().multiplyScalar(n)}lerp(n,o){return this.x+=(n.x-this.x)*o,this.y+=(n.y-this.y)*o,this}lerpVectors(n,o,h){return this.x=n.x+(o.x-n.x)*h,this.y=n.y+(o.y-n.y)*h,this}equals(n){return n.x===this.x&&n.y===this.y}fromArray(n,o=0){return this.x=n[o],this.y=n[o+1],this}toArray(n=[],o=0){return n[o]=this.x,n[o+1]=this.y,n}fromBufferAttribute(n,o,h){return h!==void 0&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=n.getX(o),this.y=n.getY(o),this}rotateAround(n,o){const h=Math.cos(o),p=Math.sin(o),w=this.x-n.x,S=this.y-n.y;return this.x=w*h-S*p+n.x,this.y=w*p+S*h+n.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}Qt.prototype.isVector2=!0;class Ni{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(n,o,h,p,w,S,I,k,R){const $=this.elements;return $[0]=n,$[1]=p,$[2]=I,$[3]=o,$[4]=w,$[5]=k,$[6]=h,$[7]=S,$[8]=R,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(n){const o=this.elements,h=n.elements;return o[0]=h[0],o[1]=h[1],o[2]=h[2],o[3]=h[3],o[4]=h[4],o[5]=h[5],o[6]=h[6],o[7]=h[7],o[8]=h[8],this}extractBasis(n,o,h){return n.setFromMatrix3Column(this,0),o.setFromMatrix3Column(this,1),h.setFromMatrix3Column(this,2),this}setFromMatrix4(n){const o=n.elements;return this.set(o[0],o[4],o[8],o[1],o[5],o[9],o[2],o[6],o[10]),this}multiply(n){return this.multiplyMatrices(this,n)}premultiply(n){return this.multiplyMatrices(n,this)}multiplyMatrices(n,o){const h=n.elements,p=o.elements,w=this.elements,S=h[0],I=h[3],k=h[6],R=h[1],$=h[4],j=h[7],H=h[2],Y=h[5],ee=h[8],te=p[0],ae=p[3],ne=p[6],me=p[1],_e=p[4],ve=p[7],Ne=p[2],Oe=p[5],tt=p[8];return w[0]=S*te+I*me+k*Ne,w[3]=S*ae+I*_e+k*Oe,w[6]=S*ne+I*ve+k*tt,w[1]=R*te+$*me+j*Ne,w[4]=R*ae+$*_e+j*Oe,w[7]=R*ne+$*ve+j*tt,w[2]=H*te+Y*me+ee*Ne,w[5]=H*ae+Y*_e+ee*Oe,w[8]=H*ne+Y*ve+ee*tt,this}multiplyScalar(n){const o=this.elements;return o[0]*=n,o[3]*=n,o[6]*=n,o[1]*=n,o[4]*=n,o[7]*=n,o[2]*=n,o[5]*=n,o[8]*=n,this}determinant(){const n=this.elements,o=n[0],h=n[1],p=n[2],w=n[3],S=n[4],I=n[5],k=n[6],R=n[7],$=n[8];return o*S*$-o*I*R-h*w*$+h*I*k+p*w*R-p*S*k}invert(){const n=this.elements,o=n[0],h=n[1],p=n[2],w=n[3],S=n[4],I=n[5],k=n[6],R=n[7],$=n[8],j=$*S-I*R,H=I*k-$*w,Y=R*w-S*k,ee=o*j+h*H+p*Y;if(ee===0)return this.set(0,0,0,0,0,0,0,0,0);const te=1/ee;return n[0]=j*te,n[1]=(p*R-$*h)*te,n[2]=(I*h-p*S)*te,n[3]=H*te,n[4]=($*o-p*k)*te,n[5]=(p*w-I*o)*te,n[6]=Y*te,n[7]=(h*k-R*o)*te,n[8]=(S*o-h*w)*te,this}transpose(){let n;const o=this.elements;return n=o[1],o[1]=o[3],o[3]=n,n=o[2],o[2]=o[6],o[6]=n,n=o[5],o[5]=o[7],o[7]=n,this}getNormalMatrix(n){return this.setFromMatrix4(n).invert().transpose()}transposeIntoArray(n){const o=this.elements;return n[0]=o[0],n[1]=o[3],n[2]=o[6],n[3]=o[1],n[4]=o[4],n[5]=o[7],n[6]=o[2],n[7]=o[5],n[8]=o[8],this}setUvTransform(n,o,h,p,w,S,I){const k=Math.cos(w),R=Math.sin(w);return this.set(h*k,h*R,-h*(k*S+R*I)+S+n,-p*R,p*k,-p*(-R*S+k*I)+I+o,0,0,1),this}scale(n,o){const h=this.elements;return h[0]*=n,h[3]*=n,h[6]*=n,h[1]*=o,h[4]*=o,h[7]*=o,this}rotate(n){const o=Math.cos(n),h=Math.sin(n),p=this.elements,w=p[0],S=p[3],I=p[6],k=p[1],R=p[4],$=p[7];return p[0]=o*w+h*k,p[3]=o*S+h*R,p[6]=o*I+h*$,p[1]=-h*w+o*k,p[4]=-h*S+o*R,p[7]=-h*I+o*$,this}translate(n,o){const h=this.elements;return h[0]+=n*h[2],h[3]+=n*h[5],h[6]+=n*h[8],h[1]+=o*h[2],h[4]+=o*h[5],h[7]+=o*h[8],this}equals(n){const o=this.elements,h=n.elements;for(let p=0;p<9;p++)if(o[p]!==h[p])return!1;return!0}fromArray(n,o=0){for(let h=0;h<9;h++)this.elements[h]=n[h+o];return this}toArray(n=[],o=0){const h=this.elements;return n[o]=h[0],n[o+1]=h[1],n[o+2]=h[2],n[o+3]=h[3],n[o+4]=h[4],n[o+5]=h[5],n[o+6]=h[6],n[o+7]=h[7],n[o+8]=h[8],n}clone(){return new this.constructor().fromArray(this.elements)}}let bl;Ni.prototype.isMatrix3=!0;class Yc{static getDataURL(n){if(/^data:/i.test(n.src)||typeof HTMLCanvasElement=="undefined")return n.src;let o;if(n instanceof HTMLCanvasElement)o=n;else{bl===void 0&&(bl=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),bl.width=n.width,bl.height=n.height;const h=bl.getContext("2d");n instanceof ImageData?h.putImageData(n,0,0):h.drawImage(n,0,0,n.width,n.height),o=bl}return o.width>2048||o.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",n),o.toDataURL("image/jpeg",.6)):o.toDataURL("image/png")}}let Nd=0;class Ri extends co{constructor(n=Ri.DEFAULT_IMAGE,o=Ri.DEFAULT_MAPPING,h=qn,p=qn,w=Or,S=Ns,I=Xn,k=Wa,R=1,$=ps){super(),Object.defineProperty(this,"id",{value:Nd++}),this.uuid=Vs(),this.name="",this.image=n,this.mipmaps=[],this.mapping=o,this.wrapS=h,this.wrapT=p,this.magFilter=w,this.minFilter=S,this.anisotropy=R,this.format=I,this.internalFormat=null,this.type=k,this.offset=new Qt(0,0),this.repeat=new Qt(1,1),this.center=new Qt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ni,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=$,this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(n){return this.name=n.name,this.image=n.image,this.mipmaps=n.mipmaps.slice(0),this.mapping=n.mapping,this.wrapS=n.wrapS,this.wrapT=n.wrapT,this.magFilter=n.magFilter,this.minFilter=n.minFilter,this.anisotropy=n.anisotropy,this.format=n.format,this.internalFormat=n.internalFormat,this.type=n.type,this.offset.copy(n.offset),this.repeat.copy(n.repeat),this.center.copy(n.center),this.rotation=n.rotation,this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrix.copy(n.matrix),this.generateMipmaps=n.generateMipmaps,this.premultiplyAlpha=n.premultiplyAlpha,this.flipY=n.flipY,this.unpackAlignment=n.unpackAlignment,this.encoding=n.encoding,this}toJSON(n){const o=n===void 0||typeof n=="string";if(!o&&n.textures[this.uuid]!==void 0)return n.textures[this.uuid];const h={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==void 0){const p=this.image;if(p.uuid===void 0&&(p.uuid=Vs()),!o&&n.images[p.uuid]===void 0){let w;if(Array.isArray(p)){w=[];for(let S=0,I=p.length;S<I;S++)p[S].isDataTexture?w.push(Rd(p[S].image)):w.push(Rd(p[S]))}else w=Rd(p);n.images[p.uuid]={uuid:p.uuid,url:w}}h.image=p.uuid}return o||(n.textures[this.uuid]=h),h}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(n){if(this.mapping!==Je)return n;if(n.applyMatrix3(this.matrix),n.x<0||n.x>1)switch(this.wrapS){case on:n.x=n.x-Math.floor(n.x);break;case qn:n.x=n.x<0?0:1;break;case Ir:Math.abs(Math.floor(n.x)%2)===1?n.x=Math.ceil(n.x)-n.x:n.x=n.x-Math.floor(n.x)}if(n.y<0||n.y>1)switch(this.wrapT){case on:n.y=n.y-Math.floor(n.y);break;case qn:n.y=n.y<0?0:1;break;case Ir:Math.abs(Math.floor(n.y)%2)===1?n.y=Math.ceil(n.y)-n.y:n.y=n.y-Math.floor(n.y)}return this.flipY&&(n.y=1-n.y),n}set needsUpdate(n){n===!0&&this.version++}}function Rd(T){return typeof HTMLImageElement!="undefined"&&T instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&T instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&T instanceof ImageBitmap?Yc.getDataURL(T):T.data?{data:Array.prototype.slice.call(T.data),width:T.width,height:T.height,type:T.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}Ri.DEFAULT_IMAGE=void 0,Ri.DEFAULT_MAPPING=Je,Ri.prototype.isTexture=!0;class Xr{constructor(n=0,o=0,h=0,p=1){this.x=n,this.y=o,this.z=h,this.w=p}get width(){return this.z}set width(n){this.z=n}get height(){return this.w}set height(n){this.w=n}set(n,o,h,p){return this.x=n,this.y=o,this.z=h,this.w=p,this}setScalar(n){return this.x=n,this.y=n,this.z=n,this.w=n,this}setX(n){return this.x=n,this}setY(n){return this.y=n,this}setZ(n){return this.z=n,this}setW(n){return this.w=n,this}setComponent(n,o){switch(n){case 0:this.x=o;break;case 1:this.y=o;break;case 2:this.z=o;break;case 3:this.w=o;break;default:throw new Error("index is out of range: "+n)}return this}getComponent(n){switch(n){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+n)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(n){return this.x=n.x,this.y=n.y,this.z=n.z,this.w=n.w!==void 0?n.w:1,this}add(n,o){return o!==void 0?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(n,o)):(this.x+=n.x,this.y+=n.y,this.z+=n.z,this.w+=n.w,this)}addScalar(n){return this.x+=n,this.y+=n,this.z+=n,this.w+=n,this}addVectors(n,o){return this.x=n.x+o.x,this.y=n.y+o.y,this.z=n.z+o.z,this.w=n.w+o.w,this}addScaledVector(n,o){return this.x+=n.x*o,this.y+=n.y*o,this.z+=n.z*o,this.w+=n.w*o,this}sub(n,o){return o!==void 0?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(n,o)):(this.x-=n.x,this.y-=n.y,this.z-=n.z,this.w-=n.w,this)}subScalar(n){return this.x-=n,this.y-=n,this.z-=n,this.w-=n,this}subVectors(n,o){return this.x=n.x-o.x,this.y=n.y-o.y,this.z=n.z-o.z,this.w=n.w-o.w,this}multiply(n){return this.x*=n.x,this.y*=n.y,this.z*=n.z,this.w*=n.w,this}multiplyScalar(n){return this.x*=n,this.y*=n,this.z*=n,this.w*=n,this}applyMatrix4(n){const o=this.x,h=this.y,p=this.z,w=this.w,S=n.elements;return this.x=S[0]*o+S[4]*h+S[8]*p+S[12]*w,this.y=S[1]*o+S[5]*h+S[9]*p+S[13]*w,this.z=S[2]*o+S[6]*h+S[10]*p+S[14]*w,this.w=S[3]*o+S[7]*h+S[11]*p+S[15]*w,this}divideScalar(n){return this.multiplyScalar(1/n)}setAxisAngleFromQuaternion(n){this.w=2*Math.acos(n.w);const o=Math.sqrt(1-n.w*n.w);return o<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=n.x/o,this.y=n.y/o,this.z=n.z/o),this}setAxisAngleFromRotationMatrix(n){let o,h,p,w;const k=n.elements,R=k[0],$=k[4],j=k[8],H=k[1],Y=k[5],ee=k[9],te=k[2],ae=k[6],ne=k[10];if(Math.abs($-H)<.01&&Math.abs(j-te)<.01&&Math.abs(ee-ae)<.01){if(Math.abs($+H)<.1&&Math.abs(j+te)<.1&&Math.abs(ee+ae)<.1&&Math.abs(R+Y+ne-3)<.1)return this.set(1,0,0,0),this;o=Math.PI;const _e=(R+1)/2,ve=(Y+1)/2,Ne=(ne+1)/2,Oe=($+H)/4,tt=(j+te)/4,it=(ee+ae)/4;return _e>ve&&_e>Ne?_e<.01?(h=0,p=.707106781,w=.707106781):(h=Math.sqrt(_e),p=Oe/h,w=tt/h):ve>Ne?ve<.01?(h=.707106781,p=0,w=.707106781):(p=Math.sqrt(ve),h=Oe/p,w=it/p):Ne<.01?(h=.707106781,p=.707106781,w=0):(w=Math.sqrt(Ne),h=tt/w,p=it/w),this.set(h,p,w,o),this}let me=Math.sqrt((ae-ee)*(ae-ee)+(j-te)*(j-te)+(H-$)*(H-$));return Math.abs(me)<.001&&(me=1),this.x=(ae-ee)/me,this.y=(j-te)/me,this.z=(H-$)/me,this.w=Math.acos((R+Y+ne-1)/2),this}min(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this.z=Math.min(this.z,n.z),this.w=Math.min(this.w,n.w),this}max(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this.z=Math.max(this.z,n.z),this.w=Math.max(this.w,n.w),this}clamp(n,o){return this.x=Math.max(n.x,Math.min(o.x,this.x)),this.y=Math.max(n.y,Math.min(o.y,this.y)),this.z=Math.max(n.z,Math.min(o.z,this.z)),this.w=Math.max(n.w,Math.min(o.w,this.w)),this}clampScalar(n,o){return this.x=Math.max(n,Math.min(o,this.x)),this.y=Math.max(n,Math.min(o,this.y)),this.z=Math.max(n,Math.min(o,this.z)),this.w=Math.max(n,Math.min(o,this.w)),this}clampLength(n,o){const h=this.length();return this.divideScalar(h||1).multiplyScalar(Math.max(n,Math.min(o,h)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(n){return this.x*n.x+this.y*n.y+this.z*n.z+this.w*n.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(n){return this.normalize().multiplyScalar(n)}lerp(n,o){return this.x+=(n.x-this.x)*o,this.y+=(n.y-this.y)*o,this.z+=(n.z-this.z)*o,this.w+=(n.w-this.w)*o,this}lerpVectors(n,o,h){return this.x=n.x+(o.x-n.x)*h,this.y=n.y+(o.y-n.y)*h,this.z=n.z+(o.z-n.z)*h,this.w=n.w+(o.w-n.w)*h,this}equals(n){return n.x===this.x&&n.y===this.y&&n.z===this.z&&n.w===this.w}fromArray(n,o=0){return this.x=n[o],this.y=n[o+1],this.z=n[o+2],this.w=n[o+3],this}toArray(n=[],o=0){return n[o]=this.x,n[o+1]=this.y,n[o+2]=this.z,n[o+3]=this.w,n}fromBufferAttribute(n,o,h){return h!==void 0&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=n.getX(o),this.y=n.getY(o),this.z=n.getZ(o),this.w=n.getW(o),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}Xr.prototype.isVector4=!0;class Ea extends co{constructor(n,o,h={}){super(),this.width=n,this.height=o,this.depth=1,this.scissor=new Xr(0,0,n,o),this.scissorTest=!1,this.viewport=new Xr(0,0,n,o),this.texture=new Ri(void 0,h.mapping,h.wrapS,h.wrapT,h.magFilter,h.minFilter,h.format,h.type,h.anisotropy,h.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:n,height:o,depth:1},this.texture.generateMipmaps=h.generateMipmaps!==void 0&&h.generateMipmaps,this.texture.internalFormat=h.internalFormat!==void 0?h.internalFormat:null,this.texture.minFilter=h.minFilter!==void 0?h.minFilter:Or,this.depthBuffer=h.depthBuffer===void 0||h.depthBuffer,this.stencilBuffer=h.stencilBuffer!==void 0&&h.stencilBuffer,this.depthTexture=h.depthTexture!==void 0?h.depthTexture:null}setTexture(n){n.image={width:this.width,height:this.height,depth:this.depth},this.texture=n}setSize(n,o,h=1){this.width===n&&this.height===o&&this.depth===h||(this.width=n,this.height=o,this.depth=h,this.texture.image.width=n,this.texture.image.height=o,this.texture.image.depth=h,this.dispose()),this.viewport.set(0,0,n,o),this.scissor.set(0,0,n,o)}clone(){return new this.constructor().copy(this)}copy(n){return this.width=n.width,this.height=n.height,this.depth=n.depth,this.viewport.copy(n.viewport),this.texture=n.texture.clone(),this.texture.image=MT({},this.texture.image),this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.depthTexture=n.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}Ea.prototype.isWebGLRenderTarget=!0;class Kc extends Ea{constructor(n,o,h){super(n,o);const p=this.texture;this.texture=[];for(let w=0;w<h;w++)this.texture[w]=p.clone()}setSize(n,o,h=1){if(this.width!==n||this.height!==o||this.depth!==h){this.width=n,this.height=o,this.depth=h;for(let p=0,w=this.texture.length;p<w;p++)this.texture[p].image.width=n,this.texture[p].image.height=o,this.texture[p].image.depth=h;this.dispose()}return this.viewport.set(0,0,n,o),this.scissor.set(0,0,n,o),this}copy(n){this.dispose(),this.width=n.width,this.height=n.height,this.depth=n.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.depthTexture=n.depthTexture,this.texture.length=0;for(let o=0,h=n.texture.length;o<h;o++)this.texture[o]=n.texture[o].clone();return this}}Kc.prototype.isWebGLMultipleRenderTargets=!0;class Bu extends Ea{constructor(n,o,h){super(n,o,h),this.samples=4}copy(n){return super.copy.call(this,n),this.samples=n.samples,this}}Bu.prototype.isWebGLMultisampleRenderTarget=!0;class Zi{constructor(n=0,o=0,h=0,p=1){this._x=n,this._y=o,this._z=h,this._w=p}static slerp(n,o,h,p){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),h.slerpQuaternions(n,o,p)}static slerpFlat(n,o,h,p,w,S,I){let k=h[p+0],R=h[p+1],$=h[p+2],j=h[p+3];const H=w[S+0],Y=w[S+1],ee=w[S+2],te=w[S+3];if(I===0)return n[o+0]=k,n[o+1]=R,n[o+2]=$,void(n[o+3]=j);if(I===1)return n[o+0]=H,n[o+1]=Y,n[o+2]=ee,void(n[o+3]=te);if(j!==te||k!==H||R!==Y||$!==ee){let ae=1-I;const ne=k*H+R*Y+$*ee+j*te,me=ne>=0?1:-1,_e=1-ne*ne;if(_e>Number.EPSILON){const Ne=Math.sqrt(_e),Oe=Math.atan2(Ne,ne*me);ae=Math.sin(ae*Oe)/Ne,I=Math.sin(I*Oe)/Ne}const ve=I*me;if(k=k*ae+H*ve,R=R*ae+Y*ve,$=$*ae+ee*ve,j=j*ae+te*ve,ae===1-I){const Ne=1/Math.sqrt(k*k+R*R+$*$+j*j);k*=Ne,R*=Ne,$*=Ne,j*=Ne}}n[o]=k,n[o+1]=R,n[o+2]=$,n[o+3]=j}static multiplyQuaternionsFlat(n,o,h,p,w,S){const I=h[p],k=h[p+1],R=h[p+2],$=h[p+3],j=w[S],H=w[S+1],Y=w[S+2],ee=w[S+3];return n[o]=I*ee+$*j+k*Y-R*H,n[o+1]=k*ee+$*H+R*j-I*Y,n[o+2]=R*ee+$*Y+I*H-k*j,n[o+3]=$*ee-I*j-k*H-R*Y,n}get x(){return this._x}set x(n){this._x=n,this._onChangeCallback()}get y(){return this._y}set y(n){this._y=n,this._onChangeCallback()}get z(){return this._z}set z(n){this._z=n,this._onChangeCallback()}get w(){return this._w}set w(n){this._w=n,this._onChangeCallback()}set(n,o,h,p){return this._x=n,this._y=o,this._z=h,this._w=p,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(n){return this._x=n.x,this._y=n.y,this._z=n.z,this._w=n.w,this._onChangeCallback(),this}setFromEuler(n,o){if(!n||!n.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const h=n._x,p=n._y,w=n._z,S=n._order,I=Math.cos,k=Math.sin,R=I(h/2),$=I(p/2),j=I(w/2),H=k(h/2),Y=k(p/2),ee=k(w/2);switch(S){case"XYZ":this._x=H*$*j+R*Y*ee,this._y=R*Y*j-H*$*ee,this._z=R*$*ee+H*Y*j,this._w=R*$*j-H*Y*ee;break;case"YXZ":this._x=H*$*j+R*Y*ee,this._y=R*Y*j-H*$*ee,this._z=R*$*ee-H*Y*j,this._w=R*$*j+H*Y*ee;break;case"ZXY":this._x=H*$*j-R*Y*ee,this._y=R*Y*j+H*$*ee,this._z=R*$*ee+H*Y*j,this._w=R*$*j-H*Y*ee;break;case"ZYX":this._x=H*$*j-R*Y*ee,this._y=R*Y*j+H*$*ee,this._z=R*$*ee-H*Y*j,this._w=R*$*j+H*Y*ee;break;case"YZX":this._x=H*$*j+R*Y*ee,this._y=R*Y*j+H*$*ee,this._z=R*$*ee-H*Y*j,this._w=R*$*j-H*Y*ee;break;case"XZY":this._x=H*$*j-R*Y*ee,this._y=R*Y*j-H*$*ee,this._z=R*$*ee+H*Y*j,this._w=R*$*j+H*Y*ee;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+S)}return o!==!1&&this._onChangeCallback(),this}setFromAxisAngle(n,o){const h=o/2,p=Math.sin(h);return this._x=n.x*p,this._y=n.y*p,this._z=n.z*p,this._w=Math.cos(h),this._onChangeCallback(),this}setFromRotationMatrix(n){const o=n.elements,h=o[0],p=o[4],w=o[8],S=o[1],I=o[5],k=o[9],R=o[2],$=o[6],j=o[10],H=h+I+j;if(H>0){const Y=.5/Math.sqrt(H+1);this._w=.25/Y,this._x=($-k)*Y,this._y=(w-R)*Y,this._z=(S-p)*Y}else if(h>I&&h>j){const Y=2*Math.sqrt(1+h-I-j);this._w=($-k)/Y,this._x=.25*Y,this._y=(p+S)/Y,this._z=(w+R)/Y}else if(I>j){const Y=2*Math.sqrt(1+I-h-j);this._w=(w-R)/Y,this._x=(p+S)/Y,this._y=.25*Y,this._z=(k+$)/Y}else{const Y=2*Math.sqrt(1+j-h-I);this._w=(S-p)/Y,this._x=(w+R)/Y,this._y=(k+$)/Y,this._z=.25*Y}return this._onChangeCallback(),this}setFromUnitVectors(n,o){let h=n.dot(o)+1;return h<Number.EPSILON?(h=0,Math.abs(n.x)>Math.abs(n.z)?(this._x=-n.y,this._y=n.x,this._z=0,this._w=h):(this._x=0,this._y=-n.z,this._z=n.y,this._w=h)):(this._x=n.y*o.z-n.z*o.y,this._y=n.z*o.x-n.x*o.z,this._z=n.x*o.y-n.y*o.x,this._w=h),this.normalize()}angleTo(n){return 2*Math.acos(Math.abs(Vi(this.dot(n),-1,1)))}rotateTowards(n,o){const h=this.angleTo(n);if(h===0)return this;const p=Math.min(1,o/h);return this.slerp(n,p),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(n){return this._x*n._x+this._y*n._y+this._z*n._z+this._w*n._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let n=this.length();return n===0?(this._x=0,this._y=0,this._z=0,this._w=1):(n=1/n,this._x=this._x*n,this._y=this._y*n,this._z=this._z*n,this._w=this._w*n),this._onChangeCallback(),this}multiply(n,o){return o!==void 0?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(n,o)):this.multiplyQuaternions(this,n)}premultiply(n){return this.multiplyQuaternions(n,this)}multiplyQuaternions(n,o){const h=n._x,p=n._y,w=n._z,S=n._w,I=o._x,k=o._y,R=o._z,$=o._w;return this._x=h*$+S*I+p*R-w*k,this._y=p*$+S*k+w*I-h*R,this._z=w*$+S*R+h*k-p*I,this._w=S*$-h*I-p*k-w*R,this._onChangeCallback(),this}slerp(n,o){if(o===0)return this;if(o===1)return this.copy(n);const h=this._x,p=this._y,w=this._z,S=this._w;let I=S*n._w+h*n._x+p*n._y+w*n._z;if(I<0?(this._w=-n._w,this._x=-n._x,this._y=-n._y,this._z=-n._z,I=-I):this.copy(n),I>=1)return this._w=S,this._x=h,this._y=p,this._z=w,this;const k=1-I*I;if(k<=Number.EPSILON){const Y=1-o;return this._w=Y*S+o*this._w,this._x=Y*h+o*this._x,this._y=Y*p+o*this._y,this._z=Y*w+o*this._z,this.normalize(),this._onChangeCallback(),this}const R=Math.sqrt(k),$=Math.atan2(R,I),j=Math.sin((1-o)*$)/R,H=Math.sin(o*$)/R;return this._w=S*j+this._w*H,this._x=h*j+this._x*H,this._y=p*j+this._y*H,this._z=w*j+this._z*H,this._onChangeCallback(),this}slerpQuaternions(n,o,h){this.copy(n).slerp(o,h)}equals(n){return n._x===this._x&&n._y===this._y&&n._z===this._z&&n._w===this._w}fromArray(n,o=0){return this._x=n[o],this._y=n[o+1],this._z=n[o+2],this._w=n[o+3],this._onChangeCallback(),this}toArray(n=[],o=0){return n[o]=this._x,n[o+1]=this._y,n[o+2]=this._z,n[o+3]=this._w,n}fromBufferAttribute(n,o){return this._x=n.getX(o),this._y=n.getY(o),this._z=n.getZ(o),this._w=n.getW(o),this}_onChange(n){return this._onChangeCallback=n,this}_onChangeCallback(){}}Zi.prototype.isQuaternion=!0;class Te{constructor(n=0,o=0,h=0){this.x=n,this.y=o,this.z=h}set(n,o,h){return h===void 0&&(h=this.z),this.x=n,this.y=o,this.z=h,this}setScalar(n){return this.x=n,this.y=n,this.z=n,this}setX(n){return this.x=n,this}setY(n){return this.y=n,this}setZ(n){return this.z=n,this}setComponent(n,o){switch(n){case 0:this.x=o;break;case 1:this.y=o;break;case 2:this.z=o;break;default:throw new Error("index is out of range: "+n)}return this}getComponent(n){switch(n){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+n)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(n){return this.x=n.x,this.y=n.y,this.z=n.z,this}add(n,o){return o!==void 0?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(n,o)):(this.x+=n.x,this.y+=n.y,this.z+=n.z,this)}addScalar(n){return this.x+=n,this.y+=n,this.z+=n,this}addVectors(n,o){return this.x=n.x+o.x,this.y=n.y+o.y,this.z=n.z+o.z,this}addScaledVector(n,o){return this.x+=n.x*o,this.y+=n.y*o,this.z+=n.z*o,this}sub(n,o){return o!==void 0?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(n,o)):(this.x-=n.x,this.y-=n.y,this.z-=n.z,this)}subScalar(n){return this.x-=n,this.y-=n,this.z-=n,this}subVectors(n,o){return this.x=n.x-o.x,this.y=n.y-o.y,this.z=n.z-o.z,this}multiply(n,o){return o!==void 0?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(n,o)):(this.x*=n.x,this.y*=n.y,this.z*=n.z,this)}multiplyScalar(n){return this.x*=n,this.y*=n,this.z*=n,this}multiplyVectors(n,o){return this.x=n.x*o.x,this.y=n.y*o.y,this.z=n.z*o.z,this}applyEuler(n){return n&&n.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Dd.setFromEuler(n))}applyAxisAngle(n,o){return this.applyQuaternion(Dd.setFromAxisAngle(n,o))}applyMatrix3(n){const o=this.x,h=this.y,p=this.z,w=n.elements;return this.x=w[0]*o+w[3]*h+w[6]*p,this.y=w[1]*o+w[4]*h+w[7]*p,this.z=w[2]*o+w[5]*h+w[8]*p,this}applyNormalMatrix(n){return this.applyMatrix3(n).normalize()}applyMatrix4(n){const o=this.x,h=this.y,p=this.z,w=n.elements,S=1/(w[3]*o+w[7]*h+w[11]*p+w[15]);return this.x=(w[0]*o+w[4]*h+w[8]*p+w[12])*S,this.y=(w[1]*o+w[5]*h+w[9]*p+w[13])*S,this.z=(w[2]*o+w[6]*h+w[10]*p+w[14])*S,this}applyQuaternion(n){const o=this.x,h=this.y,p=this.z,w=n.x,S=n.y,I=n.z,k=n.w,R=k*o+S*p-I*h,$=k*h+I*o-w*p,j=k*p+w*h-S*o,H=-w*o-S*h-I*p;return this.x=R*k+H*-w+$*-I-j*-S,this.y=$*k+H*-S+j*-w-R*-I,this.z=j*k+H*-I+R*-S-$*-w,this}project(n){return this.applyMatrix4(n.matrixWorldInverse).applyMatrix4(n.projectionMatrix)}unproject(n){return this.applyMatrix4(n.projectionMatrixInverse).applyMatrix4(n.matrixWorld)}transformDirection(n){const o=this.x,h=this.y,p=this.z,w=n.elements;return this.x=w[0]*o+w[4]*h+w[8]*p,this.y=w[1]*o+w[5]*h+w[9]*p,this.z=w[2]*o+w[6]*h+w[10]*p,this.normalize()}divide(n){return this.x/=n.x,this.y/=n.y,this.z/=n.z,this}divideScalar(n){return this.multiplyScalar(1/n)}min(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this.z=Math.min(this.z,n.z),this}max(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this.z=Math.max(this.z,n.z),this}clamp(n,o){return this.x=Math.max(n.x,Math.min(o.x,this.x)),this.y=Math.max(n.y,Math.min(o.y,this.y)),this.z=Math.max(n.z,Math.min(o.z,this.z)),this}clampScalar(n,o){return this.x=Math.max(n,Math.min(o,this.x)),this.y=Math.max(n,Math.min(o,this.y)),this.z=Math.max(n,Math.min(o,this.z)),this}clampLength(n,o){const h=this.length();return this.divideScalar(h||1).multiplyScalar(Math.max(n,Math.min(o,h)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(n){return this.x*n.x+this.y*n.y+this.z*n.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(n){return this.normalize().multiplyScalar(n)}lerp(n,o){return this.x+=(n.x-this.x)*o,this.y+=(n.y-this.y)*o,this.z+=(n.z-this.z)*o,this}lerpVectors(n,o,h){return this.x=n.x+(o.x-n.x)*h,this.y=n.y+(o.y-n.y)*h,this.z=n.z+(o.z-n.z)*h,this}cross(n,o){return o!==void 0?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(n,o)):this.crossVectors(this,n)}crossVectors(n,o){const h=n.x,p=n.y,w=n.z,S=o.x,I=o.y,k=o.z;return this.x=p*k-w*I,this.y=w*S-h*k,this.z=h*I-p*S,this}projectOnVector(n){const o=n.lengthSq();if(o===0)return this.set(0,0,0);const h=n.dot(this)/o;return this.copy(n).multiplyScalar(h)}projectOnPlane(n){return Ld.copy(this).projectOnVector(n),this.sub(Ld)}reflect(n){return this.sub(Ld.copy(n).multiplyScalar(2*this.dot(n)))}angleTo(n){const o=Math.sqrt(this.lengthSq()*n.lengthSq());if(o===0)return Math.PI/2;const h=this.dot(n)/o;return Math.acos(Vi(h,-1,1))}distanceTo(n){return Math.sqrt(this.distanceToSquared(n))}distanceToSquared(n){const o=this.x-n.x,h=this.y-n.y,p=this.z-n.z;return o*o+h*h+p*p}manhattanDistanceTo(n){return Math.abs(this.x-n.x)+Math.abs(this.y-n.y)+Math.abs(this.z-n.z)}setFromSpherical(n){return this.setFromSphericalCoords(n.radius,n.phi,n.theta)}setFromSphericalCoords(n,o,h){const p=Math.sin(o)*n;return this.x=p*Math.sin(h),this.y=Math.cos(o)*n,this.z=p*Math.cos(h),this}setFromCylindrical(n){return this.setFromCylindricalCoords(n.radius,n.theta,n.y)}setFromCylindricalCoords(n,o,h){return this.x=n*Math.sin(o),this.y=h,this.z=n*Math.cos(o),this}setFromMatrixPosition(n){const o=n.elements;return this.x=o[12],this.y=o[13],this.z=o[14],this}setFromMatrixScale(n){const o=this.setFromMatrixColumn(n,0).length(),h=this.setFromMatrixColumn(n,1).length(),p=this.setFromMatrixColumn(n,2).length();return this.x=o,this.y=h,this.z=p,this}setFromMatrixColumn(n,o){return this.fromArray(n.elements,4*o)}setFromMatrix3Column(n,o){return this.fromArray(n.elements,3*o)}equals(n){return n.x===this.x&&n.y===this.y&&n.z===this.z}fromArray(n,o=0){return this.x=n[o],this.y=n[o+1],this.z=n[o+2],this}toArray(n=[],o=0){return n[o]=this.x,n[o+1]=this.y,n[o+2]=this.z,n}fromBufferAttribute(n,o,h){return h!==void 0&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=n.getX(o),this.y=n.getY(o),this.z=n.getZ(o),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}Te.prototype.isVector3=!0;const Ld=new Te,Dd=new Zi;class Ws{constructor(n=new Te(1/0,1/0,1/0),o=new Te(-1/0,-1/0,-1/0)){this.min=n,this.max=o}set(n,o){return this.min.copy(n),this.max.copy(o),this}setFromArray(n){let o=1/0,h=1/0,p=1/0,w=-1/0,S=-1/0,I=-1/0;for(let k=0,R=n.length;k<R;k+=3){const $=n[k],j=n[k+1],H=n[k+2];$<o&&(o=$),j<h&&(h=j),H<p&&(p=H),$>w&&(w=$),j>S&&(S=j),H>I&&(I=H)}return this.min.set(o,h,p),this.max.set(w,S,I),this}setFromBufferAttribute(n){let o=1/0,h=1/0,p=1/0,w=-1/0,S=-1/0,I=-1/0;for(let k=0,R=n.count;k<R;k++){const $=n.getX(k),j=n.getY(k),H=n.getZ(k);$<o&&(o=$),j<h&&(h=j),H<p&&(p=H),$>w&&(w=$),j>S&&(S=j),H>I&&(I=H)}return this.min.set(o,h,p),this.max.set(w,S,I),this}setFromPoints(n){this.makeEmpty();for(let o=0,h=n.length;o<h;o++)this.expandByPoint(n[o]);return this}setFromCenterAndSize(n,o){const h=jl.copy(o).multiplyScalar(.5);return this.min.copy(n).sub(h),this.max.copy(n).add(h),this}setFromObject(n){return this.makeEmpty(),this.expandByObject(n)}clone(){return new this.constructor().copy(this)}copy(n){return this.min.copy(n.min),this.max.copy(n.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(n){return this.isEmpty()?n.set(0,0,0):n.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(n){return this.isEmpty()?n.set(0,0,0):n.subVectors(this.max,this.min)}expandByPoint(n){return this.min.min(n),this.max.max(n),this}expandByVector(n){return this.min.sub(n),this.max.add(n),this}expandByScalar(n){return this.min.addScalar(-n),this.max.addScalar(n),this}expandByObject(n){n.updateWorldMatrix(!1,!1);const o=n.geometry;o!==void 0&&(o.boundingBox===null&&o.computeBoundingBox(),$u.copy(o.boundingBox),$u.applyMatrix4(n.matrixWorld),this.union($u));const h=n.children;for(let p=0,w=h.length;p<w;p++)this.expandByObject(h[p]);return this}containsPoint(n){return!(n.x<this.min.x||n.x>this.max.x||n.y<this.min.y||n.y>this.max.y||n.z<this.min.z||n.z>this.max.z)}containsBox(n){return this.min.x<=n.min.x&&n.max.x<=this.max.x&&this.min.y<=n.min.y&&n.max.y<=this.max.y&&this.min.z<=n.min.z&&n.max.z<=this.max.z}getParameter(n,o){return o.set((n.x-this.min.x)/(this.max.x-this.min.x),(n.y-this.min.y)/(this.max.y-this.min.y),(n.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(n){return!(n.max.x<this.min.x||n.min.x>this.max.x||n.max.y<this.min.y||n.min.y>this.max.y||n.max.z<this.min.z||n.min.z>this.max.z)}intersectsSphere(n){return this.clampPoint(n.center,jl),jl.distanceToSquared(n.center)<=n.radius*n.radius}intersectsPlane(n){let o,h;return n.normal.x>0?(o=n.normal.x*this.min.x,h=n.normal.x*this.max.x):(o=n.normal.x*this.max.x,h=n.normal.x*this.min.x),n.normal.y>0?(o+=n.normal.y*this.min.y,h+=n.normal.y*this.max.y):(o+=n.normal.y*this.max.y,h+=n.normal.y*this.min.y),n.normal.z>0?(o+=n.normal.z*this.min.z,h+=n.normal.z*this.max.z):(o+=n.normal.z*this.max.z,h+=n.normal.z*this.min.z),o<=-n.constant&&h>=-n.constant}intersectsTriangle(n){if(this.isEmpty())return!1;this.getCenter(_l),Xl.subVectors(this.max,_l),Bo.subVectors(n.a,_l),ql.subVectors(n.b,_l),wl.subVectors(n.c,_l),qa.subVectors(ql,Bo),ho.subVectors(wl,ql),po.subVectors(Bo,wl);let o=[0,-qa.z,qa.y,0,-ho.z,ho.y,0,-po.z,po.y,qa.z,0,-qa.x,ho.z,0,-ho.x,po.z,0,-po.x,-qa.y,qa.x,0,-ho.y,ho.x,0,-po.y,po.x,0];return!!Uu(o,Bo,ql,wl,Xl)&&(o=[1,0,0,0,1,0,0,0,1],!!Uu(o,Bo,ql,wl,Xl)&&(Yl.crossVectors(qa,ho),o=[Yl.x,Yl.y,Yl.z],Uu(o,Bo,ql,wl,Xl)))}clampPoint(n,o){return o.copy(n).clamp(this.min,this.max)}distanceToPoint(n){return jl.copy(n).clamp(this.min,this.max).sub(n).length()}getBoundingSphere(n){return this.getCenter(n.center),n.radius=.5*this.getSize(jl).length(),n}intersect(n){return this.min.max(n.min),this.max.min(n.max),this.isEmpty()&&this.makeEmpty(),this}union(n){return this.min.min(n.min),this.max.max(n.max),this}applyMatrix4(n){return this.isEmpty()||(Aa[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(n),Aa[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(n),Aa[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(n),Aa[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(n),Aa[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(n),Aa[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(n),Aa[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(n),Aa[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(n),this.setFromPoints(Aa)),this}translate(n){return this.min.add(n),this.max.add(n),this}equals(n){return n.min.equals(this.min)&&n.max.equals(this.max)}}Ws.prototype.isBox3=!0;const Aa=[new Te,new Te,new Te,new Te,new Te,new Te,new Te,new Te],jl=new Te,$u=new Ws,Bo=new Te,ql=new Te,wl=new Te,qa=new Te,ho=new Te,po=new Te,_l=new Te,Xl=new Te,Yl=new Te,fo=new Te;function Uu(T,n,o,h,p){for(let w=0,S=T.length-3;w<=S;w+=3){fo.fromArray(T,w);const I=p.x*Math.abs(fo.x)+p.y*Math.abs(fo.y)+p.z*Math.abs(fo.z),k=n.dot(fo),R=o.dot(fo),$=h.dot(fo);if(Math.max(-Math.max(k,R,$),Math.min(k,R,$))>I)return!1}return!0}const If=new Ws,Pd=new Te,Zc=new Te,Jc=new Te;class $o{constructor(n=new Te,o=-1){this.center=n,this.radius=o}set(n,o){return this.center.copy(n),this.radius=o,this}setFromPoints(n,o){const h=this.center;o!==void 0?h.copy(o):If.setFromPoints(n).getCenter(h);let p=0;for(let w=0,S=n.length;w<S;w++)p=Math.max(p,h.distanceToSquared(n[w]));return this.radius=Math.sqrt(p),this}copy(n){return this.center.copy(n.center),this.radius=n.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(n){return n.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(n){return n.distanceTo(this.center)-this.radius}intersectsSphere(n){const o=this.radius+n.radius;return n.center.distanceToSquared(this.center)<=o*o}intersectsBox(n){return n.intersectsSphere(this)}intersectsPlane(n){return Math.abs(n.distanceToPoint(this.center))<=this.radius}clampPoint(n,o){const h=this.center.distanceToSquared(n);return o.copy(n),h>this.radius*this.radius&&(o.sub(this.center).normalize(),o.multiplyScalar(this.radius).add(this.center)),o}getBoundingBox(n){return this.isEmpty()?(n.makeEmpty(),n):(n.set(this.center,this.center),n.expandByScalar(this.radius),n)}applyMatrix4(n){return this.center.applyMatrix4(n),this.radius=this.radius*n.getMaxScaleOnAxis(),this}translate(n){return this.center.add(n),this}expandByPoint(n){Jc.subVectors(n,this.center);const o=Jc.lengthSq();if(o>this.radius*this.radius){const h=Math.sqrt(o),p=.5*(h-this.radius);this.center.add(Jc.multiplyScalar(p/h)),this.radius+=p}return this}union(n){return Zc.subVectors(n.center,this.center).normalize().multiplyScalar(n.radius),this.expandByPoint(Pd.copy(n.center).add(Zc)),this.expandByPoint(Pd.copy(n.center).sub(Zc)),this}equals(n){return n.center.equals(this.center)&&n.radius===this.radius}clone(){return new this.constructor().copy(this)}}const mo=new Te,Fd=new Te,Qc=new Te,Uo=new Te,Vu=new Te,eh=new Te,Od=new Te;class Vo{constructor(n=new Te,o=new Te(0,0,-1)){this.origin=n,this.direction=o}set(n,o){return this.origin.copy(n),this.direction.copy(o),this}copy(n){return this.origin.copy(n.origin),this.direction.copy(n.direction),this}at(n,o){return o.copy(this.direction).multiplyScalar(n).add(this.origin)}lookAt(n){return this.direction.copy(n).sub(this.origin).normalize(),this}recast(n){return this.origin.copy(this.at(n,mo)),this}closestPointToPoint(n,o){o.subVectors(n,this.origin);const h=o.dot(this.direction);return h<0?o.copy(this.origin):o.copy(this.direction).multiplyScalar(h).add(this.origin)}distanceToPoint(n){return Math.sqrt(this.distanceSqToPoint(n))}distanceSqToPoint(n){const o=mo.subVectors(n,this.origin).dot(this.direction);return o<0?this.origin.distanceToSquared(n):(mo.copy(this.direction).multiplyScalar(o).add(this.origin),mo.distanceToSquared(n))}distanceSqToSegment(n,o,h,p){Fd.copy(n).add(o).multiplyScalar(.5),Qc.copy(o).sub(n).normalize(),Uo.copy(this.origin).sub(Fd);const w=.5*n.distanceTo(o),S=-this.direction.dot(Qc),I=Uo.dot(this.direction),k=-Uo.dot(Qc),R=Uo.lengthSq(),$=Math.abs(1-S*S);let j,H,Y,ee;if($>0)if(j=S*k-I,H=S*I-k,ee=w*$,j>=0)if(H>=-ee)if(H<=ee){const te=1/$;j*=te,H*=te,Y=j*(j+S*H+2*I)+H*(S*j+H+2*k)+R}else H=w,j=Math.max(0,-(S*H+I)),Y=-j*j+H*(H+2*k)+R;else H=-w,j=Math.max(0,-(S*H+I)),Y=-j*j+H*(H+2*k)+R;else H<=-ee?(j=Math.max(0,-(-S*w+I)),H=j>0?-w:Math.min(Math.max(-w,-k),w),Y=-j*j+H*(H+2*k)+R):H<=ee?(j=0,H=Math.min(Math.max(-w,-k),w),Y=H*(H+2*k)+R):(j=Math.max(0,-(S*w+I)),H=j>0?w:Math.min(Math.max(-w,-k),w),Y=-j*j+H*(H+2*k)+R);else H=S>0?-w:w,j=Math.max(0,-(S*H+I)),Y=-j*j+H*(H+2*k)+R;return h&&h.copy(this.direction).multiplyScalar(j).add(this.origin),p&&p.copy(Qc).multiplyScalar(H).add(Fd),Y}intersectSphere(n,o){mo.subVectors(n.center,this.origin);const h=mo.dot(this.direction),p=mo.dot(mo)-h*h,w=n.radius*n.radius;if(p>w)return null;const S=Math.sqrt(w-p),I=h-S,k=h+S;return I<0&&k<0?null:I<0?this.at(k,o):this.at(I,o)}intersectsSphere(n){return this.distanceSqToPoint(n.center)<=n.radius*n.radius}distanceToPlane(n){const o=n.normal.dot(this.direction);if(o===0)return n.distanceToPoint(this.origin)===0?0:null;const h=-(this.origin.dot(n.normal)+n.constant)/o;return h>=0?h:null}intersectPlane(n,o){const h=this.distanceToPlane(n);return h===null?null:this.at(h,o)}intersectsPlane(n){const o=n.distanceToPoint(this.origin);return o===0||n.normal.dot(this.direction)*o<0}intersectBox(n,o){let h,p,w,S,I,k;const R=1/this.direction.x,$=1/this.direction.y,j=1/this.direction.z,H=this.origin;return R>=0?(h=(n.min.x-H.x)*R,p=(n.max.x-H.x)*R):(h=(n.max.x-H.x)*R,p=(n.min.x-H.x)*R),$>=0?(w=(n.min.y-H.y)*$,S=(n.max.y-H.y)*$):(w=(n.max.y-H.y)*$,S=(n.min.y-H.y)*$),h>S||w>p?null:((w>h||h!=h)&&(h=w),(S<p||p!=p)&&(p=S),j>=0?(I=(n.min.z-H.z)*j,k=(n.max.z-H.z)*j):(I=(n.max.z-H.z)*j,k=(n.min.z-H.z)*j),h>k||I>p?null:((I>h||h!=h)&&(h=I),(k<p||p!=p)&&(p=k),p<0?null:this.at(h>=0?h:p,o)))}intersectsBox(n){return this.intersectBox(n,mo)!==null}intersectTriangle(n,o,h,p,w){Vu.subVectors(o,n),eh.subVectors(h,n),Od.crossVectors(Vu,eh);let S,I=this.direction.dot(Od);if(I>0){if(p)return null;S=1}else{if(!(I<0))return null;S=-1,I=-I}Uo.subVectors(this.origin,n);const k=S*this.direction.dot(eh.crossVectors(Uo,eh));if(k<0)return null;const R=S*this.direction.dot(Vu.cross(Uo));if(R<0||k+R>I)return null;const $=-S*Uo.dot(Od);return $<0?null:this.at($/I,w)}applyMatrix4(n){return this.origin.applyMatrix4(n),this.direction.transformDirection(n),this}equals(n){return n.origin.equals(this.origin)&&n.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Gn{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(n,o,h,p,w,S,I,k,R,$,j,H,Y,ee,te,ae){const ne=this.elements;return ne[0]=n,ne[4]=o,ne[8]=h,ne[12]=p,ne[1]=w,ne[5]=S,ne[9]=I,ne[13]=k,ne[2]=R,ne[6]=$,ne[10]=j,ne[14]=H,ne[3]=Y,ne[7]=ee,ne[11]=te,ne[15]=ae,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Gn().fromArray(this.elements)}copy(n){const o=this.elements,h=n.elements;return o[0]=h[0],o[1]=h[1],o[2]=h[2],o[3]=h[3],o[4]=h[4],o[5]=h[5],o[6]=h[6],o[7]=h[7],o[8]=h[8],o[9]=h[9],o[10]=h[10],o[11]=h[11],o[12]=h[12],o[13]=h[13],o[14]=h[14],o[15]=h[15],this}copyPosition(n){const o=this.elements,h=n.elements;return o[12]=h[12],o[13]=h[13],o[14]=h[14],this}setFromMatrix3(n){const o=n.elements;return this.set(o[0],o[3],o[6],0,o[1],o[4],o[7],0,o[2],o[5],o[8],0,0,0,0,1),this}extractBasis(n,o,h){return n.setFromMatrixColumn(this,0),o.setFromMatrixColumn(this,1),h.setFromMatrixColumn(this,2),this}makeBasis(n,o,h){return this.set(n.x,o.x,h.x,0,n.y,o.y,h.y,0,n.z,o.z,h.z,0,0,0,0,1),this}extractRotation(n){const o=this.elements,h=n.elements,p=1/Kl.setFromMatrixColumn(n,0).length(),w=1/Kl.setFromMatrixColumn(n,1).length(),S=1/Kl.setFromMatrixColumn(n,2).length();return o[0]=h[0]*p,o[1]=h[1]*p,o[2]=h[2]*p,o[3]=0,o[4]=h[4]*w,o[5]=h[5]*w,o[6]=h[6]*w,o[7]=0,o[8]=h[8]*S,o[9]=h[9]*S,o[10]=h[10]*S,o[11]=0,o[12]=0,o[13]=0,o[14]=0,o[15]=1,this}makeRotationFromEuler(n){n&&n.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const o=this.elements,h=n.x,p=n.y,w=n.z,S=Math.cos(h),I=Math.sin(h),k=Math.cos(p),R=Math.sin(p),$=Math.cos(w),j=Math.sin(w);if(n.order==="XYZ"){const H=S*$,Y=S*j,ee=I*$,te=I*j;o[0]=k*$,o[4]=-k*j,o[8]=R,o[1]=Y+ee*R,o[5]=H-te*R,o[9]=-I*k,o[2]=te-H*R,o[6]=ee+Y*R,o[10]=S*k}else if(n.order==="YXZ"){const H=k*$,Y=k*j,ee=R*$,te=R*j;o[0]=H+te*I,o[4]=ee*I-Y,o[8]=S*R,o[1]=S*j,o[5]=S*$,o[9]=-I,o[2]=Y*I-ee,o[6]=te+H*I,o[10]=S*k}else if(n.order==="ZXY"){const H=k*$,Y=k*j,ee=R*$,te=R*j;o[0]=H-te*I,o[4]=-S*j,o[8]=ee+Y*I,o[1]=Y+ee*I,o[5]=S*$,o[9]=te-H*I,o[2]=-S*R,o[6]=I,o[10]=S*k}else if(n.order==="ZYX"){const H=S*$,Y=S*j,ee=I*$,te=I*j;o[0]=k*$,o[4]=ee*R-Y,o[8]=H*R+te,o[1]=k*j,o[5]=te*R+H,o[9]=Y*R-ee,o[2]=-R,o[6]=I*k,o[10]=S*k}else if(n.order==="YZX"){const H=S*k,Y=S*R,ee=I*k,te=I*R;o[0]=k*$,o[4]=te-H*j,o[8]=ee*j+Y,o[1]=j,o[5]=S*$,o[9]=-I*$,o[2]=-R*$,o[6]=Y*j+ee,o[10]=H-te*j}else if(n.order==="XZY"){const H=S*k,Y=S*R,ee=I*k,te=I*R;o[0]=k*$,o[4]=-j,o[8]=R*$,o[1]=H*j+te,o[5]=S*$,o[9]=Y*j-ee,o[2]=ee*j-Y,o[6]=I*$,o[10]=te*j+H}return o[3]=0,o[7]=0,o[11]=0,o[12]=0,o[13]=0,o[14]=0,o[15]=1,this}makeRotationFromQuaternion(n){return this.compose(zd,n,Bd)}lookAt(n,o,h){const p=this.elements;return Hs.subVectors(n,o),Hs.lengthSq()===0&&(Hs.z=1),Hs.normalize(),Xa.crossVectors(h,Hs),Xa.lengthSq()===0&&(Math.abs(h.z)===1?Hs.x+=1e-4:Hs.z+=1e-4,Hs.normalize(),Xa.crossVectors(h,Hs)),Xa.normalize(),th.crossVectors(Hs,Xa),p[0]=Xa.x,p[4]=th.x,p[8]=Hs.x,p[1]=Xa.y,p[5]=th.y,p[9]=Hs.y,p[2]=Xa.z,p[6]=th.z,p[10]=Hs.z,this}multiply(n,o){return o!==void 0?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(n,o)):this.multiplyMatrices(this,n)}premultiply(n){return this.multiplyMatrices(n,this)}multiplyMatrices(n,o){const h=n.elements,p=o.elements,w=this.elements,S=h[0],I=h[4],k=h[8],R=h[12],$=h[1],j=h[5],H=h[9],Y=h[13],ee=h[2],te=h[6],ae=h[10],ne=h[14],me=h[3],_e=h[7],ve=h[11],Ne=h[15],Oe=p[0],tt=p[4],it=p[8],gt=p[12],ut=p[1],ct=p[5],an=p[9],Gt=p[13],Lt=p[2],Yt=p[6],Tn=p[10],In=p[14],Pn=p[3],nr=p[7],er=p[11],ke=p[15];return w[0]=S*Oe+I*ut+k*Lt+R*Pn,w[4]=S*tt+I*ct+k*Yt+R*nr,w[8]=S*it+I*an+k*Tn+R*er,w[12]=S*gt+I*Gt+k*In+R*ke,w[1]=$*Oe+j*ut+H*Lt+Y*Pn,w[5]=$*tt+j*ct+H*Yt+Y*nr,w[9]=$*it+j*an+H*Tn+Y*er,w[13]=$*gt+j*Gt+H*In+Y*ke,w[2]=ee*Oe+te*ut+ae*Lt+ne*Pn,w[6]=ee*tt+te*ct+ae*Yt+ne*nr,w[10]=ee*it+te*an+ae*Tn+ne*er,w[14]=ee*gt+te*Gt+ae*In+ne*ke,w[3]=me*Oe+_e*ut+ve*Lt+Ne*Pn,w[7]=me*tt+_e*ct+ve*Yt+Ne*nr,w[11]=me*it+_e*an+ve*Tn+Ne*er,w[15]=me*gt+_e*Gt+ve*In+Ne*ke,this}multiplyScalar(n){const o=this.elements;return o[0]*=n,o[4]*=n,o[8]*=n,o[12]*=n,o[1]*=n,o[5]*=n,o[9]*=n,o[13]*=n,o[2]*=n,o[6]*=n,o[10]*=n,o[14]*=n,o[3]*=n,o[7]*=n,o[11]*=n,o[15]*=n,this}determinant(){const n=this.elements,o=n[0],h=n[4],p=n[8],w=n[12],S=n[1],I=n[5],k=n[9],R=n[13],$=n[2],j=n[6],H=n[10],Y=n[14];return n[3]*(+w*k*j-p*R*j-w*I*H+h*R*H+p*I*Y-h*k*Y)+n[7]*(+o*k*Y-o*R*H+w*S*H-p*S*Y+p*R*$-w*k*$)+n[11]*(+o*R*j-o*I*Y-w*S*j+h*S*Y+w*I*$-h*R*$)+n[15]*(-p*I*$-o*k*j+o*I*H+p*S*j-h*S*H+h*k*$)}transpose(){const n=this.elements;let o;return o=n[1],n[1]=n[4],n[4]=o,o=n[2],n[2]=n[8],n[8]=o,o=n[6],n[6]=n[9],n[9]=o,o=n[3],n[3]=n[12],n[12]=o,o=n[7],n[7]=n[13],n[13]=o,o=n[11],n[11]=n[14],n[14]=o,this}setPosition(n,o,h){const p=this.elements;return n.isVector3?(p[12]=n.x,p[13]=n.y,p[14]=n.z):(p[12]=n,p[13]=o,p[14]=h),this}invert(){const n=this.elements,o=n[0],h=n[1],p=n[2],w=n[3],S=n[4],I=n[5],k=n[6],R=n[7],$=n[8],j=n[9],H=n[10],Y=n[11],ee=n[12],te=n[13],ae=n[14],ne=n[15],me=j*ae*R-te*H*R+te*k*Y-I*ae*Y-j*k*ne+I*H*ne,_e=ee*H*R-$*ae*R-ee*k*Y+S*ae*Y+$*k*ne-S*H*ne,ve=$*te*R-ee*j*R+ee*I*Y-S*te*Y-$*I*ne+S*j*ne,Ne=ee*j*k-$*te*k-ee*I*H+S*te*H+$*I*ae-S*j*ae,Oe=o*me+h*_e+p*ve+w*Ne;if(Oe===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const tt=1/Oe;return n[0]=me*tt,n[1]=(te*H*w-j*ae*w-te*p*Y+h*ae*Y+j*p*ne-h*H*ne)*tt,n[2]=(I*ae*w-te*k*w+te*p*R-h*ae*R-I*p*ne+h*k*ne)*tt,n[3]=(j*k*w-I*H*w-j*p*R+h*H*R+I*p*Y-h*k*Y)*tt,n[4]=_e*tt,n[5]=($*ae*w-ee*H*w+ee*p*Y-o*ae*Y-$*p*ne+o*H*ne)*tt,n[6]=(ee*k*w-S*ae*w-ee*p*R+o*ae*R+S*p*ne-o*k*ne)*tt,n[7]=(S*H*w-$*k*w+$*p*R-o*H*R-S*p*Y+o*k*Y)*tt,n[8]=ve*tt,n[9]=(ee*j*w-$*te*w-ee*h*Y+o*te*Y+$*h*ne-o*j*ne)*tt,n[10]=(S*te*w-ee*I*w+ee*h*R-o*te*R-S*h*ne+o*I*ne)*tt,n[11]=($*I*w-S*j*w-$*h*R+o*j*R+S*h*Y-o*I*Y)*tt,n[12]=Ne*tt,n[13]=($*te*p-ee*j*p+ee*h*H-o*te*H-$*h*ae+o*j*ae)*tt,n[14]=(ee*I*p-S*te*p-ee*h*k+o*te*k+S*h*ae-o*I*ae)*tt,n[15]=(S*j*p-$*I*p+$*h*k-o*j*k-S*h*H+o*I*H)*tt,this}scale(n){const o=this.elements,h=n.x,p=n.y,w=n.z;return o[0]*=h,o[4]*=p,o[8]*=w,o[1]*=h,o[5]*=p,o[9]*=w,o[2]*=h,o[6]*=p,o[10]*=w,o[3]*=h,o[7]*=p,o[11]*=w,this}getMaxScaleOnAxis(){const n=this.elements,o=n[0]*n[0]+n[1]*n[1]+n[2]*n[2],h=n[4]*n[4]+n[5]*n[5]+n[6]*n[6],p=n[8]*n[8]+n[9]*n[9]+n[10]*n[10];return Math.sqrt(Math.max(o,h,p))}makeTranslation(n,o,h){return this.set(1,0,0,n,0,1,0,o,0,0,1,h,0,0,0,1),this}makeRotationX(n){const o=Math.cos(n),h=Math.sin(n);return this.set(1,0,0,0,0,o,-h,0,0,h,o,0,0,0,0,1),this}makeRotationY(n){const o=Math.cos(n),h=Math.sin(n);return this.set(o,0,h,0,0,1,0,0,-h,0,o,0,0,0,0,1),this}makeRotationZ(n){const o=Math.cos(n),h=Math.sin(n);return this.set(o,-h,0,0,h,o,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(n,o){const h=Math.cos(o),p=Math.sin(o),w=1-h,S=n.x,I=n.y,k=n.z,R=w*S,$=w*I;return this.set(R*S+h,R*I-p*k,R*k+p*I,0,R*I+p*k,$*I+h,$*k-p*S,0,R*k-p*I,$*k+p*S,w*k*k+h,0,0,0,0,1),this}makeScale(n,o,h){return this.set(n,0,0,0,0,o,0,0,0,0,h,0,0,0,0,1),this}makeShear(n,o,h,p,w,S){return this.set(1,h,w,0,n,1,S,0,o,p,1,0,0,0,0,1),this}compose(n,o,h){const p=this.elements,w=o._x,S=o._y,I=o._z,k=o._w,R=w+w,$=S+S,j=I+I,H=w*R,Y=w*$,ee=w*j,te=S*$,ae=S*j,ne=I*j,me=k*R,_e=k*$,ve=k*j,Ne=h.x,Oe=h.y,tt=h.z;return p[0]=(1-(te+ne))*Ne,p[1]=(Y+ve)*Ne,p[2]=(ee-_e)*Ne,p[3]=0,p[4]=(Y-ve)*Oe,p[5]=(1-(H+ne))*Oe,p[6]=(ae+me)*Oe,p[7]=0,p[8]=(ee+_e)*tt,p[9]=(ae-me)*tt,p[10]=(1-(H+te))*tt,p[11]=0,p[12]=n.x,p[13]=n.y,p[14]=n.z,p[15]=1,this}decompose(n,o,h){const p=this.elements;let w=Kl.set(p[0],p[1],p[2]).length();const S=Kl.set(p[4],p[5],p[6]).length(),I=Kl.set(p[8],p[9],p[10]).length();this.determinant()<0&&(w=-w),n.x=p[12],n.y=p[13],n.z=p[14],Gs.copy(this);const k=1/w,R=1/S,$=1/I;return Gs.elements[0]*=k,Gs.elements[1]*=k,Gs.elements[2]*=k,Gs.elements[4]*=R,Gs.elements[5]*=R,Gs.elements[6]*=R,Gs.elements[8]*=$,Gs.elements[9]*=$,Gs.elements[10]*=$,o.setFromRotationMatrix(Gs),h.x=w,h.y=S,h.z=I,this}makePerspective(n,o,h,p,w,S){S===void 0&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const I=this.elements,k=2*w/(o-n),R=2*w/(h-p),$=(o+n)/(o-n),j=(h+p)/(h-p),H=-(S+w)/(S-w),Y=-2*S*w/(S-w);return I[0]=k,I[4]=0,I[8]=$,I[12]=0,I[1]=0,I[5]=R,I[9]=j,I[13]=0,I[2]=0,I[6]=0,I[10]=H,I[14]=Y,I[3]=0,I[7]=0,I[11]=-1,I[15]=0,this}makeOrthographic(n,o,h,p,w,S){const I=this.elements,k=1/(o-n),R=1/(h-p),$=1/(S-w),j=(o+n)*k,H=(h+p)*R,Y=(S+w)*$;return I[0]=2*k,I[4]=0,I[8]=0,I[12]=-j,I[1]=0,I[5]=2*R,I[9]=0,I[13]=-H,I[2]=0,I[6]=0,I[10]=-2*$,I[14]=-Y,I[3]=0,I[7]=0,I[11]=0,I[15]=1,this}equals(n){const o=this.elements,h=n.elements;for(let p=0;p<16;p++)if(o[p]!==h[p])return!1;return!0}fromArray(n,o=0){for(let h=0;h<16;h++)this.elements[h]=n[h+o];return this}toArray(n=[],o=0){const h=this.elements;return n[o]=h[0],n[o+1]=h[1],n[o+2]=h[2],n[o+3]=h[3],n[o+4]=h[4],n[o+5]=h[5],n[o+6]=h[6],n[o+7]=h[7],n[o+8]=h[8],n[o+9]=h[9],n[o+10]=h[10],n[o+11]=h[11],n[o+12]=h[12],n[o+13]=h[13],n[o+14]=h[14],n[o+15]=h[15],n}}Gn.prototype.isMatrix4=!0;const Kl=new Te,Gs=new Gn,zd=new Te(0,0,0),Bd=new Te(1,1,1),Xa=new Te,th=new Te,Hs=new Te,$d=new Gn,Cf=new Zi;class Wo{constructor(n=0,o=0,h=0,p=Wo.DefaultOrder){this._x=n,this._y=o,this._z=h,this._order=p}get x(){return this._x}set x(n){this._x=n,this._onChangeCallback()}get y(){return this._y}set y(n){this._y=n,this._onChangeCallback()}get z(){return this._z}set z(n){this._z=n,this._onChangeCallback()}get order(){return this._order}set order(n){this._order=n,this._onChangeCallback()}set(n,o,h,p=this._order){return this._x=n,this._y=o,this._z=h,this._order=p,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(n){return this._x=n._x,this._y=n._y,this._z=n._z,this._order=n._order,this._onChangeCallback(),this}setFromRotationMatrix(n,o=this._order,h=!0){const p=n.elements,w=p[0],S=p[4],I=p[8],k=p[1],R=p[5],$=p[9],j=p[2],H=p[6],Y=p[10];switch(o){case"XYZ":this._y=Math.asin(Vi(I,-1,1)),Math.abs(I)<.9999999?(this._x=Math.atan2(-$,Y),this._z=Math.atan2(-S,w)):(this._x=Math.atan2(H,R),this._z=0);break;case"YXZ":this._x=Math.asin(-Vi($,-1,1)),Math.abs($)<.9999999?(this._y=Math.atan2(I,Y),this._z=Math.atan2(k,R)):(this._y=Math.atan2(-j,w),this._z=0);break;case"ZXY":this._x=Math.asin(Vi(H,-1,1)),Math.abs(H)<.9999999?(this._y=Math.atan2(-j,Y),this._z=Math.atan2(-S,R)):(this._y=0,this._z=Math.atan2(k,w));break;case"ZYX":this._y=Math.asin(-Vi(j,-1,1)),Math.abs(j)<.9999999?(this._x=Math.atan2(H,Y),this._z=Math.atan2(k,w)):(this._x=0,this._z=Math.atan2(-S,R));break;case"YZX":this._z=Math.asin(Vi(k,-1,1)),Math.abs(k)<.9999999?(this._x=Math.atan2(-$,R),this._y=Math.atan2(-j,w)):(this._x=0,this._y=Math.atan2(I,Y));break;case"XZY":this._z=Math.asin(-Vi(S,-1,1)),Math.abs(S)<.9999999?(this._x=Math.atan2(H,R),this._y=Math.atan2(I,w)):(this._x=Math.atan2(-$,Y),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+o)}return this._order=o,h===!0&&this._onChangeCallback(),this}setFromQuaternion(n,o,h){return $d.makeRotationFromQuaternion(n),this.setFromRotationMatrix($d,o,h)}setFromVector3(n,o=this._order){return this.set(n.x,n.y,n.z,o)}reorder(n){return Cf.setFromEuler(this),this.setFromQuaternion(Cf,n)}equals(n){return n._x===this._x&&n._y===this._y&&n._z===this._z&&n._order===this._order}fromArray(n){return this._x=n[0],this._y=n[1],this._z=n[2],n[3]!==void 0&&(this._order=n[3]),this._onChangeCallback(),this}toArray(n=[],o=0){return n[o]=this._x,n[o+1]=this._y,n[o+2]=this._z,n[o+3]=this._order,n}toVector3(n){return n?n.set(this._x,this._y,this._z):new Te(this._x,this._y,this._z)}_onChange(n){return this._onChangeCallback=n,this}_onChangeCallback(){}}Wo.prototype.isEuler=!0,Wo.DefaultOrder="XYZ",Wo.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class nh{constructor(){this.mask=1}set(n){this.mask=1<<n|0}enable(n){this.mask|=1<<n|0}enableAll(){this.mask=-1}toggle(n){this.mask^=1<<n|0}disable(n){this.mask&=~(1<<n|0)}disableAll(){this.mask=0}test(n){return(this.mask&n.mask)!=0}}let kf=0;const rh=new Te,Zl=new Zi,go=new Gn,Wu=new Te,Jl=new Te,Nf=new Te,Ud=new Zi,Vd=new Te(1,0,0),Rf=new Te(0,1,0),Qm=new Te(0,0,1),eg={type:"added"},Lf={type:"removed"};class Cr extends co{constructor(){super(),Object.defineProperty(this,"id",{value:kf++}),this.uuid=Vs(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Cr.DefaultUp.clone();const n=new Te,o=new Wo,h=new Zi,p=new Te(1,1,1);o._onChange(function(){h.setFromEuler(o,!1)}),h._onChange(function(){o.setFromQuaternion(h,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:n},rotation:{configurable:!0,enumerable:!0,value:o},quaternion:{configurable:!0,enumerable:!0,value:h},scale:{configurable:!0,enumerable:!0,value:p},modelViewMatrix:{value:new Gn},normalMatrix:{value:new Ni}}),this.matrix=new Gn,this.matrixWorld=new Gn,this.matrixAutoUpdate=Cr.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new nh,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(n){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(n),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(n){return this.quaternion.premultiply(n),this}setRotationFromAxisAngle(n,o){this.quaternion.setFromAxisAngle(n,o)}setRotationFromEuler(n){this.quaternion.setFromEuler(n,!0)}setRotationFromMatrix(n){this.quaternion.setFromRotationMatrix(n)}setRotationFromQuaternion(n){this.quaternion.copy(n)}rotateOnAxis(n,o){return Zl.setFromAxisAngle(n,o),this.quaternion.multiply(Zl),this}rotateOnWorldAxis(n,o){return Zl.setFromAxisAngle(n,o),this.quaternion.premultiply(Zl),this}rotateX(n){return this.rotateOnAxis(Vd,n)}rotateY(n){return this.rotateOnAxis(Rf,n)}rotateZ(n){return this.rotateOnAxis(Qm,n)}translateOnAxis(n,o){return rh.copy(n).applyQuaternion(this.quaternion),this.position.add(rh.multiplyScalar(o)),this}translateX(n){return this.translateOnAxis(Vd,n)}translateY(n){return this.translateOnAxis(Rf,n)}translateZ(n){return this.translateOnAxis(Qm,n)}localToWorld(n){return n.applyMatrix4(this.matrixWorld)}worldToLocal(n){return n.applyMatrix4(go.copy(this.matrixWorld).invert())}lookAt(n,o,h){n.isVector3?Wu.copy(n):Wu.set(n,o,h);const p=this.parent;this.updateWorldMatrix(!0,!1),Jl.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?go.lookAt(Jl,Wu,this.up):go.lookAt(Wu,Jl,this.up),this.quaternion.setFromRotationMatrix(go),p&&(go.extractRotation(p.matrixWorld),Zl.setFromRotationMatrix(go),this.quaternion.premultiply(Zl.invert()))}add(n){if(arguments.length>1){for(let o=0;o<arguments.length;o++)this.add(arguments[o]);return this}return n===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",n),this):(n&&n.isObject3D?(n.parent!==null&&n.parent.remove(n),n.parent=this,this.children.push(n),n.dispatchEvent(eg)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",n),this)}remove(n){if(arguments.length>1){for(let h=0;h<arguments.length;h++)this.remove(arguments[h]);return this}const o=this.children.indexOf(n);return o!==-1&&(n.parent=null,this.children.splice(o,1),n.dispatchEvent(Lf)),this}removeFromParent(){const n=this.parent;return n!==null&&n.remove(this),this}clear(){for(let n=0;n<this.children.length;n++){const o=this.children[n];o.parent=null,o.dispatchEvent(Lf)}return this.children.length=0,this}attach(n){return this.updateWorldMatrix(!0,!1),go.copy(this.matrixWorld).invert(),n.parent!==null&&(n.parent.updateWorldMatrix(!0,!1),go.multiply(n.parent.matrixWorld)),n.applyMatrix4(go),this.add(n),n.updateWorldMatrix(!1,!0),this}getObjectById(n){return this.getObjectByProperty("id",n)}getObjectByName(n){return this.getObjectByProperty("name",n)}getObjectByProperty(n,o){if(this[n]===o)return this;for(let h=0,p=this.children.length;h<p;h++){const w=this.children[h].getObjectByProperty(n,o);if(w!==void 0)return w}}getWorldPosition(n){return this.updateWorldMatrix(!0,!1),n.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(n){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Jl,n,Nf),n}getWorldScale(n){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Jl,Ud,n),n}getWorldDirection(n){this.updateWorldMatrix(!0,!1);const o=this.matrixWorld.elements;return n.set(o[8],o[9],o[10]).normalize()}raycast(){}traverse(n){n(this);const o=this.children;for(let h=0,p=o.length;h<p;h++)o[h].traverse(n)}traverseVisible(n){if(this.visible===!1)return;n(this);const o=this.children;for(let h=0,p=o.length;h<p;h++)o[h].traverseVisible(n)}traverseAncestors(n){const o=this.parent;o!==null&&(n(o),o.traverseAncestors(n))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(n){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||n)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,n=!0);const o=this.children;for(let h=0,p=o.length;h<p;h++)o[h].updateMatrixWorld(n)}updateWorldMatrix(n,o){const h=this.parent;if(n===!0&&h!==null&&h.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),o===!0){const p=this.children;for(let w=0,S=p.length;w<S;w++)p[w].updateWorldMatrix(!1,!0)}}toJSON(n){const o=n===void 0||typeof n=="string",h={};o&&(n={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},h.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const p={};function w(I,k){return I[k.uuid]===void 0&&(I[k.uuid]=k.toJSON(n)),k.uuid}if(p.uuid=this.uuid,p.type=this.type,this.name!==""&&(p.name=this.name),this.castShadow===!0&&(p.castShadow=!0),this.receiveShadow===!0&&(p.receiveShadow=!0),this.visible===!1&&(p.visible=!1),this.frustumCulled===!1&&(p.frustumCulled=!1),this.renderOrder!==0&&(p.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(p.userData=this.userData),p.layers=this.layers.mask,p.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(p.matrixAutoUpdate=!1),this.isInstancedMesh&&(p.type="InstancedMesh",p.count=this.count,p.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(p.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?p.background=this.background.toJSON():this.background.isTexture&&(p.background=this.background.toJSON(n).uuid)),this.environment&&this.environment.isTexture&&(p.environment=this.environment.toJSON(n).uuid);else if(this.isMesh||this.isLine||this.isPoints){p.geometry=w(n.geometries,this.geometry);const I=this.geometry.parameters;if(I!==void 0&&I.shapes!==void 0){const k=I.shapes;if(Array.isArray(k))for(let R=0,$=k.length;R<$;R++){const j=k[R];w(n.shapes,j)}else w(n.shapes,k)}}if(this.isSkinnedMesh&&(p.bindMode=this.bindMode,p.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(w(n.skeletons,this.skeleton),p.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const I=[];for(let k=0,R=this.material.length;k<R;k++)I.push(w(n.materials,this.material[k]));p.material=I}else p.material=w(n.materials,this.material);if(this.children.length>0){p.children=[];for(let I=0;I<this.children.length;I++)p.children.push(this.children[I].toJSON(n).object)}if(this.animations.length>0){p.animations=[];for(let I=0;I<this.animations.length;I++){const k=this.animations[I];p.animations.push(w(n.animations,k))}}if(o){const I=S(n.geometries),k=S(n.materials),R=S(n.textures),$=S(n.images),j=S(n.shapes),H=S(n.skeletons),Y=S(n.animations);I.length>0&&(h.geometries=I),k.length>0&&(h.materials=k),R.length>0&&(h.textures=R),$.length>0&&(h.images=$),j.length>0&&(h.shapes=j),H.length>0&&(h.skeletons=H),Y.length>0&&(h.animations=Y)}return h.object=p,h;function S(I){const k=[];for(const R in I){const $=I[R];delete $.metadata,k.push($)}return k}}clone(n){return new this.constructor().copy(this,n)}copy(n,o=!0){if(this.name=n.name,this.up.copy(n.up),this.position.copy(n.position),this.rotation.order=n.rotation.order,this.quaternion.copy(n.quaternion),this.scale.copy(n.scale),this.matrix.copy(n.matrix),this.matrixWorld.copy(n.matrixWorld),this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrixWorldNeedsUpdate=n.matrixWorldNeedsUpdate,this.layers.mask=n.layers.mask,this.visible=n.visible,this.castShadow=n.castShadow,this.receiveShadow=n.receiveShadow,this.frustumCulled=n.frustumCulled,this.renderOrder=n.renderOrder,this.userData=JSON.parse(JSON.stringify(n.userData)),o===!0)for(let h=0;h<n.children.length;h++){const p=n.children[h];this.add(p.clone())}return this}}Cr.DefaultUp=new Te(0,1,0),Cr.DefaultMatrixAutoUpdate=!0,Cr.prototype.isObject3D=!0;const Go=new Te,Ql=new Te,b0=new Te,Ho=new Te,ih=new Te,yo=new Te,Wd=new Te,tg=new Te,eu=new Te,Ss=new Te;class Li{constructor(n=new Te,o=new Te,h=new Te){this.a=n,this.b=o,this.c=h}static getNormal(n,o,h,p){p.subVectors(h,o),Go.subVectors(n,o),p.cross(Go);const w=p.lengthSq();return w>0?p.multiplyScalar(1/Math.sqrt(w)):p.set(0,0,0)}static getBarycoord(n,o,h,p,w){Go.subVectors(p,o),Ql.subVectors(h,o),b0.subVectors(n,o);const S=Go.dot(Go),I=Go.dot(Ql),k=Go.dot(b0),R=Ql.dot(Ql),$=Ql.dot(b0),j=S*R-I*I;if(j===0)return w.set(-2,-1,-1);const H=1/j,Y=(R*k-I*$)*H,ee=(S*$-I*k)*H;return w.set(1-Y-ee,ee,Y)}static containsPoint(n,o,h,p){return this.getBarycoord(n,o,h,p,Ho),Ho.x>=0&&Ho.y>=0&&Ho.x+Ho.y<=1}static getUV(n,o,h,p,w,S,I,k){return this.getBarycoord(n,o,h,p,Ho),k.set(0,0),k.addScaledVector(w,Ho.x),k.addScaledVector(S,Ho.y),k.addScaledVector(I,Ho.z),k}static isFrontFacing(n,o,h,p){return Go.subVectors(h,o),Ql.subVectors(n,o),Go.cross(Ql).dot(p)<0}set(n,o,h){return this.a.copy(n),this.b.copy(o),this.c.copy(h),this}setFromPointsAndIndices(n,o,h,p){return this.a.copy(n[o]),this.b.copy(n[h]),this.c.copy(n[p]),this}clone(){return new this.constructor().copy(this)}copy(n){return this.a.copy(n.a),this.b.copy(n.b),this.c.copy(n.c),this}getArea(){return Go.subVectors(this.c,this.b),Ql.subVectors(this.a,this.b),.5*Go.cross(Ql).length()}getMidpoint(n){return n.addVectors(this.a,this.b).add(this.c).multiplyScalar(.3333333333333333)}getNormal(n){return Li.getNormal(this.a,this.b,this.c,n)}getPlane(n){return n.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(n,o){return Li.getBarycoord(n,this.a,this.b,this.c,o)}getUV(n,o,h,p,w){return Li.getUV(n,this.a,this.b,this.c,o,h,p,w)}containsPoint(n){return Li.containsPoint(n,this.a,this.b,this.c)}isFrontFacing(n){return Li.isFrontFacing(this.a,this.b,this.c,n)}intersectsBox(n){return n.intersectsTriangle(this)}closestPointToPoint(n,o){const h=this.a,p=this.b,w=this.c;let S,I;ih.subVectors(p,h),yo.subVectors(w,h),tg.subVectors(n,h);const k=ih.dot(tg),R=yo.dot(tg);if(k<=0&&R<=0)return o.copy(h);eu.subVectors(n,p);const $=ih.dot(eu),j=yo.dot(eu);if($>=0&&j<=$)return o.copy(p);const H=k*j-$*R;if(H<=0&&k>=0&&$<=0)return S=k/(k-$),o.copy(h).addScaledVector(ih,S);Ss.subVectors(n,w);const Y=ih.dot(Ss),ee=yo.dot(Ss);if(ee>=0&&Y<=ee)return o.copy(w);const te=Y*R-k*ee;if(te<=0&&R>=0&&ee<=0)return I=R/(R-ee),o.copy(h).addScaledVector(yo,I);const ae=$*ee-Y*j;if(ae<=0&&j-$>=0&&Y-ee>=0)return Wd.subVectors(w,p),I=(j-$)/(j-$+(Y-ee)),o.copy(p).addScaledVector(Wd,I);const ne=1/(ae+te+H);return S=te*ne,I=H*ne,o.copy(h).addScaledVector(ih,S).addScaledVector(yo,I)}equals(n){return n.a.equals(this.a)&&n.b.equals(this.b)&&n.c.equals(this.c)}}let Lv=0;class fr extends co{constructor(){super(),Object.defineProperty(this,"id",{value:Lv++}),this.uuid=Vs(),this.name="",this.type="Material",this.fog=!0,this.blending=ce,this.side=V,this.vertexColors=!1,this.opacity=1,this.format=Xn,this.transparent=!1,this.blendSrc=Vt,this.blendDst=En,this.blendEquation=ue,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=$n,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Ed,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Wl,this.stencilZFail=Wl,this.stencilZPass=Wl,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(n){this._alphaTest>0!=n>0&&this.version++,this._alphaTest=n}onBuild(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(n){if(n!==void 0)for(const o in n){const h=n[o];if(h===void 0){console.warn("THREE.Material: '"+o+"' parameter is undefined.");continue}if(o==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=h===fe;continue}const p=this[o];p!==void 0?p&&p.isColor?p.set(h):p&&p.isVector3&&h&&h.isVector3?p.copy(h):this[o]=h:console.warn("THREE."+this.type+": '"+o+"' is not a property of this material.")}}toJSON(n){const o=n===void 0||typeof n=="string";o&&(n={textures:{},images:{}});const h={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function p(w){const S=[];for(const I in w){const k=w[I];delete k.metadata,S.push(k)}return S}if(h.uuid=this.uuid,h.type=this.type,this.name!==""&&(h.name=this.name),this.color&&this.color.isColor&&(h.color=this.color.getHex()),this.roughness!==void 0&&(h.roughness=this.roughness),this.metalness!==void 0&&(h.metalness=this.metalness),this.sheenTint&&this.sheenTint.isColor&&(h.sheenTint=this.sheenTint.getHex()),this.emissive&&this.emissive.isColor&&(h.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(h.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(h.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(h.specularIntensity=this.specularIntensity),this.specularTint&&this.specularTint.isColor&&(h.specularTint=this.specularTint.getHex()),this.shininess!==void 0&&(h.shininess=this.shininess),this.clearcoat!==void 0&&(h.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(h.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(h.clearcoatMap=this.clearcoatMap.toJSON(n).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(h.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(n).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(h.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(n).uuid,h.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(h.map=this.map.toJSON(n).uuid),this.matcap&&this.matcap.isTexture&&(h.matcap=this.matcap.toJSON(n).uuid),this.alphaMap&&this.alphaMap.isTexture&&(h.alphaMap=this.alphaMap.toJSON(n).uuid),this.lightMap&&this.lightMap.isTexture&&(h.lightMap=this.lightMap.toJSON(n).uuid,h.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(h.aoMap=this.aoMap.toJSON(n).uuid,h.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(h.bumpMap=this.bumpMap.toJSON(n).uuid,h.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(h.normalMap=this.normalMap.toJSON(n).uuid,h.normalMapType=this.normalMapType,h.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(h.displacementMap=this.displacementMap.toJSON(n).uuid,h.displacementScale=this.displacementScale,h.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(h.roughnessMap=this.roughnessMap.toJSON(n).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(h.metalnessMap=this.metalnessMap.toJSON(n).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(h.emissiveMap=this.emissiveMap.toJSON(n).uuid),this.specularMap&&this.specularMap.isTexture&&(h.specularMap=this.specularMap.toJSON(n).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(h.specularIntensityMap=this.specularIntensityMap.toJSON(n).uuid),this.specularTintMap&&this.specularTintMap.isTexture&&(h.specularTintMap=this.specularTintMap.toJSON(n).uuid),this.envMap&&this.envMap.isTexture&&(h.envMap=this.envMap.toJSON(n).uuid,this.combine!==void 0&&(h.combine=this.combine)),this.envMapIntensity!==void 0&&(h.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(h.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(h.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(h.gradientMap=this.gradientMap.toJSON(n).uuid),this.transmission!==void 0&&(h.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(h.transmissionMap=this.transmissionMap.toJSON(n).uuid),this.thickness!==void 0&&(h.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(h.thicknessMap=this.thicknessMap.toJSON(n).uuid),this.attenuationDistance!==void 0&&(h.attenuationDistance=this.attenuationDistance),this.attenuationTint!==void 0&&(h.attenuationTint=this.attenuationTint.getHex()),this.size!==void 0&&(h.size=this.size),this.shadowSide!==null&&(h.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(h.sizeAttenuation=this.sizeAttenuation),this.blending!==ce&&(h.blending=this.blending),this.side!==V&&(h.side=this.side),this.vertexColors&&(h.vertexColors=!0),this.opacity<1&&(h.opacity=this.opacity),this.format!==Xn&&(h.format=this.format),this.transparent===!0&&(h.transparent=this.transparent),h.depthFunc=this.depthFunc,h.depthTest=this.depthTest,h.depthWrite=this.depthWrite,h.colorWrite=this.colorWrite,h.stencilWrite=this.stencilWrite,h.stencilWriteMask=this.stencilWriteMask,h.stencilFunc=this.stencilFunc,h.stencilRef=this.stencilRef,h.stencilFuncMask=this.stencilFuncMask,h.stencilFail=this.stencilFail,h.stencilZFail=this.stencilZFail,h.stencilZPass=this.stencilZPass,this.rotation&&this.rotation!==0&&(h.rotation=this.rotation),this.polygonOffset===!0&&(h.polygonOffset=!0),this.polygonOffsetFactor!==0&&(h.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(h.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&this.linewidth!==1&&(h.linewidth=this.linewidth),this.dashSize!==void 0&&(h.dashSize=this.dashSize),this.gapSize!==void 0&&(h.gapSize=this.gapSize),this.scale!==void 0&&(h.scale=this.scale),this.dithering===!0&&(h.dithering=!0),this.alphaTest>0&&(h.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(h.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(h.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(h.wireframe=this.wireframe),this.wireframeLinewidth>1&&(h.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(h.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(h.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(h.flatShading=this.flatShading),this.visible===!1&&(h.visible=!1),this.toneMapped===!1&&(h.toneMapped=!1),JSON.stringify(this.userData)!=="{}"&&(h.userData=this.userData),o){const w=p(n.textures),S=p(n.images);w.length>0&&(h.textures=w),S.length>0&&(h.images=S)}return h}clone(){return new this.constructor().copy(this)}copy(n){this.name=n.name,this.fog=n.fog,this.blending=n.blending,this.side=n.side,this.vertexColors=n.vertexColors,this.opacity=n.opacity,this.format=n.format,this.transparent=n.transparent,this.blendSrc=n.blendSrc,this.blendDst=n.blendDst,this.blendEquation=n.blendEquation,this.blendSrcAlpha=n.blendSrcAlpha,this.blendDstAlpha=n.blendDstAlpha,this.blendEquationAlpha=n.blendEquationAlpha,this.depthFunc=n.depthFunc,this.depthTest=n.depthTest,this.depthWrite=n.depthWrite,this.stencilWriteMask=n.stencilWriteMask,this.stencilFunc=n.stencilFunc,this.stencilRef=n.stencilRef,this.stencilFuncMask=n.stencilFuncMask,this.stencilFail=n.stencilFail,this.stencilZFail=n.stencilZFail,this.stencilZPass=n.stencilZPass,this.stencilWrite=n.stencilWrite;const o=n.clippingPlanes;let h=null;if(o!==null){const p=o.length;h=new Array(p);for(let w=0;w!==p;++w)h[w]=o[w].clone()}return this.clippingPlanes=h,this.clipIntersection=n.clipIntersection,this.clipShadows=n.clipShadows,this.shadowSide=n.shadowSide,this.colorWrite=n.colorWrite,this.precision=n.precision,this.polygonOffset=n.polygonOffset,this.polygonOffsetFactor=n.polygonOffsetFactor,this.polygonOffsetUnits=n.polygonOffsetUnits,this.dithering=n.dithering,this.alphaTest=n.alphaTest,this.alphaToCoverage=n.alphaToCoverage,this.premultipliedAlpha=n.premultipliedAlpha,this.visible=n.visible,this.toneMapped=n.toneMapped,this.userData=JSON.parse(JSON.stringify(n.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(n){n===!0&&this.version++}}fr.prototype.isMaterial=!0;const w0={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Jr={h:0,s:0,l:0},jo={h:0,s:0,l:0};function Gd(T,n,o){return o<0&&(o+=1),o>1&&(o-=1),o<.16666666666666666?T+6*(n-T)*o:o<.5?n:o<.6666666666666666?T+6*(n-T)*(.6666666666666666-o):T}function ng(T){return T<.04045?.0773993808*T:Math.pow(.9478672986*T+.0521327014,2.4)}function qo(T){return T<.0031308?12.92*T:1.055*Math.pow(T,.41666)-.055}class yn{constructor(n,o,h){return o===void 0&&h===void 0?this.set(n):this.setRGB(n,o,h)}set(n){return n&&n.isColor?this.copy(n):typeof n=="number"?this.setHex(n):typeof n=="string"&&this.setStyle(n),this}setScalar(n){return this.r=n,this.g=n,this.b=n,this}setHex(n){return n=Math.floor(n),this.r=(n>>16&255)/255,this.g=(n>>8&255)/255,this.b=(255&n)/255,this}setRGB(n,o,h){return this.r=n,this.g=o,this.b=h,this}setHSL(n,o,h){if(n=Xc(n,1),o=Vi(o,0,1),h=Vi(h,0,1),o===0)this.r=this.g=this.b=h;else{const p=h<=.5?h*(1+o):h+o-h*o,w=2*h-p;this.r=Gd(w,p,n+.3333333333333333),this.g=Gd(w,p,n),this.b=Gd(w,p,n-.3333333333333333)}return this}setStyle(n){function o(p){p!==void 0&&parseFloat(p)<1&&console.warn("THREE.Color: Alpha component of "+n+" will be ignored.")}let h;if(h=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(n)){let p;const w=h[1],S=h[2];switch(w){case"rgb":case"rgba":if(p=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(S))return this.r=Math.min(255,parseInt(p[1],10))/255,this.g=Math.min(255,parseInt(p[2],10))/255,this.b=Math.min(255,parseInt(p[3],10))/255,o(p[4]),this;if(p=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(S))return this.r=Math.min(100,parseInt(p[1],10))/100,this.g=Math.min(100,parseInt(p[2],10))/100,this.b=Math.min(100,parseInt(p[3],10))/100,o(p[4]),this;break;case"hsl":case"hsla":if(p=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(S)){const I=parseFloat(p[1])/360,k=parseInt(p[2],10)/100,R=parseInt(p[3],10)/100;return o(p[4]),this.setHSL(I,k,R)}}}else if(h=/^\#([A-Fa-f\d]+)$/.exec(n)){const p=h[1],w=p.length;if(w===3)return this.r=parseInt(p.charAt(0)+p.charAt(0),16)/255,this.g=parseInt(p.charAt(1)+p.charAt(1),16)/255,this.b=parseInt(p.charAt(2)+p.charAt(2),16)/255,this;if(w===6)return this.r=parseInt(p.charAt(0)+p.charAt(1),16)/255,this.g=parseInt(p.charAt(2)+p.charAt(3),16)/255,this.b=parseInt(p.charAt(4)+p.charAt(5),16)/255,this}return n&&n.length>0?this.setColorName(n):this}setColorName(n){const o=w0[n.toLowerCase()];return o!==void 0?this.setHex(o):console.warn("THREE.Color: Unknown color "+n),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(n){return this.r=n.r,this.g=n.g,this.b=n.b,this}copyGammaToLinear(n,o=2){return this.r=Math.pow(n.r,o),this.g=Math.pow(n.g,o),this.b=Math.pow(n.b,o),this}copyLinearToGamma(n,o=2){const h=o>0?1/o:1;return this.r=Math.pow(n.r,h),this.g=Math.pow(n.g,h),this.b=Math.pow(n.b,h),this}convertGammaToLinear(n){return this.copyGammaToLinear(this,n),this}convertLinearToGamma(n){return this.copyLinearToGamma(this,n),this}copySRGBToLinear(n){return this.r=ng(n.r),this.g=ng(n.g),this.b=ng(n.b),this}copyLinearToSRGB(n){return this.r=qo(n.r),this.g=qo(n.g),this.b=qo(n.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(n){const o=this.r,h=this.g,p=this.b,w=Math.max(o,h,p),S=Math.min(o,h,p);let I,k;const R=(S+w)/2;if(S===w)I=0,k=0;else{const $=w-S;switch(k=R<=.5?$/(w+S):$/(2-w-S),w){case o:I=(h-p)/$+(h<p?6:0);break;case h:I=(p-o)/$+2;break;case p:I=(o-h)/$+4}I/=6}return n.h=I,n.s=k,n.l=R,n}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(n,o,h){return this.getHSL(Jr),Jr.h+=n,Jr.s+=o,Jr.l+=h,this.setHSL(Jr.h,Jr.s,Jr.l),this}add(n){return this.r+=n.r,this.g+=n.g,this.b+=n.b,this}addColors(n,o){return this.r=n.r+o.r,this.g=n.g+o.g,this.b=n.b+o.b,this}addScalar(n){return this.r+=n,this.g+=n,this.b+=n,this}sub(n){return this.r=Math.max(0,this.r-n.r),this.g=Math.max(0,this.g-n.g),this.b=Math.max(0,this.b-n.b),this}multiply(n){return this.r*=n.r,this.g*=n.g,this.b*=n.b,this}multiplyScalar(n){return this.r*=n,this.g*=n,this.b*=n,this}lerp(n,o){return this.r+=(n.r-this.r)*o,this.g+=(n.g-this.g)*o,this.b+=(n.b-this.b)*o,this}lerpColors(n,o,h){return this.r=n.r+(o.r-n.r)*h,this.g=n.g+(o.g-n.g)*h,this.b=n.b+(o.b-n.b)*h,this}lerpHSL(n,o){this.getHSL(Jr),n.getHSL(jo);const h=Hl(Jr.h,jo.h,o),p=Hl(Jr.s,jo.s,o),w=Hl(Jr.l,jo.l,o);return this.setHSL(h,p,w),this}equals(n){return n.r===this.r&&n.g===this.g&&n.b===this.b}fromArray(n,o=0){return this.r=n[o],this.g=n[o+1],this.b=n[o+2],this}toArray(n=[],o=0){return n[o]=this.r,n[o+1]=this.g,n[o+2]=this.b,n}fromBufferAttribute(n,o){return this.r=n.getX(o),this.g=n.getY(o),this.b=n.getZ(o),n.normalized===!0&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}yn.NAMES=w0,yn.prototype.isColor=!0,yn.prototype.r=1,yn.prototype.g=1,yn.prototype.b=1;class di extends fr{constructor(n){super(),this.type="MeshBasicMaterial",this.color=new yn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=vn,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this}}di.prototype.isMeshBasicMaterial=!0;const ui=new Te,Ya=new Qt;class Mr{constructor(n,o,h){if(Array.isArray(n))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=n,this.itemSize=o,this.count=n!==void 0?n.length/o:0,this.normalized=h===!0,this.usage=xl,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(n){n===!0&&this.version++}setUsage(n){return this.usage=n,this}copy(n){return this.name=n.name,this.array=new n.array.constructor(n.array),this.itemSize=n.itemSize,this.count=n.count,this.normalized=n.normalized,this.usage=n.usage,this}copyAt(n,o,h){n*=this.itemSize,h*=o.itemSize;for(let p=0,w=this.itemSize;p<w;p++)this.array[n+p]=o.array[h+p];return this}copyArray(n){return this.array.set(n),this}copyColorsArray(n){const o=this.array;let h=0;for(let p=0,w=n.length;p<w;p++){let S=n[p];S===void 0&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",p),S=new yn),o[h++]=S.r,o[h++]=S.g,o[h++]=S.b}return this}copyVector2sArray(n){const o=this.array;let h=0;for(let p=0,w=n.length;p<w;p++){let S=n[p];S===void 0&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",p),S=new Qt),o[h++]=S.x,o[h++]=S.y}return this}copyVector3sArray(n){const o=this.array;let h=0;for(let p=0,w=n.length;p<w;p++){let S=n[p];S===void 0&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",p),S=new Te),o[h++]=S.x,o[h++]=S.y,o[h++]=S.z}return this}copyVector4sArray(n){const o=this.array;let h=0;for(let p=0,w=n.length;p<w;p++){let S=n[p];S===void 0&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",p),S=new Xr),o[h++]=S.x,o[h++]=S.y,o[h++]=S.z,o[h++]=S.w}return this}applyMatrix3(n){if(this.itemSize===2)for(let o=0,h=this.count;o<h;o++)Ya.fromBufferAttribute(this,o),Ya.applyMatrix3(n),this.setXY(o,Ya.x,Ya.y);else if(this.itemSize===3)for(let o=0,h=this.count;o<h;o++)ui.fromBufferAttribute(this,o),ui.applyMatrix3(n),this.setXYZ(o,ui.x,ui.y,ui.z);return this}applyMatrix4(n){for(let o=0,h=this.count;o<h;o++)ui.x=this.getX(o),ui.y=this.getY(o),ui.z=this.getZ(o),ui.applyMatrix4(n),this.setXYZ(o,ui.x,ui.y,ui.z);return this}applyNormalMatrix(n){for(let o=0,h=this.count;o<h;o++)ui.x=this.getX(o),ui.y=this.getY(o),ui.z=this.getZ(o),ui.applyNormalMatrix(n),this.setXYZ(o,ui.x,ui.y,ui.z);return this}transformDirection(n){for(let o=0,h=this.count;o<h;o++)ui.x=this.getX(o),ui.y=this.getY(o),ui.z=this.getZ(o),ui.transformDirection(n),this.setXYZ(o,ui.x,ui.y,ui.z);return this}set(n,o=0){return this.array.set(n,o),this}getX(n){return this.array[n*this.itemSize]}setX(n,o){return this.array[n*this.itemSize]=o,this}getY(n){return this.array[n*this.itemSize+1]}setY(n,o){return this.array[n*this.itemSize+1]=o,this}getZ(n){return this.array[n*this.itemSize+2]}setZ(n,o){return this.array[n*this.itemSize+2]=o,this}getW(n){return this.array[n*this.itemSize+3]}setW(n,o){return this.array[n*this.itemSize+3]=o,this}setXY(n,o,h){return n*=this.itemSize,this.array[n+0]=o,this.array[n+1]=h,this}setXYZ(n,o,h,p){return n*=this.itemSize,this.array[n+0]=o,this.array[n+1]=h,this.array[n+2]=p,this}setXYZW(n,o,h,p,w){return n*=this.itemSize,this.array[n+0]=o,this.array[n+1]=h,this.array[n+2]=p,this.array[n+3]=w,this}onUpload(n){return this.onUploadCallback=n,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const n={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return this.name!==""&&(n.name=this.name),this.usage!==xl&&(n.usage=this.usage),this.updateRange.offset===0&&this.updateRange.count===-1||(n.updateRange=this.updateRange),n}}Mr.prototype.isBufferAttribute=!0;class Dv extends Mr{constructor(n,o,h){super(new Int8Array(n),o,h)}}class Pv extends Mr{constructor(n,o,h){super(new Uint8Array(n),o,h)}}class Fv extends Mr{constructor(n,o,h){super(new Uint8ClampedArray(n),o,h)}}class Ov extends Mr{constructor(n,o,h){super(new Int16Array(n),o,h)}}class Gu extends Mr{constructor(n,o,h){super(new Uint16Array(n),o,h)}}class _0 extends Mr{constructor(n,o,h){super(new Int32Array(n),o,h)}}class sh extends Mr{constructor(n,o,h){super(new Uint32Array(n),o,h)}}class Hd extends Mr{constructor(n,o,h){super(new Uint16Array(n),o,h)}}Hd.prototype.isFloat16BufferAttribute=!0;class pn extends Mr{constructor(n,o,h){super(new Float32Array(n),o,h)}}class Xo extends Mr{constructor(n,o,h){super(new Float64Array(n),o,h)}}function ah(T){if(T.length===0)return-1/0;let n=T[0];for(let o=1,h=T.length;o<h;++o)T[o]>n&&(n=T[o]);return n}const Ur={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Tt(T,n){return new Ur[T](n)}let Df=0;const Ia=new Gn,Pf=new Cr,Hu=new Te,ha=new Ws,oh=new Ws,Ms=new Te;class On extends co{constructor(){super(),Object.defineProperty(this,"id",{value:Df++}),this.uuid=Vs(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(n){return Array.isArray(n)?this.index=new(ah(n)>65535?sh:Gu)(n,1):this.index=n,this}getAttribute(n){return this.attributes[n]}setAttribute(n,o){return this.attributes[n]=o,this}deleteAttribute(n){return delete this.attributes[n],this}hasAttribute(n){return this.attributes[n]!==void 0}addGroup(n,o,h=0){this.groups.push({start:n,count:o,materialIndex:h})}clearGroups(){this.groups=[]}setDrawRange(n,o){this.drawRange.start=n,this.drawRange.count=o}applyMatrix4(n){const o=this.attributes.position;o!==void 0&&(o.applyMatrix4(n),o.needsUpdate=!0);const h=this.attributes.normal;if(h!==void 0){const w=new Ni().getNormalMatrix(n);h.applyNormalMatrix(w),h.needsUpdate=!0}const p=this.attributes.tangent;return p!==void 0&&(p.transformDirection(n),p.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(n){return Ia.makeRotationFromQuaternion(n),this.applyMatrix4(Ia),this}rotateX(n){return Ia.makeRotationX(n),this.applyMatrix4(Ia),this}rotateY(n){return Ia.makeRotationY(n),this.applyMatrix4(Ia),this}rotateZ(n){return Ia.makeRotationZ(n),this.applyMatrix4(Ia),this}translate(n,o,h){return Ia.makeTranslation(n,o,h),this.applyMatrix4(Ia),this}scale(n,o,h){return Ia.makeScale(n,o,h),this.applyMatrix4(Ia),this}lookAt(n){return Pf.lookAt(n),Pf.updateMatrix(),this.applyMatrix4(Pf.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Hu).negate(),this.translate(Hu.x,Hu.y,Hu.z),this}setFromPoints(n){const o=[];for(let h=0,p=n.length;h<p;h++){const w=n[h];o.push(w.x,w.y,w.z||0)}return this.setAttribute("position",new pn(o,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Ws);const n=this.attributes.position,o=this.morphAttributes.position;if(n&&n.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new Te(-1/0,-1/0,-1/0),new Te(1/0,1/0,1/0));if(n!==void 0){if(this.boundingBox.setFromBufferAttribute(n),o)for(let h=0,p=o.length;h<p;h++){const w=o[h];ha.setFromBufferAttribute(w),this.morphTargetsRelative?(Ms.addVectors(this.boundingBox.min,ha.min),this.boundingBox.expandByPoint(Ms),Ms.addVectors(this.boundingBox.max,ha.max),this.boundingBox.expandByPoint(Ms)):(this.boundingBox.expandByPoint(ha.min),this.boundingBox.expandByPoint(ha.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new $o);const n=this.attributes.position,o=this.morphAttributes.position;if(n&&n.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new Te,1/0);if(n){const h=this.boundingSphere.center;if(ha.setFromBufferAttribute(n),o)for(let w=0,S=o.length;w<S;w++){const I=o[w];oh.setFromBufferAttribute(I),this.morphTargetsRelative?(Ms.addVectors(ha.min,oh.min),ha.expandByPoint(Ms),Ms.addVectors(ha.max,oh.max),ha.expandByPoint(Ms)):(ha.expandByPoint(oh.min),ha.expandByPoint(oh.max))}ha.getCenter(h);let p=0;for(let w=0,S=n.count;w<S;w++)Ms.fromBufferAttribute(n,w),p=Math.max(p,h.distanceToSquared(Ms));if(o)for(let w=0,S=o.length;w<S;w++){const I=o[w],k=this.morphTargetsRelative;for(let R=0,$=I.count;R<$;R++)Ms.fromBufferAttribute(I,R),k&&(Hu.fromBufferAttribute(n,R),Ms.add(Hu)),p=Math.max(p,h.distanceToSquared(Ms))}this.boundingSphere.radius=Math.sqrt(p),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const n=this.index,o=this.attributes;if(n===null||o.position===void 0||o.normal===void 0||o.uv===void 0)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const h=n.array,p=o.position.array,w=o.normal.array,S=o.uv.array,I=p.length/3;o.tangent===void 0&&this.setAttribute("tangent",new Mr(new Float32Array(4*I),4));const k=o.tangent.array,R=[],$=[];for(let ut=0;ut<I;ut++)R[ut]=new Te,$[ut]=new Te;const j=new Te,H=new Te,Y=new Te,ee=new Qt,te=new Qt,ae=new Qt,ne=new Te,me=new Te;function _e(ut,ct,an){j.fromArray(p,3*ut),H.fromArray(p,3*ct),Y.fromArray(p,3*an),ee.fromArray(S,2*ut),te.fromArray(S,2*ct),ae.fromArray(S,2*an),H.sub(j),Y.sub(j),te.sub(ee),ae.sub(ee);const Gt=1/(te.x*ae.y-ae.x*te.y);isFinite(Gt)&&(ne.copy(H).multiplyScalar(ae.y).addScaledVector(Y,-te.y).multiplyScalar(Gt),me.copy(Y).multiplyScalar(te.x).addScaledVector(H,-ae.x).multiplyScalar(Gt),R[ut].add(ne),R[ct].add(ne),R[an].add(ne),$[ut].add(me),$[ct].add(me),$[an].add(me))}let ve=this.groups;ve.length===0&&(ve=[{start:0,count:h.length}]);for(let ut=0,ct=ve.length;ut<ct;++ut){const an=ve[ut],Gt=an.start;for(let Lt=Gt,Yt=Gt+an.count;Lt<Yt;Lt+=3)_e(h[Lt+0],h[Lt+1],h[Lt+2])}const Ne=new Te,Oe=new Te,tt=new Te,it=new Te;function gt(ut){tt.fromArray(w,3*ut),it.copy(tt);const ct=R[ut];Ne.copy(ct),Ne.sub(tt.multiplyScalar(tt.dot(ct))).normalize(),Oe.crossVectors(it,ct);const an=Oe.dot($[ut])<0?-1:1;k[4*ut]=Ne.x,k[4*ut+1]=Ne.y,k[4*ut+2]=Ne.z,k[4*ut+3]=an}for(let ut=0,ct=ve.length;ut<ct;++ut){const an=ve[ut],Gt=an.start;for(let Lt=Gt,Yt=Gt+an.count;Lt<Yt;Lt+=3)gt(h[Lt+0]),gt(h[Lt+1]),gt(h[Lt+2])}}computeVertexNormals(){const n=this.index,o=this.getAttribute("position");if(o!==void 0){let h=this.getAttribute("normal");if(h===void 0)h=new Mr(new Float32Array(3*o.count),3),this.setAttribute("normal",h);else for(let H=0,Y=h.count;H<Y;H++)h.setXYZ(H,0,0,0);const p=new Te,w=new Te,S=new Te,I=new Te,k=new Te,R=new Te,$=new Te,j=new Te;if(n)for(let H=0,Y=n.count;H<Y;H+=3){const ee=n.getX(H+0),te=n.getX(H+1),ae=n.getX(H+2);p.fromBufferAttribute(o,ee),w.fromBufferAttribute(o,te),S.fromBufferAttribute(o,ae),$.subVectors(S,w),j.subVectors(p,w),$.cross(j),I.fromBufferAttribute(h,ee),k.fromBufferAttribute(h,te),R.fromBufferAttribute(h,ae),I.add($),k.add($),R.add($),h.setXYZ(ee,I.x,I.y,I.z),h.setXYZ(te,k.x,k.y,k.z),h.setXYZ(ae,R.x,R.y,R.z)}else for(let H=0,Y=o.count;H<Y;H+=3)p.fromBufferAttribute(o,H+0),w.fromBufferAttribute(o,H+1),S.fromBufferAttribute(o,H+2),$.subVectors(S,w),j.subVectors(p,w),$.cross(j),h.setXYZ(H+0,$.x,$.y,$.z),h.setXYZ(H+1,$.x,$.y,$.z),h.setXYZ(H+2,$.x,$.y,$.z);this.normalizeNormals(),h.needsUpdate=!0}}merge(n,o){if(!n||!n.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",n);o===void 0&&(o=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const h=this.attributes;for(const p in h){if(n.attributes[p]===void 0)continue;const w=h[p].array,S=n.attributes[p],I=S.array,k=S.itemSize*o,R=Math.min(I.length,w.length-k);for(let $=0,j=k;$<R;$++,j++)w[j]=I[$]}return this}normalizeNormals(){const n=this.attributes.normal;for(let o=0,h=n.count;o<h;o++)Ms.fromBufferAttribute(n,o),Ms.normalize(),n.setXYZ(o,Ms.x,Ms.y,Ms.z)}toNonIndexed(){function n(I,k){const R=I.array,$=I.itemSize,j=I.normalized,H=new R.constructor(k.length*$);let Y=0,ee=0;for(let te=0,ae=k.length;te<ae;te++){Y=I.isInterleavedBufferAttribute?k[te]*I.data.stride+I.offset:k[te]*$;for(let ne=0;ne<$;ne++)H[ee++]=R[Y++]}return new Mr(H,$,j)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const o=new On,h=this.index.array,p=this.attributes;for(const I in p){const k=n(p[I],h);o.setAttribute(I,k)}const w=this.morphAttributes;for(const I in w){const k=[],R=w[I];for(let $=0,j=R.length;$<j;$++){const H=n(R[$],h);k.push(H)}o.morphAttributes[I]=k}o.morphTargetsRelative=this.morphTargetsRelative;const S=this.groups;for(let I=0,k=S.length;I<k;I++){const R=S[I];o.addGroup(R.start,R.count,R.materialIndex)}return o}toJSON(){const n={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),Object.keys(this.userData).length>0&&(n.userData=this.userData),this.parameters!==void 0){const k=this.parameters;for(const R in k)k[R]!==void 0&&(n[R]=k[R]);return n}n.data={attributes:{}};const o=this.index;o!==null&&(n.data.index={type:o.array.constructor.name,array:Array.prototype.slice.call(o.array)});const h=this.attributes;for(const k in h){const R=h[k];n.data.attributes[k]=R.toJSON(n.data)}const p={};let w=!1;for(const k in this.morphAttributes){const R=this.morphAttributes[k],$=[];for(let j=0,H=R.length;j<H;j++){const Y=R[j];$.push(Y.toJSON(n.data))}$.length>0&&(p[k]=$,w=!0)}w&&(n.data.morphAttributes=p,n.data.morphTargetsRelative=this.morphTargetsRelative);const S=this.groups;S.length>0&&(n.data.groups=JSON.parse(JSON.stringify(S)));const I=this.boundingSphere;return I!==null&&(n.data.boundingSphere={center:I.center.toArray(),radius:I.radius}),n}clone(){return new On().copy(this)}copy(n){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const o={};this.name=n.name;const h=n.index;h!==null&&this.setIndex(h.clone(o));const p=n.attributes;for(const R in p){const $=p[R];this.setAttribute(R,$.clone(o))}const w=n.morphAttributes;for(const R in w){const $=[],j=w[R];for(let H=0,Y=j.length;H<Y;H++)$.push(j[H].clone(o));this.morphAttributes[R]=$}this.morphTargetsRelative=n.morphTargetsRelative;const S=n.groups;for(let R=0,$=S.length;R<$;R++){const j=S[R];this.addGroup(j.start,j.count,j.materialIndex)}const I=n.boundingBox;I!==null&&(this.boundingBox=I.clone());const k=n.boundingSphere;return k!==null&&(this.boundingSphere=k.clone()),this.drawRange.start=n.drawRange.start,this.drawRange.count=n.drawRange.count,this.userData=n.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}On.prototype.isBufferGeometry=!0;const Ff=new Gn,Qr=new Vo,rg=new $o,Yo=new Te,js=new Te,tu=new Te,Of=new Te,ig=new Te,ju=new Te,zf=new Te,Ge=new Te,sg=new Te,jd=new Qt,qd=new Qt,Ca=new Qt,xo=new Te,Bf=new Te;class Ji extends Cr{constructor(n=new On,o=new di){super(),this.type="Mesh",this.geometry=n,this.material=o,this.updateMorphTargets()}copy(n){return super.copy(n),n.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=n.morphTargetInfluences.slice()),n.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},n.morphTargetDictionary)),this.material=n.material,this.geometry=n.geometry,this}updateMorphTargets(){const n=this.geometry;if(n.isBufferGeometry){const o=n.morphAttributes,h=Object.keys(o);if(h.length>0){const p=o[h[0]];if(p!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let w=0,S=p.length;w<S;w++){const I=p[w].name||String(w);this.morphTargetInfluences.push(0),this.morphTargetDictionary[I]=w}}}}else{const o=n.morphTargets;o!==void 0&&o.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(n,o){const h=this.geometry,p=this.material,w=this.matrixWorld;if(p===void 0||(h.boundingSphere===null&&h.computeBoundingSphere(),rg.copy(h.boundingSphere),rg.applyMatrix4(w),n.ray.intersectsSphere(rg)===!1)||(Ff.copy(w).invert(),Qr.copy(n.ray).applyMatrix4(Ff),h.boundingBox!==null&&Qr.intersectsBox(h.boundingBox)===!1))return;let S;if(h.isBufferGeometry){const I=h.index,k=h.attributes.position,R=h.morphAttributes.position,$=h.morphTargetsRelative,j=h.attributes.uv,H=h.attributes.uv2,Y=h.groups,ee=h.drawRange;if(I!==null)if(Array.isArray(p))for(let te=0,ae=Y.length;te<ae;te++){const ne=Y[te],me=p[ne.materialIndex];for(let _e=Math.max(ne.start,ee.start),ve=Math.min(ne.start+ne.count,ee.start+ee.count);_e<ve;_e+=3){const Ne=I.getX(_e),Oe=I.getX(_e+1),tt=I.getX(_e+2);S=ge(this,me,n,Qr,k,R,$,j,H,Ne,Oe,tt),S&&(S.faceIndex=Math.floor(_e/3),S.face.materialIndex=ne.materialIndex,o.push(S))}}else for(let te=Math.max(0,ee.start),ae=Math.min(I.count,ee.start+ee.count);te<ae;te+=3){const ne=I.getX(te),me=I.getX(te+1),_e=I.getX(te+2);S=ge(this,p,n,Qr,k,R,$,j,H,ne,me,_e),S&&(S.faceIndex=Math.floor(te/3),o.push(S))}else if(k!==void 0)if(Array.isArray(p))for(let te=0,ae=Y.length;te<ae;te++){const ne=Y[te],me=p[ne.materialIndex];for(let _e=Math.max(ne.start,ee.start),ve=Math.min(ne.start+ne.count,ee.start+ee.count);_e<ve;_e+=3)S=ge(this,me,n,Qr,k,R,$,j,H,_e,_e+1,_e+2),S&&(S.faceIndex=Math.floor(_e/3),S.face.materialIndex=ne.materialIndex,o.push(S))}else for(let te=Math.max(0,ee.start),ae=Math.min(k.count,ee.start+ee.count);te<ae;te+=3)S=ge(this,p,n,Qr,k,R,$,j,H,te,te+1,te+2),S&&(S.faceIndex=Math.floor(te/3),o.push(S))}else h.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function ge(T,n,o,h,p,w,S,I,k,R,$,j){Yo.fromBufferAttribute(p,R),js.fromBufferAttribute(p,$),tu.fromBufferAttribute(p,j);const H=T.morphTargetInfluences;if(w&&H){zf.set(0,0,0),Ge.set(0,0,0),sg.set(0,0,0);for(let ee=0,te=w.length;ee<te;ee++){const ae=H[ee],ne=w[ee];ae!==0&&(Of.fromBufferAttribute(ne,R),ig.fromBufferAttribute(ne,$),ju.fromBufferAttribute(ne,j),S?(zf.addScaledVector(Of,ae),Ge.addScaledVector(ig,ae),sg.addScaledVector(ju,ae)):(zf.addScaledVector(Of.sub(Yo),ae),Ge.addScaledVector(ig.sub(js),ae),sg.addScaledVector(ju.sub(tu),ae)))}Yo.add(zf),js.add(Ge),tu.add(sg)}T.isSkinnedMesh&&(T.boneTransform(R,Yo),T.boneTransform($,js),T.boneTransform(j,tu));const Y=function(ee,te,ae,ne,me,_e,ve,Ne){let Oe;if(Oe=te.side===Z?ne.intersectTriangle(ve,_e,me,!0,Ne):ne.intersectTriangle(me,_e,ve,te.side!==le,Ne),Oe===null)return null;Bf.copy(Ne),Bf.applyMatrix4(ee.matrixWorld);const tt=ae.ray.origin.distanceTo(Bf);return tt<ae.near||tt>ae.far?null:{distance:tt,point:Bf.clone(),object:ee}}(T,n,o,h,Yo,js,tu,xo);if(Y){I&&(jd.fromBufferAttribute(I,R),qd.fromBufferAttribute(I,$),Ca.fromBufferAttribute(I,j),Y.uv=Li.getUV(xo,Yo,js,tu,jd,qd,Ca,new Qt)),k&&(jd.fromBufferAttribute(k,R),qd.fromBufferAttribute(k,$),Ca.fromBufferAttribute(k,j),Y.uv2=Li.getUV(xo,Yo,js,tu,jd,qd,Ca,new Qt));const ee={a:R,b:$,c:j,normal:new Te,materialIndex:0};Li.getNormal(Yo,js,tu,ee.normal),Y.face=ee}return Y}Ji.prototype.isMesh=!0;class Ka extends On{constructor(n=1,o=1,h=1,p=1,w=1,S=1){super(),this.type="BoxGeometry",this.parameters={width:n,height:o,depth:h,widthSegments:p,heightSegments:w,depthSegments:S};const I=this;p=Math.floor(p),w=Math.floor(w),S=Math.floor(S);const k=[],R=[],$=[],j=[];let H=0,Y=0;function ee(te,ae,ne,me,_e,ve,Ne,Oe,tt,it,gt){const ut=ve/tt,ct=Ne/it,an=ve/2,Gt=Ne/2,Lt=Oe/2,Yt=tt+1,Tn=it+1;let In=0,Pn=0;const nr=new Te;for(let er=0;er<Tn;er++){const ke=er*ct-Gt;for(let Ue=0;Ue<Yt;Ue++){const Dt=Ue*ut-an;nr[te]=Dt*me,nr[ae]=ke*_e,nr[ne]=Lt,R.push(nr.x,nr.y,nr.z),nr[te]=0,nr[ae]=0,nr[ne]=Oe>0?1:-1,$.push(nr.x,nr.y,nr.z),j.push(Ue/tt),j.push(1-er/it),In+=1}}for(let er=0;er<it;er++)for(let ke=0;ke<tt;ke++){const Ue=H+ke+Yt*er,Dt=H+ke+Yt*(er+1),zt=H+(ke+1)+Yt*(er+1),Pt=H+(ke+1)+Yt*er;k.push(Ue,Dt,Pt),k.push(Dt,zt,Pt),Pn+=6}I.addGroup(Y,Pn,gt),Y+=Pn,H+=In}ee("z","y","x",-1,-1,h,o,n,S,w,0),ee("z","y","x",1,-1,h,o,-n,S,w,1),ee("x","z","y",1,1,n,h,o,p,S,2),ee("x","z","y",1,-1,n,h,-o,p,S,3),ee("x","y","z",1,-1,n,o,h,p,w,4),ee("x","y","z",-1,-1,n,o,-h,p,w,5),this.setIndex(k),this.setAttribute("position",new pn(R,3)),this.setAttribute("normal",new pn($,3)),this.setAttribute("uv",new pn(j,2))}static fromJSON(n){return new Ka(n.width,n.height,n.depth,n.widthSegments,n.heightSegments,n.depthSegments)}}function lh(T){const n={};for(const o in T){n[o]={};for(const h in T[o]){const p=T[o][h];p&&(p.isColor||p.isMatrix3||p.isMatrix4||p.isVector2||p.isVector3||p.isVector4||p.isTexture||p.isQuaternion)?n[o][h]=p.clone():Array.isArray(p)?n[o][h]=p.slice():n[o][h]=p}}return n}function $e(T){const n={};for(let o=0;o<T.length;o++){const h=lh(T[o]);for(const p in h)n[p]=h[p]}return n}const nu={clone:lh,merge:$e};class qs extends fr{constructor(n){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,this.fragmentShader=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,n!==void 0&&(n.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(n))}copy(n){return super.copy(n),this.fragmentShader=n.fragmentShader,this.vertexShader=n.vertexShader,this.uniforms=lh(n.uniforms),this.defines=Object.assign({},n.defines),this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.lights=n.lights,this.clipping=n.clipping,this.extensions=Object.assign({},n.extensions),this.glslVersion=n.glslVersion,this}toJSON(n){const o=super.toJSON(n);o.glslVersion=this.glslVersion,o.uniforms={};for(const p in this.uniforms){const w=this.uniforms[p].value;w&&w.isTexture?o.uniforms[p]={type:"t",value:w.toJSON(n).uuid}:w&&w.isColor?o.uniforms[p]={type:"c",value:w.getHex()}:w&&w.isVector2?o.uniforms[p]={type:"v2",value:w.toArray()}:w&&w.isVector3?o.uniforms[p]={type:"v3",value:w.toArray()}:w&&w.isVector4?o.uniforms[p]={type:"v4",value:w.toArray()}:w&&w.isMatrix3?o.uniforms[p]={type:"m3",value:w.toArray()}:w&&w.isMatrix4?o.uniforms[p]={type:"m4",value:w.toArray()}:o.uniforms[p]={value:w}}Object.keys(this.defines).length>0&&(o.defines=this.defines),o.vertexShader=this.vertexShader,o.fragmentShader=this.fragmentShader;const h={};for(const p in this.extensions)this.extensions[p]===!0&&(h[p]=!0);return Object.keys(h).length>0&&(o.extensions=h),o}}qs.prototype.isShaderMaterial=!0;class Xs extends Cr{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Gn,this.projectionMatrix=new Gn,this.projectionMatrixInverse=new Gn}copy(n,o){return super.copy(n,o),this.matrixWorldInverse.copy(n.matrixWorldInverse),this.projectionMatrix.copy(n.projectionMatrix),this.projectionMatrixInverse.copy(n.projectionMatrixInverse),this}getWorldDirection(n){this.updateWorldMatrix(!0,!1);const o=this.matrixWorld.elements;return n.set(-o[8],-o[9],-o[10]).normalize()}updateMatrixWorld(n){super.updateMatrixWorld(n),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(n,o){super.updateWorldMatrix(n,o),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}Xs.prototype.isCamera=!0;class ss extends Xs{constructor(n=50,o=1,h=.1,p=2e3){super(),this.type="PerspectiveCamera",this.fov=n,this.zoom=1,this.near=h,this.far=p,this.focus=10,this.aspect=o,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(n,o){return super.copy(n,o),this.fov=n.fov,this.zoom=n.zoom,this.near=n.near,this.far=n.far,this.focus=n.focus,this.aspect=n.aspect,this.view=n.view===null?null:Object.assign({},n.view),this.filmGauge=n.filmGauge,this.filmOffset=n.filmOffset,this}setFocalLength(n){const o=.5*this.getFilmHeight()/n;this.fov=2*vl*Math.atan(o),this.updateProjectionMatrix()}getFocalLength(){const n=Math.tan(.5*zo*this.fov);return .5*this.getFilmHeight()/n}getEffectiveFOV(){return 2*vl*Math.atan(Math.tan(.5*zo*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(n,o,h,p,w,S){this.aspect=n/o,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=o,this.view.offsetX=h,this.view.offsetY=p,this.view.width=w,this.view.height=S,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const n=this.near;let o=n*Math.tan(.5*zo*this.fov)/this.zoom,h=2*o,p=this.aspect*h,w=-.5*p;const S=this.view;if(this.view!==null&&this.view.enabled){const k=S.fullWidth,R=S.fullHeight;w+=S.offsetX*p/k,o-=S.offsetY*h/R,p*=S.width/k,h*=S.height/R}const I=this.filmOffset;I!==0&&(w+=n*I/this.getFilmWidth()),this.projectionMatrix.makePerspective(w,w+p,o,o-h,n,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(n){const o=super.toJSON(n);return o.object.fov=this.fov,o.object.zoom=this.zoom,o.object.near=this.near,o.object.far=this.far,o.object.focus=this.focus,o.object.aspect=this.aspect,this.view!==null&&(o.object.view=Object.assign({},this.view)),o.object.filmGauge=this.filmGauge,o.object.filmOffset=this.filmOffset,o}}ss.prototype.isPerspectiveCamera=!0;const qu=90;class uh extends Cr{constructor(n,o,h){if(super(),this.type="CubeCamera",h.isWebGLCubeRenderTarget!==!0)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=h;const p=new ss(qu,1,n,o);p.layers=this.layers,p.up.set(0,-1,0),p.lookAt(new Te(1,0,0)),this.add(p);const w=new ss(qu,1,n,o);w.layers=this.layers,w.up.set(0,-1,0),w.lookAt(new Te(-1,0,0)),this.add(w);const S=new ss(qu,1,n,o);S.layers=this.layers,S.up.set(0,0,1),S.lookAt(new Te(0,1,0)),this.add(S);const I=new ss(qu,1,n,o);I.layers=this.layers,I.up.set(0,0,-1),I.lookAt(new Te(0,-1,0)),this.add(I);const k=new ss(qu,1,n,o);k.layers=this.layers,k.up.set(0,-1,0),k.lookAt(new Te(0,0,1)),this.add(k);const R=new ss(qu,1,n,o);R.layers=this.layers,R.up.set(0,-1,0),R.lookAt(new Te(0,0,-1)),this.add(R)}update(n,o){this.parent===null&&this.updateMatrixWorld();const h=this.renderTarget,[p,w,S,I,k,R]=this.children,$=n.xr.enabled,j=n.getRenderTarget();n.xr.enabled=!1;const H=h.texture.generateMipmaps;h.texture.generateMipmaps=!1,n.setRenderTarget(h,0),n.render(o,p),n.setRenderTarget(h,1),n.render(o,w),n.setRenderTarget(h,2),n.render(o,S),n.setRenderTarget(h,3),n.render(o,I),n.setRenderTarget(h,4),n.render(o,k),h.texture.generateMipmaps=H,n.setRenderTarget(h,5),n.render(o,R),n.setRenderTarget(j),n.xr.enabled=$}}class Xd extends Ri{constructor(n,o,h,p,w,S,I,k,R,$){super(n=n!==void 0?n:[],o=o!==void 0?o:at,h,p,w,S,I=I!==void 0?I:Xt,k,R,$),this.flipY=!1}get images(){return this.image}set images(n){this.image=n}}Xd.prototype.isCubeTexture=!0;class Yd extends Ea{constructor(n,o,h){Number.isInteger(o)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),o=h),super(n,n,o),o=o||{},this.texture=new Xd(void 0,o.mapping,o.wrapS,o.wrapT,o.magFilter,o.minFilter,o.format,o.type,o.anisotropy,o.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=o.generateMipmaps!==void 0&&o.generateMipmaps,this.texture.minFilter=o.minFilter!==void 0?o.minFilter:Or,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(n,o){this.texture.type=o.type,this.texture.format=Xn,this.texture.encoding=o.encoding,this.texture.generateMipmaps=o.generateMipmaps,this.texture.minFilter=o.minFilter,this.texture.magFilter=o.magFilter;const h={tEquirect:{value:null}},p=`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,w=`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`,S=new Ka(5,5,5),I=new qs({name:"CubemapFromEquirect",uniforms:lh(h),vertexShader:p,fragmentShader:w,side:Z,blending:Me});I.uniforms.tEquirect.value=o;const k=new Ji(S,I),R=o.minFilter;return o.minFilter===Ns&&(o.minFilter=Or),new uh(1,10,this).update(n,k),o.minFilter=R,k.geometry.dispose(),k.material.dispose(),this}clear(n,o,h,p){const w=n.getRenderTarget();for(let S=0;S<6;S++)n.setRenderTarget(this,S),n.clear(o,h,p);n.setRenderTarget(w)}}Yd.prototype.isWebGLCubeRenderTarget=!0;const ag=new Te,og=new Te,zv=new Ni;class Ko{constructor(n=new Te(1,0,0),o=0){this.normal=n,this.constant=o}set(n,o){return this.normal.copy(n),this.constant=o,this}setComponents(n,o,h,p){return this.normal.set(n,o,h),this.constant=p,this}setFromNormalAndCoplanarPoint(n,o){return this.normal.copy(n),this.constant=-o.dot(this.normal),this}setFromCoplanarPoints(n,o,h){const p=ag.subVectors(h,o).cross(og.subVectors(n,o)).normalize();return this.setFromNormalAndCoplanarPoint(p,n),this}copy(n){return this.normal.copy(n.normal),this.constant=n.constant,this}normalize(){const n=1/this.normal.length();return this.normal.multiplyScalar(n),this.constant*=n,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(n){return this.normal.dot(n)+this.constant}distanceToSphere(n){return this.distanceToPoint(n.center)-n.radius}projectPoint(n,o){return o.copy(this.normal).multiplyScalar(-this.distanceToPoint(n)).add(n)}intersectLine(n,o){const h=n.delta(ag),p=this.normal.dot(h);if(p===0)return this.distanceToPoint(n.start)===0?o.copy(n.start):null;const w=-(n.start.dot(this.normal)+this.constant)/p;return w<0||w>1?null:o.copy(h).multiplyScalar(w).add(n.start)}intersectsLine(n){const o=this.distanceToPoint(n.start),h=this.distanceToPoint(n.end);return o<0&&h>0||h<0&&o>0}intersectsBox(n){return n.intersectsPlane(this)}intersectsSphere(n){return n.intersectsPlane(this)}coplanarPoint(n){return n.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(n,o){const h=o||zv.getNormalMatrix(n),p=this.coplanarPoint(ag).applyMatrix4(n),w=this.normal.applyMatrix3(h).normalize();return this.constant=-p.dot(w),this}translate(n){return this.constant-=n.dot(this.normal),this}equals(n){return n.normal.equals(this.normal)&&n.constant===this.constant}clone(){return new this.constructor().copy(this)}}Ko.prototype.isPlane=!0;const Xu=new $o,Yu=new Te;class $f{constructor(n=new Ko,o=new Ko,h=new Ko,p=new Ko,w=new Ko,S=new Ko){this.planes=[n,o,h,p,w,S]}set(n,o,h,p,w,S){const I=this.planes;return I[0].copy(n),I[1].copy(o),I[2].copy(h),I[3].copy(p),I[4].copy(w),I[5].copy(S),this}copy(n){const o=this.planes;for(let h=0;h<6;h++)o[h].copy(n.planes[h]);return this}setFromProjectionMatrix(n){const o=this.planes,h=n.elements,p=h[0],w=h[1],S=h[2],I=h[3],k=h[4],R=h[5],$=h[6],j=h[7],H=h[8],Y=h[9],ee=h[10],te=h[11],ae=h[12],ne=h[13],me=h[14],_e=h[15];return o[0].setComponents(I-p,j-k,te-H,_e-ae).normalize(),o[1].setComponents(I+p,j+k,te+H,_e+ae).normalize(),o[2].setComponents(I+w,j+R,te+Y,_e+ne).normalize(),o[3].setComponents(I-w,j-R,te-Y,_e-ne).normalize(),o[4].setComponents(I-S,j-$,te-ee,_e-me).normalize(),o[5].setComponents(I+S,j+$,te+ee,_e+me).normalize(),this}intersectsObject(n){const o=n.geometry;return o.boundingSphere===null&&o.computeBoundingSphere(),Xu.copy(o.boundingSphere).applyMatrix4(n.matrixWorld),this.intersectsSphere(Xu)}intersectsSprite(n){return Xu.center.set(0,0,0),Xu.radius=.7071067811865476,Xu.applyMatrix4(n.matrixWorld),this.intersectsSphere(Xu)}intersectsSphere(n){const o=this.planes,h=n.center,p=-n.radius;for(let w=0;w<6;w++)if(o[w].distanceToPoint(h)<p)return!1;return!0}intersectsBox(n){const o=this.planes;for(let h=0;h<6;h++){const p=o[h];if(Yu.x=p.normal.x>0?n.max.x:n.min.x,Yu.y=p.normal.y>0?n.max.y:n.min.y,Yu.z=p.normal.z>0?n.max.z:n.min.z,p.distanceToPoint(Yu)<0)return!1}return!0}containsPoint(n){const o=this.planes;for(let h=0;h<6;h++)if(o[h].distanceToPoint(n)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function xi(){let T=null,n=!1,o=null,h=null;function p(w,S){o(w,S),h=T.requestAnimationFrame(p)}return{start:function(){n!==!0&&o!==null&&(h=T.requestAnimationFrame(p),n=!0)},stop:function(){T.cancelAnimationFrame(h),n=!1},setAnimationLoop:function(w){o=w},setContext:function(w){T=w}}}function o_(T,n){const o=n.isWebGL2,h=new WeakMap;return{get:function(p){return p.isInterleavedBufferAttribute&&(p=p.data),h.get(p)},remove:function(p){p.isInterleavedBufferAttribute&&(p=p.data);const w=h.get(p);w&&(T.deleteBuffer(w.buffer),h.delete(p))},update:function(p,w){if(p.isGLBufferAttribute){const I=h.get(p);return void((!I||I.version<p.version)&&h.set(p,{buffer:p.buffer,type:p.type,bytesPerElement:p.elementSize,version:p.version}))}p.isInterleavedBufferAttribute&&(p=p.data);const S=h.get(p);S===void 0?h.set(p,function(I,k){const R=I.array,$=I.usage,j=T.createBuffer();T.bindBuffer(k,j),T.bufferData(k,R,$),I.onUploadCallback();let H=5126;return R instanceof Float32Array?H=5126:R instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):R instanceof Uint16Array?I.isFloat16BufferAttribute?o?H=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):H=5123:R instanceof Int16Array?H=5122:R instanceof Uint32Array?H=5125:R instanceof Int32Array?H=5124:R instanceof Int8Array?H=5120:(R instanceof Uint8Array||R instanceof Uint8ClampedArray)&&(H=5121),{buffer:j,type:H,bytesPerElement:R.BYTES_PER_ELEMENT,version:I.version}}(p,w)):S.version<p.version&&(function(I,k,R){const $=k.array,j=k.updateRange;T.bindBuffer(R,I),j.count===-1?T.bufferSubData(R,0,$):(o?T.bufferSubData(R,j.offset*$.BYTES_PER_ELEMENT,$,j.offset,j.count):T.bufferSubData(R,j.offset*$.BYTES_PER_ELEMENT,$.subarray(j.offset,j.offset+j.count)),j.count=-1)}(S.buffer,p,w),S.version=p.version)}}}class ch extends On{constructor(n=1,o=1,h=1,p=1){super(),this.type="PlaneGeometry",this.parameters={width:n,height:o,widthSegments:h,heightSegments:p};const w=n/2,S=o/2,I=Math.floor(h),k=Math.floor(p),R=I+1,$=k+1,j=n/I,H=o/k,Y=[],ee=[],te=[],ae=[];for(let ne=0;ne<$;ne++){const me=ne*H-S;for(let _e=0;_e<R;_e++){const ve=_e*j-w;ee.push(ve,-me,0),te.push(0,0,1),ae.push(_e/I),ae.push(1-ne/k)}}for(let ne=0;ne<k;ne++)for(let me=0;me<I;me++){const _e=me+R*ne,ve=me+R*(ne+1),Ne=me+1+R*(ne+1),Oe=me+1+R*ne;Y.push(_e,ve,Oe),Y.push(ve,Ne,Oe)}this.setIndex(Y),this.setAttribute("position",new pn(ee,3)),this.setAttribute("normal",new pn(te,3)),this.setAttribute("uv",new pn(ae,2))}static fromJSON(n){return new ch(n.width,n.height,n.widthSegments,n.heightSegments)}}const Tr={alphamap_fragment:`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,alphamap_pars_fragment:`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,alphatest_fragment:`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,alphatest_pars_fragment:`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,aomap_fragment:`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,aomap_pars_fragment:`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,bsdfs:`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( incidentLight.direction + viewDir );
	float dotNL = saturate( dot( normal, incidentLight.direction ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );
	float dotNH = saturate( dot( geometry.normal, halfDir ) );
	float dotVH = saturate( dot( geometry.viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float NoH ) {
	float invAlpha = 1.0 / roughness;
	float cos2h = NoH * NoH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float NoV, float NoL ) {
	return saturate( 1.0 / ( 4.0 * ( NoL + NoV - NoL * NoV ) ) );
}
vec3 BRDF_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {
	vec3 N = geometry.normal;
	vec3 V = geometry.viewDir;
	vec3 H = normalize( V + L );
	float dotNH = saturate( dot( N, H ) );
	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );
}
#endif`,bumpmap_pars_fragment:`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,clipping_planes_fragment:`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,clipping_planes_pars_fragment:`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,clipping_planes_pars_vertex:`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,clipping_planes_vertex:`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,color_fragment:`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,color_pars_fragment:`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,color_pars_vertex:`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,color_vertex:`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,common:`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,cube_uv_reflection_fragment:`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_maxMipLevel 8.0
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_maxTileSize 256.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );
		vec2 f = fract( uv );
		uv += 0.5 - f;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		if ( mipInt < cubeUV_maxMipLevel ) {
			uv.y += 2.0 * cubeUV_maxTileSize;
		}
		uv.y += filterInt * 2.0 * cubeUV_minTileSize;
		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
		uv *= texelSize;
		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x += texelSize;
		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.y += texelSize;
		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x -= texelSize;
		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		vec3 tm = mix( tl, tr, f.x );
		vec3 bm = mix( bl, br, f.x );
		return mix( tm, bm, f.y );
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,defaultnormal_vertex:`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,displacementmap_pars_vertex:`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,displacementmap_vertex:`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,emissivemap_fragment:`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,emissivemap_pars_fragment:`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:`
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );
}
vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );
}
vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 RGBEToLinear( in vec4 value ) {
	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );
}
vec4 LinearToRGBE( in vec4 value ) {
	float maxComponent = max( max( value.r, value.g ), value.b );
	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );
	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );
}
vec4 RGBMToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * value.a * maxRange, 1.0 );
}
vec4 LinearToRGBM( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );
	M = ceil( M * 255.0 ) / 255.0;
	return vec4( value.rgb / ( M * maxRange ), M );
}
vec4 RGBDToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );
}
vec4 LinearToRGBD( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float D = max( maxRange / maxRGB, 1.0 );
	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );
	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );
}
const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );
vec4 LinearToLogLuv( in vec4 value ) {
	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;
	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );
	vec4 vResult;
	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;
	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;
	vResult.w = fract( Le );
	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;
	return vResult;
}
const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );
vec4 LogLuvToLinear( in vec4 value ) {
	float Le = value.z * 255.0 + value.w;
	vec3 Xp_Y_XYZp;
	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );
	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;
	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;
	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;
	return vec4( max( vRGB, 0.0 ), 1.0 );
}`,envmap_fragment:`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
		envColor = envMapTexelToLinear( envColor );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,envmap_common_pars_fragment:`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform int maxMipLevel;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,envmap_pars_fragment:`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,envmap_pars_vertex:`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,envmap_physical_pars_fragment:`#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getIBLIrradiance( const in GeometricContext geometry ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec;
			#ifdef ENVMAP_MODE_REFLECTION
				reflectVec = reflect( - viewDir, normal );
				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			#else
				reflectVec = refract( - viewDir, normal, refractionRatio );
			#endif
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,envmap_vertex:`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,fog_vertex:`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,fog_pars_vertex:`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,fog_fragment:`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,fog_pars_fragment:`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,gradientmap_pars_fragment:`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return texture2D( gradientMap, coord ).rgb;
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`,lightmap_fragment:`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		lightMapIrradiance *= PI;
	#endif
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,lightmap_pars_fragment:`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,lights_lambert_vertex:`vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointLightInfo( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotLightInfo( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );
		#endif
	}
	#pragma unroll_loop_end
#endif`,lights_pars_begin:`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {
	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {
		float dotNL = dot( geometry.normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,lights_toon_fragment:`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,lights_toon_pars_fragment:`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,lights_phong_fragment:`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,lights_phong_pars_fragment:`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,lights_physical_fragment:`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularTintFactor = specularTint;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARTINTMAP
			specularTintFactor *= specularTintMapTexelToLinear( texture2D( specularTintMap, vUv ) ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularTintFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularTintFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenTint = sheenTint;
#endif`,lights_physical_pars_fragment:`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenTint;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		reflectedLight.directSpecular += irradiance * BRDF_Sheen( material.roughness, directLight.direction, geometry, material.sheenTint );
	#else
		reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,lights_fragment_begin:`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,lights_fragment_maps:`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,lights_fragment_end:`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,logdepthbuf_fragment:`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,logdepthbuf_pars_fragment:`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,logdepthbuf_pars_vertex:`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,logdepthbuf_vertex:`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,map_fragment:`#ifdef USE_MAP
	vec4 texelColor = texture2D( map, vUv );
	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;
#endif`,map_pars_fragment:`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,map_particle_fragment:`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,map_particle_pars_fragment:`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,metalnessmap_fragment:`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,metalnessmap_pars_fragment:`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,morphnormal_vertex:`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
#endif`,morphtarget_pars_vertex:`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifndef USE_MORPHNORMALS
		uniform float morphTargetInfluences[ 8 ];
	#else
		uniform float morphTargetInfluences[ 4 ];
	#endif
#endif`,morphtarget_vertex:`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	transformed += morphTarget0 * morphTargetInfluences[ 0 ];
	transformed += morphTarget1 * morphTargetInfluences[ 1 ];
	transformed += morphTarget2 * morphTargetInfluences[ 2 ];
	transformed += morphTarget3 * morphTargetInfluences[ 3 ];
	#ifndef USE_MORPHNORMALS
		transformed += morphTarget4 * morphTargetInfluences[ 4 ];
		transformed += morphTarget5 * morphTargetInfluences[ 5 ];
		transformed += morphTarget6 * morphTargetInfluences[ 6 ];
		transformed += morphTarget7 * morphTargetInfluences[ 7 ];
	#endif
#endif`,normal_fragment_begin:`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,normal_fragment_maps:`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,normal_pars_fragment:`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,normal_pars_vertex:`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,normal_vertex:`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,normalmap_pars_fragment:`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,clearcoat_normal_fragment_begin:`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,clearcoat_normal_fragment_maps:`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,clearcoat_pars_fragment:`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,output_fragment:`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,packing:`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,premultiplied_alpha_fragment:`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,project_vertex:`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,dithering_fragment:`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,dithering_pars_fragment:`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,roughnessmap_fragment:`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,roughnessmap_pars_fragment:`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,shadowmap_pars_fragment:`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,shadowmap_pars_vertex:`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,shadowmap_vertex:`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,shadowmask_pars_fragment:`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,skinbase_vertex:`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,skinning_pars_vertex:`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`,skinning_vertex:`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,skinnormal_vertex:`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,specularmap_fragment:`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,specularmap_pars_fragment:`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,tonemapping_fragment:`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,tonemapping_pars_fragment:`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,transmission_fragment:`#ifdef USE_TRANSMISSION
	float transmissionAlpha = 1.0;
	float transmissionFactor = transmission;
	float thicknessFactor = thickness;
	#ifdef USE_TRANSMISSIONMAP
		transmissionFactor *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		thicknessFactor *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,
		attenuationTint, attenuationDistance );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );
	transmissionAlpha = transmission.a;
#endif`,transmission_pars_fragment:`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationTint;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( float roughness, float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef TEXTURE_LOD_EXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,
		vec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,
		vec3 attenuationColor, float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,uv_pars_fragment:`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,uv_pars_vertex:`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,uv_vertex:`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,uv2_pars_fragment:`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,uv2_pars_vertex:`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,uv2_vertex:`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,worldpos_vertex:`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`,background_frag:`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,background_vert:`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,cube_frag:`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,cube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,depth_frag:`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,depth_vert:`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,distanceRGBA_frag:`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,distanceRGBA_vert:`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,equirect_frag:`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	vec4 texColor = texture2D( tEquirect, sampleUV );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,equirect_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,linedashed_frag:`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,linedashed_vert:`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,meshbasic_frag:`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshbasic_vert:`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,meshlambert_frag:`uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshlambert_vert:`#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshmatcap_frag:`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );
	#else
		vec4 matcapColor = vec4( 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshmatcap_vert:`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,meshnormal_frag:`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
}`,meshnormal_vert:`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,meshphong_frag:`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshphong_vert:`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshphysical_frag:`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularTint;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARTINTMAP
		uniform sampler2D specularTintMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenTint;
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshphysical_vert:`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,meshtoon_frag:`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshtoon_vert:`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,points_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,points_vert:`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,shadow_frag:`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,shadow_vert:`#include <common>
#include <fog_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <begin_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,sprite_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,sprite_vert:`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`},_n={common:{diffuse:{value:new yn(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Ni},uv2Transform:{value:new Ni},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Qt(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new yn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new yn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Ni}},sprite:{diffuse:{value:new yn(16777215)},opacity:{value:1},center:{value:new Qt(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Ni}}},Za={basic:{uniforms:$e([_n.common,_n.specularmap,_n.envmap,_n.aomap,_n.lightmap,_n.fog]),vertexShader:Tr.meshbasic_vert,fragmentShader:Tr.meshbasic_frag},lambert:{uniforms:$e([_n.common,_n.specularmap,_n.envmap,_n.aomap,_n.lightmap,_n.emissivemap,_n.fog,_n.lights,{emissive:{value:new yn(0)}}]),vertexShader:Tr.meshlambert_vert,fragmentShader:Tr.meshlambert_frag},phong:{uniforms:$e([_n.common,_n.specularmap,_n.envmap,_n.aomap,_n.lightmap,_n.emissivemap,_n.bumpmap,_n.normalmap,_n.displacementmap,_n.fog,_n.lights,{emissive:{value:new yn(0)},specular:{value:new yn(1118481)},shininess:{value:30}}]),vertexShader:Tr.meshphong_vert,fragmentShader:Tr.meshphong_frag},standard:{uniforms:$e([_n.common,_n.envmap,_n.aomap,_n.lightmap,_n.emissivemap,_n.bumpmap,_n.normalmap,_n.displacementmap,_n.roughnessmap,_n.metalnessmap,_n.fog,_n.lights,{emissive:{value:new yn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Tr.meshphysical_vert,fragmentShader:Tr.meshphysical_frag},toon:{uniforms:$e([_n.common,_n.aomap,_n.lightmap,_n.emissivemap,_n.bumpmap,_n.normalmap,_n.displacementmap,_n.gradientmap,_n.fog,_n.lights,{emissive:{value:new yn(0)}}]),vertexShader:Tr.meshtoon_vert,fragmentShader:Tr.meshtoon_frag},matcap:{uniforms:$e([_n.common,_n.bumpmap,_n.normalmap,_n.displacementmap,_n.fog,{matcap:{value:null}}]),vertexShader:Tr.meshmatcap_vert,fragmentShader:Tr.meshmatcap_frag},points:{uniforms:$e([_n.points,_n.fog]),vertexShader:Tr.points_vert,fragmentShader:Tr.points_frag},dashed:{uniforms:$e([_n.common,_n.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Tr.linedashed_vert,fragmentShader:Tr.linedashed_frag},depth:{uniforms:$e([_n.common,_n.displacementmap]),vertexShader:Tr.depth_vert,fragmentShader:Tr.depth_frag},normal:{uniforms:$e([_n.common,_n.bumpmap,_n.normalmap,_n.displacementmap,{opacity:{value:1}}]),vertexShader:Tr.meshnormal_vert,fragmentShader:Tr.meshnormal_frag},sprite:{uniforms:$e([_n.sprite,_n.fog]),vertexShader:Tr.sprite_vert,fragmentShader:Tr.sprite_frag},background:{uniforms:{uvTransform:{value:new Ni},t2D:{value:null}},vertexShader:Tr.background_vert,fragmentShader:Tr.background_frag},cube:{uniforms:$e([_n.envmap,{opacity:{value:1}}]),vertexShader:Tr.cube_vert,fragmentShader:Tr.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Tr.equirect_vert,fragmentShader:Tr.equirect_frag},distanceRGBA:{uniforms:$e([_n.common,_n.displacementmap,{referencePosition:{value:new Te},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Tr.distanceRGBA_vert,fragmentShader:Tr.distanceRGBA_frag},shadow:{uniforms:$e([_n.lights,_n.fog,{color:{value:new yn(0)},opacity:{value:1}}]),vertexShader:Tr.shadow_vert,fragmentShader:Tr.shadow_frag}};function hh(T,n,o,h,p){const w=new yn(0);let S,I,k=0,R=null,$=0,j=null;function H(Y,ee){o.buffers.color.setClear(Y.r,Y.g,Y.b,ee,p)}return{getClearColor:function(){return w},setClearColor:function(Y,ee=1){w.set(Y),k=ee,H(w,k)},getClearAlpha:function(){return k},setClearAlpha:function(Y){k=Y,H(w,k)},render:function(Y,ee){let te=!1,ae=ee.isScene===!0?ee.background:null;ae&&ae.isTexture&&(ae=n.get(ae));const ne=T.xr,me=ne.getSession&&ne.getSession();me&&me.environmentBlendMode==="additive"&&(ae=null),ae===null?H(w,k):ae&&ae.isColor&&(H(ae,1),te=!0),(T.autoClear||te)&&T.clear(T.autoClearColor,T.autoClearDepth,T.autoClearStencil),ae&&(ae.isCubeTexture||ae.mapping===_t)?(I===void 0&&(I=new Ji(new Ka(1,1,1),new qs({name:"BackgroundCubeMaterial",uniforms:lh(Za.cube.uniforms),vertexShader:Za.cube.vertexShader,fragmentShader:Za.cube.fragmentShader,side:Z,depthTest:!1,depthWrite:!1,fog:!1})),I.geometry.deleteAttribute("normal"),I.geometry.deleteAttribute("uv"),I.onBeforeRender=function(_e,ve,Ne){this.matrixWorld.copyPosition(Ne.matrixWorld)},Object.defineProperty(I.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),h.update(I)),I.material.uniforms.envMap.value=ae,I.material.uniforms.flipEnvMap.value=ae.isCubeTexture&&ae.isRenderTargetTexture===!1?-1:1,R===ae&&$===ae.version&&j===T.toneMapping||(I.material.needsUpdate=!0,R=ae,$=ae.version,j=T.toneMapping),Y.unshift(I,I.geometry,I.material,0,0,null)):ae&&ae.isTexture&&(S===void 0&&(S=new Ji(new ch(2,2),new qs({name:"BackgroundMaterial",uniforms:lh(Za.background.uniforms),vertexShader:Za.background.vertexShader,fragmentShader:Za.background.fragmentShader,side:V,depthTest:!1,depthWrite:!1,fog:!1})),S.geometry.deleteAttribute("normal"),Object.defineProperty(S.material,"map",{get:function(){return this.uniforms.t2D.value}}),h.update(S)),S.material.uniforms.t2D.value=ae,ae.matrixAutoUpdate===!0&&ae.updateMatrix(),S.material.uniforms.uvTransform.value.copy(ae.matrix),R===ae&&$===ae.version&&j===T.toneMapping||(S.material.needsUpdate=!0,R=ae,$=ae.version,j=T.toneMapping),Y.unshift(S,S.geometry,S.material,0,0,null))}}}function Ku(T,n,o,h){const p=T.getParameter(34921),w=h.isWebGL2?null:n.get("OES_vertex_array_object"),S=h.isWebGL2||w!==null,I={},k=H(null);let R=k;function $(ve){return h.isWebGL2?T.bindVertexArray(ve):w.bindVertexArrayOES(ve)}function j(ve){return h.isWebGL2?T.deleteVertexArray(ve):w.deleteVertexArrayOES(ve)}function H(ve){const Ne=[],Oe=[],tt=[];for(let it=0;it<p;it++)Ne[it]=0,Oe[it]=0,tt[it]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:Ne,enabledAttributes:Oe,attributeDivisors:tt,object:ve,attributes:{},index:null}}function Y(){const ve=R.newAttributes;for(let Ne=0,Oe=ve.length;Ne<Oe;Ne++)ve[Ne]=0}function ee(ve){te(ve,0)}function te(ve,Ne){const Oe=R.newAttributes,tt=R.enabledAttributes,it=R.attributeDivisors;Oe[ve]=1,tt[ve]===0&&(T.enableVertexAttribArray(ve),tt[ve]=1),it[ve]!==Ne&&((h.isWebGL2?T:n.get("ANGLE_instanced_arrays"))[h.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](ve,Ne),it[ve]=Ne)}function ae(){const ve=R.newAttributes,Ne=R.enabledAttributes;for(let Oe=0,tt=Ne.length;Oe<tt;Oe++)Ne[Oe]!==ve[Oe]&&(T.disableVertexAttribArray(Oe),Ne[Oe]=0)}function ne(ve,Ne,Oe,tt,it,gt){h.isWebGL2!==!0||Oe!==5124&&Oe!==5125?T.vertexAttribPointer(ve,Ne,Oe,tt,it,gt):T.vertexAttribIPointer(ve,Ne,Oe,it,gt)}function me(){_e(),R!==k&&(R=k,$(R.object))}function _e(){k.geometry=null,k.program=null,k.wireframe=!1}return{setup:function(ve,Ne,Oe,tt,it){let gt=!1;if(S){const ut=function(ct,an,Gt){const Lt=Gt.wireframe===!0;let Yt=I[ct.id];Yt===void 0&&(Yt={},I[ct.id]=Yt);let Tn=Yt[an.id];Tn===void 0&&(Tn={},Yt[an.id]=Tn);let In=Tn[Lt];return In===void 0&&(In=H(h.isWebGL2?T.createVertexArray():w.createVertexArrayOES()),Tn[Lt]=In),In}(tt,Oe,Ne);R!==ut&&(R=ut,$(R.object)),gt=function(ct,an){const Gt=R.attributes,Lt=ct.attributes;let Yt=0;for(const Tn in Lt){const In=Gt[Tn],Pn=Lt[Tn];if(In===void 0||In.attribute!==Pn||In.data!==Pn.data)return!0;Yt++}return R.attributesNum!==Yt||R.index!==an}(tt,it),gt&&function(ct,an){const Gt={},Lt=ct.attributes;let Yt=0;for(const Tn in Lt){const In=Lt[Tn],Pn={};Pn.attribute=In,In.data&&(Pn.data=In.data),Gt[Tn]=Pn,Yt++}R.attributes=Gt,R.attributesNum=Yt,R.index=an}(tt,it)}else{const ut=Ne.wireframe===!0;R.geometry===tt.id&&R.program===Oe.id&&R.wireframe===ut||(R.geometry=tt.id,R.program=Oe.id,R.wireframe=ut,gt=!0)}ve.isInstancedMesh===!0&&(gt=!0),it!==null&&o.update(it,34963),gt&&(function(ut,ct,an,Gt){if(h.isWebGL2===!1&&(ut.isInstancedMesh||Gt.isInstancedBufferGeometry)&&n.get("ANGLE_instanced_arrays")===null)return;Y();const Lt=Gt.attributes,Yt=an.getAttributes(),Tn=ct.defaultAttributeValues;for(const In in Yt){const Pn=Yt[In];if(Pn.location>=0){let nr=Lt[In];if(nr===void 0&&(In==="instanceMatrix"&&ut.instanceMatrix&&(nr=ut.instanceMatrix),In==="instanceColor"&&ut.instanceColor&&(nr=ut.instanceColor)),nr!==void 0){const er=nr.normalized,ke=nr.itemSize,Ue=o.get(nr);if(Ue===void 0)continue;const Dt=Ue.buffer,zt=Ue.type,Pt=Ue.bytesPerElement;if(nr.isInterleavedBufferAttribute){const Kt=nr.data,gn=Kt.stride,dn=nr.offset;if(Kt&&Kt.isInstancedInterleavedBuffer){for(let mt=0;mt<Pn.locationSize;mt++)te(Pn.location+mt,Kt.meshPerAttribute);ut.isInstancedMesh!==!0&&Gt._maxInstanceCount===void 0&&(Gt._maxInstanceCount=Kt.meshPerAttribute*Kt.count)}else for(let mt=0;mt<Pn.locationSize;mt++)ee(Pn.location+mt);T.bindBuffer(34962,Dt);for(let mt=0;mt<Pn.locationSize;mt++)ne(Pn.location+mt,ke/Pn.locationSize,zt,er,gn*Pt,(dn+ke/Pn.locationSize*mt)*Pt)}else{if(nr.isInstancedBufferAttribute){for(let Kt=0;Kt<Pn.locationSize;Kt++)te(Pn.location+Kt,nr.meshPerAttribute);ut.isInstancedMesh!==!0&&Gt._maxInstanceCount===void 0&&(Gt._maxInstanceCount=nr.meshPerAttribute*nr.count)}else for(let Kt=0;Kt<Pn.locationSize;Kt++)ee(Pn.location+Kt);T.bindBuffer(34962,Dt);for(let Kt=0;Kt<Pn.locationSize;Kt++)ne(Pn.location+Kt,ke/Pn.locationSize,zt,er,ke*Pt,ke/Pn.locationSize*Kt*Pt)}}else if(Tn!==void 0){const er=Tn[In];if(er!==void 0)switch(er.length){case 2:T.vertexAttrib2fv(Pn.location,er);break;case 3:T.vertexAttrib3fv(Pn.location,er);break;case 4:T.vertexAttrib4fv(Pn.location,er);break;default:T.vertexAttrib1fv(Pn.location,er)}}}}ae()}(ve,Ne,Oe,tt),it!==null&&T.bindBuffer(34963,o.get(it).buffer))},reset:me,resetDefaultState:_e,dispose:function(){me();for(const ve in I){const Ne=I[ve];for(const Oe in Ne){const tt=Ne[Oe];for(const it in tt)j(tt[it].object),delete tt[it];delete Ne[Oe]}delete I[ve]}},releaseStatesOfGeometry:function(ve){if(I[ve.id]===void 0)return;const Ne=I[ve.id];for(const Oe in Ne){const tt=Ne[Oe];for(const it in tt)j(tt[it].object),delete tt[it];delete Ne[Oe]}delete I[ve.id]},releaseStatesOfProgram:function(ve){for(const Ne in I){const Oe=I[Ne];if(Oe[ve.id]===void 0)continue;const tt=Oe[ve.id];for(const it in tt)j(tt[it].object),delete tt[it];delete Oe[ve.id]}},initAttributes:Y,enableAttribute:ee,disableUnusedAttributes:ae}}function Bv(T,n,o,h){const p=h.isWebGL2;let w;this.setMode=function(S){w=S},this.render=function(S,I){T.drawArrays(w,S,I),o.update(I,w,1)},this.renderInstances=function(S,I,k){if(k===0)return;let R,$;if(p)R=T,$="drawArraysInstanced";else if(R=n.get("ANGLE_instanced_arrays"),$="drawArraysInstancedANGLE",R===null)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");R[$](w,S,I,k),o.update(I,w,k)}}function S0(T,n,o){let h;function p(ve){if(ve==="highp"){if(T.getShaderPrecisionFormat(35633,36338).precision>0&&T.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";ve="mediump"}return ve==="mediump"&&T.getShaderPrecisionFormat(35633,36337).precision>0&&T.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const w=typeof WebGL2RenderingContext!="undefined"&&T instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!="undefined"&&T instanceof WebGL2ComputeRenderingContext;let S=o.precision!==void 0?o.precision:"highp";const I=p(S);I!==S&&(console.warn("THREE.WebGLRenderer:",S,"not supported, using",I,"instead."),S=I);const k=w||n.has("WEBGL_draw_buffers"),R=o.logarithmicDepthBuffer===!0,$=T.getParameter(34930),j=T.getParameter(35660),H=T.getParameter(3379),Y=T.getParameter(34076),ee=T.getParameter(34921),te=T.getParameter(36347),ae=T.getParameter(36348),ne=T.getParameter(36349),me=j>0,_e=w||n.has("OES_texture_float");return{isWebGL2:w,drawBuffers:k,getMaxAnisotropy:function(){if(h!==void 0)return h;if(n.has("EXT_texture_filter_anisotropic")===!0){const ve=n.get("EXT_texture_filter_anisotropic");h=T.getParameter(ve.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else h=0;return h},getMaxPrecision:p,precision:S,logarithmicDepthBuffer:R,maxTextures:$,maxVertexTextures:j,maxTextureSize:H,maxCubemapSize:Y,maxAttributes:ee,maxVertexUniforms:te,maxVaryings:ae,maxFragmentUniforms:ne,vertexTextures:me,floatFragmentTextures:_e,floatVertexTextures:me&&_e,maxSamples:w?T.getParameter(36183):0}}function dh(T){const n=this;let o=null,h=0,p=!1,w=!1;const S=new Ko,I=new Ni,k={value:null,needsUpdate:!1};function R(){k.value!==o&&(k.value=o,k.needsUpdate=h>0),n.numPlanes=h,n.numIntersection=0}function $(j,H,Y,ee){const te=j!==null?j.length:0;let ae=null;if(te!==0){if(ae=k.value,ee!==!0||ae===null){const ne=Y+4*te,me=H.matrixWorldInverse;I.getNormalMatrix(me),(ae===null||ae.length<ne)&&(ae=new Float32Array(ne));for(let _e=0,ve=Y;_e!==te;++_e,ve+=4)S.copy(j[_e]).applyMatrix4(me,I),S.normal.toArray(ae,ve),ae[ve+3]=S.constant}k.value=ae,k.needsUpdate=!0}return n.numPlanes=te,n.numIntersection=0,ae}this.uniform=k,this.numPlanes=0,this.numIntersection=0,this.init=function(j,H,Y){const ee=j.length!==0||H||h!==0||p;return p=H,o=$(j,Y,0),h=j.length,ee},this.beginShadows=function(){w=!0,$(null)},this.endShadows=function(){w=!1,R()},this.setState=function(j,H,Y){const ee=j.clippingPlanes,te=j.clipIntersection,ae=j.clipShadows,ne=T.get(j);if(!p||ee===null||ee.length===0||w&&!ae)w?$(null):R();else{const me=w?0:h,_e=4*me;let ve=ne.clippingState||null;k.value=ve,ve=$(ee,H,_e,Y);for(let Ne=0;Ne!==_e;++Ne)ve[Ne]=o[Ne];ne.clippingState=ve,this.numIntersection=te?this.numPlanes:0,this.numPlanes+=me}}}function $v(T){let n=new WeakMap;function o(p,w){return w===It?p.mapping=at:w===Le&&(p.mapping=he),p}function h(p){const w=p.target;w.removeEventListener("dispose",h);const S=n.get(w);S!==void 0&&(n.delete(w),S.dispose())}return{get:function(p){if(p&&p.isTexture&&p.isRenderTargetTexture===!1){const w=p.mapping;if(w===It||w===Le){if(n.has(p))return o(n.get(p).texture,p.mapping);{const S=p.image;if(S&&S.height>0){const I=T.getRenderTarget(),k=new Yd(S.height/2);return k.fromEquirectangularTexture(T,p),n.set(p,k),T.setRenderTarget(I),p.addEventListener("dispose",h),o(k.texture,p.mapping)}return null}}}return p},dispose:function(){n=new WeakMap}}}Za.physical={uniforms:$e([Za.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Qt(1,1)},clearcoatNormalMap:{value:null},sheenTint:{value:new yn(0)},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Qt},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationTint:{value:new yn(0)},specularIntensity:{value:0},specularIntensityMap:{value:null},specularTint:{value:new yn(1,1,1)},specularTintMap:{value:null}}]),vertexShader:Tr.meshphysical_vert,fragmentShader:Tr.meshphysical_frag};class Uf extends Xs{constructor(n=-1,o=1,h=1,p=-1,w=.1,S=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=n,this.right=o,this.top=h,this.bottom=p,this.near=w,this.far=S,this.updateProjectionMatrix()}copy(n,o){return super.copy(n,o),this.left=n.left,this.right=n.right,this.top=n.top,this.bottom=n.bottom,this.near=n.near,this.far=n.far,this.zoom=n.zoom,this.view=n.view===null?null:Object.assign({},n.view),this}setViewOffset(n,o,h,p,w,S){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=o,this.view.offsetX=h,this.view.offsetY=p,this.view.width=w,this.view.height=S,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const n=(this.right-this.left)/(2*this.zoom),o=(this.top-this.bottom)/(2*this.zoom),h=(this.right+this.left)/2,p=(this.top+this.bottom)/2;let w=h-n,S=h+n,I=p+o,k=p-o;if(this.view!==null&&this.view.enabled){const R=(this.right-this.left)/this.view.fullWidth/this.zoom,$=(this.top-this.bottom)/this.view.fullHeight/this.zoom;w+=R*this.view.offsetX,S=w+R*this.view.width,I-=$*this.view.offsetY,k=I-$*this.view.height}this.projectionMatrix.makeOrthographic(w,S,I,k,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(n){const o=super.toJSON(n);return o.object.zoom=this.zoom,o.object.left=this.left,o.object.right=this.right,o.object.top=this.top,o.object.bottom=this.bottom,o.object.near=this.near,o.object.far=this.far,this.view!==null&&(o.object.view=Object.assign({},this.view)),o}}Uf.prototype.isOrthographicCamera=!0;class ka extends qs{constructor(n){super(n),this.type="RawShaderMaterial"}}ka.prototype.isRawShaderMaterial=!0;const da=Math.pow(2,8),M0=[.125,.215,.35,.446,.526,.582],Uv=5+M0.length,Sl={[ps]:0,[yl]:1,[Vl]:2,[yd]:3,[xd]:4,[zu]:5,[Ou]:6},T0=new Uf,{_lodPlanes:Vf,_sizeLods:E0,_sigmas:Wf}=Wv(),Vv=new yn;let ru=null;const Zu=(1+Math.sqrt(5))/2,Kd=1/Zu,ph=[new Te(1,1,1),new Te(-1,1,1),new Te(1,1,-1),new Te(-1,1,-1),new Te(0,Zu,Kd),new Te(0,Zu,-Kd),new Te(Kd,0,Zu),new Te(-Kd,0,Zu),new Te(Zu,Kd,0),new Te(-Zu,Kd,0)];class pa{constructor(n){this._renderer=n,this._pingPongRenderTarget=null,this._blurMaterial=function(o){const h=new Float32Array(20),p=new Te(0,1,0);return new ka({name:"SphericalGaussianBlur",defines:{n:20},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:h},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:p},inputEncoding:{value:Sl[ps]},outputEncoding:{value:Sl[ps]}},vertexShader:`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`,fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:Me,depthTest:!1,depthWrite:!1})}(),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(n,o=0,h=.1,p=100){ru=this._renderer.getRenderTarget();const w=this._allocateTargets();return this._sceneToCubeUV(n,h,p,w),o>0&&this._blur(w,0,0,o),this._applyPMREM(w),this._cleanup(w),w}fromEquirectangular(n){return this._fromTexture(n)}fromCubemap(n){return this._fromTexture(n)}compileCubemapShader(){this._cubemapShader===null&&(this._cubemapShader=jv(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){this._equirectShader===null&&(this._equirectShader=Hv(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),this._cubemapShader!==null&&this._cubemapShader.dispose(),this._equirectShader!==null&&this._equirectShader.dispose();for(let n=0;n<Vf.length;n++)Vf[n].dispose()}_cleanup(n){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(ru),n.scissorTest=!1,ug(n,0,0,n.width,n.height)}_fromTexture(n){ru=this._renderer.getRenderTarget();const o=this._allocateTargets(n);return this._textureToCubeUV(n,o),this._applyPMREM(o),this._cleanup(o),o}_allocateTargets(n){const o={magFilter:Sr,minFilter:Sr,generateMipmaps:!1,type:Wa,format:dr,encoding:lg(n)?n.encoding:Vl,depthBuffer:!1},h=Gv(o);return h.depthBuffer=!n,this._pingPongRenderTarget=Gv(o),h}_compileMaterial(n){const o=new Ji(Vf[0],n);this._renderer.compile(o,T0)}_sceneToCubeUV(n,o,h,p){const w=new ss(90,1,o,h),S=[1,-1,1,1,1,1],I=[1,1,1,-1,-1,-1],k=this._renderer,R=k.autoClear,$=k.outputEncoding,j=k.toneMapping;k.getClearColor(Vv),k.toneMapping=ye,k.outputEncoding=ps,k.autoClear=!1;const H=new di({name:"PMREM.Background",side:Z,depthWrite:!1,depthTest:!1}),Y=new Ji(new Ka,H);let ee=!1;const te=n.background;te?te.isColor&&(H.color.copy(te),n.background=null,ee=!0):(H.color.copy(Vv),ee=!0);for(let ae=0;ae<6;ae++){const ne=ae%3;ne==0?(w.up.set(0,S[ae],0),w.lookAt(I[ae],0,0)):ne==1?(w.up.set(0,0,S[ae]),w.lookAt(0,I[ae],0)):(w.up.set(0,S[ae],0),w.lookAt(0,0,I[ae])),ug(p,ne*da,ae>2?da:0,da,da),k.setRenderTarget(p),ee&&k.render(Y,w),k.render(n,w)}Y.geometry.dispose(),Y.material.dispose(),k.toneMapping=j,k.outputEncoding=$,k.autoClear=R,n.background=te}_textureToCubeUV(n,o){const h=this._renderer;n.isCubeTexture?this._cubemapShader==null&&(this._cubemapShader=jv()):this._equirectShader==null&&(this._equirectShader=Hv());const p=n.isCubeTexture?this._cubemapShader:this._equirectShader,w=new Ji(Vf[0],p),S=p.uniforms;S.envMap.value=n,n.isCubeTexture||S.texelSize.value.set(1/n.image.width,1/n.image.height),S.inputEncoding.value=Sl[n.encoding],S.outputEncoding.value=Sl[o.texture.encoding],ug(o,0,0,3*da,2*da),h.setRenderTarget(o),h.render(w,T0)}_applyPMREM(n){const o=this._renderer,h=o.autoClear;o.autoClear=!1;for(let p=1;p<Uv;p++){const w=Math.sqrt(Wf[p]*Wf[p]-Wf[p-1]*Wf[p-1]),S=ph[(p-1)%ph.length];this._blur(n,p-1,p,w,S)}o.autoClear=h}_blur(n,o,h,p,w){const S=this._pingPongRenderTarget;this._halfBlur(n,S,o,h,p,"latitudinal",w),this._halfBlur(S,n,h,h,p,"longitudinal",w)}_halfBlur(n,o,h,p,w,S,I){const k=this._renderer,R=this._blurMaterial;S!=="latitudinal"&&S!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const $=new Ji(Vf[p],R),j=R.uniforms,H=E0[h]-1,Y=isFinite(w)?Math.PI/(2*H):2*Math.PI/39,ee=w/Y,te=isFinite(w)?1+Math.floor(3*ee):20;te>20&&console.warn(`sigmaRadians, ${w}, is too large and will clip, as it requested ${te} samples when the maximum is set to 20`);const ae=[];let ne=0;for(let _e=0;_e<20;++_e){const ve=_e/ee,Ne=Math.exp(-ve*ve/2);ae.push(Ne),_e==0?ne+=Ne:_e<te&&(ne+=2*Ne)}for(let _e=0;_e<ae.length;_e++)ae[_e]=ae[_e]/ne;j.envMap.value=n.texture,j.samples.value=te,j.weights.value=ae,j.latitudinal.value=S==="latitudinal",I&&(j.poleAxis.value=I),j.dTheta.value=Y,j.mipInt.value=8-h,j.inputEncoding.value=Sl[n.texture.encoding],j.outputEncoding.value=Sl[n.texture.encoding];const me=E0[p];ug(o,3*Math.max(0,da-2*me),(p===0?0:2*da)+2*me*(p>4?p-8+4:0),3*me,2*me),k.setRenderTarget(o),k.render($,T0)}}function lg(T){return T!==void 0&&T.type===Wa&&(T.encoding===ps||T.encoding===yl||T.encoding===Ou)}function Wv(){const T=[],n=[],o=[];let h=8;for(let p=0;p<Uv;p++){const w=Math.pow(2,h);n.push(w);let S=1/w;p>4?S=M0[p-8+4-1]:p==0&&(S=0),o.push(S);const I=1/(w-1),k=-I/2,R=1+I/2,$=[k,k,R,k,R,R,k,k,R,R,k,R],j=6,H=6,Y=3,ee=2,te=1,ae=new Float32Array(Y*H*j),ne=new Float32Array(ee*H*j),me=new Float32Array(te*H*j);for(let ve=0;ve<j;ve++){const Ne=ve%3*2/3-1,Oe=ve>2?0:-1,tt=[Ne,Oe,0,Ne+2/3,Oe,0,Ne+2/3,Oe+1,0,Ne,Oe,0,Ne+2/3,Oe+1,0,Ne,Oe+1,0];ae.set(tt,Y*H*ve),ne.set($,ee*H*ve);const it=[ve,ve,ve,ve,ve,ve];me.set(it,te*H*ve)}const _e=new On;_e.setAttribute("position",new Mr(ae,Y)),_e.setAttribute("uv",new Mr(ne,ee)),_e.setAttribute("faceIndex",new Mr(me,te)),T.push(_e),h>4&&h--}return{_lodPlanes:T,_sizeLods:n,_sigmas:o}}function Gv(T){const n=new Ea(3*da,3*da,T);return n.texture.mapping=_t,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function ug(T,n,o,h,p){T.viewport.set(n,o,h,p),T.scissor.set(n,o,h,p)}function Hv(){const T=new Qt(1,1);return new ka({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:T},inputEncoding:{value:Sl[ps]},outputEncoding:{value:Sl[ps]}},vertexShader:`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`,fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:Me,depthTest:!1,depthWrite:!1})}function jv(){return new ka({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:Sl[ps]},outputEncoding:{value:Sl[ps]}},vertexShader:`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`,fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:Me,depthTest:!1,depthWrite:!1})}function l_(T){let n=new WeakMap,o=null;function h(p){const w=p.target;w.removeEventListener("dispose",h);const S=n.get(w);S!==void 0&&(n.delete(w),S.dispose())}return{get:function(p){if(p&&p.isTexture&&p.isRenderTargetTexture===!1){const w=p.mapping,S=w===It||w===Le,I=w===at||w===he;if(S||I){if(n.has(p))return n.get(p).texture;{const k=p.image;if(S&&k&&k.height>0||I&&k&&function(R){let $=0;for(let j=0;j<6;j++)R[j]!==void 0&&$++;return $===6}(k)){const R=T.getRenderTarget();o===null&&(o=new pa(T));const $=S?o.fromEquirectangular(p):o.fromCubemap(p);return n.set(p,$),T.setRenderTarget(R),p.addEventListener("dispose",h),$.texture}return null}}}return p},dispose:function(){n=new WeakMap,o!==null&&(o.dispose(),o=null)}}}function A0(T){const n={};function o(h){if(n[h]!==void 0)return n[h];let p;switch(h){case"WEBGL_depth_texture":p=T.getExtension("WEBGL_depth_texture")||T.getExtension("MOZ_WEBGL_depth_texture")||T.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":p=T.getExtension("EXT_texture_filter_anisotropic")||T.getExtension("MOZ_EXT_texture_filter_anisotropic")||T.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":p=T.getExtension("WEBGL_compressed_texture_s3tc")||T.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||T.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":p=T.getExtension("WEBGL_compressed_texture_pvrtc")||T.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:p=T.getExtension(h)}return n[h]=p,p}return{has:function(h){return o(h)!==null},init:function(h){h.isWebGL2?o("EXT_color_buffer_float"):(o("WEBGL_depth_texture"),o("OES_texture_float"),o("OES_texture_half_float"),o("OES_texture_half_float_linear"),o("OES_standard_derivatives"),o("OES_element_index_uint"),o("OES_vertex_array_object"),o("ANGLE_instanced_arrays")),o("OES_texture_float_linear"),o("EXT_color_buffer_half_float")},get:function(h){const p=o(h);return p===null&&console.warn("THREE.WebGLRenderer: "+h+" extension not supported."),p}}}function Er(T,n,o,h){const p={},w=new WeakMap;function S(k){const R=k.target;R.index!==null&&n.remove(R.index);for(const j in R.attributes)n.remove(R.attributes[j]);R.removeEventListener("dispose",S),delete p[R.id];const $=w.get(R);$&&(n.remove($),w.delete(R)),h.releaseStatesOfGeometry(R),R.isInstancedBufferGeometry===!0&&delete R._maxInstanceCount,o.memory.geometries--}function I(k){const R=[],$=k.index,j=k.attributes.position;let H=0;if($!==null){const te=$.array;H=$.version;for(let ae=0,ne=te.length;ae<ne;ae+=3){const me=te[ae+0],_e=te[ae+1],ve=te[ae+2];R.push(me,_e,_e,ve,ve,me)}}else{const te=j.array;H=j.version;for(let ae=0,ne=te.length/3-1;ae<ne;ae+=3){const me=ae+0,_e=ae+1,ve=ae+2;R.push(me,_e,_e,ve,ve,me)}}const Y=new(ah(R)>65535?sh:Gu)(R,1);Y.version=H;const ee=w.get(k);ee&&n.remove(ee),w.set(k,Y)}return{get:function(k,R){return p[R.id]===!0||(R.addEventListener("dispose",S),p[R.id]=!0,o.memory.geometries++),R},update:function(k){const R=k.attributes;for(const j in R)n.update(R[j],34962);const $=k.morphAttributes;for(const j in $){const H=$[j];for(let Y=0,ee=H.length;Y<ee;Y++)n.update(H[Y],34962)}},getWireframeAttribute:function(k){const R=w.get(k);if(R){const $=k.index;$!==null&&R.version<$.version&&I(k)}else I(k);return w.get(k)}}}function un(T,n,o,h){const p=h.isWebGL2;let w,S,I;this.setMode=function(k){w=k},this.setIndex=function(k){S=k.type,I=k.bytesPerElement},this.render=function(k,R){T.drawElements(w,R,S,k*I),o.update(R,w,1)},this.renderInstances=function(k,R,$){if($===0)return;let j,H;if(p)j=T,H="drawElementsInstanced";else if(j=n.get("ANGLE_instanced_arrays"),H="drawElementsInstancedANGLE",j===null)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");j[H](w,R,S,k*I,$),o.update(R,w,$)}}function iu(T){const n={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:n,programs:null,autoReset:!0,reset:function(){n.frame++,n.calls=0,n.triangles=0,n.points=0,n.lines=0},update:function(o,h,p){switch(n.calls++,h){case 4:n.triangles+=p*(o/3);break;case 1:n.lines+=p*(o/2);break;case 3:n.lines+=p*(o-1);break;case 2:n.lines+=p*o;break;case 0:n.points+=p*o;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",h)}}}}function qv(T,n){return T[0]-n[0]}function Xv(T,n){return Math.abs(n[1])-Math.abs(T[1])}function fh(T){const n={},o=new Float32Array(8),h=[];for(let p=0;p<8;p++)h[p]=[p,0];return{update:function(p,w,S,I){const k=p.morphTargetInfluences,R=k===void 0?0:k.length;let $=n[w.id];if($===void 0||$.length!==R){$=[];for(let te=0;te<R;te++)$[te]=[te,0];n[w.id]=$}for(let te=0;te<R;te++){const ae=$[te];ae[0]=te,ae[1]=k[te]}$.sort(Xv);for(let te=0;te<8;te++)te<R&&$[te][1]?(h[te][0]=$[te][0],h[te][1]=$[te][1]):(h[te][0]=Number.MAX_SAFE_INTEGER,h[te][1]=0);h.sort(qv);const j=w.morphAttributes.position,H=w.morphAttributes.normal;let Y=0;for(let te=0;te<8;te++){const ae=h[te],ne=ae[0],me=ae[1];ne!==Number.MAX_SAFE_INTEGER&&me?(j&&w.getAttribute("morphTarget"+te)!==j[ne]&&w.setAttribute("morphTarget"+te,j[ne]),H&&w.getAttribute("morphNormal"+te)!==H[ne]&&w.setAttribute("morphNormal"+te,H[ne]),o[te]=me,Y+=me):(j&&w.hasAttribute("morphTarget"+te)===!0&&w.deleteAttribute("morphTarget"+te),H&&w.hasAttribute("morphNormal"+te)===!0&&w.deleteAttribute("morphNormal"+te),o[te]=0)}const ee=w.morphTargetsRelative?1:1-Y;I.getUniforms().setValue(T,"morphTargetBaseInfluence",ee),I.getUniforms().setValue(T,"morphTargetInfluences",o)}}}function u_(T,n,o,h){let p=new WeakMap;function w(S){const I=S.target;I.removeEventListener("dispose",w),o.remove(I.instanceMatrix),I.instanceColor!==null&&o.remove(I.instanceColor)}return{update:function(S){const I=h.render.frame,k=S.geometry,R=n.get(S,k);return p.get(R)!==I&&(n.update(R),p.set(R,I)),S.isInstancedMesh&&(S.hasEventListener("dispose",w)===!1&&S.addEventListener("dispose",w),o.update(S.instanceMatrix,34962),S.instanceColor!==null&&o.update(S.instanceColor,34962)),R},dispose:function(){p=new WeakMap}}}class I0 extends Ri{constructor(n=null,o=1,h=1,p=1){super(null),this.image={data:n,width:o,height:h,depth:p},this.magFilter=Sr,this.minFilter=Sr,this.wrapR=qn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}I0.prototype.isDataTexture2DArray=!0;class cg extends Ri{constructor(n=null,o=1,h=1,p=1){super(null),this.image={data:n,width:o,height:h,depth:p},this.magFilter=Sr,this.minFilter=Sr,this.wrapR=qn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}cg.prototype.isDataTexture3D=!0;const C0=new Ri,Yv=new I0,Kv=new cg,hg=new Xd,dg=[],k0=[],pg=new Float32Array(16),Gf=new Float32Array(9),fg=new Float32Array(4);function Zd(T,n,o){const h=T[0];if(h<=0||h>0)return T;const p=n*o;let w=dg[p];if(w===void 0&&(w=new Float32Array(p),dg[p]=w),n!==0){h.toArray(w,0);for(let S=1,I=0;S!==n;++S)I+=o,T[S].toArray(w,I)}return w}function fa(T,n){if(T.length!==n.length)return!1;for(let o=0,h=T.length;o<h;o++)if(T[o]!==n[o])return!1;return!0}function Ys(T,n){for(let o=0,h=n.length;o<h;o++)T[o]=n[o]}function wr(T,n){let o=k0[n];o===void 0&&(o=new Int32Array(n),k0[n]=o);for(let h=0;h!==n;++h)o[h]=T.allocateTextureUnit();return o}function Jd(T,n){const o=this.cache;o[0]!==n&&(T.uniform1f(this.addr,n),o[0]=n)}function Pr(T,n){const o=this.cache;if(n.x!==void 0)o[0]===n.x&&o[1]===n.y||(T.uniform2f(this.addr,n.x,n.y),o[0]=n.x,o[1]=n.y);else{if(fa(o,n))return;T.uniform2fv(this.addr,n),Ys(o,n)}}function c_(T,n){const o=this.cache;if(n.x!==void 0)o[0]===n.x&&o[1]===n.y&&o[2]===n.z||(T.uniform3f(this.addr,n.x,n.y,n.z),o[0]=n.x,o[1]=n.y,o[2]=n.z);else if(n.r!==void 0)o[0]===n.r&&o[1]===n.g&&o[2]===n.b||(T.uniform3f(this.addr,n.r,n.g,n.b),o[0]=n.r,o[1]=n.g,o[2]=n.b);else{if(fa(o,n))return;T.uniform3fv(this.addr,n),Ys(o,n)}}function Zv(T,n){const o=this.cache;if(n.x!==void 0)o[0]===n.x&&o[1]===n.y&&o[2]===n.z&&o[3]===n.w||(T.uniform4f(this.addr,n.x,n.y,n.z,n.w),o[0]=n.x,o[1]=n.y,o[2]=n.z,o[3]=n.w);else{if(fa(o,n))return;T.uniform4fv(this.addr,n),Ys(o,n)}}function Qd(T,n){const o=this.cache,h=n.elements;if(h===void 0){if(fa(o,n))return;T.uniformMatrix2fv(this.addr,!1,n),Ys(o,n)}else{if(fa(o,h))return;fg.set(h),T.uniformMatrix2fv(this.addr,!1,fg),Ys(o,h)}}function Jv(T,n){const o=this.cache,h=n.elements;if(h===void 0){if(fa(o,n))return;T.uniformMatrix3fv(this.addr,!1,n),Ys(o,n)}else{if(fa(o,h))return;Gf.set(h),T.uniformMatrix3fv(this.addr,!1,Gf),Ys(o,h)}}function h_(T,n){const o=this.cache,h=n.elements;if(h===void 0){if(fa(o,n))return;T.uniformMatrix4fv(this.addr,!1,n),Ys(o,n)}else{if(fa(o,h))return;pg.set(h),T.uniformMatrix4fv(this.addr,!1,pg),Ys(o,h)}}function d_(T,n){const o=this.cache;o[0]!==n&&(T.uniform1i(this.addr,n),o[0]=n)}function Qv(T,n){const o=this.cache;fa(o,n)||(T.uniform2iv(this.addr,n),Ys(o,n))}function mg(T,n){const o=this.cache;fa(o,n)||(T.uniform3iv(this.addr,n),Ys(o,n))}function N0(T,n){const o=this.cache;fa(o,n)||(T.uniform4iv(this.addr,n),Ys(o,n))}function R0(T,n){const o=this.cache;o[0]!==n&&(T.uniform1ui(this.addr,n),o[0]=n)}function ep(T,n){const o=this.cache;fa(o,n)||(T.uniform2uiv(this.addr,n),Ys(o,n))}function L0(T,n){const o=this.cache;fa(o,n)||(T.uniform3uiv(this.addr,n),Ys(o,n))}function gg(T,n){const o=this.cache;fa(o,n)||(T.uniform4uiv(this.addr,n),Ys(o,n))}function eb(T,n,o){const h=this.cache,p=o.allocateTextureUnit();h[0]!==p&&(T.uniform1i(this.addr,p),h[0]=p),o.safeSetTexture2D(n||C0,p)}function tb(T,n,o){const h=this.cache,p=o.allocateTextureUnit();h[0]!==p&&(T.uniform1i(this.addr,p),h[0]=p),o.setTexture3D(n||Kv,p)}function nb(T,n,o){const h=this.cache,p=o.allocateTextureUnit();h[0]!==p&&(T.uniform1i(this.addr,p),h[0]=p),o.safeSetTextureCube(n||hg,p)}function rb(T,n,o){const h=this.cache,p=o.allocateTextureUnit();h[0]!==p&&(T.uniform1i(this.addr,p),h[0]=p),o.setTexture2DArray(n||Yv,p)}function ib(T,n){T.uniform1fv(this.addr,n)}function sb(T,n){const o=Zd(n,this.size,2);T.uniform2fv(this.addr,o)}function ab(T,n){const o=Zd(n,this.size,3);T.uniform3fv(this.addr,o)}function ob(T,n){const o=Zd(n,this.size,4);T.uniform4fv(this.addr,o)}function lb(T,n){const o=Zd(n,this.size,4);T.uniformMatrix2fv(this.addr,!1,o)}function ub(T,n){const o=Zd(n,this.size,9);T.uniformMatrix3fv(this.addr,!1,o)}function D0(T,n){const o=Zd(n,this.size,16);T.uniformMatrix4fv(this.addr,!1,o)}function P0(T,n){T.uniform1iv(this.addr,n)}function yg(T,n){T.uniform2iv(this.addr,n)}function F0(T,n){T.uniform3iv(this.addr,n)}function mh(T,n){T.uniform4iv(this.addr,n)}function Ja(T,n){T.uniform1uiv(this.addr,n)}function Ht(T,n){T.uniform2uiv(this.addr,n)}function cb(T,n){T.uniform3uiv(this.addr,n)}function p_(T,n){T.uniform4uiv(this.addr,n)}function O0(T,n,o){const h=n.length,p=wr(o,h);T.uniform1iv(this.addr,p);for(let w=0;w!==h;++w)o.safeSetTexture2D(n[w]||C0,p[w])}function z0(T,n,o){const h=n.length,p=wr(o,h);T.uniform1iv(this.addr,p);for(let w=0;w!==h;++w)o.safeSetTextureCube(n[w]||hg,p[w])}function f_(T,n,o){this.id=T,this.addr=o,this.cache=[],this.setValue=function(h){switch(h){case 5126:return Jd;case 35664:return Pr;case 35665:return c_;case 35666:return Zv;case 35674:return Qd;case 35675:return Jv;case 35676:return h_;case 5124:case 35670:return d_;case 35667:case 35671:return Qv;case 35668:case 35672:return mg;case 35669:case 35673:return N0;case 5125:return R0;case 36294:return ep;case 36295:return L0;case 36296:return gg;case 35678:case 36198:case 36298:case 36306:case 35682:return eb;case 35679:case 36299:case 36307:return tb;case 35680:case 36300:case 36308:case 36293:return nb;case 36289:case 36303:case 36311:case 36292:return rb}}(n.type)}function hb(T,n,o){this.id=T,this.addr=o,this.cache=[],this.size=n.size,this.setValue=function(h){switch(h){case 5126:return ib;case 35664:return sb;case 35665:return ab;case 35666:return ob;case 35674:return lb;case 35675:return ub;case 35676:return D0;case 5124:case 35670:return P0;case 35667:case 35671:return yg;case 35668:case 35672:return F0;case 35669:case 35673:return mh;case 5125:return Ja;case 36294:return Ht;case 36295:return cb;case 36296:return p_;case 35678:case 36198:case 36298:case 36306:case 35682:return O0;case 35680:case 36300:case 36308:case 36293:return z0}}(n.type)}function db(T){this.id=T,this.seq=[],this.map={}}hb.prototype.updateCache=function(T){const n=this.cache;T instanceof Float32Array&&n.length!==T.length&&(this.cache=new Float32Array(T.length)),Ys(n,T)},db.prototype.setValue=function(T,n,o){const h=this.seq;for(let p=0,w=h.length;p!==w;++p){const S=h[p];S.setValue(T,n[S.id],o)}};const Hf=/(\w+)(\])?(\[|\.)?/g;function pb(T,n){T.seq.push(n),T.map[n.id]=n}function m_(T,n,o){const h=T.name,p=h.length;for(Hf.lastIndex=0;;){const w=Hf.exec(h),S=Hf.lastIndex;let I=w[1];const k=w[2]==="]",R=w[3];if(k&&(I|=0),R===void 0||R==="["&&S+2===p){pb(o,R===void 0?new f_(I,T,n):new hb(I,T,n));break}{let $=o.map[I];$===void 0&&($=new db(I),pb(o,$)),o=$}}}function su(T,n){this.seq=[],this.map={};const o=T.getProgramParameter(n,35718);for(let h=0;h<o;++h){const p=T.getActiveUniform(n,h);m_(p,T.getUniformLocation(n,p.name),this)}}function B0(T,n,o){const h=T.createShader(n);return T.shaderSource(h,o),T.compileShader(h),h}su.prototype.setValue=function(T,n,o,h){const p=this.map[n];p!==void 0&&p.setValue(T,o,h)},su.prototype.setOptional=function(T,n,o){const h=n[o];h!==void 0&&this.setValue(T,o,h)},su.upload=function(T,n,o,h){for(let p=0,w=n.length;p!==w;++p){const S=n[p],I=o[S.id];I.needsUpdate!==!1&&S.setValue(T,I.value,h)}},su.seqWithValue=function(T,n){const o=[];for(let h=0,p=T.length;h!==p;++h){const w=T[h];w.id in n&&o.push(w)}return o};let g_=0;function fb(T){switch(T){case ps:return["Linear","( value )"];case yl:return["sRGB","( value )"];case Vl:return["RGBE","( value )"];case yd:return["RGBM","( value, 7.0 )"];case xd:return["RGBM","( value, 16.0 )"];case zu:return["RGBD","( value, 256.0 )"];case Ou:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case mf:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",T),["Linear","( value )"]}}function mb(T,n,o){const h=T.getShaderParameter(n,35713),p=T.getShaderInfoLog(n).trim();return h&&p===""?"":o.toUpperCase()+`

`+p+`

`+function(w){const S=w.split(`
`);for(let I=0;I<S.length;I++)S[I]=I+1+": "+S[I];return S.join(`
`)}(T.getShaderSource(n))}function tp(T,n){const o=fb(n);return"vec4 "+T+"( vec4 value ) { return "+o[0]+"ToLinear"+o[1]+"; }"}function y_(T,n){const o=fb(n);return"vec4 "+T+"( vec4 value ) { return LinearTo"+o[0]+o[1]+"; }"}function Ju(T,n){let o;switch(n){case se:o="Linear";break;case we:o="Reinhard";break;case Fe:o="OptimizedCineon";break;case Q:o="ACESFilmic";break;case Ze:o="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",n),o="Linear"}return"vec3 "+T+"( vec3 color ) { return "+o+"ToneMapping( color ); }"}function Qu(T){return T!==""}function gb(T,n){return T.replace(/NUM_DIR_LIGHTS/g,n.numDirLights).replace(/NUM_SPOT_LIGHTS/g,n.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,n.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,n.numPointLights).replace(/NUM_HEMI_LIGHTS/g,n.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,n.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,n.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,n.numPointLightShadows)}function st(T,n){return T.replace(/NUM_CLIPPING_PLANES/g,n.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,n.numClippingPlanes-n.numClipIntersection)}const pr=/^[ \t]*#include +<([\w\d./]+)>/gm;function Qi(T){return T.replace(pr,x_)}function x_(T,n){const o=Tr[n];if(o===void 0)throw new Error("Can not resolve #include <"+n+">");return Qi(o)}const v_=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,b_=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function yb(T){return T.replace(b_,xb).replace(v_,w_)}function w_(T,n,o,h){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),xb(0,n,o,h)}function xb(T,n,o,h){let p="";for(let w=parseInt(n);w<parseInt(o);w++)p+=h.replace(/\[\s*i\s*\]/g,"[ "+w+" ]").replace(/UNROLLED_LOOP_INDEX/g,w);return p}function vb(T){let n="precision "+T.precision+` float;
precision `+T.precision+" int;";return T.precision==="highp"?n+=`
#define HIGH_PRECISION`:T.precision==="mediump"?n+=`
#define MEDIUM_PRECISION`:T.precision==="lowp"&&(n+=`
#define LOW_PRECISION`),n}function $0(T,n,o,h){const p=T.getContext(),w=o.defines;let S=o.vertexShader,I=o.fragmentShader;const k=function(it){let gt="SHADOWMAP_TYPE_BASIC";return it.shadowMapType===G?gt="SHADOWMAP_TYPE_PCF":it.shadowMapType===K?gt="SHADOWMAP_TYPE_PCF_SOFT":it.shadowMapType===J&&(gt="SHADOWMAP_TYPE_VSM"),gt}(o),R=function(it){let gt="ENVMAP_TYPE_CUBE";if(it.envMap)switch(it.envMapMode){case at:case he:gt="ENVMAP_TYPE_CUBE";break;case _t:case Wt:gt="ENVMAP_TYPE_CUBE_UV"}return gt}(o),$=function(it){let gt="ENVMAP_MODE_REFLECTION";if(it.envMap)switch(it.envMapMode){case he:case Wt:gt="ENVMAP_MODE_REFRACTION"}return gt}(o),j=function(it){let gt="ENVMAP_BLENDING_NONE";if(it.envMap)switch(it.combine){case vn:gt="ENVMAP_BLENDING_MULTIPLY";break;case Re:gt="ENVMAP_BLENDING_MIX";break;case Ce:gt="ENVMAP_BLENDING_ADD"}return gt}(o),H=T.gammaFactor>0?T.gammaFactor:1,Y=o.isWebGL2?"":function(it){return[it.extensionDerivatives||it.envMapCubeUV||it.bumpMap||it.tangentSpaceNormalMap||it.clearcoatNormalMap||it.flatShading||it.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(it.extensionFragDepth||it.logarithmicDepthBuffer)&&it.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",it.extensionDrawBuffers&&it.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(it.extensionShaderTextureLOD||it.envMap||it.transmission)&&it.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Qu).join(`
`)}(o),ee=function(it){const gt=[];for(const ut in it){const ct=it[ut];ct!==!1&&gt.push("#define "+ut+" "+ct)}return gt.join(`
`)}(w),te=p.createProgram();let ae,ne,me=o.glslVersion?"#version "+o.glslVersion+`
`:"";o.isRawShaderMaterial?(ae=[ee].filter(Qu).join(`
`),ae.length>0&&(ae+=`
`),ne=[Y,ee].filter(Qu).join(`
`),ne.length>0&&(ne+=`
`)):(ae=[vb(o),"#define SHADER_NAME "+o.shaderName,ee,o.instancing?"#define USE_INSTANCING":"",o.instancingColor?"#define USE_INSTANCING_COLOR":"",o.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+H,"#define MAX_BONES "+o.maxBones,o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp2?"#define FOG_EXP2":"",o.map?"#define USE_MAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+$:"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.normalMap&&o.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",o.normalMap&&o.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",o.clearcoatMap?"#define USE_CLEARCOATMAP":"",o.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",o.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",o.displacementMap&&o.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",o.specularTintMap?"#define USE_SPECULARTINTMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.transmission?"#define USE_TRANSMISSION":"",o.transmissionMap?"#define USE_TRANSMISSIONMAP":"",o.thicknessMap?"#define USE_THICKNESSMAP":"",o.vertexTangents?"#define USE_TANGENT":"",o.vertexColors?"#define USE_COLOR":"",o.vertexAlphas?"#define USE_COLOR_ALPHA":"",o.vertexUvs?"#define USE_UV":"",o.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",o.flatShading?"#define FLAT_SHADED":"",o.skinning?"#define USE_SKINNING":"",o.useVertexTexture?"#define BONE_TEXTURE":"",o.morphTargets?"#define USE_MORPHTARGETS":"",o.morphNormals&&o.flatShading===!1?"#define USE_MORPHNORMALS":"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"",o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+k:"",o.sizeAttenuation?"#define USE_SIZEATTENUATION":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.logarithmicDepthBuffer&&o.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Qu).join(`
`),ne=[Y,vb(o),"#define SHADER_NAME "+o.shaderName,ee,"#define GAMMA_FACTOR "+H,o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp2?"#define FOG_EXP2":"",o.map?"#define USE_MAP":"",o.matcap?"#define USE_MATCAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+R:"",o.envMap?"#define "+$:"",o.envMap?"#define "+j:"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.normalMap&&o.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",o.normalMap&&o.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",o.clearcoat?"#define USE_CLEARCOAT":"",o.clearcoatMap?"#define USE_CLEARCOATMAP":"",o.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",o.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",o.specularTintMap?"#define USE_SPECULARTINTMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.alphaTest?"#define USE_ALPHATEST":"",o.sheenTint?"#define USE_SHEEN":"",o.transmission?"#define USE_TRANSMISSION":"",o.transmissionMap?"#define USE_TRANSMISSIONMAP":"",o.thicknessMap?"#define USE_THICKNESSMAP":"",o.vertexTangents?"#define USE_TANGENT":"",o.vertexColors||o.instancingColor?"#define USE_COLOR":"",o.vertexAlphas?"#define USE_COLOR_ALPHA":"",o.vertexUvs?"#define USE_UV":"",o.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",o.gradientMap?"#define USE_GRADIENTMAP":"",o.flatShading?"#define FLAT_SHADED":"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"",o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+k:"",o.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",o.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.logarithmicDepthBuffer&&o.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(o.extensionShaderTextureLOD||o.envMap)&&o.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",o.toneMapping!==ye?"#define TONE_MAPPING":"",o.toneMapping!==ye?Tr.tonemapping_pars_fragment:"",o.toneMapping!==ye?Ju("toneMapping",o.toneMapping):"",o.dithering?"#define DITHERING":"",o.format===Xt?"#define OPAQUE":"",Tr.encodings_pars_fragment,o.map?tp("mapTexelToLinear",o.mapEncoding):"",o.matcap?tp("matcapTexelToLinear",o.matcapEncoding):"",o.envMap?tp("envMapTexelToLinear",o.envMapEncoding):"",o.emissiveMap?tp("emissiveMapTexelToLinear",o.emissiveMapEncoding):"",o.specularTintMap?tp("specularTintMapTexelToLinear",o.specularTintMapEncoding):"",o.lightMap?tp("lightMapTexelToLinear",o.lightMapEncoding):"",y_("linearToOutputTexel",o.outputEncoding),o.depthPacking?"#define DEPTH_PACKING "+o.depthPacking:"",`
`].filter(Qu).join(`
`)),S=Qi(S),S=gb(S,o),S=st(S,o),I=Qi(I),I=gb(I,o),I=st(I,o),S=yb(S),I=yb(I),o.isWebGL2&&o.isRawShaderMaterial!==!0&&(me=`#version 300 es
`,ae=["#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+ae,ne=["#define varying in",o.glslVersion===Id?"":"out highp vec4 pc_fragColor;",o.glslVersion===Id?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+ne);const _e=me+ne+I,ve=B0(p,35633,me+ae+S),Ne=B0(p,35632,_e);if(p.attachShader(te,ve),p.attachShader(te,Ne),o.index0AttributeName!==void 0?p.bindAttribLocation(te,0,o.index0AttributeName):o.morphTargets===!0&&p.bindAttribLocation(te,0,"position"),p.linkProgram(te),T.debug.checkShaderErrors){const it=p.getProgramInfoLog(te).trim(),gt=p.getShaderInfoLog(ve).trim(),ut=p.getShaderInfoLog(Ne).trim();let ct=!0,an=!0;if(p.getProgramParameter(te,35714)===!1){ct=!1;const Gt=mb(p,ve,"vertex"),Lt=mb(p,Ne,"fragment");console.error("THREE.WebGLProgram: Shader Error "+p.getError()+" - VALIDATE_STATUS "+p.getProgramParameter(te,35715)+`

Program Info Log: `+it+`
`+Gt+`
`+Lt)}else it!==""?console.warn("THREE.WebGLProgram: Program Info Log:",it):gt!==""&&ut!==""||(an=!1);an&&(this.diagnostics={runnable:ct,programLog:it,vertexShader:{log:gt,prefix:ae},fragmentShader:{log:ut,prefix:ne}})}let Oe,tt;return p.deleteShader(ve),p.deleteShader(Ne),this.getUniforms=function(){return Oe===void 0&&(Oe=new su(p,te)),Oe},this.getAttributes=function(){return tt===void 0&&(tt=function(it,gt){const ut={},ct=it.getProgramParameter(gt,35721);for(let an=0;an<ct;an++){const Gt=it.getActiveAttrib(gt,an),Lt=Gt.name;let Yt=1;Gt.type===35674&&(Yt=2),Gt.type===35675&&(Yt=3),Gt.type===35676&&(Yt=4),ut[Lt]={type:Gt.type,location:it.getAttribLocation(gt,Lt),locationSize:Yt}}return ut}(p,te)),tt},this.destroy=function(){h.releaseStatesOfProgram(this),p.deleteProgram(te),this.program=void 0},this.name=o.shaderName,this.id=g_++,this.cacheKey=n,this.usedTimes=1,this.program=te,this.vertexShader=ve,this.fragmentShader=Ne,this}function bb(T,n,o,h,p,w,S){const I=[],k=p.isWebGL2,R=p.logarithmicDepthBuffer,$=p.floatVertexTextures,j=p.maxVertexUniforms,H=p.vertexTextures;let Y=p.precision;const ee={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},te=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoat","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","specularIntensityMap","specularTintMap","specularTintMapEncoding","roughnessMap","metalnessMap","gradientMap","alphaMap","alphaTest","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","format","sheenTint","transmission","transmissionMap","thicknessMap"];function ae(ne){let me;return ne&&ne.isTexture?me=ne.encoding:ne&&ne.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),me=ne.texture.encoding):me=ps,me}return{getParameters:function(ne,me,_e,ve,Ne){const Oe=ve.fog,tt=ne.isMeshStandardMaterial?ve.environment:null,it=(ne.isMeshStandardMaterial?o:n).get(ne.envMap||tt),gt=ee[ne.type],ut=Ne.isSkinnedMesh?function(Tn){const In=Tn.skeleton.bones;if($)return 1024;{const Pn=j,nr=Math.floor((Pn-20)/4),er=Math.min(nr,In.length);return er<In.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+In.length+" bones. This GPU supports "+er+"."),0):er}}(Ne):0;let ct,an;if(ne.precision!==null&&(Y=p.getMaxPrecision(ne.precision),Y!==ne.precision&&console.warn("THREE.WebGLProgram.getParameters:",ne.precision,"not supported, using",Y,"instead.")),gt){const Tn=Za[gt];ct=Tn.vertexShader,an=Tn.fragmentShader}else ct=ne.vertexShader,an=ne.fragmentShader;const Gt=T.getRenderTarget(),Lt=ne.alphaTest>0,Yt=ne.clearcoat>0;return{isWebGL2:k,shaderID:gt,shaderName:ne.type,vertexShader:ct,fragmentShader:an,defines:ne.defines,isRawShaderMaterial:ne.isRawShaderMaterial===!0,glslVersion:ne.glslVersion,precision:Y,instancing:Ne.isInstancedMesh===!0,instancingColor:Ne.isInstancedMesh===!0&&Ne.instanceColor!==null,supportsVertexTextures:H,outputEncoding:Gt!==null?ae(Gt.texture):T.outputEncoding,map:!!ne.map,mapEncoding:ae(ne.map),matcap:!!ne.matcap,matcapEncoding:ae(ne.matcap),envMap:!!it,envMapMode:it&&it.mapping,envMapEncoding:ae(it),envMapCubeUV:!!it&&(it.mapping===_t||it.mapping===Wt),lightMap:!!ne.lightMap,lightMapEncoding:ae(ne.lightMap),aoMap:!!ne.aoMap,emissiveMap:!!ne.emissiveMap,emissiveMapEncoding:ae(ne.emissiveMap),bumpMap:!!ne.bumpMap,normalMap:!!ne.normalMap,objectSpaceNormalMap:ne.normalMapType===gf,tangentSpaceNormalMap:ne.normalMapType===Oo,clearcoat:Yt,clearcoatMap:Yt&&!!ne.clearcoatMap,clearcoatRoughnessMap:Yt&&!!ne.clearcoatRoughnessMap,clearcoatNormalMap:Yt&&!!ne.clearcoatNormalMap,displacementMap:!!ne.displacementMap,roughnessMap:!!ne.roughnessMap,metalnessMap:!!ne.metalnessMap,specularMap:!!ne.specularMap,specularIntensityMap:!!ne.specularIntensityMap,specularTintMap:!!ne.specularTintMap,specularTintMapEncoding:ae(ne.specularTintMap),alphaMap:!!ne.alphaMap,alphaTest:Lt,gradientMap:!!ne.gradientMap,sheenTint:!!ne.sheenTint&&(ne.sheenTint.r>0||ne.sheenTint.g>0||ne.sheenTint.b>0),transmission:ne.transmission>0,transmissionMap:!!ne.transmissionMap,thicknessMap:!!ne.thicknessMap,combine:ne.combine,vertexTangents:!!ne.normalMap&&!!Ne.geometry&&!!Ne.geometry.attributes.tangent,vertexColors:ne.vertexColors,vertexAlphas:ne.vertexColors===!0&&!!Ne.geometry&&!!Ne.geometry.attributes.color&&Ne.geometry.attributes.color.itemSize===4,vertexUvs:!!(ne.map||ne.bumpMap||ne.normalMap||ne.specularMap||ne.alphaMap||ne.emissiveMap||ne.roughnessMap||ne.metalnessMap||ne.clearcoatMap||ne.clearcoatRoughnessMap||ne.clearcoatNormalMap||ne.displacementMap||ne.transmissionMap||ne.thicknessMap||ne.specularIntensityMap||ne.specularTintMap),uvsVertexOnly:!(ne.map||ne.bumpMap||ne.normalMap||ne.specularMap||ne.alphaMap||ne.emissiveMap||ne.roughnessMap||ne.metalnessMap||ne.clearcoatNormalMap||ne.transmission>0||ne.transmissionMap||ne.thicknessMap||ne.specularIntensityMap||ne.specularTintMap||!ne.displacementMap),fog:!!Oe,useFog:ne.fog,fogExp2:Oe&&Oe.isFogExp2,flatShading:!!ne.flatShading,sizeAttenuation:ne.sizeAttenuation,logarithmicDepthBuffer:R,skinning:Ne.isSkinnedMesh===!0&&ut>0,maxBones:ut,useVertexTexture:$,morphTargets:!!Ne.geometry&&!!Ne.geometry.morphAttributes.position,morphNormals:!!Ne.geometry&&!!Ne.geometry.morphAttributes.normal,numDirLights:me.directional.length,numPointLights:me.point.length,numSpotLights:me.spot.length,numRectAreaLights:me.rectArea.length,numHemiLights:me.hemi.length,numDirLightShadows:me.directionalShadowMap.length,numPointLightShadows:me.pointShadowMap.length,numSpotLightShadows:me.spotShadowMap.length,numClippingPlanes:S.numPlanes,numClipIntersection:S.numIntersection,format:ne.format,dithering:ne.dithering,shadowMapEnabled:T.shadowMap.enabled&&_e.length>0,shadowMapType:T.shadowMap.type,toneMapping:ne.toneMapped?T.toneMapping:ye,physicallyCorrectLights:T.physicallyCorrectLights,premultipliedAlpha:ne.premultipliedAlpha,doubleSided:ne.side===le,flipSided:ne.side===Z,depthPacking:ne.depthPacking!==void 0&&ne.depthPacking,index0AttributeName:ne.index0AttributeName,extensionDerivatives:ne.extensions&&ne.extensions.derivatives,extensionFragDepth:ne.extensions&&ne.extensions.fragDepth,extensionDrawBuffers:ne.extensions&&ne.extensions.drawBuffers,extensionShaderTextureLOD:ne.extensions&&ne.extensions.shaderTextureLOD,rendererExtensionFragDepth:k||h.has("EXT_frag_depth"),rendererExtensionDrawBuffers:k||h.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:k||h.has("EXT_shader_texture_lod"),customProgramCacheKey:ne.customProgramCacheKey()}},getProgramCacheKey:function(ne){const me=[];if(ne.shaderID?me.push(ne.shaderID):(me.push(ne.fragmentShader),me.push(ne.vertexShader)),ne.defines!==void 0)for(const _e in ne.defines)me.push(_e),me.push(ne.defines[_e]);if(ne.isRawShaderMaterial===!1){for(let _e=0;_e<te.length;_e++)me.push(ne[te[_e]]);me.push(T.outputEncoding),me.push(T.gammaFactor)}return me.push(ne.customProgramCacheKey),me.join()},getUniforms:function(ne){const me=ee[ne.type];let _e;if(me){const ve=Za[me];_e=nu.clone(ve.uniforms)}else _e=ne.uniforms;return _e},acquireProgram:function(ne,me){let _e;for(let ve=0,Ne=I.length;ve<Ne;ve++){const Oe=I[ve];if(Oe.cacheKey===me){_e=Oe,++_e.usedTimes;break}}return _e===void 0&&(_e=new $0(T,me,ne,w),I.push(_e)),_e},releaseProgram:function(ne){if(--ne.usedTimes==0){const me=I.indexOf(ne);I[me]=I[I.length-1],I.pop(),ne.destroy()}},programs:I}}function __(){let T=new WeakMap;return{get:function(n){let o=T.get(n);return o===void 0&&(o={},T.set(n,o)),o},remove:function(n){T.delete(n)},update:function(n,o,h){T.get(n)[o]=h},dispose:function(){T=new WeakMap}}}function jt(T,n){return T.groupOrder!==n.groupOrder?T.groupOrder-n.groupOrder:T.renderOrder!==n.renderOrder?T.renderOrder-n.renderOrder:T.program!==n.program?T.program.id-n.program.id:T.material.id!==n.material.id?T.material.id-n.material.id:T.z!==n.z?T.z-n.z:T.id-n.id}function jf(T,n){return T.groupOrder!==n.groupOrder?T.groupOrder-n.groupOrder:T.renderOrder!==n.renderOrder?T.renderOrder-n.renderOrder:T.z!==n.z?n.z-T.z:T.id-n.id}function Un(T){const n=[];let o=0;const h=[],p=[],w=[],S={id:-1};function I(k,R,$,j,H,Y){let ee=n[o];const te=T.get($);return ee===void 0?(ee={id:k.id,object:k,geometry:R,material:$,program:te.program||S,groupOrder:j,renderOrder:k.renderOrder,z:H,group:Y},n[o]=ee):(ee.id=k.id,ee.object=k,ee.geometry=R,ee.material=$,ee.program=te.program||S,ee.groupOrder=j,ee.renderOrder=k.renderOrder,ee.z=H,ee.group=Y),o++,ee}return{opaque:h,transmissive:p,transparent:w,init:function(){o=0,h.length=0,p.length=0,w.length=0},push:function(k,R,$,j,H,Y){const ee=I(k,R,$,j,H,Y);$.transmission>0?p.push(ee):$.transparent===!0?w.push(ee):h.push(ee)},unshift:function(k,R,$,j,H,Y){const ee=I(k,R,$,j,H,Y);$.transmission>0?p.unshift(ee):$.transparent===!0?w.unshift(ee):h.unshift(ee)},finish:function(){for(let k=o,R=n.length;k<R;k++){const $=n[k];if($.id===null)break;$.id=null,$.object=null,$.geometry=null,$.material=null,$.program=null,$.group=null}},sort:function(k,R){h.length>1&&h.sort(k||jt),p.length>1&&p.sort(R||jf),w.length>1&&w.sort(R||jf)}}}function qe(T){let n=new WeakMap;return{get:function(o,h){let p;return n.has(o)===!1?(p=new Un(T),n.set(o,[p])):h>=n.get(o).length?(p=new Un(T),n.get(o).push(p)):p=n.get(o)[h],p},dispose:function(){n=new WeakMap}}}function Ts(){const T={};return{get:function(n){if(T[n.id]!==void 0)return T[n.id];let o;switch(n.type){case"DirectionalLight":o={direction:new Te,color:new yn};break;case"SpotLight":o={position:new Te,direction:new Te,color:new yn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":o={position:new Te,color:new yn,distance:0,decay:0};break;case"HemisphereLight":o={direction:new Te,skyColor:new yn,groundColor:new yn};break;case"RectAreaLight":o={color:new yn,position:new Te,halfWidth:new Te,halfHeight:new Te}}return T[n.id]=o,o}}}let ei=0;function Fr(T,n){return(n.castShadow?1:0)-(T.castShadow?1:0)}function S_(T,n){const o=new Ts,h=function(){const k={};return{get:function(R){if(k[R.id]!==void 0)return k[R.id];let $;switch(R.type){case"DirectionalLight":case"SpotLight":$={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Qt};break;case"PointLight":$={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Qt,shadowCameraNear:1,shadowCameraFar:1e3}}return k[R.id]=$,$}}}(),p={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let k=0;k<9;k++)p.probe.push(new Te);const w=new Te,S=new Gn,I=new Gn;return{setup:function(k,R){let $=0,j=0,H=0;for(let tt=0;tt<9;tt++)p.probe[tt].set(0,0,0);let Y=0,ee=0,te=0,ae=0,ne=0,me=0,_e=0,ve=0;k.sort(Fr);const Ne=R!==!0?Math.PI:1;for(let tt=0,it=k.length;tt<it;tt++){const gt=k[tt],ut=gt.color,ct=gt.intensity,an=gt.distance,Gt=gt.shadow&&gt.shadow.map?gt.shadow.map.texture:null;if(gt.isAmbientLight)$+=ut.r*ct*Ne,j+=ut.g*ct*Ne,H+=ut.b*ct*Ne;else if(gt.isLightProbe)for(let Lt=0;Lt<9;Lt++)p.probe[Lt].addScaledVector(gt.sh.coefficients[Lt],ct);else if(gt.isDirectionalLight){const Lt=o.get(gt);if(Lt.color.copy(gt.color).multiplyScalar(gt.intensity*Ne),gt.castShadow){const Yt=gt.shadow,Tn=h.get(gt);Tn.shadowBias=Yt.bias,Tn.shadowNormalBias=Yt.normalBias,Tn.shadowRadius=Yt.radius,Tn.shadowMapSize=Yt.mapSize,p.directionalShadow[Y]=Tn,p.directionalShadowMap[Y]=Gt,p.directionalShadowMatrix[Y]=gt.shadow.matrix,me++}p.directional[Y]=Lt,Y++}else if(gt.isSpotLight){const Lt=o.get(gt);if(Lt.position.setFromMatrixPosition(gt.matrixWorld),Lt.color.copy(ut).multiplyScalar(ct*Ne),Lt.distance=an,Lt.coneCos=Math.cos(gt.angle),Lt.penumbraCos=Math.cos(gt.angle*(1-gt.penumbra)),Lt.decay=gt.decay,gt.castShadow){const Yt=gt.shadow,Tn=h.get(gt);Tn.shadowBias=Yt.bias,Tn.shadowNormalBias=Yt.normalBias,Tn.shadowRadius=Yt.radius,Tn.shadowMapSize=Yt.mapSize,p.spotShadow[te]=Tn,p.spotShadowMap[te]=Gt,p.spotShadowMatrix[te]=gt.shadow.matrix,ve++}p.spot[te]=Lt,te++}else if(gt.isRectAreaLight){const Lt=o.get(gt);Lt.color.copy(ut).multiplyScalar(ct),Lt.halfWidth.set(.5*gt.width,0,0),Lt.halfHeight.set(0,.5*gt.height,0),p.rectArea[ae]=Lt,ae++}else if(gt.isPointLight){const Lt=o.get(gt);if(Lt.color.copy(gt.color).multiplyScalar(gt.intensity*Ne),Lt.distance=gt.distance,Lt.decay=gt.decay,gt.castShadow){const Yt=gt.shadow,Tn=h.get(gt);Tn.shadowBias=Yt.bias,Tn.shadowNormalBias=Yt.normalBias,Tn.shadowRadius=Yt.radius,Tn.shadowMapSize=Yt.mapSize,Tn.shadowCameraNear=Yt.camera.near,Tn.shadowCameraFar=Yt.camera.far,p.pointShadow[ee]=Tn,p.pointShadowMap[ee]=Gt,p.pointShadowMatrix[ee]=gt.shadow.matrix,_e++}p.point[ee]=Lt,ee++}else if(gt.isHemisphereLight){const Lt=o.get(gt);Lt.skyColor.copy(gt.color).multiplyScalar(ct*Ne),Lt.groundColor.copy(gt.groundColor).multiplyScalar(ct*Ne),p.hemi[ne]=Lt,ne++}}ae>0&&(n.isWebGL2||T.has("OES_texture_float_linear")===!0?(p.rectAreaLTC1=_n.LTC_FLOAT_1,p.rectAreaLTC2=_n.LTC_FLOAT_2):T.has("OES_texture_half_float_linear")===!0?(p.rectAreaLTC1=_n.LTC_HALF_1,p.rectAreaLTC2=_n.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),p.ambient[0]=$,p.ambient[1]=j,p.ambient[2]=H;const Oe=p.hash;Oe.directionalLength===Y&&Oe.pointLength===ee&&Oe.spotLength===te&&Oe.rectAreaLength===ae&&Oe.hemiLength===ne&&Oe.numDirectionalShadows===me&&Oe.numPointShadows===_e&&Oe.numSpotShadows===ve||(p.directional.length=Y,p.spot.length=te,p.rectArea.length=ae,p.point.length=ee,p.hemi.length=ne,p.directionalShadow.length=me,p.directionalShadowMap.length=me,p.pointShadow.length=_e,p.pointShadowMap.length=_e,p.spotShadow.length=ve,p.spotShadowMap.length=ve,p.directionalShadowMatrix.length=me,p.pointShadowMatrix.length=_e,p.spotShadowMatrix.length=ve,Oe.directionalLength=Y,Oe.pointLength=ee,Oe.spotLength=te,Oe.rectAreaLength=ae,Oe.hemiLength=ne,Oe.numDirectionalShadows=me,Oe.numPointShadows=_e,Oe.numSpotShadows=ve,p.version=ei++)},setupView:function(k,R){let $=0,j=0,H=0,Y=0,ee=0;const te=R.matrixWorldInverse;for(let ae=0,ne=k.length;ae<ne;ae++){const me=k[ae];if(me.isDirectionalLight){const _e=p.directional[$];_e.direction.setFromMatrixPosition(me.matrixWorld),w.setFromMatrixPosition(me.target.matrixWorld),_e.direction.sub(w),_e.direction.transformDirection(te),$++}else if(me.isSpotLight){const _e=p.spot[H];_e.position.setFromMatrixPosition(me.matrixWorld),_e.position.applyMatrix4(te),_e.direction.setFromMatrixPosition(me.matrixWorld),w.setFromMatrixPosition(me.target.matrixWorld),_e.direction.sub(w),_e.direction.transformDirection(te),H++}else if(me.isRectAreaLight){const _e=p.rectArea[Y];_e.position.setFromMatrixPosition(me.matrixWorld),_e.position.applyMatrix4(te),I.identity(),S.copy(me.matrixWorld),S.premultiply(te),I.extractRotation(S),_e.halfWidth.set(.5*me.width,0,0),_e.halfHeight.set(0,.5*me.height,0),_e.halfWidth.applyMatrix4(I),_e.halfHeight.applyMatrix4(I),Y++}else if(me.isPointLight){const _e=p.point[j];_e.position.setFromMatrixPosition(me.matrixWorld),_e.position.applyMatrix4(te),j++}else if(me.isHemisphereLight){const _e=p.hemi[ee];_e.direction.setFromMatrixPosition(me.matrixWorld),_e.direction.transformDirection(te),_e.direction.normalize(),ee++}}},state:p}}function wb(T,n){const o=new S_(T,n),h=[],p=[];return{init:function(){h.length=0,p.length=0},state:{lightsArray:h,shadowsArray:p,lights:o},setupLights:function(w){o.setup(h,w)},setupLightsView:function(w){o.setupView(h,w)},pushLight:function(w){h.push(w)},pushShadow:function(w){p.push(w)}}}function M_(T,n){let o=new WeakMap;return{get:function(h,p=0){let w;return o.has(h)===!1?(w=new wb(T,n),o.set(h,[w])):p>=o.get(h).length?(w=new wb(T,n),o.get(h).push(w)):w=o.get(h)[p],w},dispose:function(){o=new WeakMap}}}class xg extends fr{constructor(n){super(),this.type="MeshDepthMaterial",this.depthPacking=jc,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(n)}copy(n){return super.copy(n),this.depthPacking=n.depthPacking,this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this}}xg.prototype.isMeshDepthMaterial=!0;class qf extends fr{constructor(n){super(),this.type="MeshDistanceMaterial",this.referencePosition=new Te,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(n)}copy(n){return super.copy(n),this.referencePosition.copy(n.referencePosition),this.nearDistance=n.nearDistance,this.farDistance=n.farDistance,this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this}}function Zo(T,n,o){let h=new $f;const p=new Qt,w=new Qt,S=new Xr,I=new xg({depthPacking:vd}),k=new qf,R={},$=o.maxTextureSize,j={0:Z,1:V,2:le},H=new qs({uniforms:{shadow_pass:{value:null},resolution:{value:new Qt},radius:{value:4},samples:{value:8}},vertexShader:`void main() {
	gl_Position = vec4( position, 1.0 );
}`,fragmentShader:`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
uniform float samples;
#include <packing>
void main() {
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`}),Y=H.clone();Y.defines.HORIZONTAL_PASS=1;const ee=new On;ee.setAttribute("position",new Mr(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const te=new Ji(ee,H),ae=this;function ne(ve,Ne){const Oe=n.update(te);H.uniforms.shadow_pass.value=ve.map.texture,H.uniforms.resolution.value=ve.mapSize,H.uniforms.radius.value=ve.radius,H.uniforms.samples.value=ve.blurSamples,T.setRenderTarget(ve.mapPass),T.clear(),T.renderBufferDirect(Ne,null,Oe,H,te,null),Y.uniforms.shadow_pass.value=ve.mapPass.texture,Y.uniforms.resolution.value=ve.mapSize,Y.uniforms.radius.value=ve.radius,Y.uniforms.samples.value=ve.blurSamples,T.setRenderTarget(ve.map),T.clear(),T.renderBufferDirect(Ne,null,Oe,Y,te,null)}function me(ve,Ne,Oe,tt,it,gt,ut){let ct=null;const an=tt.isPointLight===!0?ve.customDistanceMaterial:ve.customDepthMaterial;if(ct=an!==void 0?an:tt.isPointLight===!0?k:I,T.localClippingEnabled&&Oe.clipShadows===!0&&Oe.clippingPlanes.length!==0||Oe.displacementMap&&Oe.displacementScale!==0||Oe.alphaMap&&Oe.alphaTest>0){const Gt=ct.uuid,Lt=Oe.uuid;let Yt=R[Gt];Yt===void 0&&(Yt={},R[Gt]=Yt);let Tn=Yt[Lt];Tn===void 0&&(Tn=ct.clone(),Yt[Lt]=Tn),ct=Tn}return ct.visible=Oe.visible,ct.wireframe=Oe.wireframe,ct.side=ut===J?Oe.shadowSide!==null?Oe.shadowSide:Oe.side:Oe.shadowSide!==null?Oe.shadowSide:j[Oe.side],ct.alphaMap=Oe.alphaMap,ct.alphaTest=Oe.alphaTest,ct.clipShadows=Oe.clipShadows,ct.clippingPlanes=Oe.clippingPlanes,ct.clipIntersection=Oe.clipIntersection,ct.displacementMap=Oe.displacementMap,ct.displacementScale=Oe.displacementScale,ct.displacementBias=Oe.displacementBias,ct.wireframeLinewidth=Oe.wireframeLinewidth,ct.linewidth=Oe.linewidth,tt.isPointLight===!0&&ct.isMeshDistanceMaterial===!0&&(ct.referencePosition.setFromMatrixPosition(tt.matrixWorld),ct.nearDistance=it,ct.farDistance=gt),ct}function _e(ve,Ne,Oe,tt,it){if(ve.visible===!1)return;if(ve.layers.test(Ne.layers)&&(ve.isMesh||ve.isLine||ve.isPoints)&&(ve.castShadow||ve.receiveShadow&&it===J)&&(!ve.frustumCulled||h.intersectsObject(ve))){ve.modelViewMatrix.multiplyMatrices(Oe.matrixWorldInverse,ve.matrixWorld);const ut=n.update(ve),ct=ve.material;if(Array.isArray(ct)){const an=ut.groups;for(let Gt=0,Lt=an.length;Gt<Lt;Gt++){const Yt=an[Gt],Tn=ct[Yt.materialIndex];if(Tn&&Tn.visible){const In=me(ve,0,Tn,tt,Oe.near,Oe.far,it);T.renderBufferDirect(Oe,null,ut,In,ve,Yt)}}}else if(ct.visible){const an=me(ve,0,ct,tt,Oe.near,Oe.far,it);T.renderBufferDirect(Oe,null,ut,an,ve,null)}}const gt=ve.children;for(let ut=0,ct=gt.length;ut<ct;ut++)_e(gt[ut],Ne,Oe,tt,it)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=G,this.render=function(ve,Ne,Oe){if(ae.enabled===!1||ae.autoUpdate===!1&&ae.needsUpdate===!1||ve.length===0)return;const tt=T.getRenderTarget(),it=T.getActiveCubeFace(),gt=T.getActiveMipmapLevel(),ut=T.state;ut.setBlending(Me),ut.buffers.color.setClear(1,1,1,1),ut.buffers.depth.setTest(!0),ut.setScissorTest(!1);for(let ct=0,an=ve.length;ct<an;ct++){const Gt=ve[ct],Lt=Gt.shadow;if(Lt===void 0){console.warn("THREE.WebGLShadowMap:",Gt,"has no shadow.");continue}if(Lt.autoUpdate===!1&&Lt.needsUpdate===!1)continue;p.copy(Lt.mapSize);const Yt=Lt.getFrameExtents();if(p.multiply(Yt),w.copy(Lt.mapSize),(p.x>$||p.y>$)&&(p.x>$&&(w.x=Math.floor($/Yt.x),p.x=w.x*Yt.x,Lt.mapSize.x=w.x),p.y>$&&(w.y=Math.floor($/Yt.y),p.y=w.y*Yt.y,Lt.mapSize.y=w.y)),Lt.map===null&&!Lt.isPointLightShadow&&this.type===J){const In={minFilter:Or,magFilter:Or,format:Xn};Lt.map=new Ea(p.x,p.y,In),Lt.map.texture.name=Gt.name+".shadowMap",Lt.mapPass=new Ea(p.x,p.y,In),Lt.camera.updateProjectionMatrix()}if(Lt.map===null){const In={minFilter:Sr,magFilter:Sr,format:Xn};Lt.map=new Ea(p.x,p.y,In),Lt.map.texture.name=Gt.name+".shadowMap",Lt.camera.updateProjectionMatrix()}T.setRenderTarget(Lt.map),T.clear();const Tn=Lt.getViewportCount();for(let In=0;In<Tn;In++){const Pn=Lt.getViewport(In);S.set(w.x*Pn.x,w.y*Pn.y,w.x*Pn.z,w.y*Pn.w),ut.viewport(S),Lt.updateMatrices(Gt,In),h=Lt.getFrustum(),_e(Ne,Oe,Lt.camera,Gt,this.type)}Lt.isPointLightShadow||this.type!==J||ne(Lt,Oe),Lt.needsUpdate=!1}ae.needsUpdate=!1,T.setRenderTarget(tt,it,gt)}}function vg(T,n,o){const h=o.isWebGL2,p=new function(){let Ae=!1;const dt=new Xr;let $t=null;const kt=new Xr(0,0,0,0);return{setMask:function(Nt){$t===Nt||Ae||(T.colorMask(Nt,Nt,Nt,Nt),$t=Nt)},setLocked:function(Nt){Ae=Nt},setClear:function(Nt,bn,fn,Pe,mn){mn===!0&&(Nt*=Pe,bn*=Pe,fn*=Pe),dt.set(Nt,bn,fn,Pe),kt.equals(dt)===!1&&(T.clearColor(Nt,bn,fn,Pe),kt.copy(dt))},reset:function(){Ae=!1,$t=null,kt.set(-1,0,0,0)}}},w=new function(){let Ae=!1,dt=null,$t=null,kt=null;return{setTest:function(Nt){Nt?ke(2929):Ue(2929)},setMask:function(Nt){dt===Nt||Ae||(T.depthMask(Nt),dt=Nt)},setFunc:function(Nt){if($t!==Nt){if(Nt)switch(Nt){case Bn:T.depthFunc(512);break;case wn:T.depthFunc(519);break;case Nn:T.depthFunc(513);break;case $n:T.depthFunc(515);break;case Ft:T.depthFunc(514);break;case Jt:T.depthFunc(518);break;case nn:T.depthFunc(516);break;case Dn:T.depthFunc(517);break;default:T.depthFunc(515)}else T.depthFunc(515);$t=Nt}},setLocked:function(Nt){Ae=Nt},setClear:function(Nt){kt!==Nt&&(T.clearDepth(Nt),kt=Nt)},reset:function(){Ae=!1,dt=null,$t=null,kt=null}}},S=new function(){let Ae=!1,dt=null,$t=null,kt=null,Nt=null,bn=null,fn=null,Pe=null,mn=null;return{setTest:function(Br){Ae||(Br?ke(2960):Ue(2960))},setMask:function(Br){dt===Br||Ae||(T.stencilMask(Br),dt=Br)},setFunc:function(Br,Ii,Rr){$t===Br&&kt===Ii&&Nt===Rr||(T.stencilFunc(Br,Ii,Rr),$t=Br,kt=Ii,Nt=Rr)},setOp:function(Br,Ii,Rr){bn===Br&&fn===Ii&&Pe===Rr||(T.stencilOp(Br,Ii,Rr),bn=Br,fn=Ii,Pe=Rr)},setLocked:function(Br){Ae=Br},setClear:function(Br){mn!==Br&&(T.clearStencil(Br),mn=Br)},reset:function(){Ae=!1,dt=null,$t=null,kt=null,Nt=null,bn=null,fn=null,Pe=null,mn=null}}};let I={},k=null,R={},$=null,j=!1,H=null,Y=null,ee=null,te=null,ae=null,ne=null,me=null,_e=!1,ve=null,Ne=null,Oe=null,tt=null,it=null;const gt=T.getParameter(35661);let ut=!1,ct=0;const an=T.getParameter(7938);an.indexOf("WebGL")!==-1?(ct=parseFloat(/^WebGL (\d)/.exec(an)[1]),ut=ct>=1):an.indexOf("OpenGL ES")!==-1&&(ct=parseFloat(/^OpenGL ES (\d)/.exec(an)[1]),ut=ct>=2);let Gt=null,Lt={};const Yt=T.getParameter(3088),Tn=T.getParameter(2978),In=new Xr().fromArray(Yt),Pn=new Xr().fromArray(Tn);function nr(Ae,dt,$t){const kt=new Uint8Array(4),Nt=T.createTexture();T.bindTexture(Ae,Nt),T.texParameteri(Ae,10241,9728),T.texParameteri(Ae,10240,9728);for(let bn=0;bn<$t;bn++)T.texImage2D(dt+bn,0,6408,1,1,0,6408,5121,kt);return Nt}const er={};function ke(Ae){I[Ae]!==!0&&(T.enable(Ae),I[Ae]=!0)}function Ue(Ae){I[Ae]!==!1&&(T.disable(Ae),I[Ae]=!1)}er[3553]=nr(3553,3553,1),er[34067]=nr(34067,34069,6),p.setClear(0,0,0,1),w.setClear(1),S.setClear(0),ke(2929),w.setFunc($n),Kt(!1),gn(O),ke(2884),Pt(Me);const Dt={[ue]:32774,[Se]:32778,[je]:32779};if(h)Dt[rt]=32775,Dt[et]=32776;else{const Ae=n.get("EXT_blend_minmax");Ae!==null&&(Dt[rt]=Ae.MIN_EXT,Dt[et]=Ae.MAX_EXT)}const zt={[ot]:0,[Et]:1,[tn]:768,[Vt]:770,[zn]:776,[Mn]:774,[Bt]:772,[ln]:769,[En]:771,[St]:775,[sn]:773};function Pt(Ae,dt,$t,kt,Nt,bn,fn,Pe){if(Ae!==Me){if(j===!1&&(ke(3042),j=!0),Ae===xe)Nt=Nt||dt,bn=bn||$t,fn=fn||kt,dt===Y&&Nt===ae||(T.blendEquationSeparate(Dt[dt],Dt[Nt]),Y=dt,ae=Nt),$t===ee&&kt===te&&bn===ne&&fn===me||(T.blendFuncSeparate(zt[$t],zt[kt],zt[bn],zt[fn]),ee=$t,te=kt,ne=bn,me=fn),H=Ae,_e=null;else if(Ae!==H||Pe!==_e){if(Y===ue&&ae===ue||(T.blendEquation(32774),Y=ue,ae=ue),Pe)switch(Ae){case ce:T.blendFuncSeparate(1,771,1,771);break;case We:T.blendFunc(1,1);break;case Ke:T.blendFuncSeparate(0,0,769,771);break;case Ye:T.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",Ae)}else switch(Ae){case ce:T.blendFuncSeparate(770,771,1,771);break;case We:T.blendFunc(770,1);break;case Ke:T.blendFunc(0,769);break;case Ye:T.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",Ae)}ee=null,te=null,ne=null,me=null,H=Ae,_e=Pe}}else j===!0&&(Ue(3042),j=!1)}function Kt(Ae){ve!==Ae&&(Ae?T.frontFace(2304):T.frontFace(2305),ve=Ae)}function gn(Ae){Ae!==D?(ke(2884),Ae!==Ne&&(Ae===O?T.cullFace(1029):Ae===z?T.cullFace(1028):T.cullFace(1032))):Ue(2884),Ne=Ae}function dn(Ae,dt,$t){Ae?(ke(32823),tt===dt&&it===$t||(T.polygonOffset(dt,$t),tt=dt,it=$t)):Ue(32823)}function mt(Ae){Ae===void 0&&(Ae=33984+gt-1),Gt!==Ae&&(T.activeTexture(Ae),Gt=Ae)}return{buffers:{color:p,depth:w,stencil:S},enable:ke,disable:Ue,bindFramebuffer:function(Ae,dt){return dt===null&&k!==null&&(dt=k),R[Ae]!==dt&&(T.bindFramebuffer(Ae,dt),R[Ae]=dt,h&&(Ae===36009&&(R[36160]=dt),Ae===36160&&(R[36009]=dt)),!0)},bindXRFramebuffer:function(Ae){Ae!==k&&(T.bindFramebuffer(36160,Ae),k=Ae)},useProgram:function(Ae){return $!==Ae&&(T.useProgram(Ae),$=Ae,!0)},setBlending:Pt,setMaterial:function(Ae,dt){Ae.side===le?Ue(2884):ke(2884);let $t=Ae.side===Z;dt&&($t=!$t),Kt($t),Ae.blending===ce&&Ae.transparent===!1?Pt(Me):Pt(Ae.blending,Ae.blendEquation,Ae.blendSrc,Ae.blendDst,Ae.blendEquationAlpha,Ae.blendSrcAlpha,Ae.blendDstAlpha,Ae.premultipliedAlpha),w.setFunc(Ae.depthFunc),w.setTest(Ae.depthTest),w.setMask(Ae.depthWrite),p.setMask(Ae.colorWrite);const kt=Ae.stencilWrite;S.setTest(kt),kt&&(S.setMask(Ae.stencilWriteMask),S.setFunc(Ae.stencilFunc,Ae.stencilRef,Ae.stencilFuncMask),S.setOp(Ae.stencilFail,Ae.stencilZFail,Ae.stencilZPass)),dn(Ae.polygonOffset,Ae.polygonOffsetFactor,Ae.polygonOffsetUnits),Ae.alphaToCoverage===!0?ke(32926):Ue(32926)},setFlipSided:Kt,setCullFace:gn,setLineWidth:function(Ae){Ae!==Oe&&(ut&&T.lineWidth(Ae),Oe=Ae)},setPolygonOffset:dn,setScissorTest:function(Ae){Ae?ke(3089):Ue(3089)},activeTexture:mt,bindTexture:function(Ae,dt){Gt===null&&mt();let $t=Lt[Gt];$t===void 0&&($t={type:void 0,texture:void 0},Lt[Gt]=$t),$t.type===Ae&&$t.texture===dt||(T.bindTexture(Ae,dt||er[Ae]),$t.type=Ae,$t.texture=dt)},unbindTexture:function(){const Ae=Lt[Gt];Ae!==void 0&&Ae.type!==void 0&&(T.bindTexture(Ae.type,null),Ae.type=void 0,Ae.texture=void 0)},compressedTexImage2D:function(){try{T.compressedTexImage2D.apply(T,arguments)}catch(Ae){console.error("THREE.WebGLState:",Ae)}},texImage2D:function(){try{T.texImage2D.apply(T,arguments)}catch(Ae){console.error("THREE.WebGLState:",Ae)}},texImage3D:function(){try{T.texImage3D.apply(T,arguments)}catch(Ae){console.error("THREE.WebGLState:",Ae)}},scissor:function(Ae){In.equals(Ae)===!1&&(T.scissor(Ae.x,Ae.y,Ae.z,Ae.w),In.copy(Ae))},viewport:function(Ae){Pn.equals(Ae)===!1&&(T.viewport(Ae.x,Ae.y,Ae.z,Ae.w),Pn.copy(Ae))},reset:function(){T.disable(3042),T.disable(2884),T.disable(2929),T.disable(32823),T.disable(3089),T.disable(2960),T.disable(32926),T.blendEquation(32774),T.blendFunc(1,0),T.blendFuncSeparate(1,0,1,0),T.colorMask(!0,!0,!0,!0),T.clearColor(0,0,0,0),T.depthMask(!0),T.depthFunc(513),T.clearDepth(1),T.stencilMask(4294967295),T.stencilFunc(519,0,4294967295),T.stencilOp(7680,7680,7680),T.clearStencil(0),T.cullFace(1029),T.frontFace(2305),T.polygonOffset(0,0),T.activeTexture(33984),T.bindFramebuffer(36160,null),h===!0&&(T.bindFramebuffer(36009,null),T.bindFramebuffer(36008,null)),T.useProgram(null),T.lineWidth(1),T.scissor(0,0,T.canvas.width,T.canvas.height),T.viewport(0,0,T.canvas.width,T.canvas.height),I={},Gt=null,Lt={},k=null,R={},$=null,j=!1,H=null,Y=null,ee=null,te=null,ae=null,ne=null,me=null,_e=!1,ve=null,Ne=null,Oe=null,tt=null,it=null,In.set(0,0,T.canvas.width,T.canvas.height),Pn.set(0,0,T.canvas.width,T.canvas.height),p.reset(),w.reset(),S.reset()}}}function Yn(T,n,o,h,p,w,S){const I=p.isWebGL2,k=p.maxTextures,R=p.maxCubemapSize,$=p.maxTextureSize,j=p.maxSamples,H=new WeakMap;let Y,ee=!1;try{ee=typeof OffscreenCanvas!="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function te(ke,Ue){return ee?new OffscreenCanvas(ke,Ue):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function ae(ke,Ue,Dt,zt){let Pt=1;if((ke.width>zt||ke.height>zt)&&(Pt=zt/Math.max(ke.width,ke.height)),Pt<1||Ue===!0){if(typeof HTMLImageElement!="undefined"&&ke instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&ke instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&ke instanceof ImageBitmap){const Kt=Ue?Af:Math.floor,gn=Kt(Pt*ke.width),dn=Kt(Pt*ke.height);Y===void 0&&(Y=te(gn,dn));const mt=Dt?te(gn,dn):Y;return mt.width=gn,mt.height=dn,mt.getContext("2d").drawImage(ke,0,0,gn,dn),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+ke.width+"x"+ke.height+") to ("+gn+"x"+dn+")."),mt}return"data"in ke&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+ke.width+"x"+ke.height+")."),ke}return ke}function ne(ke){return Cd(ke.width)&&Cd(ke.height)}function me(ke,Ue){return ke.generateMipmaps&&Ue&&ke.minFilter!==Sr&&ke.minFilter!==Or}function _e(ke,Ue,Dt,zt,Pt=1){T.generateMipmap(ke),h.get(Ue).__maxMipLevel=Math.log2(Math.max(Dt,zt,Pt))}function ve(ke,Ue,Dt){if(I===!1)return Ue;if(ke!==null){if(T[ke]!==void 0)return T[ke];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+ke+"'")}let zt=Ue;return Ue===6403&&(Dt===5126&&(zt=33326),Dt===5131&&(zt=33325),Dt===5121&&(zt=33321)),Ue===6407&&(Dt===5126&&(zt=34837),Dt===5131&&(zt=34843),Dt===5121&&(zt=32849)),Ue===6408&&(Dt===5126&&(zt=34836),Dt===5131&&(zt=34842),Dt===5121&&(zt=32856)),zt!==33325&&zt!==33326&&zt!==34842&&zt!==34836||n.get("EXT_color_buffer_float"),zt}function Ne(ke){return ke===Sr||ke===Kr||ke===Ui?9728:9729}function Oe(ke){const Ue=ke.target;Ue.removeEventListener("dispose",Oe),function(Dt){const zt=h.get(Dt);zt.__webglInit!==void 0&&(T.deleteTexture(zt.__webglTexture),h.remove(Dt))}(Ue),Ue.isVideoTexture&&H.delete(Ue),S.memory.textures--}function tt(ke){const Ue=ke.target;Ue.removeEventListener("dispose",tt),function(Dt){const zt=Dt.texture,Pt=h.get(Dt),Kt=h.get(zt);if(Dt){if(Kt.__webglTexture!==void 0&&(T.deleteTexture(Kt.__webglTexture),S.memory.textures--),Dt.depthTexture&&Dt.depthTexture.dispose(),Dt.isWebGLCubeRenderTarget)for(let gn=0;gn<6;gn++)T.deleteFramebuffer(Pt.__webglFramebuffer[gn]),Pt.__webglDepthbuffer&&T.deleteRenderbuffer(Pt.__webglDepthbuffer[gn]);else T.deleteFramebuffer(Pt.__webglFramebuffer),Pt.__webglDepthbuffer&&T.deleteRenderbuffer(Pt.__webglDepthbuffer),Pt.__webglMultisampledFramebuffer&&T.deleteFramebuffer(Pt.__webglMultisampledFramebuffer),Pt.__webglColorRenderbuffer&&T.deleteRenderbuffer(Pt.__webglColorRenderbuffer),Pt.__webglDepthRenderbuffer&&T.deleteRenderbuffer(Pt.__webglDepthRenderbuffer);if(Dt.isWebGLMultipleRenderTargets)for(let gn=0,dn=zt.length;gn<dn;gn++){const mt=h.get(zt[gn]);mt.__webglTexture&&(T.deleteTexture(mt.__webglTexture),S.memory.textures--),h.remove(zt[gn])}h.remove(zt),h.remove(Dt)}}(Ue)}let it=0;function gt(ke,Ue){const Dt=h.get(ke);if(ke.isVideoTexture&&function(zt){const Pt=S.render.frame;H.get(zt)!==Pt&&(H.set(zt,Pt),zt.update())}(ke),ke.version>0&&Dt.__version!==ke.version){const zt=ke.image;if(zt===void 0)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(zt.complete!==!1)return void Yt(Dt,ke,Ue);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}o.activeTexture(33984+Ue),o.bindTexture(3553,Dt.__webglTexture)}function ut(ke,Ue){const Dt=h.get(ke);ke.version>0&&Dt.__version!==ke.version?function(zt,Pt,Kt){if(Pt.image.length!==6)return;Lt(zt,Pt),o.activeTexture(33984+Kt),o.bindTexture(34067,zt.__webglTexture),T.pixelStorei(37440,Pt.flipY),T.pixelStorei(37441,Pt.premultiplyAlpha),T.pixelStorei(3317,Pt.unpackAlignment),T.pixelStorei(37443,0);const gn=Pt&&(Pt.isCompressedTexture||Pt.image[0].isCompressedTexture),dn=Pt.image[0]&&Pt.image[0].isDataTexture,mt=[];for(let fn=0;fn<6;fn++)mt[fn]=gn||dn?dn?Pt.image[fn].image:Pt.image[fn]:ae(Pt.image[fn],!1,!0,R);const Ae=mt[0],dt=ne(Ae)||I,$t=w.convert(Pt.format),kt=w.convert(Pt.type),Nt=ve(Pt.internalFormat,$t,kt);let bn;if(Gt(34067,Pt,dt),gn){for(let fn=0;fn<6;fn++){bn=mt[fn].mipmaps;for(let Pe=0;Pe<bn.length;Pe++){const mn=bn[Pe];Pt.format!==Xn&&Pt.format!==Xt?$t!==null?o.compressedTexImage2D(34069+fn,Pe,Nt,mn.width,mn.height,0,mn.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):o.texImage2D(34069+fn,Pe,Nt,mn.width,mn.height,0,$t,kt,mn.data)}}zt.__maxMipLevel=bn.length-1}else{bn=Pt.mipmaps;for(let fn=0;fn<6;fn++)if(dn){o.texImage2D(34069+fn,0,Nt,mt[fn].width,mt[fn].height,0,$t,kt,mt[fn].data);for(let Pe=0;Pe<bn.length;Pe++){const mn=bn[Pe].image[fn].image;o.texImage2D(34069+fn,Pe+1,Nt,mn.width,mn.height,0,$t,kt,mn.data)}}else{o.texImage2D(34069+fn,0,Nt,$t,kt,mt[fn]);for(let Pe=0;Pe<bn.length;Pe++){const mn=bn[Pe];o.texImage2D(34069+fn,Pe+1,Nt,$t,kt,mn.image[fn])}}zt.__maxMipLevel=bn.length}me(Pt,dt)&&_e(34067,Pt,Ae.width,Ae.height),zt.__version=Pt.version,Pt.onUpdate&&Pt.onUpdate(Pt)}(Dt,ke,Ue):(o.activeTexture(33984+Ue),o.bindTexture(34067,Dt.__webglTexture))}const ct={[on]:10497,[qn]:33071,[Ir]:33648},an={[Sr]:9728,[Kr]:9984,[Ui]:9986,[Or]:9729,[Rc]:9985,[Ns]:9987};function Gt(ke,Ue,Dt){if(Dt?(T.texParameteri(ke,10242,ct[Ue.wrapS]),T.texParameteri(ke,10243,ct[Ue.wrapT]),ke!==32879&&ke!==35866||T.texParameteri(ke,32882,ct[Ue.wrapR]),T.texParameteri(ke,10240,an[Ue.magFilter]),T.texParameteri(ke,10241,an[Ue.minFilter])):(T.texParameteri(ke,10242,33071),T.texParameteri(ke,10243,33071),ke!==32879&&ke!==35866||T.texParameteri(ke,32882,33071),Ue.wrapS===qn&&Ue.wrapT===qn||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),T.texParameteri(ke,10240,Ne(Ue.magFilter)),T.texParameteri(ke,10241,Ne(Ue.minFilter)),Ue.minFilter!==Sr&&Ue.minFilter!==Or&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),n.has("EXT_texture_filter_anisotropic")===!0){const zt=n.get("EXT_texture_filter_anisotropic");if(Ue.type===hs&&n.has("OES_texture_float_linear")===!1||I===!1&&Ue.type===uo&&n.has("OES_texture_half_float_linear")===!1)return;(Ue.anisotropy>1||h.get(Ue).__currentAnisotropy)&&(T.texParameterf(ke,zt.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(Ue.anisotropy,p.getMaxAnisotropy())),h.get(Ue).__currentAnisotropy=Ue.anisotropy)}}function Lt(ke,Ue){ke.__webglInit===void 0&&(ke.__webglInit=!0,Ue.addEventListener("dispose",Oe),ke.__webglTexture=T.createTexture(),S.memory.textures++)}function Yt(ke,Ue,Dt){let zt=3553;Ue.isDataTexture2DArray&&(zt=35866),Ue.isDataTexture3D&&(zt=32879),Lt(ke,Ue),o.activeTexture(33984+Dt),o.bindTexture(zt,ke.__webglTexture),T.pixelStorei(37440,Ue.flipY),T.pixelStorei(37441,Ue.premultiplyAlpha),T.pixelStorei(3317,Ue.unpackAlignment),T.pixelStorei(37443,0);const Pt=function(kt){return!I&&(kt.wrapS!==qn||kt.wrapT!==qn||kt.minFilter!==Sr&&kt.minFilter!==Or)}(Ue)&&ne(Ue.image)===!1,Kt=ae(Ue.image,Pt,!1,$),gn=ne(Kt)||I,dn=w.convert(Ue.format);let mt,Ae=w.convert(Ue.type),dt=ve(Ue.internalFormat,dn,Ae);Gt(zt,Ue,gn);const $t=Ue.mipmaps;if(Ue.isDepthTexture)dt=6402,I?dt=Ue.type===hs?36012:Ue.type===Ga?33190:Ue.type===lt?35056:33189:Ue.type===hs&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),Ue.format===sr&&dt===6402&&Ue.type!==Ru&&Ue.type!==Ga&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),Ue.type=Ru,Ae=w.convert(Ue.type)),Ue.format===br&&dt===6402&&(dt=34041,Ue.type!==lt&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),Ue.type=lt,Ae=w.convert(Ue.type))),o.texImage2D(3553,0,dt,Kt.width,Kt.height,0,dn,Ae,null);else if(Ue.isDataTexture)if($t.length>0&&gn){for(let kt=0,Nt=$t.length;kt<Nt;kt++)mt=$t[kt],o.texImage2D(3553,kt,dt,mt.width,mt.height,0,dn,Ae,mt.data);Ue.generateMipmaps=!1,ke.__maxMipLevel=$t.length-1}else o.texImage2D(3553,0,dt,Kt.width,Kt.height,0,dn,Ae,Kt.data),ke.__maxMipLevel=0;else if(Ue.isCompressedTexture){for(let kt=0,Nt=$t.length;kt<Nt;kt++)mt=$t[kt],Ue.format!==Xn&&Ue.format!==Xt?dn!==null?o.compressedTexImage2D(3553,kt,dt,mt.width,mt.height,0,mt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):o.texImage2D(3553,kt,dt,mt.width,mt.height,0,dn,Ae,mt.data);ke.__maxMipLevel=$t.length-1}else if(Ue.isDataTexture2DArray)o.texImage3D(35866,0,dt,Kt.width,Kt.height,Kt.depth,0,dn,Ae,Kt.data),ke.__maxMipLevel=0;else if(Ue.isDataTexture3D)o.texImage3D(32879,0,dt,Kt.width,Kt.height,Kt.depth,0,dn,Ae,Kt.data),ke.__maxMipLevel=0;else if($t.length>0&&gn){for(let kt=0,Nt=$t.length;kt<Nt;kt++)mt=$t[kt],o.texImage2D(3553,kt,dt,dn,Ae,mt);Ue.generateMipmaps=!1,ke.__maxMipLevel=$t.length-1}else o.texImage2D(3553,0,dt,dn,Ae,Kt),ke.__maxMipLevel=0;me(Ue,gn)&&_e(zt,Ue,Kt.width,Kt.height),ke.__version=Ue.version,Ue.onUpdate&&Ue.onUpdate(Ue)}function Tn(ke,Ue,Dt,zt,Pt){const Kt=w.convert(Dt.format),gn=w.convert(Dt.type),dn=ve(Dt.internalFormat,Kt,gn);Pt===32879||Pt===35866?o.texImage3D(Pt,0,dn,Ue.width,Ue.height,Ue.depth,0,Kt,gn,null):o.texImage2D(Pt,0,dn,Ue.width,Ue.height,0,Kt,gn,null),o.bindFramebuffer(36160,ke),T.framebufferTexture2D(36160,zt,Pt,h.get(Dt).__webglTexture,0),o.bindFramebuffer(36160,null)}function In(ke,Ue,Dt){if(T.bindRenderbuffer(36161,ke),Ue.depthBuffer&&!Ue.stencilBuffer){let zt=33189;if(Dt){const Pt=Ue.depthTexture;Pt&&Pt.isDepthTexture&&(Pt.type===hs?zt=36012:Pt.type===Ga&&(zt=33190));const Kt=Pn(Ue);T.renderbufferStorageMultisample(36161,Kt,zt,Ue.width,Ue.height)}else T.renderbufferStorage(36161,zt,Ue.width,Ue.height);T.framebufferRenderbuffer(36160,36096,36161,ke)}else if(Ue.depthBuffer&&Ue.stencilBuffer){if(Dt){const zt=Pn(Ue);T.renderbufferStorageMultisample(36161,zt,35056,Ue.width,Ue.height)}else T.renderbufferStorage(36161,34041,Ue.width,Ue.height);T.framebufferRenderbuffer(36160,33306,36161,ke)}else{const zt=Ue.isWebGLMultipleRenderTargets===!0?Ue.texture[0]:Ue.texture,Pt=w.convert(zt.format),Kt=w.convert(zt.type),gn=ve(zt.internalFormat,Pt,Kt);if(Dt){const dn=Pn(Ue);T.renderbufferStorageMultisample(36161,dn,gn,Ue.width,Ue.height)}else T.renderbufferStorage(36161,gn,Ue.width,Ue.height)}T.bindRenderbuffer(36161,null)}function Pn(ke){return I&&ke.isWebGLMultisampleRenderTarget?Math.min(j,ke.samples):0}let nr=!1,er=!1;this.allocateTextureUnit=function(){const ke=it;return ke>=k&&console.warn("THREE.WebGLTextures: Trying to use "+ke+" texture units while this GPU supports only "+k),it+=1,ke},this.resetTextureUnits=function(){it=0},this.setTexture2D=gt,this.setTexture2DArray=function(ke,Ue){const Dt=h.get(ke);ke.version>0&&Dt.__version!==ke.version?Yt(Dt,ke,Ue):(o.activeTexture(33984+Ue),o.bindTexture(35866,Dt.__webglTexture))},this.setTexture3D=function(ke,Ue){const Dt=h.get(ke);ke.version>0&&Dt.__version!==ke.version?Yt(Dt,ke,Ue):(o.activeTexture(33984+Ue),o.bindTexture(32879,Dt.__webglTexture))},this.setTextureCube=ut,this.setupRenderTarget=function(ke){const Ue=ke.texture,Dt=h.get(ke),zt=h.get(Ue);ke.addEventListener("dispose",tt),ke.isWebGLMultipleRenderTargets!==!0&&(zt.__webglTexture=T.createTexture(),zt.__version=Ue.version,S.memory.textures++);const Pt=ke.isWebGLCubeRenderTarget===!0,Kt=ke.isWebGLMultipleRenderTargets===!0,gn=ke.isWebGLMultisampleRenderTarget===!0,dn=Ue.isDataTexture3D||Ue.isDataTexture2DArray,mt=ne(ke)||I;if(!I||Ue.format!==Xt||Ue.type!==hs&&Ue.type!==uo||(Ue.format=Xn,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),Pt){Dt.__webglFramebuffer=[];for(let Ae=0;Ae<6;Ae++)Dt.__webglFramebuffer[Ae]=T.createFramebuffer()}else if(Dt.__webglFramebuffer=T.createFramebuffer(),Kt)if(p.drawBuffers){const Ae=ke.texture;for(let dt=0,$t=Ae.length;dt<$t;dt++){const kt=h.get(Ae[dt]);kt.__webglTexture===void 0&&(kt.__webglTexture=T.createTexture(),S.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(gn)if(I){Dt.__webglMultisampledFramebuffer=T.createFramebuffer(),Dt.__webglColorRenderbuffer=T.createRenderbuffer(),T.bindRenderbuffer(36161,Dt.__webglColorRenderbuffer);const Ae=w.convert(Ue.format),dt=w.convert(Ue.type),$t=ve(Ue.internalFormat,Ae,dt),kt=Pn(ke);T.renderbufferStorageMultisample(36161,kt,$t,ke.width,ke.height),o.bindFramebuffer(36160,Dt.__webglMultisampledFramebuffer),T.framebufferRenderbuffer(36160,36064,36161,Dt.__webglColorRenderbuffer),T.bindRenderbuffer(36161,null),ke.depthBuffer&&(Dt.__webglDepthRenderbuffer=T.createRenderbuffer(),In(Dt.__webglDepthRenderbuffer,ke,!0)),o.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(Pt){o.bindTexture(34067,zt.__webglTexture),Gt(34067,Ue,mt);for(let Ae=0;Ae<6;Ae++)Tn(Dt.__webglFramebuffer[Ae],ke,Ue,36064,34069+Ae);me(Ue,mt)&&_e(34067,Ue,ke.width,ke.height),o.unbindTexture()}else if(Kt){const Ae=ke.texture;for(let dt=0,$t=Ae.length;dt<$t;dt++){const kt=Ae[dt],Nt=h.get(kt);o.bindTexture(3553,Nt.__webglTexture),Gt(3553,kt,mt),Tn(Dt.__webglFramebuffer,ke,kt,36064+dt,3553),me(kt,mt)&&_e(3553,kt,ke.width,ke.height)}o.unbindTexture()}else{let Ae=3553;dn&&(I?Ae=Ue.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),o.bindTexture(Ae,zt.__webglTexture),Gt(Ae,Ue,mt),Tn(Dt.__webglFramebuffer,ke,Ue,36064,Ae),me(Ue,mt)&&_e(Ae,Ue,ke.width,ke.height,ke.depth),o.unbindTexture()}ke.depthBuffer&&function(Ae){const dt=h.get(Ae),$t=Ae.isWebGLCubeRenderTarget===!0;if(Ae.depthTexture){if($t)throw new Error("target.depthTexture not supported in Cube render targets");(function(kt,Nt){if(Nt&&Nt.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(o.bindFramebuffer(36160,kt),!Nt.depthTexture||!Nt.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");h.get(Nt.depthTexture).__webglTexture&&Nt.depthTexture.image.width===Nt.width&&Nt.depthTexture.image.height===Nt.height||(Nt.depthTexture.image.width=Nt.width,Nt.depthTexture.image.height=Nt.height,Nt.depthTexture.needsUpdate=!0),gt(Nt.depthTexture,0);const bn=h.get(Nt.depthTexture).__webglTexture;if(Nt.depthTexture.format===sr)T.framebufferTexture2D(36160,36096,3553,bn,0);else{if(Nt.depthTexture.format!==br)throw new Error("Unknown depthTexture format");T.framebufferTexture2D(36160,33306,3553,bn,0)}})(dt.__webglFramebuffer,Ae)}else if($t){dt.__webglDepthbuffer=[];for(let kt=0;kt<6;kt++)o.bindFramebuffer(36160,dt.__webglFramebuffer[kt]),dt.__webglDepthbuffer[kt]=T.createRenderbuffer(),In(dt.__webglDepthbuffer[kt],Ae,!1)}else o.bindFramebuffer(36160,dt.__webglFramebuffer),dt.__webglDepthbuffer=T.createRenderbuffer(),In(dt.__webglDepthbuffer,Ae,!1);o.bindFramebuffer(36160,null)}(ke)},this.updateRenderTargetMipmap=function(ke){const Ue=ne(ke)||I,Dt=ke.isWebGLMultipleRenderTargets===!0?ke.texture:[ke.texture];for(let zt=0,Pt=Dt.length;zt<Pt;zt++){const Kt=Dt[zt];if(me(Kt,Ue)){const gn=ke.isWebGLCubeRenderTarget?34067:3553,dn=h.get(Kt).__webglTexture;o.bindTexture(gn,dn),_e(gn,Kt,ke.width,ke.height),o.unbindTexture()}}},this.updateMultisampleRenderTarget=function(ke){if(ke.isWebGLMultisampleRenderTarget)if(I){const Ue=ke.width,Dt=ke.height;let zt=16384;ke.depthBuffer&&(zt|=256),ke.stencilBuffer&&(zt|=1024);const Pt=h.get(ke);o.bindFramebuffer(36008,Pt.__webglMultisampledFramebuffer),o.bindFramebuffer(36009,Pt.__webglFramebuffer),T.blitFramebuffer(0,0,Ue,Dt,0,0,Ue,Dt,zt,9728),o.bindFramebuffer(36008,null),o.bindFramebuffer(36009,Pt.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(ke,Ue){ke&&ke.isWebGLRenderTarget&&(nr===!1&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),nr=!0),ke=ke.texture),gt(ke,Ue)},this.safeSetTextureCube=function(ke,Ue){ke&&ke.isWebGLCubeRenderTarget&&(er===!1&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),er=!0),ke=ke.texture),ut(ke,Ue)}}function Ml(T,n,o){const h=o.isWebGL2;return{convert:function(p){let w;if(p===Wa)return 5121;if(p===Hn)return 32819;if(p===Ee)return 32820;if(p===ht)return 33635;if(p===rf)return 5120;if(p===$s)return 5122;if(p===Ru)return 5123;if(p===$l)return 5124;if(p===Ga)return 5125;if(p===hs)return 5126;if(p===uo)return h?5131:(w=n.get("OES_texture_half_float"),w!==null?w.HALF_FLOAT_OES:null);if(p===xt)return 6406;if(p===Xt)return 6407;if(p===Xn)return 6408;if(p===Wn)return 6409;if(p===Zn)return 6410;if(p===sr)return 6402;if(p===br)return 34041;if(p===zr)return 6403;if(p===or)return 36244;if(p===At)return 33319;if(p===yi)return 33320;if(p===Ha)return 36248;if(p===ca)return 36249;if(p===ja||p===Us||p===oi||p===ds){if(w=n.get("WEBGL_compressed_texture_s3tc"),w===null)return null;if(p===ja)return w.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===Us)return w.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===oi)return w.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===ds)return w.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(p===li||p===Lc||p===td||p===nd){if(w=n.get("WEBGL_compressed_texture_pvrtc"),w===null)return null;if(p===li)return w.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===Lc)return w.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===td)return w.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===nd)return w.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(p===rd)return w=n.get("WEBGL_compressed_texture_etc1"),w!==null?w.COMPRESSED_RGB_ETC1_WEBGL:null;if((p===Dc||p===Lu)&&(w=n.get("WEBGL_compressed_texture_etc"),w!==null)){if(p===Dc)return w.COMPRESSED_RGB8_ETC2;if(p===Lu)return w.COMPRESSED_RGBA8_ETC2_EAC}return p===Pc||p===Fc||p===Oc||p===zc||p===id||p===sf||p===sd||p===af||p===ad||p===od||p===of||p===v0||p===Hm||p===Bc||p===Uc||p===lf||p===ld||p===ud||p===cd||p===uf||p===hd||p===dd||p===cf||p===hf||p===Vc||p===Wc||p===pd||p===df?(w=n.get("WEBGL_compressed_texture_astc"),w!==null?p:null):p===$c?(w=n.get("EXT_texture_compression_bptc"),w!==null?p:null):p===lt?h?34042:(w=n.get("WEBGL_depth_texture"),w!==null?w.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}qf.prototype.isMeshDistanceMaterial=!0;class np extends ss{constructor(n=[]){super(),this.cameras=n}}np.prototype.isArrayCamera=!0;class vo extends Cr{constructor(){super(),this.type="Group"}}vo.prototype.isGroup=!0;const bg={type:"move"};class Jo{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new vo,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new vo,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Te,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Te),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new vo,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Te,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Te),this._grip}dispatchEvent(n){return this._targetRay!==null&&this._targetRay.dispatchEvent(n),this._grip!==null&&this._grip.dispatchEvent(n),this._hand!==null&&this._hand.dispatchEvent(n),this}disconnect(n){return this.dispatchEvent({type:"disconnected",data:n}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(n,o,h){let p=null,w=null,S=null;const I=this._targetRay,k=this._grip,R=this._hand;if(n&&o.session.visibilityState!=="visible-blurred")if(I!==null&&(p=o.getPose(n.targetRaySpace,h),p!==null&&(I.matrix.fromArray(p.transform.matrix),I.matrix.decompose(I.position,I.rotation,I.scale),p.linearVelocity?(I.hasLinearVelocity=!0,I.linearVelocity.copy(p.linearVelocity)):I.hasLinearVelocity=!1,p.angularVelocity?(I.hasAngularVelocity=!0,I.angularVelocity.copy(p.angularVelocity)):I.hasAngularVelocity=!1,this.dispatchEvent(bg))),R&&n.hand){S=!0;for(const te of n.hand.values()){const ae=o.getJointPose(te,h);if(R.joints[te.jointName]===void 0){const me=new vo;me.matrixAutoUpdate=!1,me.visible=!1,R.joints[te.jointName]=me,R.add(me)}const ne=R.joints[te.jointName];ae!==null&&(ne.matrix.fromArray(ae.transform.matrix),ne.matrix.decompose(ne.position,ne.rotation,ne.scale),ne.jointRadius=ae.radius),ne.visible=ae!==null}const $=R.joints["index-finger-tip"],j=R.joints["thumb-tip"],H=$.position.distanceTo(j.position),Y=.02,ee=.005;R.inputState.pinching&&H>Y+ee?(R.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:n.handedness,target:this})):!R.inputState.pinching&&H<=Y-ee&&(R.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:n.handedness,target:this}))}else k!==null&&n.gripSpace&&(w=o.getPose(n.gripSpace,h),w!==null&&(k.matrix.fromArray(w.transform.matrix),k.matrix.decompose(k.position,k.rotation,k.scale),w.linearVelocity?(k.hasLinearVelocity=!0,k.linearVelocity.copy(w.linearVelocity)):k.hasLinearVelocity=!1,w.angularVelocity?(k.hasAngularVelocity=!0,k.angularVelocity.copy(w.angularVelocity)):k.hasAngularVelocity=!1));return I!==null&&(I.visible=p!==null),k!==null&&(k.visible=w!==null),R!==null&&(R.visible=S!==null),this}}class kn extends co{constructor(n,o){super();const h=this,p=n.state;let w=null,S=1,I=null,k="local-floor",R=null,$=null,j=null,H=null,Y=null,ee=!1,te=null,ae=null,ne=null,me=null,_e=null,ve=null;const Ne=[],Oe=new Map,tt=new ss;tt.layers.enable(1),tt.viewport=new Xr;const it=new ss;it.layers.enable(2),it.viewport=new Xr;const gt=[tt,it],ut=new np;ut.layers.enable(1),ut.layers.enable(2);let ct=null,an=null;function Gt(ke){const Ue=Oe.get(ke.inputSource);Ue&&Ue.dispatchEvent({type:ke.type,data:ke.inputSource})}function Lt(){Oe.forEach(function(ke,Ue){ke.disconnect(Ue)}),Oe.clear(),ct=null,an=null,p.bindXRFramebuffer(null),n.setRenderTarget(n.getRenderTarget()),j&&o.deleteFramebuffer(j),te&&o.deleteFramebuffer(te),ae&&o.deleteRenderbuffer(ae),ne&&o.deleteRenderbuffer(ne),j=null,te=null,ae=null,ne=null,Y=null,H=null,$=null,w=null,er.stop(),h.isPresenting=!1,h.dispatchEvent({type:"sessionend"})}function Yt(ke){const Ue=w.inputSources;for(let Dt=0;Dt<Ne.length;Dt++)Oe.set(Ue[Dt],Ne[Dt]);for(let Dt=0;Dt<ke.removed.length;Dt++){const zt=ke.removed[Dt],Pt=Oe.get(zt);Pt&&(Pt.dispatchEvent({type:"disconnected",data:zt}),Oe.delete(zt))}for(let Dt=0;Dt<ke.added.length;Dt++){const zt=ke.added[Dt],Pt=Oe.get(zt);Pt&&Pt.dispatchEvent({type:"connected",data:zt})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(ke){let Ue=Ne[ke];return Ue===void 0&&(Ue=new Jo,Ne[ke]=Ue),Ue.getTargetRaySpace()},this.getControllerGrip=function(ke){let Ue=Ne[ke];return Ue===void 0&&(Ue=new Jo,Ne[ke]=Ue),Ue.getGripSpace()},this.getHand=function(ke){let Ue=Ne[ke];return Ue===void 0&&(Ue=new Jo,Ne[ke]=Ue),Ue.getHandSpace()},this.setFramebufferScaleFactor=function(ke){S=ke,h.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(ke){k=ke,h.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return I},this.getBaseLayer=function(){return H!==null?H:Y},this.getBinding=function(){return $},this.getFrame=function(){return me},this.getSession=function(){return w},this.setSession=async function(ke){if(w=ke,w!==null){w.addEventListener("select",Gt),w.addEventListener("selectstart",Gt),w.addEventListener("selectend",Gt),w.addEventListener("squeeze",Gt),w.addEventListener("squeezestart",Gt),w.addEventListener("squeezeend",Gt),w.addEventListener("end",Lt),w.addEventListener("inputsourceschange",Yt);const Ue=o.getContextAttributes();if(Ue.xrCompatible!==!0&&await o.makeXRCompatible(),w.renderState.layers===void 0){const Dt={antialias:Ue.antialias,alpha:Ue.alpha,depth:Ue.depth,stencil:Ue.stencil,framebufferScaleFactor:S};Y=new XRWebGLLayer(w,o,Dt),w.updateRenderState({baseLayer:Y})}else if(o instanceof WebGLRenderingContext){const Dt={antialias:!0,alpha:Ue.alpha,depth:Ue.depth,stencil:Ue.stencil,framebufferScaleFactor:S};Y=new XRWebGLLayer(w,o,Dt),w.updateRenderState({layers:[Y]})}else{ee=Ue.antialias;let Dt=null;Ue.depth&&(ve=256,Ue.stencil&&(ve|=1024),_e=Ue.stencil?33306:36096,Dt=Ue.stencil?35056:33190);const zt={colorFormat:Ue.alpha?32856:32849,depthFormat:Dt,scaleFactor:S};$=new XRWebGLBinding(w,o),H=$.createProjectionLayer(zt),j=o.createFramebuffer(),w.updateRenderState({layers:[H]}),ee&&(te=o.createFramebuffer(),ae=o.createRenderbuffer(),o.bindRenderbuffer(36161,ae),o.renderbufferStorageMultisample(36161,4,32856,H.textureWidth,H.textureHeight),p.bindFramebuffer(36160,te),o.framebufferRenderbuffer(36160,36064,36161,ae),o.bindRenderbuffer(36161,null),Dt!==null&&(ne=o.createRenderbuffer(),o.bindRenderbuffer(36161,ne),o.renderbufferStorageMultisample(36161,4,Dt,H.textureWidth,H.textureHeight),o.framebufferRenderbuffer(36160,_e,36161,ne),o.bindRenderbuffer(36161,null)),p.bindFramebuffer(36160,null))}I=await w.requestReferenceSpace(k),er.setContext(w),er.start(),h.isPresenting=!0,h.dispatchEvent({type:"sessionstart"})}};const Tn=new Te,In=new Te;function Pn(ke,Ue){Ue===null?ke.matrixWorld.copy(ke.matrix):ke.matrixWorld.multiplyMatrices(Ue.matrixWorld,ke.matrix),ke.matrixWorldInverse.copy(ke.matrixWorld).invert()}this.updateCamera=function(ke){if(w===null)return;ut.near=it.near=tt.near=ke.near,ut.far=it.far=tt.far=ke.far,ct===ut.near&&an===ut.far||(w.updateRenderState({depthNear:ut.near,depthFar:ut.far}),ct=ut.near,an=ut.far);const Ue=ke.parent,Dt=ut.cameras;Pn(ut,Ue);for(let Pt=0;Pt<Dt.length;Pt++)Pn(Dt[Pt],Ue);ut.matrixWorld.decompose(ut.position,ut.quaternion,ut.scale),ke.position.copy(ut.position),ke.quaternion.copy(ut.quaternion),ke.scale.copy(ut.scale),ke.matrix.copy(ut.matrix),ke.matrixWorld.copy(ut.matrixWorld);const zt=ke.children;for(let Pt=0,Kt=zt.length;Pt<Kt;Pt++)zt[Pt].updateMatrixWorld(!0);Dt.length===2?function(Pt,Kt,gn){Tn.setFromMatrixPosition(Kt.matrixWorld),In.setFromMatrixPosition(gn.matrixWorld);const dn=Tn.distanceTo(In),mt=Kt.projectionMatrix.elements,Ae=gn.projectionMatrix.elements,dt=mt[14]/(mt[10]-1),$t=mt[14]/(mt[10]+1),kt=(mt[9]+1)/mt[5],Nt=(mt[9]-1)/mt[5],bn=(mt[8]-1)/mt[0],fn=(Ae[8]+1)/Ae[0],Pe=dt*bn,mn=dt*fn,Br=dn/(-bn+fn),Ii=Br*-bn;Kt.matrixWorld.decompose(Pt.position,Pt.quaternion,Pt.scale),Pt.translateX(Ii),Pt.translateZ(Br),Pt.matrixWorld.compose(Pt.position,Pt.quaternion,Pt.scale),Pt.matrixWorldInverse.copy(Pt.matrixWorld).invert();const Rr=dt+Br,xs=$t+Br,ci=Pe-Ii,Yr=mn+(dn-Ii),wa=kt*$t/xs*Rr,io=Nt*$t/xs*Rr;Pt.projectionMatrix.makePerspective(ci,Yr,wa,io,Rr,xs)}(ut,tt,it):ut.projectionMatrix.copy(tt.projectionMatrix)},this.getCamera=function(){return ut},this.getFoveation=function(){return H!==null?H.fixedFoveation:Y!==null?Y.fixedFoveation:void 0},this.setFoveation=function(ke){H!==null&&(H.fixedFoveation=ke),Y!==null&&Y.fixedFoveation!==void 0&&(Y.fixedFoveation=ke)};let nr=null;const er=new xi;er.setAnimationLoop(function(ke,Ue){if(R=Ue.getViewerPose(I),me=Ue,R!==null){const zt=R.views;Y!==null&&p.bindXRFramebuffer(Y.framebuffer);let Pt=!1;zt.length!==ut.cameras.length&&(ut.cameras.length=0,Pt=!0);for(let Kt=0;Kt<zt.length;Kt++){const gn=zt[Kt];let dn=null;if(Y!==null)dn=Y.getViewport(gn);else{const Ae=$.getViewSubImage(H,gn);p.bindXRFramebuffer(j),Ae.depthStencilTexture!==void 0&&o.framebufferTexture2D(36160,_e,3553,Ae.depthStencilTexture,0),o.framebufferTexture2D(36160,36064,3553,Ae.colorTexture,0),dn=Ae.viewport}const mt=gt[Kt];mt.matrix.fromArray(gn.transform.matrix),mt.projectionMatrix.fromArray(gn.projectionMatrix),mt.viewport.set(dn.x,dn.y,dn.width,dn.height),Kt===0&&ut.matrix.copy(mt.matrix),Pt===!0&&ut.cameras.push(mt)}ee&&(p.bindXRFramebuffer(te),ve!==null&&o.clear(ve))}const Dt=w.inputSources;for(let zt=0;zt<Ne.length;zt++){const Pt=Ne[zt],Kt=Dt[zt];Pt.update(Kt,Ue,I)}if(nr&&nr(ke,Ue),ee){const zt=H.textureWidth,Pt=H.textureHeight;p.bindFramebuffer(36008,te),p.bindFramebuffer(36009,j),o.invalidateFramebuffer(36008,[_e]),o.invalidateFramebuffer(36009,[_e]),o.blitFramebuffer(0,0,zt,Pt,0,0,zt,Pt,16384,9728),o.invalidateFramebuffer(36008,[36064]),p.bindFramebuffer(36008,null),p.bindFramebuffer(36009,null),p.bindFramebuffer(36160,te)}me=null}),this.setAnimationLoop=function(ke){nr=ke},this.dispose=function(){}}}function wg(T){function n(h,p){h.opacity.value=p.opacity,p.color&&h.diffuse.value.copy(p.color),p.emissive&&h.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity),p.map&&(h.map.value=p.map),p.alphaMap&&(h.alphaMap.value=p.alphaMap),p.specularMap&&(h.specularMap.value=p.specularMap),p.alphaTest>0&&(h.alphaTest.value=p.alphaTest);const w=T.get(p).envMap;if(w){h.envMap.value=w,h.flipEnvMap.value=w.isCubeTexture&&w.isRenderTargetTexture===!1?-1:1,h.reflectivity.value=p.reflectivity,h.ior.value=p.ior,h.refractionRatio.value=p.refractionRatio;const k=T.get(w).__maxMipLevel;k!==void 0&&(h.maxMipLevel.value=k)}let S,I;p.lightMap&&(h.lightMap.value=p.lightMap,h.lightMapIntensity.value=p.lightMapIntensity),p.aoMap&&(h.aoMap.value=p.aoMap,h.aoMapIntensity.value=p.aoMapIntensity),p.map?S=p.map:p.specularMap?S=p.specularMap:p.displacementMap?S=p.displacementMap:p.normalMap?S=p.normalMap:p.bumpMap?S=p.bumpMap:p.roughnessMap?S=p.roughnessMap:p.metalnessMap?S=p.metalnessMap:p.alphaMap?S=p.alphaMap:p.emissiveMap?S=p.emissiveMap:p.clearcoatMap?S=p.clearcoatMap:p.clearcoatNormalMap?S=p.clearcoatNormalMap:p.clearcoatRoughnessMap?S=p.clearcoatRoughnessMap:p.specularIntensityMap?S=p.specularIntensityMap:p.specularTintMap?S=p.specularTintMap:p.transmissionMap?S=p.transmissionMap:p.thicknessMap&&(S=p.thicknessMap),S!==void 0&&(S.isWebGLRenderTarget&&(S=S.texture),S.matrixAutoUpdate===!0&&S.updateMatrix(),h.uvTransform.value.copy(S.matrix)),p.aoMap?I=p.aoMap:p.lightMap&&(I=p.lightMap),I!==void 0&&(I.isWebGLRenderTarget&&(I=I.texture),I.matrixAutoUpdate===!0&&I.updateMatrix(),h.uv2Transform.value.copy(I.matrix))}function o(h,p){h.roughness.value=p.roughness,h.metalness.value=p.metalness,p.roughnessMap&&(h.roughnessMap.value=p.roughnessMap),p.metalnessMap&&(h.metalnessMap.value=p.metalnessMap),p.emissiveMap&&(h.emissiveMap.value=p.emissiveMap),p.bumpMap&&(h.bumpMap.value=p.bumpMap,h.bumpScale.value=p.bumpScale,p.side===Z&&(h.bumpScale.value*=-1)),p.normalMap&&(h.normalMap.value=p.normalMap,h.normalScale.value.copy(p.normalScale),p.side===Z&&h.normalScale.value.negate()),p.displacementMap&&(h.displacementMap.value=p.displacementMap,h.displacementScale.value=p.displacementScale,h.displacementBias.value=p.displacementBias),T.get(p).envMap&&(h.envMapIntensity.value=p.envMapIntensity)}return{refreshFogUniforms:function(h,p){h.fogColor.value.copy(p.color),p.isFog?(h.fogNear.value=p.near,h.fogFar.value=p.far):p.isFogExp2&&(h.fogDensity.value=p.density)},refreshMaterialUniforms:function(h,p,w,S,I){p.isMeshBasicMaterial?n(h,p):p.isMeshLambertMaterial?(n(h,p),function(k,R){R.emissiveMap&&(k.emissiveMap.value=R.emissiveMap)}(h,p)):p.isMeshToonMaterial?(n(h,p),function(k,R){R.gradientMap&&(k.gradientMap.value=R.gradientMap),R.emissiveMap&&(k.emissiveMap.value=R.emissiveMap),R.bumpMap&&(k.bumpMap.value=R.bumpMap,k.bumpScale.value=R.bumpScale,R.side===Z&&(k.bumpScale.value*=-1)),R.normalMap&&(k.normalMap.value=R.normalMap,k.normalScale.value.copy(R.normalScale),R.side===Z&&k.normalScale.value.negate()),R.displacementMap&&(k.displacementMap.value=R.displacementMap,k.displacementScale.value=R.displacementScale,k.displacementBias.value=R.displacementBias)}(h,p)):p.isMeshPhongMaterial?(n(h,p),function(k,R){k.specular.value.copy(R.specular),k.shininess.value=Math.max(R.shininess,1e-4),R.emissiveMap&&(k.emissiveMap.value=R.emissiveMap),R.bumpMap&&(k.bumpMap.value=R.bumpMap,k.bumpScale.value=R.bumpScale,R.side===Z&&(k.bumpScale.value*=-1)),R.normalMap&&(k.normalMap.value=R.normalMap,k.normalScale.value.copy(R.normalScale),R.side===Z&&k.normalScale.value.negate()),R.displacementMap&&(k.displacementMap.value=R.displacementMap,k.displacementScale.value=R.displacementScale,k.displacementBias.value=R.displacementBias)}(h,p)):p.isMeshStandardMaterial?(n(h,p),p.isMeshPhysicalMaterial?function(k,R,$){o(k,R),k.ior.value=R.ior,R.sheenTint&&k.sheenTint.value.copy(R.sheenTint),R.clearcoat>0&&(k.clearcoat.value=R.clearcoat,k.clearcoatRoughness.value=R.clearcoatRoughness,R.clearcoatMap&&(k.clearcoatMap.value=R.clearcoatMap),R.clearcoatRoughnessMap&&(k.clearcoatRoughnessMap.value=R.clearcoatRoughnessMap),R.clearcoatNormalMap&&(k.clearcoatNormalScale.value.copy(R.clearcoatNormalScale),k.clearcoatNormalMap.value=R.clearcoatNormalMap,R.side===Z&&k.clearcoatNormalScale.value.negate())),R.transmission>0&&(k.transmission.value=R.transmission,k.transmissionSamplerMap.value=$.texture,k.transmissionSamplerSize.value.set($.width,$.height),R.transmissionMap&&(k.transmissionMap.value=R.transmissionMap),k.thickness.value=R.thickness,R.thicknessMap&&(k.thicknessMap.value=R.thicknessMap),k.attenuationDistance.value=R.attenuationDistance,k.attenuationTint.value.copy(R.attenuationTint)),k.specularIntensity.value=R.specularIntensity,k.specularTint.value.copy(R.specularTint),R.specularIntensityMap&&(k.specularIntensityMap.value=R.specularIntensityMap),R.specularTintMap&&(k.specularTintMap.value=R.specularTintMap)}(h,p,I):o(h,p)):p.isMeshMatcapMaterial?(n(h,p),function(k,R){R.matcap&&(k.matcap.value=R.matcap),R.bumpMap&&(k.bumpMap.value=R.bumpMap,k.bumpScale.value=R.bumpScale,R.side===Z&&(k.bumpScale.value*=-1)),R.normalMap&&(k.normalMap.value=R.normalMap,k.normalScale.value.copy(R.normalScale),R.side===Z&&k.normalScale.value.negate()),R.displacementMap&&(k.displacementMap.value=R.displacementMap,k.displacementScale.value=R.displacementScale,k.displacementBias.value=R.displacementBias)}(h,p)):p.isMeshDepthMaterial?(n(h,p),function(k,R){R.displacementMap&&(k.displacementMap.value=R.displacementMap,k.displacementScale.value=R.displacementScale,k.displacementBias.value=R.displacementBias)}(h,p)):p.isMeshDistanceMaterial?(n(h,p),function(k,R){R.displacementMap&&(k.displacementMap.value=R.displacementMap,k.displacementScale.value=R.displacementScale,k.displacementBias.value=R.displacementBias),k.referencePosition.value.copy(R.referencePosition),k.nearDistance.value=R.nearDistance,k.farDistance.value=R.farDistance}(h,p)):p.isMeshNormalMaterial?(n(h,p),function(k,R){R.bumpMap&&(k.bumpMap.value=R.bumpMap,k.bumpScale.value=R.bumpScale,R.side===Z&&(k.bumpScale.value*=-1)),R.normalMap&&(k.normalMap.value=R.normalMap,k.normalScale.value.copy(R.normalScale),R.side===Z&&k.normalScale.value.negate()),R.displacementMap&&(k.displacementMap.value=R.displacementMap,k.displacementScale.value=R.displacementScale,k.displacementBias.value=R.displacementBias)}(h,p)):p.isLineBasicMaterial?(function(k,R){k.diffuse.value.copy(R.color),k.opacity.value=R.opacity}(h,p),p.isLineDashedMaterial&&function(k,R){k.dashSize.value=R.dashSize,k.totalSize.value=R.dashSize+R.gapSize,k.scale.value=R.scale}(h,p)):p.isPointsMaterial?function(k,R,$,j){let H;k.diffuse.value.copy(R.color),k.opacity.value=R.opacity,k.size.value=R.size*$,k.scale.value=.5*j,R.map&&(k.map.value=R.map),R.alphaMap&&(k.alphaMap.value=R.alphaMap),R.alphaTest>0&&(k.alphaTest.value=R.alphaTest),R.map?H=R.map:R.alphaMap&&(H=R.alphaMap),H!==void 0&&(H.matrixAutoUpdate===!0&&H.updateMatrix(),k.uvTransform.value.copy(H.matrix))}(h,p,w,S):p.isSpriteMaterial?function(k,R){let $;k.diffuse.value.copy(R.color),k.opacity.value=R.opacity,k.rotation.value=R.rotation,R.map&&(k.map.value=R.map),R.alphaMap&&(k.alphaMap.value=R.alphaMap),R.alphaTest>0&&(k.alphaTest.value=R.alphaTest),R.map?$=R.map:R.alphaMap&&($=R.alphaMap),$!==void 0&&($.matrixAutoUpdate===!0&&$.updateMatrix(),k.uvTransform.value.copy($.matrix))}(h,p):p.isShadowMaterial?(h.color.value.copy(p.color),h.opacity.value=p.opacity):p.isShaderMaterial&&(p.uniformsNeedUpdate=!1)}}}function ur(T={}){const n=T.canvas!==void 0?T.canvas:function(){const De=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return De.style.display="block",De}(),o=T.context!==void 0?T.context:null,h=T.alpha!==void 0&&T.alpha,p=T.depth===void 0||T.depth,w=T.stencil===void 0||T.stencil,S=T.antialias!==void 0&&T.antialias,I=T.premultipliedAlpha===void 0||T.premultipliedAlpha,k=T.preserveDrawingBuffer!==void 0&&T.preserveDrawingBuffer,R=T.powerPreference!==void 0?T.powerPreference:"default",$=T.failIfMajorPerformanceCaveat!==void 0&&T.failIfMajorPerformanceCaveat;let j=null,H=null;const Y=[],ee=[];this.domElement=n,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=ps,this.physicallyCorrectLights=!1,this.toneMapping=ye,this.toneMappingExposure=1;const te=this;let ae=!1,ne=0,me=0,_e=null,ve=-1,Ne=null;const Oe=new Xr,tt=new Xr;let it=null,gt=n.width,ut=n.height,ct=1,an=null,Gt=null;const Lt=new Xr(0,0,gt,ut),Yt=new Xr(0,0,gt,ut);let Tn=!1;const In=[],Pn=new $f;let nr=!1,er=!1,ke=null;const Ue=new Gn,Dt=new Te,zt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function Pt(){return _e===null?ct:1}let Kt,gn,dn,mt,Ae,dt,$t,kt,Nt,bn,fn,Pe,mn,Br,Ii,Rr,xs,ci,Yr,wa,io,Pi,ta,en=o;function Ap(De,wt){for(let pt=0;pt<De.length;pt++){const Ot=De[pt],rn=n.getContext(Ot,wt);if(rn!==null)return rn}return null}try{const De={alpha:h,depth:p,stencil:w,antialias:S,premultipliedAlpha:I,preserveDrawingBuffer:k,powerPreference:R,failIfMajorPerformanceCaveat:$};if(n.addEventListener("webglcontextlost",nw,!1),n.addEventListener("webglcontextrestored",bc,!1),en===null){const wt=["webgl2","webgl","experimental-webgl"];if(te.isWebGL1Renderer===!0&&wt.shift(),en=Ap(wt,De),en===null)throw Ap(wt)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}en.getShaderPrecisionFormat===void 0&&(en.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(De){throw console.error("THREE.WebGLRenderer: "+De.message),De}function Mm(){Kt=new A0(en),gn=new S0(en,Kt,T),Kt.init(gn),Pi=new Ml(en,Kt,gn),dn=new vg(en,Kt,gn),In[0]=1029,mt=new iu(en),Ae=new __,dt=new Yn(en,Kt,dn,Ae,gn,Pi,mt),$t=new $v(te),kt=new l_(te),Nt=new o_(en,gn),ta=new Ku(en,Kt,Nt,gn),bn=new Er(en,Nt,mt,ta),fn=new u_(en,bn,Nt,mt),Yr=new fh(en),Rr=new dh(Ae),Pe=new bb(te,$t,kt,Kt,gn,ta,Rr),mn=new wg(Ae),Br=new qe(Ae),Ii=new M_(Kt,gn),ci=new hh(te,$t,dn,fn,I),xs=new Zo(te,fn,gn),wa=new Bv(en,Kt,mt,gn),io=new un(en,Kt,mt,gn),mt.programs=Pe.programs,te.capabilities=gn,te.extensions=Kt,te.properties=Ae,te.renderLists=Br,te.shadowMap=xs,te.state=dn,te.info=mt}Mm();const cs=new kn(te,en);function nw(De){De.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),ae=!0}function bc(){console.log("THREE.WebGLRenderer: Context Restored."),ae=!1;const De=mt.autoReset,wt=xs.enabled,pt=xs.autoUpdate,Ot=xs.needsUpdate,rn=xs.type;Mm(),mt.autoReset=De,xs.enabled=wt,xs.autoUpdate=pt,xs.needsUpdate=Ot,xs.type=rn}function ay(De){const wt=De.target;wt.removeEventListener("dispose",ay),function(pt){(function(Ot){const rn=Ae.get(Ot).programs;rn!==void 0&&rn.forEach(function(hr){Pe.releaseProgram(hr)})})(pt),Ae.remove(pt)}(wt)}this.xr=cs,this.getContext=function(){return en},this.getContextAttributes=function(){return en.getContextAttributes()},this.forceContextLoss=function(){const De=Kt.get("WEBGL_lose_context");De&&De.loseContext()},this.forceContextRestore=function(){const De=Kt.get("WEBGL_lose_context");De&&De.restoreContext()},this.getPixelRatio=function(){return ct},this.setPixelRatio=function(De){De!==void 0&&(ct=De,this.setSize(gt,ut,!1))},this.getSize=function(De){return De.set(gt,ut)},this.setSize=function(De,wt,pt){cs.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(gt=De,ut=wt,n.width=Math.floor(De*ct),n.height=Math.floor(wt*ct),pt!==!1&&(n.style.width=De+"px",n.style.height=wt+"px"),this.setViewport(0,0,De,wt))},this.getDrawingBufferSize=function(De){return De.set(gt*ct,ut*ct).floor()},this.setDrawingBufferSize=function(De,wt,pt){gt=De,ut=wt,ct=pt,n.width=Math.floor(De*pt),n.height=Math.floor(wt*pt),this.setViewport(0,0,De,wt)},this.getCurrentViewport=function(De){return De.copy(Oe)},this.getViewport=function(De){return De.copy(Lt)},this.setViewport=function(De,wt,pt,Ot){De.isVector4?Lt.set(De.x,De.y,De.z,De.w):Lt.set(De,wt,pt,Ot),dn.viewport(Oe.copy(Lt).multiplyScalar(ct).floor())},this.getScissor=function(De){return De.copy(Yt)},this.setScissor=function(De,wt,pt,Ot){De.isVector4?Yt.set(De.x,De.y,De.z,De.w):Yt.set(De,wt,pt,Ot),dn.scissor(tt.copy(Yt).multiplyScalar(ct).floor())},this.getScissorTest=function(){return Tn},this.setScissorTest=function(De){dn.setScissorTest(Tn=De)},this.setOpaqueSort=function(De){an=De},this.setTransparentSort=function(De){Gt=De},this.getClearColor=function(De){return De.copy(ci.getClearColor())},this.setClearColor=function(){ci.setClearColor.apply(ci,arguments)},this.getClearAlpha=function(){return ci.getClearAlpha()},this.setClearAlpha=function(){ci.setClearAlpha.apply(ci,arguments)},this.clear=function(De,wt,pt){let Ot=0;(De===void 0||De)&&(Ot|=16384),(wt===void 0||wt)&&(Ot|=256),(pt===void 0||pt)&&(Ot|=1024),en.clear(Ot)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){n.removeEventListener("webglcontextlost",nw,!1),n.removeEventListener("webglcontextrestored",bc,!1),Br.dispose(),Ii.dispose(),Ae.dispose(),$t.dispose(),kt.dispose(),fn.dispose(),ta.dispose(),cs.dispose(),cs.removeEventListener("sessionstart",Ax),cs.removeEventListener("sessionend",Ix),ke&&(ke.dispose(),ke=null),gu.stop()},this.renderBufferImmediate=function(De,wt){ta.initAttributes();const pt=Ae.get(De);De.hasPositions&&!pt.position&&(pt.position=en.createBuffer()),De.hasNormals&&!pt.normal&&(pt.normal=en.createBuffer()),De.hasUvs&&!pt.uv&&(pt.uv=en.createBuffer()),De.hasColors&&!pt.color&&(pt.color=en.createBuffer());const Ot=wt.getAttributes();De.hasPositions&&(en.bindBuffer(34962,pt.position),en.bufferData(34962,De.positionArray,35048),ta.enableAttribute(Ot.position.location),en.vertexAttribPointer(Ot.position.location,3,5126,!1,0,0)),De.hasNormals&&(en.bindBuffer(34962,pt.normal),en.bufferData(34962,De.normalArray,35048),ta.enableAttribute(Ot.normal.location),en.vertexAttribPointer(Ot.normal.location,3,5126,!1,0,0)),De.hasUvs&&(en.bindBuffer(34962,pt.uv),en.bufferData(34962,De.uvArray,35048),ta.enableAttribute(Ot.uv.location),en.vertexAttribPointer(Ot.uv.location,2,5126,!1,0,0)),De.hasColors&&(en.bindBuffer(34962,pt.color),en.bufferData(34962,De.colorArray,35048),ta.enableAttribute(Ot.color.location),en.vertexAttribPointer(Ot.color.location,3,5126,!1,0,0)),ta.disableUnusedAttributes(),en.drawArrays(4,0,De.count),De.count=0},this.renderBufferDirect=function(De,wt,pt,Ot,rn,hr){wt===null&&(wt=zt);const Jn=rn.isMesh&&rn.matrixWorld.determinant()<0,gr=rs(De,wt,Ot,rn);dn.setMaterial(Ot,Jn);let Lr=pt.index;const ri=pt.attributes.position;if(Lr===null){if(ri===void 0||ri.count===0)return}else if(Lr.count===0)return;let Hr,xr=1;Ot.wireframe===!0&&(Lr=bn.getWireframeAttribute(pt),xr=2),pt.morphAttributes.position===void 0&&pt.morphAttributes.normal===void 0||Yr.update(rn,pt,Ot,gr),ta.setup(rn,Ot,gr,pt,Lr);let Fn=wa;Lr!==null&&(Hr=Nt.get(Lr),Fn=io,Fn.setIndex(Hr));const vs=Lr!==null?Lr.count:ri.count,Fi=pt.drawRange.start*xr,Eo=pt.drawRange.count*xr,Ps=hr!==null?hr.start*xr:0,wc=hr!==null?hr.count*xr:1/0,yu=Math.max(Fi,Ps),As=Math.min(vs,Fi+Eo,Ps+wc)-1,al=Math.max(0,As-yu+1);if(al!==0){if(rn.isMesh)Ot.wireframe===!0?(dn.setLineWidth(Ot.wireframeLinewidth*Pt()),Fn.setMode(1)):Fn.setMode(4);else if(rn.isLine){let Oi=Ot.linewidth;Oi===void 0&&(Oi=1),dn.setLineWidth(Oi*Pt()),rn.isLineSegments?Fn.setMode(1):rn.isLineLoop?Fn.setMode(2):Fn.setMode(3)}else rn.isPoints?Fn.setMode(0):rn.isSprite&&Fn.setMode(4);if(rn.isInstancedMesh)Fn.renderInstances(yu,al,rn.count);else if(pt.isInstancedBufferGeometry){const Oi=Math.min(pt.instanceCount,pt._maxInstanceCount);Fn.renderInstances(yu,al,Oi)}else Fn.render(yu,al)}},this.compile=function(De,wt){H=Ii.get(De),H.init(),ee.push(H),De.traverseVisible(function(pt){pt.isLight&&pt.layers.test(wt.layers)&&(H.pushLight(pt),pt.castShadow&&H.pushShadow(pt))}),H.setupLights(te.physicallyCorrectLights),De.traverse(function(pt){const Ot=pt.material;if(Ot)if(Array.isArray(Ot))for(let rn=0;rn<Ot.length;rn++)Tm(Ot[rn],De,pt);else Tm(Ot,De,pt)}),ee.pop(),H=null};let ns=null;function Ax(){gu.stop()}function Ix(){gu.start()}const gu=new xi;function Ip(De,wt,pt,Ot){if(De.visible===!1)return;if(De.layers.test(wt.layers)){if(De.isGroup)pt=De.renderOrder;else if(De.isLOD)De.autoUpdate===!0&&De.update(wt);else if(De.isLight)H.pushLight(De),De.castShadow&&H.pushShadow(De);else if(De.isSprite){if(!De.frustumCulled||Pn.intersectsSprite(De)){Ot&&Dt.setFromMatrixPosition(De.matrixWorld).applyMatrix4(Ue);const hr=fn.update(De),Jn=De.material;Jn.visible&&j.push(De,hr,Jn,pt,Dt.z,null)}}else if(De.isImmediateRenderObject)Ot&&Dt.setFromMatrixPosition(De.matrixWorld).applyMatrix4(Ue),j.push(De,null,De.material,pt,Dt.z,null);else if((De.isMesh||De.isLine||De.isPoints)&&(De.isSkinnedMesh&&De.skeleton.frame!==mt.render.frame&&(De.skeleton.update(),De.skeleton.frame=mt.render.frame),!De.frustumCulled||Pn.intersectsObject(De))){Ot&&Dt.setFromMatrixPosition(De.matrixWorld).applyMatrix4(Ue);const hr=fn.update(De),Jn=De.material;if(Array.isArray(Jn)){const gr=hr.groups;for(let Lr=0,ri=gr.length;Lr<ri;Lr++){const Hr=gr[Lr],xr=Jn[Hr.materialIndex];xr&&xr.visible&&j.push(De,hr,xr,pt,Dt.z,Hr)}}else Jn.visible&&j.push(De,hr,Jn,pt,Dt.z,null)}}const rn=De.children;for(let hr=0,Jn=rn.length;hr<Jn;hr++)Ip(rn[hr],wt,pt,Ot)}function oy(De,wt,pt,Ot){const rn=De.opaque,hr=De.transmissive,Jn=De.transparent;H.setupLightsView(pt),hr.length>0&&function(gr,Lr,ri){if(ke===null){const Fn=S===!0&&gn.isWebGL2===!0;ke=new(Fn?Bu:Ea)(1024,1024,{generateMipmaps:!0,type:Pi.convert(uo)!==null?uo:Wa,minFilter:Ns,magFilter:Sr,wrapS:qn,wrapT:qn})}const Hr=te.getRenderTarget();te.setRenderTarget(ke),te.clear();const xr=te.toneMapping;te.toneMapping=ye,Cp(gr,Lr,ri),te.toneMapping=xr,dt.updateMultisampleRenderTarget(ke),dt.updateRenderTargetMipmap(ke),te.setRenderTarget(Hr)}(rn,wt,pt),Ot&&dn.viewport(Oe.copy(Ot)),rn.length>0&&Cp(rn,wt,pt),hr.length>0&&Cp(hr,wt,pt),Jn.length>0&&Cp(Jn,wt,pt)}function Cp(De,wt,pt){const Ot=wt.isScene===!0?wt.overrideMaterial:null;for(let rn=0,hr=De.length;rn<hr;rn++){const Jn=De[rn],gr=Jn.object,Lr=Jn.geometry,ri=Ot===null?Jn.material:Ot,Hr=Jn.group;gr.layers.test(pt.layers)&&Cx(gr,wt,pt,Lr,ri,Hr)}}function Cx(De,wt,pt,Ot,rn,hr){if(De.onBeforeRender(te,wt,pt,Ot,rn,hr),De.modelViewMatrix.multiplyMatrices(pt.matrixWorldInverse,De.matrixWorld),De.normalMatrix.getNormalMatrix(De.modelViewMatrix),De.isImmediateRenderObject){const Jn=rs(pt,wt,rn,De);dn.setMaterial(rn),ta.reset(),function(gr,Lr){gr.render(function(ri){te.renderBufferImmediate(ri,Lr)})}(De,Jn)}else rn.transparent===!0&&rn.side===le?(rn.side=Z,rn.needsUpdate=!0,te.renderBufferDirect(pt,wt,Ot,rn,De,hr),rn.side=V,rn.needsUpdate=!0,te.renderBufferDirect(pt,wt,Ot,rn,De,hr),rn.side=le):te.renderBufferDirect(pt,wt,Ot,rn,De,hr);De.onAfterRender(te,wt,pt,Ot,rn,hr)}function Tm(De,wt,pt){wt.isScene!==!0&&(wt=zt);const Ot=Ae.get(De),rn=H.state.lights,hr=H.state.shadowsArray,Jn=rn.state.version,gr=Pe.getParameters(De,rn.state,hr,wt,pt),Lr=Pe.getProgramCacheKey(gr);let ri=Ot.programs;Ot.environment=De.isMeshStandardMaterial?wt.environment:null,Ot.fog=wt.fog,Ot.envMap=(De.isMeshStandardMaterial?kt:$t).get(De.envMap||Ot.environment),ri===void 0&&(De.addEventListener("dispose",ay),ri=new Map,Ot.programs=ri);let Hr=ri.get(Lr);if(Hr!==void 0){if(Ot.currentProgram===Hr&&Ot.lightsStateVersion===Jn)return kx(De,gr),Hr}else gr.uniforms=Pe.getUniforms(De),De.onBuild(gr,te),De.onBeforeCompile(gr,te),Hr=Pe.acquireProgram(gr,Lr),ri.set(Lr,Hr),Ot.uniforms=gr.uniforms;const xr=Ot.uniforms;(De.isShaderMaterial||De.isRawShaderMaterial)&&De.clipping!==!0||(xr.clippingPlanes=Rr.uniform),kx(De,gr),Ot.needsLights=function(Fi){return Fi.isMeshLambertMaterial||Fi.isMeshToonMaterial||Fi.isMeshPhongMaterial||Fi.isMeshStandardMaterial||Fi.isShadowMaterial||Fi.isShaderMaterial&&Fi.lights===!0}(De),Ot.lightsStateVersion=Jn,Ot.needsLights&&(xr.ambientLightColor.value=rn.state.ambient,xr.lightProbe.value=rn.state.probe,xr.directionalLights.value=rn.state.directional,xr.directionalLightShadows.value=rn.state.directionalShadow,xr.spotLights.value=rn.state.spot,xr.spotLightShadows.value=rn.state.spotShadow,xr.rectAreaLights.value=rn.state.rectArea,xr.ltc_1.value=rn.state.rectAreaLTC1,xr.ltc_2.value=rn.state.rectAreaLTC2,xr.pointLights.value=rn.state.point,xr.pointLightShadows.value=rn.state.pointShadow,xr.hemisphereLights.value=rn.state.hemi,xr.directionalShadowMap.value=rn.state.directionalShadowMap,xr.directionalShadowMatrix.value=rn.state.directionalShadowMatrix,xr.spotShadowMap.value=rn.state.spotShadowMap,xr.spotShadowMatrix.value=rn.state.spotShadowMatrix,xr.pointShadowMap.value=rn.state.pointShadowMap,xr.pointShadowMatrix.value=rn.state.pointShadowMatrix);const Fn=Hr.getUniforms(),vs=su.seqWithValue(Fn.seq,xr);return Ot.currentProgram=Hr,Ot.uniformsList=vs,Hr}function kx(De,wt){const pt=Ae.get(De);pt.outputEncoding=wt.outputEncoding,pt.instancing=wt.instancing,pt.skinning=wt.skinning,pt.morphTargets=wt.morphTargets,pt.morphNormals=wt.morphNormals,pt.numClippingPlanes=wt.numClippingPlanes,pt.numIntersection=wt.numClipIntersection,pt.vertexAlphas=wt.vertexAlphas,pt.vertexTangents=wt.vertexTangents}function rs(De,wt,pt,Ot){wt.isScene!==!0&&(wt=zt),dt.resetTextureUnits();const rn=wt.fog,hr=pt.isMeshStandardMaterial?wt.environment:null,Jn=_e===null?te.outputEncoding:_e.texture.encoding,gr=(pt.isMeshStandardMaterial?kt:$t).get(pt.envMap||hr),Lr=pt.vertexColors===!0&&!!Ot.geometry&&!!Ot.geometry.attributes.color&&Ot.geometry.attributes.color.itemSize===4,ri=!!Ot.geometry&&!!Ot.geometry.attributes.tangent,Hr=!!Ot.geometry&&!!Ot.geometry.morphAttributes.position,xr=!!Ot.geometry&&!!Ot.geometry.morphAttributes.normal,Fn=Ae.get(pt),vs=H.state.lights;if(nr===!0&&(er===!0||De!==Ne)){const Is=De===Ne&&pt.id===ve;Rr.setState(pt,De,Is)}let Fi=!1;pt.version===Fn.__version?Fn.needsLights&&Fn.lightsStateVersion!==vs.state.version||Fn.outputEncoding!==Jn||Ot.isInstancedMesh&&Fn.instancing===!1?Fi=!0:Ot.isInstancedMesh||Fn.instancing!==!0?Ot.isSkinnedMesh&&Fn.skinning===!1?Fi=!0:Ot.isSkinnedMesh||Fn.skinning!==!0?Fn.envMap!==gr||pt.fog&&Fn.fog!==rn?Fi=!0:Fn.numClippingPlanes===void 0||Fn.numClippingPlanes===Rr.numPlanes&&Fn.numIntersection===Rr.numIntersection?(Fn.vertexAlphas!==Lr||Fn.vertexTangents!==ri||Fn.morphTargets!==Hr||Fn.morphNormals!==xr)&&(Fi=!0):Fi=!0:Fi=!0:Fi=!0:(Fi=!0,Fn.__version=pt.version);let Eo=Fn.currentProgram;Fi===!0&&(Eo=Tm(pt,wt,Ot));let Ps=!1,wc=!1,yu=!1;const As=Eo.getUniforms(),al=Fn.uniforms;if(dn.useProgram(Eo.program)&&(Ps=!0,wc=!0,yu=!0),pt.id!==ve&&(ve=pt.id,wc=!0),Ps||Ne!==De){if(As.setValue(en,"projectionMatrix",De.projectionMatrix),gn.logarithmicDepthBuffer&&As.setValue(en,"logDepthBufFC",2/(Math.log(De.far+1)/Math.LN2)),Ne!==De&&(Ne=De,wc=!0,yu=!0),pt.isShaderMaterial||pt.isMeshPhongMaterial||pt.isMeshToonMaterial||pt.isMeshStandardMaterial||pt.envMap){const Is=As.map.cameraPosition;Is!==void 0&&Is.setValue(en,Dt.setFromMatrixPosition(De.matrixWorld))}(pt.isMeshPhongMaterial||pt.isMeshToonMaterial||pt.isMeshLambertMaterial||pt.isMeshBasicMaterial||pt.isMeshStandardMaterial||pt.isShaderMaterial)&&As.setValue(en,"isOrthographic",De.isOrthographicCamera===!0),(pt.isMeshPhongMaterial||pt.isMeshToonMaterial||pt.isMeshLambertMaterial||pt.isMeshBasicMaterial||pt.isMeshStandardMaterial||pt.isShaderMaterial||pt.isShadowMaterial||Ot.isSkinnedMesh)&&As.setValue(en,"viewMatrix",De.matrixWorldInverse)}if(Ot.isSkinnedMesh){As.setOptional(en,Ot,"bindMatrix"),As.setOptional(en,Ot,"bindMatrixInverse");const Is=Ot.skeleton;Is&&(gn.floatVertexTextures?(Is.boneTexture===null&&Is.computeBoneTexture(),As.setValue(en,"boneTexture",Is.boneTexture,dt),As.setValue(en,"boneTextureSize",Is.boneTextureSize)):As.setOptional(en,Is,"boneMatrices"))}var Oi,na;return(wc||Fn.receiveShadow!==Ot.receiveShadow)&&(Fn.receiveShadow=Ot.receiveShadow,As.setValue(en,"receiveShadow",Ot.receiveShadow)),wc&&(As.setValue(en,"toneMappingExposure",te.toneMappingExposure),Fn.needsLights&&(na=yu,(Oi=al).ambientLightColor.needsUpdate=na,Oi.lightProbe.needsUpdate=na,Oi.directionalLights.needsUpdate=na,Oi.directionalLightShadows.needsUpdate=na,Oi.pointLights.needsUpdate=na,Oi.pointLightShadows.needsUpdate=na,Oi.spotLights.needsUpdate=na,Oi.spotLightShadows.needsUpdate=na,Oi.rectAreaLights.needsUpdate=na,Oi.hemisphereLights.needsUpdate=na),rn&&pt.fog&&mn.refreshFogUniforms(al,rn),mn.refreshMaterialUniforms(al,pt,ct,ut,ke),su.upload(en,Fn.uniformsList,al,dt)),pt.isShaderMaterial&&pt.uniformsNeedUpdate===!0&&(su.upload(en,Fn.uniformsList,al,dt),pt.uniformsNeedUpdate=!1),pt.isSpriteMaterial&&As.setValue(en,"center",Ot.center),As.setValue(en,"modelViewMatrix",Ot.modelViewMatrix),As.setValue(en,"normalMatrix",Ot.normalMatrix),As.setValue(en,"modelMatrix",Ot.matrixWorld),Eo}gu.setAnimationLoop(function(De){ns&&ns(De)}),typeof window!="undefined"&&gu.setContext(window),this.setAnimationLoop=function(De){ns=De,cs.setAnimationLoop(De),De===null?gu.stop():gu.start()},cs.addEventListener("sessionstart",Ax),cs.addEventListener("sessionend",Ix),this.render=function(De,wt){if(wt!==void 0&&wt.isCamera!==!0)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(ae===!0)return;De.autoUpdate===!0&&De.updateMatrixWorld(),wt.parent===null&&wt.updateMatrixWorld(),cs.enabled===!0&&cs.isPresenting===!0&&(cs.cameraAutoUpdate===!0&&cs.updateCamera(wt),wt=cs.getCamera()),De.isScene===!0&&De.onBeforeRender(te,De,wt,_e),H=Ii.get(De,ee.length),H.init(),ee.push(H),Ue.multiplyMatrices(wt.projectionMatrix,wt.matrixWorldInverse),Pn.setFromProjectionMatrix(Ue),er=this.localClippingEnabled,nr=Rr.init(this.clippingPlanes,er,wt),j=Br.get(De,Y.length),j.init(),Y.push(j),Ip(De,wt,0,te.sortObjects),j.finish(),te.sortObjects===!0&&j.sort(an,Gt),nr===!0&&Rr.beginShadows();const pt=H.state.shadowsArray;if(xs.render(pt,De,wt),nr===!0&&Rr.endShadows(),this.info.autoReset===!0&&this.info.reset(),ci.render(j,De),H.setupLights(te.physicallyCorrectLights),wt.isArrayCamera){const Ot=wt.cameras;for(let rn=0,hr=Ot.length;rn<hr;rn++){const Jn=Ot[rn];oy(j,De,Jn,Jn.viewport)}}else oy(j,De,wt);_e!==null&&(dt.updateMultisampleRenderTarget(_e),dt.updateRenderTargetMipmap(_e)),De.isScene===!0&&De.onAfterRender(te,De,wt),dn.buffers.depth.setTest(!0),dn.buffers.depth.setMask(!0),dn.buffers.color.setMask(!0),dn.setPolygonOffset(!1),ta.resetDefaultState(),ve=-1,Ne=null,ee.pop(),H=ee.length>0?ee[ee.length-1]:null,Y.pop(),j=Y.length>0?Y[Y.length-1]:null},this.getActiveCubeFace=function(){return ne},this.getActiveMipmapLevel=function(){return me},this.getRenderTarget=function(){return _e},this.setRenderTarget=function(De,wt=0,pt=0){_e=De,ne=wt,me=pt,De&&Ae.get(De).__webglFramebuffer===void 0&&dt.setupRenderTarget(De);let Ot=null,rn=!1,hr=!1;if(De){const Jn=De.texture;(Jn.isDataTexture3D||Jn.isDataTexture2DArray)&&(hr=!0);const gr=Ae.get(De).__webglFramebuffer;De.isWebGLCubeRenderTarget?(Ot=gr[wt],rn=!0):Ot=De.isWebGLMultisampleRenderTarget?Ae.get(De).__webglMultisampledFramebuffer:gr,Oe.copy(De.viewport),tt.copy(De.scissor),it=De.scissorTest}else Oe.copy(Lt).multiplyScalar(ct).floor(),tt.copy(Yt).multiplyScalar(ct).floor(),it=Tn;if(dn.bindFramebuffer(36160,Ot)&&gn.drawBuffers){let Jn=!1;if(De)if(De.isWebGLMultipleRenderTargets){const gr=De.texture;if(In.length!==gr.length||In[0]!==36064){for(let Lr=0,ri=gr.length;Lr<ri;Lr++)In[Lr]=36064+Lr;In.length=gr.length,Jn=!0}}else In.length===1&&In[0]===36064||(In[0]=36064,In.length=1,Jn=!0);else In.length===1&&In[0]===1029||(In[0]=1029,In.length=1,Jn=!0);Jn&&(gn.isWebGL2?en.drawBuffers(In):Kt.get("WEBGL_draw_buffers").drawBuffersWEBGL(In))}if(dn.viewport(Oe),dn.scissor(tt),dn.setScissorTest(it),rn){const Jn=Ae.get(De.texture);en.framebufferTexture2D(36160,36064,34069+wt,Jn.__webglTexture,pt)}else if(hr){const Jn=Ae.get(De.texture),gr=wt||0;en.framebufferTextureLayer(36160,36064,Jn.__webglTexture,pt||0,gr)}ve=-1},this.readRenderTargetPixels=function(De,wt,pt,Ot,rn,hr,Jn){if(!De||!De.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let gr=Ae.get(De).__webglFramebuffer;if(De.isWebGLCubeRenderTarget&&Jn!==void 0&&(gr=gr[Jn]),gr){dn.bindFramebuffer(36160,gr);try{const Lr=De.texture,ri=Lr.format,Hr=Lr.type;if(ri!==Xn&&Pi.convert(ri)!==en.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const xr=Hr===uo&&(Kt.has("EXT_color_buffer_half_float")||gn.isWebGL2&&Kt.has("EXT_color_buffer_float"));if(!(Hr===Wa||Pi.convert(Hr)===en.getParameter(35738)||Hr===hs&&(gn.isWebGL2||Kt.has("OES_texture_float")||Kt.has("WEBGL_color_buffer_float"))||xr))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");en.checkFramebufferStatus(36160)===36053?wt>=0&&wt<=De.width-Ot&&pt>=0&&pt<=De.height-rn&&en.readPixels(wt,pt,Ot,rn,Pi.convert(ri),Pi.convert(Hr),hr):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const Lr=_e!==null?Ae.get(_e).__webglFramebuffer:null;dn.bindFramebuffer(36160,Lr)}}},this.copyFramebufferToTexture=function(De,wt,pt=0){const Ot=Math.pow(2,-pt),rn=Math.floor(wt.image.width*Ot),hr=Math.floor(wt.image.height*Ot);let Jn=Pi.convert(wt.format);gn.isWebGL2&&(Jn===6407&&(Jn=32849),Jn===6408&&(Jn=32856)),dt.setTexture2D(wt,0),en.copyTexImage2D(3553,pt,Jn,De.x,De.y,rn,hr,0),dn.unbindTexture()},this.copyTextureToTexture=function(De,wt,pt,Ot=0){const rn=wt.image.width,hr=wt.image.height,Jn=Pi.convert(pt.format),gr=Pi.convert(pt.type);dt.setTexture2D(pt,0),en.pixelStorei(37440,pt.flipY),en.pixelStorei(37441,pt.premultiplyAlpha),en.pixelStorei(3317,pt.unpackAlignment),wt.isDataTexture?en.texSubImage2D(3553,Ot,De.x,De.y,rn,hr,Jn,gr,wt.image.data):wt.isCompressedTexture?en.compressedTexSubImage2D(3553,Ot,De.x,De.y,wt.mipmaps[0].width,wt.mipmaps[0].height,Jn,wt.mipmaps[0].data):en.texSubImage2D(3553,Ot,De.x,De.y,Jn,gr,wt.image),Ot===0&&pt.generateMipmaps&&en.generateMipmap(3553),dn.unbindTexture()},this.copyTextureToTexture3D=function(De,wt,pt,Ot,rn=0){if(te.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const hr=De.max.x-De.min.x+1,Jn=De.max.y-De.min.y+1,gr=De.max.z-De.min.z+1,Lr=Pi.convert(Ot.format),ri=Pi.convert(Ot.type);let Hr;if(Ot.isDataTexture3D)dt.setTexture3D(Ot,0),Hr=32879;else{if(!Ot.isDataTexture2DArray)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");dt.setTexture2DArray(Ot,0),Hr=35866}en.pixelStorei(37440,Ot.flipY),en.pixelStorei(37441,Ot.premultiplyAlpha),en.pixelStorei(3317,Ot.unpackAlignment);const xr=en.getParameter(3314),Fn=en.getParameter(32878),vs=en.getParameter(3316),Fi=en.getParameter(3315),Eo=en.getParameter(32877),Ps=pt.isCompressedTexture?pt.mipmaps[0]:pt.image;en.pixelStorei(3314,Ps.width),en.pixelStorei(32878,Ps.height),en.pixelStorei(3316,De.min.x),en.pixelStorei(3315,De.min.y),en.pixelStorei(32877,De.min.z),pt.isDataTexture||pt.isDataTexture3D?en.texSubImage3D(Hr,rn,wt.x,wt.y,wt.z,hr,Jn,gr,Lr,ri,Ps.data):pt.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),en.compressedTexSubImage3D(Hr,rn,wt.x,wt.y,wt.z,hr,Jn,gr,Lr,Ps.data)):en.texSubImage3D(Hr,rn,wt.x,wt.y,wt.z,hr,Jn,gr,Lr,ri,Ps),en.pixelStorei(3314,xr),en.pixelStorei(32878,Fn),en.pixelStorei(3316,vs),en.pixelStorei(3315,Fi),en.pixelStorei(32877,Eo),rn===0&&Ot.generateMipmaps&&en.generateMipmap(Hr),dn.unbindTexture()},this.initTexture=function(De){dt.setTexture2D(De,0),dn.unbindTexture()},this.resetState=function(){ne=0,me=0,_e=null,dn.reset(),ta.reset()},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class gh extends ur{}gh.prototype.isWebGL1Renderer=!0;class Ei{constructor(n,o=25e-5){this.name="",this.color=new yn(n),this.density=o}clone(){return new Ei(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}Ei.prototype.isFogExp2=!0;class mr{constructor(n,o=1,h=1e3){this.name="",this.color=new yn(n),this.near=o,this.far=h}clone(){return new mr(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}mr.prototype.isFog=!0;class Qa extends Cr{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(n,o){return super.copy(n,o),n.background!==null&&(this.background=n.background.clone()),n.environment!==null&&(this.environment=n.environment.clone()),n.fog!==null&&(this.fog=n.fog.clone()),n.overrideMaterial!==null&&(this.overrideMaterial=n.overrideMaterial.clone()),this.autoUpdate=n.autoUpdate,this.matrixAutoUpdate=n.matrixAutoUpdate,this}toJSON(n){const o=super.toJSON(n);return this.fog!==null&&(o.object.fog=this.fog.toJSON()),o}}Qa.prototype.isScene=!0;class Tl{constructor(n,o){this.array=n,this.stride=o,this.count=n!==void 0?n.length/o:0,this.usage=xl,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Vs()}onUploadCallback(){}set needsUpdate(n){n===!0&&this.version++}setUsage(n){return this.usage=n,this}copy(n){return this.array=new n.array.constructor(n.array),this.count=n.count,this.stride=n.stride,this.usage=n.usage,this}copyAt(n,o,h){n*=this.stride,h*=o.stride;for(let p=0,w=this.stride;p<w;p++)this.array[n+p]=o.array[h+p];return this}set(n,o=0){return this.array.set(n,o),this}clone(n){n.arrayBuffers===void 0&&(n.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Vs()),n.arrayBuffers[this.array.buffer._uuid]===void 0&&(n.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const o=new this.array.constructor(n.arrayBuffers[this.array.buffer._uuid]),h=new this.constructor(o,this.stride);return h.setUsage(this.usage),h}onUpload(n){return this.onUploadCallback=n,this}toJSON(n){return n.arrayBuffers===void 0&&(n.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Vs()),n.arrayBuffers[this.array.buffer._uuid]===void 0&&(n.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}Tl.prototype.isInterleavedBuffer=!0;const vi=new Te;class Qo{constructor(n,o,h,p=!1){this.name="",this.data=n,this.itemSize=o,this.offset=h,this.normalized=p===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(n){this.data.needsUpdate=n}applyMatrix4(n){for(let o=0,h=this.data.count;o<h;o++)vi.x=this.getX(o),vi.y=this.getY(o),vi.z=this.getZ(o),vi.applyMatrix4(n),this.setXYZ(o,vi.x,vi.y,vi.z);return this}applyNormalMatrix(n){for(let o=0,h=this.count;o<h;o++)vi.x=this.getX(o),vi.y=this.getY(o),vi.z=this.getZ(o),vi.applyNormalMatrix(n),this.setXYZ(o,vi.x,vi.y,vi.z);return this}transformDirection(n){for(let o=0,h=this.count;o<h;o++)vi.x=this.getX(o),vi.y=this.getY(o),vi.z=this.getZ(o),vi.transformDirection(n),this.setXYZ(o,vi.x,vi.y,vi.z);return this}setX(n,o){return this.data.array[n*this.data.stride+this.offset]=o,this}setY(n,o){return this.data.array[n*this.data.stride+this.offset+1]=o,this}setZ(n,o){return this.data.array[n*this.data.stride+this.offset+2]=o,this}setW(n,o){return this.data.array[n*this.data.stride+this.offset+3]=o,this}getX(n){return this.data.array[n*this.data.stride+this.offset]}getY(n){return this.data.array[n*this.data.stride+this.offset+1]}getZ(n){return this.data.array[n*this.data.stride+this.offset+2]}getW(n){return this.data.array[n*this.data.stride+this.offset+3]}setXY(n,o,h){return n=n*this.data.stride+this.offset,this.data.array[n+0]=o,this.data.array[n+1]=h,this}setXYZ(n,o,h,p){return n=n*this.data.stride+this.offset,this.data.array[n+0]=o,this.data.array[n+1]=h,this.data.array[n+2]=p,this}setXYZW(n,o,h,p,w){return n=n*this.data.stride+this.offset,this.data.array[n+0]=o,this.data.array[n+1]=h,this.data.array[n+2]=p,this.data.array[n+3]=w,this}clone(n){if(n===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const o=[];for(let h=0;h<this.count;h++){const p=h*this.data.stride+this.offset;for(let w=0;w<this.itemSize;w++)o.push(this.data.array[p+w])}return new Mr(new this.array.constructor(o),this.itemSize,this.normalized)}return n.interleavedBuffers===void 0&&(n.interleavedBuffers={}),n.interleavedBuffers[this.data.uuid]===void 0&&(n.interleavedBuffers[this.data.uuid]=this.data.clone(n)),new Qo(n.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(n){if(n===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const o=[];for(let h=0;h<this.count;h++){const p=h*this.data.stride+this.offset;for(let w=0;w<this.itemSize;w++)o.push(this.data.array[p+w])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:o,normalized:this.normalized}}return n.interleavedBuffers===void 0&&(n.interleavedBuffers={}),n.interleavedBuffers[this.data.uuid]===void 0&&(n.interleavedBuffers[this.data.uuid]=this.data.toJSON(n)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Qo.prototype.isInterleavedBufferAttribute=!0;class yh extends fr{constructor(n){super(),this.type="SpriteMaterial",this.color=new yn(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.alphaMap=n.alphaMap,this.rotation=n.rotation,this.sizeAttenuation=n.sizeAttenuation,this}}let ec;yh.prototype.isSpriteMaterial=!0;const xh=new Te,vh=new Te,au=new Te,El=new Qt,el=new Qt,_g=new Gn,rp=new Te,bh=new Te,ip=new Te,Sg=new Qt,Xf=new Qt,sp=new Qt;class ma extends Cr{constructor(n){if(super(),this.type="Sprite",ec===void 0){ec=new On;const o=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),h=new Tl(o,5);ec.setIndex([0,1,2,0,2,3]),ec.setAttribute("position",new Qo(h,3,0,!1)),ec.setAttribute("uv",new Qo(h,2,3,!1))}this.geometry=ec,this.material=n!==void 0?n:new yh,this.center=new Qt(.5,.5)}raycast(n,o){n.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),vh.setFromMatrixScale(this.matrixWorld),_g.copy(n.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(n.camera.matrixWorldInverse,this.matrixWorld),au.setFromMatrixPosition(this.modelViewMatrix),n.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&vh.multiplyScalar(-au.z);const h=this.material.rotation;let p,w;h!==0&&(w=Math.cos(h),p=Math.sin(h));const S=this.center;bo(rp.set(-.5,-.5,0),au,S,vh,p,w),bo(bh.set(.5,-.5,0),au,S,vh,p,w),bo(ip.set(.5,.5,0),au,S,vh,p,w),Sg.set(0,0),Xf.set(1,0),sp.set(1,1);let I=n.ray.intersectTriangle(rp,bh,ip,!1,xh);if(I===null&&(bo(bh.set(-.5,.5,0),au,S,vh,p,w),Xf.set(0,1),I=n.ray.intersectTriangle(rp,ip,bh,!1,xh),I===null))return;const k=n.ray.origin.distanceTo(xh);k<n.near||k>n.far||o.push({distance:k,point:xh.clone(),uv:Li.getUV(xh,rp,bh,ip,Sg,Xf,sp,new Qt),face:null,object:this})}copy(n){return super.copy(n),n.center!==void 0&&this.center.copy(n.center),this.material=n.material,this}}function bo(T,n,o,h,p,w){El.subVectors(T,o).addScalar(.5).multiply(h),p!==void 0?(el.x=w*El.x-p*El.y,el.y=p*El.x+w*El.y):el.copy(El),T.copy(n),T.x+=el.x,T.y+=el.y,T.applyMatrix4(_g)}ma.prototype.isSprite=!0;const Wi=new Te,ou=new Te;class Mg extends Cr{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(n){super.copy(n,!1);const o=n.levels;for(let h=0,p=o.length;h<p;h++){const w=o[h];this.addLevel(w.object.clone(),w.distance)}return this.autoUpdate=n.autoUpdate,this}addLevel(n,o=0){o=Math.abs(o);const h=this.levels;let p;for(p=0;p<h.length&&!(o<h[p].distance);p++);return h.splice(p,0,{distance:o,object:n}),this.add(n),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(n){const o=this.levels;if(o.length>0){let h,p;for(h=1,p=o.length;h<p&&!(n<o[h].distance);h++);return o[h-1].object}return null}raycast(n,o){if(this.levels.length>0){Wi.setFromMatrixPosition(this.matrixWorld);const h=n.ray.origin.distanceTo(Wi);this.getObjectForDistance(h).raycast(n,o)}}update(n){const o=this.levels;if(o.length>1){Wi.setFromMatrixPosition(n.matrixWorld),ou.setFromMatrixPosition(this.matrixWorld);const h=Wi.distanceTo(ou)/n.zoom;let p,w;for(o[0].object.visible=!0,p=1,w=o.length;p<w&&h>=o[p].distance;p++)o[p-1].object.visible=!1,o[p].object.visible=!0;for(this._currentLevel=p-1;p<w;p++)o[p].object.visible=!1}}toJSON(n){const o=super.toJSON(n);this.autoUpdate===!1&&(o.object.autoUpdate=!1),o.object.levels=[];const h=this.levels;for(let p=0,w=h.length;p<w;p++){const S=h[p];o.object.levels.push({object:S.object.uuid,distance:S.distance})}return o}}const Yf=new Te,Tg=new Xr,wh=new Xr,_h=new Te,lu=new Gn;class es extends Ji{constructor(n,o){super(n,o),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Gn,this.bindMatrixInverse=new Gn}copy(n){return super.copy(n),this.bindMode=n.bindMode,this.bindMatrix.copy(n.bindMatrix),this.bindMatrixInverse.copy(n.bindMatrixInverse),this.skeleton=n.skeleton,this}bind(n,o){this.skeleton=n,o===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),o=this.matrixWorld),this.bindMatrix.copy(o),this.bindMatrixInverse.copy(o).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const n=new Xr,o=this.geometry.attributes.skinWeight;for(let h=0,p=o.count;h<p;h++){n.x=o.getX(h),n.y=o.getY(h),n.z=o.getZ(h),n.w=o.getW(h);const w=1/n.manhattanLength();w!==1/0?n.multiplyScalar(w):n.set(1,0,0,0),o.setXYZW(h,n.x,n.y,n.z,n.w)}}updateMatrixWorld(n){super.updateMatrixWorld(n),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(n,o){const h=this.skeleton,p=this.geometry;Tg.fromBufferAttribute(p.attributes.skinIndex,n),wh.fromBufferAttribute(p.attributes.skinWeight,n),Yf.fromBufferAttribute(p.attributes.position,n).applyMatrix4(this.bindMatrix),o.set(0,0,0);for(let w=0;w<4;w++){const S=wh.getComponent(w);if(S!==0){const I=Tg.getComponent(w);lu.multiplyMatrices(h.bones[I].matrixWorld,h.boneInverses[I]),o.addScaledVector(_h.copy(Yf).applyMatrix4(lu),S)}}return o.applyMatrix4(this.bindMatrixInverse)}}es.prototype.isSkinnedMesh=!0;class wo extends Cr{constructor(){super(),this.type="Bone"}}wo.prototype.isBone=!0;class Xe extends Ri{constructor(n=null,o=1,h=1,p,w,S,I,k,R=Sr,$=Sr,j,H){super(null,S,I,k,R,$,p,w,j,H),this.image={data:n,width:o,height:h},this.magFilter=R,this.minFilter=$,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Xe.prototype.isDataTexture=!0;const ap=new Gn,U0=new Gn;class bi{constructor(n=[],o=[]){this.uuid=Vs(),this.bones=n.slice(0),this.boneInverses=o,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const n=this.bones,o=this.boneInverses;if(this.boneMatrices=new Float32Array(16*n.length),o.length===0)this.calculateInverses();else if(n.length!==o.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let h=0,p=this.bones.length;h<p;h++)this.boneInverses.push(new Gn)}}calculateInverses(){this.boneInverses.length=0;for(let n=0,o=this.bones.length;n<o;n++){const h=new Gn;this.bones[n]&&h.copy(this.bones[n].matrixWorld).invert(),this.boneInverses.push(h)}}pose(){for(let n=0,o=this.bones.length;n<o;n++){const h=this.bones[n];h&&h.matrixWorld.copy(this.boneInverses[n]).invert()}for(let n=0,o=this.bones.length;n<o;n++){const h=this.bones[n];h&&(h.parent&&h.parent.isBone?(h.matrix.copy(h.parent.matrixWorld).invert(),h.matrix.multiply(h.matrixWorld)):h.matrix.copy(h.matrixWorld),h.matrix.decompose(h.position,h.quaternion,h.scale))}}update(){const n=this.bones,o=this.boneInverses,h=this.boneMatrices,p=this.boneTexture;for(let w=0,S=n.length;w<S;w++){const I=n[w]?n[w].matrixWorld:U0;ap.multiplyMatrices(I,o[w]),ap.toArray(h,16*w)}p!==null&&(p.needsUpdate=!0)}clone(){return new bi(this.bones,this.boneInverses)}computeBoneTexture(){let n=Math.sqrt(4*this.bones.length);n=Ef(n),n=Math.max(n,4);const o=new Float32Array(n*n*4);o.set(this.boneMatrices);const h=new Xe(o,n,n,Xn,hs);return this.boneMatrices=o,this.boneTexture=h,this.boneTextureSize=n,this}getBoneByName(n){for(let o=0,h=this.bones.length;o<h;o++){const p=this.bones[o];if(p.name===n)return p}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(n,o){this.uuid=n.uuid;for(let h=0,p=n.bones.length;h<p;h++){const w=n.bones[h];let S=o[w];S===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",w),S=new wo),this.bones.push(S),this.boneInverses.push(new Gn().fromArray(n.boneInverses[h]))}return this.init(),this}toJSON(){const n={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};n.uuid=this.uuid;const o=this.bones,h=this.boneInverses;for(let p=0,w=o.length;p<w;p++){const S=o[p];n.bones.push(S.uuid);const I=h[p];n.boneInverses.push(I.toArray())}return n}}class Rs extends Mr{constructor(n,o,h,p=1){typeof h=="number"&&(p=h,h=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(n,o,h),this.meshPerAttribute=p}copy(n){return super.copy(n),this.meshPerAttribute=n.meshPerAttribute,this}toJSON(){const n=super.toJSON();return n.meshPerAttribute=this.meshPerAttribute,n.isInstancedBufferAttribute=!0,n}}Rs.prototype.isInstancedBufferAttribute=!0;const Nr=new Gn,tc=new Gn,Eg=[],uu=new Ji;class nc extends Ji{constructor(n,o,h){super(n,o),this.instanceMatrix=new Rs(new Float32Array(16*h),16),this.instanceColor=null,this.count=h,this.frustumCulled=!1}copy(n){return super.copy(n),this.instanceMatrix.copy(n.instanceMatrix),n.instanceColor!==null&&(this.instanceColor=n.instanceColor.clone()),this.count=n.count,this}getColorAt(n,o){o.fromArray(this.instanceColor.array,3*n)}getMatrixAt(n,o){o.fromArray(this.instanceMatrix.array,16*n)}raycast(n,o){const h=this.matrixWorld,p=this.count;if(uu.geometry=this.geometry,uu.material=this.material,uu.material!==void 0)for(let w=0;w<p;w++){this.getMatrixAt(w,Nr),tc.multiplyMatrices(h,Nr),uu.matrixWorld=tc,uu.raycast(n,Eg);for(let S=0,I=Eg.length;S<I;S++){const k=Eg[S];k.instanceId=w,k.object=this,o.push(k)}Eg.length=0}}setColorAt(n,o){this.instanceColor===null&&(this.instanceColor=new Rs(new Float32Array(3*this.instanceMatrix.count),3)),o.toArray(this.instanceColor.array,3*n)}setMatrixAt(n,o){o.toArray(this.instanceMatrix.array,16*n)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}nc.prototype.isInstancedMesh=!0;class fs extends fr{constructor(n){super(),this.type="LineBasicMaterial",this.color=new yn(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.linewidth=n.linewidth,this.linecap=n.linecap,this.linejoin=n.linejoin,this}}fs.prototype.isLineBasicMaterial=!0;const V0=new Te,W0=new Te,Ag=new Gn,Ig=new Vo,cu=new $o;class tl extends Cr{constructor(n=new On,o=new fs){super(),this.type="Line",this.geometry=n,this.material=o,this.updateMorphTargets()}copy(n){return super.copy(n),this.material=n.material,this.geometry=n.geometry,this}computeLineDistances(){const n=this.geometry;if(n.isBufferGeometry)if(n.index===null){const o=n.attributes.position,h=[0];for(let p=1,w=o.count;p<w;p++)V0.fromBufferAttribute(o,p-1),W0.fromBufferAttribute(o,p),h[p]=h[p-1],h[p]+=V0.distanceTo(W0);n.setAttribute("lineDistance",new pn(h,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else n.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(n,o){const h=this.geometry,p=this.matrixWorld,w=n.params.Line.threshold,S=h.drawRange;if(h.boundingSphere===null&&h.computeBoundingSphere(),cu.copy(h.boundingSphere),cu.applyMatrix4(p),cu.radius+=w,n.ray.intersectsSphere(cu)===!1)return;Ag.copy(p).invert(),Ig.copy(n.ray).applyMatrix4(Ag);const I=w/((this.scale.x+this.scale.y+this.scale.z)/3),k=I*I,R=new Te,$=new Te,j=new Te,H=new Te,Y=this.isLineSegments?2:1;if(h.isBufferGeometry){const ee=h.index,te=h.attributes.position;if(ee!==null)for(let ae=Math.max(0,S.start),ne=Math.min(ee.count,S.start+S.count)-1;ae<ne;ae+=Y){const me=ee.getX(ae),_e=ee.getX(ae+1);if(R.fromBufferAttribute(te,me),$.fromBufferAttribute(te,_e),Ig.distanceSqToSegment(R,$,H,j)>k)continue;H.applyMatrix4(this.matrixWorld);const ve=n.ray.origin.distanceTo(H);ve<n.near||ve>n.far||o.push({distance:ve,point:j.clone().applyMatrix4(this.matrixWorld),index:ae,face:null,faceIndex:null,object:this})}else for(let ae=Math.max(0,S.start),ne=Math.min(te.count,S.start+S.count)-1;ae<ne;ae+=Y){if(R.fromBufferAttribute(te,ae),$.fromBufferAttribute(te,ae+1),Ig.distanceSqToSegment(R,$,H,j)>k)continue;H.applyMatrix4(this.matrixWorld);const me=n.ray.origin.distanceTo(H);me<n.near||me>n.far||o.push({distance:me,point:j.clone().applyMatrix4(this.matrixWorld),index:ae,face:null,faceIndex:null,object:this})}}else h.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const n=this.geometry;if(n.isBufferGeometry){const o=n.morphAttributes,h=Object.keys(o);if(h.length>0){const p=o[h[0]];if(p!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let w=0,S=p.length;w<S;w++){const I=p[w].name||String(w);this.morphTargetInfluences.push(0),this.morphTargetDictionary[I]=w}}}}else{const o=n.morphTargets;o!==void 0&&o.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}tl.prototype.isLine=!0;const Ks=new Te,G0=new Te;class ga extends tl{constructor(n,o){super(n,o),this.type="LineSegments"}computeLineDistances(){const n=this.geometry;if(n.isBufferGeometry)if(n.index===null){const o=n.attributes.position,h=[];for(let p=0,w=o.count;p<w;p+=2)Ks.fromBufferAttribute(o,p),G0.fromBufferAttribute(o,p+1),h[p]=p===0?0:h[p-1],h[p+1]=h[p]+Ks.distanceTo(G0);n.setAttribute("lineDistance",new pn(h,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else n.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}ga.prototype.isLineSegments=!0;class Cg extends tl{constructor(n,o){super(n,o),this.type="LineLoop"}}Cg.prototype.isLineLoop=!0;class rc extends fr{constructor(n){super(),this.type="PointsMaterial",this.color=new yn(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.alphaMap=n.alphaMap,this.size=n.size,this.sizeAttenuation=n.sizeAttenuation,this}}rc.prototype.isPointsMaterial=!0;const Al=new Gn,op=new Vo,lp=new $o,Sh=new Te;class Mh extends Cr{constructor(n=new On,o=new rc){super(),this.type="Points",this.geometry=n,this.material=o,this.updateMorphTargets()}copy(n){return super.copy(n),this.material=n.material,this.geometry=n.geometry,this}raycast(n,o){const h=this.geometry,p=this.matrixWorld,w=n.params.Points.threshold,S=h.drawRange;if(h.boundingSphere===null&&h.computeBoundingSphere(),lp.copy(h.boundingSphere),lp.applyMatrix4(p),lp.radius+=w,n.ray.intersectsSphere(lp)===!1)return;Al.copy(p).invert(),op.copy(n.ray).applyMatrix4(Al);const I=w/((this.scale.x+this.scale.y+this.scale.z)/3),k=I*I;if(h.isBufferGeometry){const R=h.index,$=h.attributes.position;if(R!==null)for(let j=Math.max(0,S.start),H=Math.min(R.count,S.start+S.count);j<H;j++){const Y=R.getX(j);Sh.fromBufferAttribute($,Y),H0(Sh,Y,k,p,n,o,this)}else for(let j=Math.max(0,S.start),H=Math.min($.count,S.start+S.count);j<H;j++)Sh.fromBufferAttribute($,j),H0(Sh,j,k,p,n,o,this)}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const n=this.geometry;if(n.isBufferGeometry){const o=n.morphAttributes,h=Object.keys(o);if(h.length>0){const p=o[h[0]];if(p!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let w=0,S=p.length;w<S;w++){const I=p[w].name||String(w);this.morphTargetInfluences.push(0),this.morphTargetDictionary[I]=w}}}}else{const o=n.morphTargets;o!==void 0&&o.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}function H0(T,n,o,h,p,w,S){const I=op.distanceSqToPoint(T);if(I<o){const k=new Te;op.closestPointToPoint(T,k),k.applyMatrix4(h);const R=p.ray.origin.distanceTo(k);if(R<p.near||R>p.far)return;w.push({distance:R,distanceToRay:Math.sqrt(I),point:k,index:n,face:null,object:S})}}Mh.prototype.isPoints=!0;class j0 extends Ri{constructor(n,o,h,p,w,S,I,k,R){super(n,o,h,p,w,S,I,k,R),this.format=I!==void 0?I:Xt,this.minFilter=S!==void 0?S:Or,this.magFilter=w!==void 0?w:Or,this.generateMipmaps=!1;const $=this;"requestVideoFrameCallback"in n&&n.requestVideoFrameCallback(function j(){$.needsUpdate=!0,n.requestVideoFrameCallback(j)})}clone(){return new this.constructor(this.image).copy(this)}update(){const n=this.image;!("requestVideoFrameCallback"in n)&&n.readyState>=n.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}j0.prototype.isVideoTexture=!0;class Th extends Ri{constructor(n,o,h,p,w,S,I,k,R,$,j,H){super(null,S,I,k,R,$,p,w,j,H),this.image={width:o,height:h},this.mipmaps=n,this.flipY=!1,this.generateMipmaps=!1}}Th.prototype.isCompressedTexture=!0;class Kf extends Ri{constructor(n,o,h,p,w,S,I,k,R){super(n,o,h,p,w,S,I,k,R),this.needsUpdate=!0}}Kf.prototype.isCanvasTexture=!0;class Zf extends Ri{constructor(n,o,h,p,w,S,I,k,R,$){if(($=$!==void 0?$:sr)!==sr&&$!==br)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");h===void 0&&$===sr&&(h=Ru),h===void 0&&$===br&&(h=lt),super(null,p,w,S,I,k,$,h,R),this.image={width:n,height:o},this.magFilter=I!==void 0?I:Sr,this.minFilter=k!==void 0?k:Sr,this.flipY=!1,this.generateMipmaps=!1}}Zf.prototype.isDepthTexture=!0;class Eh extends On{constructor(n=1,o=8,h=0,p=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:n,segments:o,thetaStart:h,thetaLength:p},o=Math.max(3,o);const w=[],S=[],I=[],k=[],R=new Te,$=new Qt;S.push(0,0,0),I.push(0,0,1),k.push(.5,.5);for(let j=0,H=3;j<=o;j++,H+=3){const Y=h+j/o*p;R.x=n*Math.cos(Y),R.y=n*Math.sin(Y),S.push(R.x,R.y,R.z),I.push(0,0,1),$.x=(S[H]/n+1)/2,$.y=(S[H+1]/n+1)/2,k.push($.x,$.y)}for(let j=1;j<=o;j++)w.push(j,j+1,0);this.setIndex(w),this.setAttribute("position",new pn(S,3)),this.setAttribute("normal",new pn(I,3)),this.setAttribute("uv",new pn(k,2))}static fromJSON(n){return new Eh(n.radius,n.segments,n.thetaStart,n.thetaLength)}}class Il extends On{constructor(n=1,o=1,h=1,p=8,w=1,S=!1,I=0,k=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:n,radiusBottom:o,height:h,radialSegments:p,heightSegments:w,openEnded:S,thetaStart:I,thetaLength:k};const R=this;p=Math.floor(p),w=Math.floor(w);const $=[],j=[],H=[],Y=[];let ee=0;const te=[],ae=h/2;let ne=0;function me(_e){const ve=ee,Ne=new Qt,Oe=new Te;let tt=0;const it=_e===!0?n:o,gt=_e===!0?1:-1;for(let ct=1;ct<=p;ct++)j.push(0,ae*gt,0),H.push(0,gt,0),Y.push(.5,.5),ee++;const ut=ee;for(let ct=0;ct<=p;ct++){const an=ct/p*k+I,Gt=Math.cos(an),Lt=Math.sin(an);Oe.x=it*Lt,Oe.y=ae*gt,Oe.z=it*Gt,j.push(Oe.x,Oe.y,Oe.z),H.push(0,gt,0),Ne.x=.5*Gt+.5,Ne.y=.5*Lt*gt+.5,Y.push(Ne.x,Ne.y),ee++}for(let ct=0;ct<p;ct++){const an=ve+ct,Gt=ut+ct;_e===!0?$.push(Gt,Gt+1,an):$.push(Gt+1,Gt,an),tt+=3}R.addGroup(ne,tt,_e===!0?1:2),ne+=tt}(function(){const _e=new Te,ve=new Te;let Ne=0;const Oe=(o-n)/h;for(let tt=0;tt<=w;tt++){const it=[],gt=tt/w,ut=gt*(o-n)+n;for(let ct=0;ct<=p;ct++){const an=ct/p,Gt=an*k+I,Lt=Math.sin(Gt),Yt=Math.cos(Gt);ve.x=ut*Lt,ve.y=-gt*h+ae,ve.z=ut*Yt,j.push(ve.x,ve.y,ve.z),_e.set(Lt,Oe,Yt).normalize(),H.push(_e.x,_e.y,_e.z),Y.push(an,1-gt),it.push(ee++)}te.push(it)}for(let tt=0;tt<p;tt++)for(let it=0;it<w;it++){const gt=te[it][tt],ut=te[it+1][tt],ct=te[it+1][tt+1],an=te[it][tt+1];$.push(gt,ut,an),$.push(ut,ct,an),Ne+=6}R.addGroup(ne,Ne,0),ne+=Ne})(),S===!1&&(n>0&&me(!0),o>0&&me(!1)),this.setIndex($),this.setAttribute("position",new pn(j,3)),this.setAttribute("normal",new pn(H,3)),this.setAttribute("uv",new pn(Y,2))}static fromJSON(n){return new Il(n.radiusTop,n.radiusBottom,n.height,n.radialSegments,n.heightSegments,n.openEnded,n.thetaStart,n.thetaLength)}}class nl extends Il{constructor(n=1,o=1,h=8,p=1,w=!1,S=0,I=2*Math.PI){super(0,n,o,h,p,w,S,I),this.type="ConeGeometry",this.parameters={radius:n,height:o,radialSegments:h,heightSegments:p,openEnded:w,thetaStart:S,thetaLength:I}}static fromJSON(n){return new nl(n.radius,n.height,n.radialSegments,n.heightSegments,n.openEnded,n.thetaStart,n.thetaLength)}}class Cl extends On{constructor(n,o,h=1,p=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:n,indices:o,radius:h,detail:p};const w=[],S=[];function I(H,Y,ee,te){const ae=te+1,ne=[];for(let me=0;me<=ae;me++){ne[me]=[];const _e=H.clone().lerp(ee,me/ae),ve=Y.clone().lerp(ee,me/ae),Ne=ae-me;for(let Oe=0;Oe<=Ne;Oe++)ne[me][Oe]=Oe===0&&me===ae?_e:_e.clone().lerp(ve,Oe/Ne)}for(let me=0;me<ae;me++)for(let _e=0;_e<2*(ae-me)-1;_e++){const ve=Math.floor(_e/2);_e%2==0?(k(ne[me][ve+1]),k(ne[me+1][ve]),k(ne[me][ve])):(k(ne[me][ve+1]),k(ne[me+1][ve+1]),k(ne[me+1][ve]))}}function k(H){w.push(H.x,H.y,H.z)}function R(H,Y){const ee=3*H;Y.x=n[ee+0],Y.y=n[ee+1],Y.z=n[ee+2]}function $(H,Y,ee,te){te<0&&H.x===1&&(S[Y]=H.x-1),ee.x===0&&ee.z===0&&(S[Y]=te/2/Math.PI+.5)}function j(H){return Math.atan2(H.z,-H.x)}(function(H){const Y=new Te,ee=new Te,te=new Te;for(let ae=0;ae<o.length;ae+=3)R(o[ae+0],Y),R(o[ae+1],ee),R(o[ae+2],te),I(Y,ee,te,H)})(p),function(H){const Y=new Te;for(let ee=0;ee<w.length;ee+=3)Y.x=w[ee+0],Y.y=w[ee+1],Y.z=w[ee+2],Y.normalize().multiplyScalar(H),w[ee+0]=Y.x,w[ee+1]=Y.y,w[ee+2]=Y.z}(h),function(){const H=new Te;for(let ee=0;ee<w.length;ee+=3){H.x=w[ee+0],H.y=w[ee+1],H.z=w[ee+2];const te=j(H)/2/Math.PI+.5,ae=(Y=H,Math.atan2(-Y.y,Math.sqrt(Y.x*Y.x+Y.z*Y.z))/Math.PI+.5);S.push(te,1-ae)}var Y;(function(){const ee=new Te,te=new Te,ae=new Te,ne=new Te,me=new Qt,_e=new Qt,ve=new Qt;for(let Ne=0,Oe=0;Ne<w.length;Ne+=9,Oe+=6){ee.set(w[Ne+0],w[Ne+1],w[Ne+2]),te.set(w[Ne+3],w[Ne+4],w[Ne+5]),ae.set(w[Ne+6],w[Ne+7],w[Ne+8]),me.set(S[Oe+0],S[Oe+1]),_e.set(S[Oe+2],S[Oe+3]),ve.set(S[Oe+4],S[Oe+5]),ne.copy(ee).add(te).add(ae).divideScalar(3);const tt=j(ne);$(me,Oe+0,ee,tt),$(_e,Oe+2,te,tt),$(ve,Oe+4,ae,tt)}})(),function(){for(let ee=0;ee<S.length;ee+=6){const te=S[ee+0],ae=S[ee+2],ne=S[ee+4],me=Math.max(te,ae,ne),_e=Math.min(te,ae,ne);me>.9&&_e<.1&&(te<.2&&(S[ee+0]+=1),ae<.2&&(S[ee+2]+=1),ne<.2&&(S[ee+4]+=1))}}()}(),this.setAttribute("position",new pn(w,3)),this.setAttribute("normal",new pn(w.slice(),3)),this.setAttribute("uv",new pn(S,2)),p===0?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(n){return new Cl(n.vertices,n.indices,n.radius,n.details)}}class ic extends Cl{constructor(n=1,o=0){const h=(1+Math.sqrt(5))/2,p=1/h;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-p,-h,0,-p,h,0,p,-h,0,p,h,-p,-h,0,-p,h,0,p,-h,0,p,h,0,-h,0,-p,h,0,-p,-h,0,p,h,0,p],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],n,o),this.type="DodecahedronGeometry",this.parameters={radius:n,detail:o}}static fromJSON(n){return new ic(n.radius,n.detail)}}const Ls=new Te,as=new Te,Jf=new Te,Qf=new Li;class kg extends On{constructor(n,o){if(super(),this.type="EdgesGeometry",this.parameters={thresholdAngle:o},o=o!==void 0?o:1,n.isGeometry===!0)return void console.error("THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");const h=Math.pow(10,4),p=Math.cos(zo*o),w=n.getIndex(),S=n.getAttribute("position"),I=w?w.count:S.count,k=[0,0,0],R=["a","b","c"],$=new Array(3),j={},H=[];for(let Y=0;Y<I;Y+=3){w?(k[0]=w.getX(Y),k[1]=w.getX(Y+1),k[2]=w.getX(Y+2)):(k[0]=Y,k[1]=Y+1,k[2]=Y+2);const{a:ee,b:te,c:ae}=Qf;if(ee.fromBufferAttribute(S,k[0]),te.fromBufferAttribute(S,k[1]),ae.fromBufferAttribute(S,k[2]),Qf.getNormal(Jf),$[0]=`${Math.round(ee.x*h)},${Math.round(ee.y*h)},${Math.round(ee.z*h)}`,$[1]=`${Math.round(te.x*h)},${Math.round(te.y*h)},${Math.round(te.z*h)}`,$[2]=`${Math.round(ae.x*h)},${Math.round(ae.y*h)},${Math.round(ae.z*h)}`,$[0]!==$[1]&&$[1]!==$[2]&&$[2]!==$[0])for(let ne=0;ne<3;ne++){const me=(ne+1)%3,_e=$[ne],ve=$[me],Ne=Qf[R[ne]],Oe=Qf[R[me]],tt=`${_e}_${ve}`,it=`${ve}_${_e}`;it in j&&j[it]?(Jf.dot(j[it].normal)<=p&&(H.push(Ne.x,Ne.y,Ne.z),H.push(Oe.x,Oe.y,Oe.z)),j[it]=null):tt in j||(j[tt]={index0:k[ne],index1:k[me],normal:Jf.clone()})}}for(const Y in j)if(j[Y]){const{index0:ee,index1:te}=j[Y];Ls.fromBufferAttribute(S,ee),as.fromBufferAttribute(S,te),H.push(Ls.x,Ls.y,Ls.z),H.push(as.x,as.y,as.z)}this.setAttribute("position",new pn(H,3))}}class Es{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(n,o){const h=this.getUtoTmapping(n);return this.getPoint(h,o)}getPoints(n=5){const o=[];for(let h=0;h<=n;h++)o.push(this.getPoint(h/n));return o}getSpacedPoints(n=5){const o=[];for(let h=0;h<=n;h++)o.push(this.getPointAt(h/n));return o}getLength(){const n=this.getLengths();return n[n.length-1]}getLengths(n=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===n+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const o=[];let h,p=this.getPoint(0),w=0;o.push(0);for(let S=1;S<=n;S++)h=this.getPoint(S/n),w+=h.distanceTo(p),o.push(w),p=h;return this.cacheArcLengths=o,o}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(n,o){const h=this.getLengths();let p=0;const w=h.length;let S;S=o||n*h[w-1];let I,k=0,R=w-1;for(;k<=R;)if(p=Math.floor(k+(R-k)/2),I=h[p]-S,I<0)k=p+1;else{if(!(I>0)){R=p;break}R=p-1}if(p=R,h[p]===S)return p/(w-1);const $=h[p];return(p+(S-$)/(h[p+1]-$))/(w-1)}getTangent(n,o){let p=n-1e-4,w=n+1e-4;p<0&&(p=0),w>1&&(w=1);const S=this.getPoint(p),I=this.getPoint(w),k=o||(S.isVector2?new Qt:new Te);return k.copy(I).sub(S).normalize(),k}getTangentAt(n,o){const h=this.getUtoTmapping(n);return this.getTangent(h,o)}computeFrenetFrames(n,o){const h=new Te,p=[],w=[],S=[],I=new Te,k=new Gn;for(let Y=0;Y<=n;Y++){const ee=Y/n;p[Y]=this.getTangentAt(ee,new Te),p[Y].normalize()}w[0]=new Te,S[0]=new Te;let R=Number.MAX_VALUE;const $=Math.abs(p[0].x),j=Math.abs(p[0].y),H=Math.abs(p[0].z);$<=R&&(R=$,h.set(1,0,0)),j<=R&&(R=j,h.set(0,1,0)),H<=R&&h.set(0,0,1),I.crossVectors(p[0],h).normalize(),w[0].crossVectors(p[0],I),S[0].crossVectors(p[0],w[0]);for(let Y=1;Y<=n;Y++){if(w[Y]=w[Y-1].clone(),S[Y]=S[Y-1].clone(),I.crossVectors(p[Y-1],p[Y]),I.length()>Number.EPSILON){I.normalize();const ee=Math.acos(Vi(p[Y-1].dot(p[Y]),-1,1));w[Y].applyMatrix4(k.makeRotationAxis(I,ee))}S[Y].crossVectors(p[Y],w[Y])}if(o===!0){let Y=Math.acos(Vi(w[0].dot(w[n]),-1,1));Y/=n,p[0].dot(I.crossVectors(w[0],w[n]))>0&&(Y=-Y);for(let ee=1;ee<=n;ee++)w[ee].applyMatrix4(k.makeRotationAxis(p[ee],Y*ee)),S[ee].crossVectors(p[ee],w[ee])}return{tangents:p,normals:w,binormals:S}}clone(){return new this.constructor().copy(this)}copy(n){return this.arcLengthDivisions=n.arcLengthDivisions,this}toJSON(){const n={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return n.arcLengthDivisions=this.arcLengthDivisions,n.type=this.type,n}fromJSON(n){return this.arcLengthDivisions=n.arcLengthDivisions,this}}class Ah extends Es{constructor(n=0,o=0,h=1,p=1,w=0,S=2*Math.PI,I=!1,k=0){super(),this.type="EllipseCurve",this.aX=n,this.aY=o,this.xRadius=h,this.yRadius=p,this.aStartAngle=w,this.aEndAngle=S,this.aClockwise=I,this.aRotation=k}getPoint(n,o){const h=o||new Qt,p=2*Math.PI;let w=this.aEndAngle-this.aStartAngle;const S=Math.abs(w)<Number.EPSILON;for(;w<0;)w+=p;for(;w>p;)w-=p;w<Number.EPSILON&&(w=S?0:p),this.aClockwise!==!0||S||(w===p?w=-p:w-=p);const I=this.aStartAngle+n*w;let k=this.aX+this.xRadius*Math.cos(I),R=this.aY+this.yRadius*Math.sin(I);if(this.aRotation!==0){const $=Math.cos(this.aRotation),j=Math.sin(this.aRotation),H=k-this.aX,Y=R-this.aY;k=H*$-Y*j+this.aX,R=H*j+Y*$+this.aY}return h.set(k,R)}copy(n){return super.copy(n),this.aX=n.aX,this.aY=n.aY,this.xRadius=n.xRadius,this.yRadius=n.yRadius,this.aStartAngle=n.aStartAngle,this.aEndAngle=n.aEndAngle,this.aClockwise=n.aClockwise,this.aRotation=n.aRotation,this}toJSON(){const n=super.toJSON();return n.aX=this.aX,n.aY=this.aY,n.xRadius=this.xRadius,n.yRadius=this.yRadius,n.aStartAngle=this.aStartAngle,n.aEndAngle=this.aEndAngle,n.aClockwise=this.aClockwise,n.aRotation=this.aRotation,n}fromJSON(n){return super.fromJSON(n),this.aX=n.aX,this.aY=n.aY,this.xRadius=n.xRadius,this.yRadius=n.yRadius,this.aStartAngle=n.aStartAngle,this.aEndAngle=n.aEndAngle,this.aClockwise=n.aClockwise,this.aRotation=n.aRotation,this}}Ah.prototype.isEllipseCurve=!0;class Zs extends Ah{constructor(n,o,h,p,w,S){super(n,o,h,h,p,w,S),this.type="ArcCurve"}}function Ds(){let T=0,n=0,o=0,h=0;function p(w,S,I,k){T=w,n=I,o=-3*w+3*S-2*I-k,h=2*w-2*S+I+k}return{initCatmullRom:function(w,S,I,k,R){p(S,I,R*(I-w),R*(k-S))},initNonuniformCatmullRom:function(w,S,I,k,R,$,j){let H=(S-w)/R-(I-w)/(R+$)+(I-S)/$,Y=(I-S)/$-(k-S)/($+j)+(k-I)/j;H*=$,Y*=$,p(S,I,H,Y)},calc:function(w){const S=w*w;return T+n*w+o*S+h*(S*w)}}}Zs.prototype.isArcCurve=!0;const up=new Te,ya=new Ds,em=new Ds,sc=new Ds;class hu extends Es{constructor(n=[],o=!1,h="centripetal",p=.5){super(),this.type="CatmullRomCurve3",this.points=n,this.closed=o,this.curveType=h,this.tension=p}getPoint(n,o=new Te){const h=o,p=this.points,w=p.length,S=(w-(this.closed?0:1))*n;let I,k,R=Math.floor(S),$=S-R;this.closed?R+=R>0?0:(Math.floor(Math.abs(R)/w)+1)*w:$===0&&R===w-1&&(R=w-2,$=1),this.closed||R>0?I=p[(R-1)%w]:(up.subVectors(p[0],p[1]).add(p[0]),I=up);const j=p[R%w],H=p[(R+1)%w];if(this.closed||R+2<w?k=p[(R+2)%w]:(up.subVectors(p[w-1],p[w-2]).add(p[w-1]),k=up),this.curveType==="centripetal"||this.curveType==="chordal"){const Y=this.curveType==="chordal"?.5:.25;let ee=Math.pow(I.distanceToSquared(j),Y),te=Math.pow(j.distanceToSquared(H),Y),ae=Math.pow(H.distanceToSquared(k),Y);te<1e-4&&(te=1),ee<1e-4&&(ee=te),ae<1e-4&&(ae=te),ya.initNonuniformCatmullRom(I.x,j.x,H.x,k.x,ee,te,ae),em.initNonuniformCatmullRom(I.y,j.y,H.y,k.y,ee,te,ae),sc.initNonuniformCatmullRom(I.z,j.z,H.z,k.z,ee,te,ae)}else this.curveType==="catmullrom"&&(ya.initCatmullRom(I.x,j.x,H.x,k.x,this.tension),em.initCatmullRom(I.y,j.y,H.y,k.y,this.tension),sc.initCatmullRom(I.z,j.z,H.z,k.z,this.tension));return h.set(ya.calc($),em.calc($),sc.calc($)),h}copy(n){super.copy(n),this.points=[];for(let o=0,h=n.points.length;o<h;o++){const p=n.points[o];this.points.push(p.clone())}return this.closed=n.closed,this.curveType=n.curveType,this.tension=n.tension,this}toJSON(){const n=super.toJSON();n.points=[];for(let o=0,h=this.points.length;o<h;o++){const p=this.points[o];n.points.push(p.toArray())}return n.closed=this.closed,n.curveType=this.curveType,n.tension=this.tension,n}fromJSON(n){super.fromJSON(n),this.points=[];for(let o=0,h=n.points.length;o<h;o++){const p=n.points[o];this.points.push(new Te().fromArray(p))}return this.closed=n.closed,this.curveType=n.curveType,this.tension=n.tension,this}}function Js(T,n,o,h,p){const w=.5*(h-n),S=.5*(p-o),I=T*T;return(2*o-2*h+w+S)*(T*I)+(-3*o+3*h-2*w-S)*I+w*T+o}function _o(T,n,o,h){return function(p,w){const S=1-p;return S*S*w}(T,n)+function(p,w){return 2*(1-p)*p*w}(T,o)+function(p,w){return p*p*w}(T,h)}function ac(T,n,o,h,p){return function(w,S){const I=1-w;return I*I*I*S}(T,n)+function(w,S){const I=1-w;return 3*I*I*w*S}(T,o)+function(w,S){return 3*(1-w)*w*w*S}(T,h)+function(w,S){return w*w*w*S}(T,p)}hu.prototype.isCatmullRomCurve3=!0;class tm extends Es{constructor(n=new Qt,o=new Qt,h=new Qt,p=new Qt){super(),this.type="CubicBezierCurve",this.v0=n,this.v1=o,this.v2=h,this.v3=p}getPoint(n,o=new Qt){const h=o,p=this.v0,w=this.v1,S=this.v2,I=this.v3;return h.set(ac(n,p.x,w.x,S.x,I.x),ac(n,p.y,w.y,S.y,I.y)),h}copy(n){return super.copy(n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this.v3.copy(n.v3),this}toJSON(){const n=super.toJSON();return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n.v3=this.v3.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this.v3.fromArray(n.v3),this}}tm.prototype.isCubicBezierCurve=!0;class Ng extends Es{constructor(n=new Te,o=new Te,h=new Te,p=new Te){super(),this.type="CubicBezierCurve3",this.v0=n,this.v1=o,this.v2=h,this.v3=p}getPoint(n,o=new Te){const h=o,p=this.v0,w=this.v1,S=this.v2,I=this.v3;return h.set(ac(n,p.x,w.x,S.x,I.x),ac(n,p.y,w.y,S.y,I.y),ac(n,p.z,w.z,S.z,I.z)),h}copy(n){return super.copy(n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this.v3.copy(n.v3),this}toJSON(){const n=super.toJSON();return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n.v3=this.v3.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this.v3.fromArray(n.v3),this}}Ng.prototype.isCubicBezierCurve3=!0;class Ih extends Es{constructor(n=new Qt,o=new Qt){super(),this.type="LineCurve",this.v1=n,this.v2=o}getPoint(n,o=new Qt){const h=o;return n===1?h.copy(this.v2):(h.copy(this.v2).sub(this.v1),h.multiplyScalar(n).add(this.v1)),h}getPointAt(n,o){return this.getPoint(n,o)}getTangent(n,o){const h=o||new Qt;return h.copy(this.v2).sub(this.v1).normalize(),h}copy(n){return super.copy(n),this.v1.copy(n.v1),this.v2.copy(n.v2),this}toJSON(){const n=super.toJSON();return n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this}}Ih.prototype.isLineCurve=!0;class cp extends Es{constructor(n=new Te,o=new Te){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=n,this.v2=o}getPoint(n,o=new Te){const h=o;return n===1?h.copy(this.v2):(h.copy(this.v2).sub(this.v1),h.multiplyScalar(n).add(this.v1)),h}getPointAt(n,o){return this.getPoint(n,o)}copy(n){return super.copy(n),this.v1.copy(n.v1),this.v2.copy(n.v2),this}toJSON(){const n=super.toJSON();return n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this}}class Ch extends Es{constructor(n=new Qt,o=new Qt,h=new Qt){super(),this.type="QuadraticBezierCurve",this.v0=n,this.v1=o,this.v2=h}getPoint(n,o=new Qt){const h=o,p=this.v0,w=this.v1,S=this.v2;return h.set(_o(n,p.x,w.x,S.x),_o(n,p.y,w.y,S.y)),h}copy(n){return super.copy(n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this}toJSON(){const n=super.toJSON();return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this}}Ch.prototype.isQuadraticBezierCurve=!0;class kl extends Es{constructor(n=new Te,o=new Te,h=new Te){super(),this.type="QuadraticBezierCurve3",this.v0=n,this.v1=o,this.v2=h}getPoint(n,o=new Te){const h=o,p=this.v0,w=this.v1,S=this.v2;return h.set(_o(n,p.x,w.x,S.x),_o(n,p.y,w.y,S.y),_o(n,p.z,w.z,S.z)),h}copy(n){return super.copy(n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this}toJSON(){const n=super.toJSON();return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this}}kl.prototype.isQuadraticBezierCurve3=!0;class nm extends Es{constructor(n=[]){super(),this.type="SplineCurve",this.points=n}getPoint(n,o=new Qt){const h=o,p=this.points,w=(p.length-1)*n,S=Math.floor(w),I=w-S,k=p[S===0?S:S-1],R=p[S],$=p[S>p.length-2?p.length-1:S+1],j=p[S>p.length-3?p.length-1:S+2];return h.set(Js(I,k.x,R.x,$.x,j.x),Js(I,k.y,R.y,$.y,j.y)),h}copy(n){super.copy(n),this.points=[];for(let o=0,h=n.points.length;o<h;o++){const p=n.points[o];this.points.push(p.clone())}return this}toJSON(){const n=super.toJSON();n.points=[];for(let o=0,h=this.points.length;o<h;o++){const p=this.points[o];n.points.push(p.toArray())}return n}fromJSON(n){super.fromJSON(n),this.points=[];for(let o=0,h=n.points.length;o<h;o++){const p=n.points[o];this.points.push(new Qt().fromArray(p))}return this}}nm.prototype.isSplineCurve=!0;var rm=Object.freeze({__proto__:null,ArcCurve:Zs,CatmullRomCurve3:hu,CubicBezierCurve:tm,CubicBezierCurve3:Ng,EllipseCurve:Ah,LineCurve:Ih,LineCurve3:cp,QuadraticBezierCurve:Ch,QuadraticBezierCurve3:kl,SplineCurve:nm});function xa(T,n,o,h,p){let w,S;if(p===function(I,k,R,$){let j=0;for(let H=k,Y=R-$;H<R;H+=$)j+=(I[Y]-I[H])*(I[H+1]+I[Y+1]),Y=H;return j}(T,n,o,h)>0)for(w=n;w<o;w+=h)S=hp(w,T[w],T[w+1],S);else for(w=o-h;w>=n;w-=h)S=hp(w,T[w],T[w+1],S);return S&&Ai(S,S.next)&&(Nh(S),S=S.next),S}function So(T,n){if(!T)return T;n||(n=T);let o,h=T;do if(o=!1,h.steiner||!Ai(h,h.next)&&ni(h.prev,h,h.next)!==0)h=h.next;else{if(Nh(h),h=n=h.prev,h===h.next)break;o=!0}while(o||h!==n);return n}function ti(T,n,o,h,p,w,S){if(!T)return;!S&&w&&function($,j,H,Y){let ee=$;do ee.z===null&&(ee.z=ts(ee.x,ee.y,j,H,Y)),ee.prevZ=ee.prev,ee.nextZ=ee.next,ee=ee.next;while(ee!==$);ee.prevZ.nextZ=null,ee.prevZ=null,function(te){let ae,ne,me,_e,ve,Ne,Oe,tt,it=1;do{for(ne=te,te=null,ve=null,Ne=0;ne;){for(Ne++,me=ne,Oe=0,ae=0;ae<it&&(Oe++,me=me.nextZ,me);ae++);for(tt=it;Oe>0||tt>0&&me;)Oe!==0&&(tt===0||!me||ne.z<=me.z)?(_e=ne,ne=ne.nextZ,Oe--):(_e=me,me=me.nextZ,tt--),ve?ve.nextZ=_e:te=_e,_e.prevZ=ve,ve=_e;ne=me}ve.nextZ=null,it*=2}while(Ne>1)}(ee)}(T,h,p,w);let I,k,R=T;for(;T.prev!==T.next;)if(I=T.prev,k=T.next,w?_b(T,h,p,w):kh(T))n.push(I.i/o),n.push(T.i/o),n.push(k.i/o),Nh(T),T=k.next,R=k.next;else if((T=k)===R){S?S===1?ti(T=Mo(So(T),n,o),n,o,h,p,w,2):S===2&&Ln(T,n,o,h,p,w):ti(So(T),n,o,h,p,w,1);break}}function kh(T){const n=T.prev,o=T,h=T.next;if(ni(n,o,h)>=0)return!1;let p=T.next.next;for(;p!==T.prev;){if(Di(n.x,n.y,o.x,o.y,h.x,h.y,p.x,p.y)&&ni(p.prev,p,p.next)>=0)return!1;p=p.next}return!0}function _b(T,n,o,h){const p=T.prev,w=T,S=T.next;if(ni(p,w,S)>=0)return!1;const I=p.x<w.x?p.x<S.x?p.x:S.x:w.x<S.x?w.x:S.x,k=p.y<w.y?p.y<S.y?p.y:S.y:w.y<S.y?w.y:S.y,R=p.x>w.x?p.x>S.x?p.x:S.x:w.x>S.x?w.x:S.x,$=p.y>w.y?p.y>S.y?p.y:S.y:w.y>S.y?w.y:S.y,j=ts(I,k,n,o,h),H=ts(R,$,n,o,h);let Y=T.prevZ,ee=T.nextZ;for(;Y&&Y.z>=j&&ee&&ee.z<=H;){if(Y!==T.prev&&Y!==T.next&&Di(p.x,p.y,w.x,w.y,S.x,S.y,Y.x,Y.y)&&ni(Y.prev,Y,Y.next)>=0||(Y=Y.prevZ,ee!==T.prev&&ee!==T.next&&Di(p.x,p.y,w.x,w.y,S.x,S.y,ee.x,ee.y)&&ni(ee.prev,ee,ee.next)>=0))return!1;ee=ee.nextZ}for(;Y&&Y.z>=j;){if(Y!==T.prev&&Y!==T.next&&Di(p.x,p.y,w.x,w.y,S.x,S.y,Y.x,Y.y)&&ni(Y.prev,Y,Y.next)>=0)return!1;Y=Y.prevZ}for(;ee&&ee.z<=H;){if(ee!==T.prev&&ee!==T.next&&Di(p.x,p.y,w.x,w.y,S.x,S.y,ee.x,ee.y)&&ni(ee.prev,ee,ee.next)>=0)return!1;ee=ee.nextZ}return!0}function Mo(T,n,o){let h=T;do{const p=h.prev,w=h.next.next;!Ai(p,w)&&Lg(p,h,h.next,w)&&lc(p,w)&&lc(w,p)&&(n.push(p.i/o),n.push(h.i/o),n.push(w.i/o),Nh(h),Nh(h.next),h=T=w),h=h.next}while(h!==T);return So(h)}function Ln(T,n,o,h,p,w){let S=T;do{let I=S.next.next;for(;I!==S.prev;){if(S.i!==I.i&&Hi(S,I)){let k=X0(S,I);return S=So(S,S.next),k=So(k,k.next),ti(S,n,o,h,p,w),void ti(k,n,o,h,p,w)}I=I.next}S=S.next}while(S!==T)}function Rg(T,n){return T.x-n.x}function q0(T,n){if(n=function(o,h){let p=h;const w=o.x,S=o.y;let I,k=-1/0;do{if(S<=p.y&&S>=p.next.y&&p.next.y!==p.y){const ee=p.x+(S-p.y)*(p.next.x-p.x)/(p.next.y-p.y);if(ee<=w&&ee>k){if(k=ee,ee===w){if(S===p.y)return p;if(S===p.next.y)return p.next}I=p.x<p.next.x?p:p.next}}p=p.next}while(p!==h);if(!I)return null;if(w===k)return I;const R=I,$=I.x,j=I.y;let H,Y=1/0;p=I;do w>=p.x&&p.x>=$&&w!==p.x&&Di(S<j?w:k,S,$,j,S<j?k:w,S,p.x,p.y)&&(H=Math.abs(S-p.y)/(w-p.x),lc(p,o)&&(H<Y||H===Y&&(p.x>I.x||p.x===I.x&&Sb(I,p)))&&(I=p,Y=H)),p=p.next;while(p!==R);return I}(T,n)){const o=X0(n,T);So(n,n.next),So(o,o.next)}}function Sb(T,n){return ni(T.prev,T,n.prev)<0&&ni(n.next,T,T.next)<0}function ts(T,n,o,h,p){return(T=1431655765&((T=858993459&((T=252645135&((T=16711935&((T=32767*(T-o)*p)|T<<8))|T<<4))|T<<2))|T<<1))|(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-h)*p)|n<<8))|n<<4))|n<<2))|n<<1))<<1}function Gi(T){let n=T,o=T;do(n.x<o.x||n.x===o.x&&n.y<o.y)&&(o=n),n=n.next;while(n!==T);return o}function Di(T,n,o,h,p,w,S,I){return(p-S)*(n-I)-(T-S)*(w-I)>=0&&(T-S)*(h-I)-(o-S)*(n-I)>=0&&(o-S)*(w-I)-(p-S)*(h-I)>=0}function Hi(T,n){return T.next.i!==n.i&&T.prev.i!==n.i&&!function(o,h){let p=o;do{if(p.i!==o.i&&p.next.i!==o.i&&p.i!==h.i&&p.next.i!==h.i&&Lg(p,p.next,o,h))return!0;p=p.next}while(p!==o);return!1}(T,n)&&(lc(T,n)&&lc(n,T)&&function(o,h){let p=o,w=!1;const S=(o.x+h.x)/2,I=(o.y+h.y)/2;do p.y>I!=p.next.y>I&&p.next.y!==p.y&&S<(p.next.x-p.x)*(I-p.y)/(p.next.y-p.y)+p.x&&(w=!w),p=p.next;while(p!==o);return w}(T,n)&&(ni(T.prev,T,n.prev)||ni(T,n.prev,n))||Ai(T,n)&&ni(T.prev,T,T.next)>0&&ni(n.prev,n,n.next)>0)}function ni(T,n,o){return(n.y-T.y)*(o.x-n.x)-(n.x-T.x)*(o.y-n.y)}function Ai(T,n){return T.x===n.x&&T.y===n.y}function Lg(T,n,o,h){const p=oc(ni(T,n,o)),w=oc(ni(T,n,h)),S=oc(ni(o,h,T)),I=oc(ni(o,h,n));return p!==w&&S!==I||!(p!==0||!va(T,o,n))||!(w!==0||!va(T,h,n))||!(S!==0||!va(o,T,h))||!(I!==0||!va(o,n,h))}function va(T,n,o){return n.x<=Math.max(T.x,o.x)&&n.x>=Math.min(T.x,o.x)&&n.y<=Math.max(T.y,o.y)&&n.y>=Math.min(T.y,o.y)}function oc(T){return T>0?1:T<0?-1:0}function lc(T,n){return ni(T.prev,T,T.next)<0?ni(T,n,T.next)>=0&&ni(T,T.prev,n)>=0:ni(T,n,T.prev)<0||ni(T,T.next,n)<0}function X0(T,n){const o=new Dg(T.i,T.x,T.y),h=new Dg(n.i,n.x,n.y),p=T.next,w=n.prev;return T.next=n,n.prev=T,o.next=p,p.prev=o,h.next=o,o.prev=h,w.next=h,h.prev=w,h}function hp(T,n,o,h){const p=new Dg(T,n,o);return h?(p.next=h.next,p.prev=h,h.next.prev=p,h.next=p):(p.prev=p,p.next=p),p}function Nh(T){T.next.prev=T.prev,T.prev.next=T.next,T.prevZ&&(T.prevZ.nextZ=T.nextZ),T.nextZ&&(T.nextZ.prevZ=T.prevZ)}function Dg(T,n,o){this.i=T,this.x=n,this.y=o,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class Wr{static area(n){const o=n.length;let h=0;for(let p=o-1,w=0;w<o;p=w++)h+=n[p].x*n[w].y-n[w].x*n[p].y;return .5*h}static isClockWise(n){return Wr.area(n)<0}static triangulateShape(n,o){const h=[],p=[],w=[];ji(n),ba(h,n);let S=n.length;o.forEach(ji);for(let k=0;k<o.length;k++)p.push(S),S+=o[k].length,ba(h,o[k]);const I=function(k,R,$=2){const j=R&&R.length,H=j?R[0]*$:k.length;let Y=xa(k,0,H,$,!0);const ee=[];if(!Y||Y.next===Y.prev)return ee;let te,ae,ne,me,_e,ve,Ne;if(j&&(Y=function(Oe,tt,it,gt){const ut=[];let ct,an,Gt,Lt,Yt;for(ct=0,an=tt.length;ct<an;ct++)Gt=tt[ct]*gt,Lt=ct<an-1?tt[ct+1]*gt:Oe.length,Yt=xa(Oe,Gt,Lt,gt,!1),Yt===Yt.next&&(Yt.steiner=!0),ut.push(Gi(Yt));for(ut.sort(Rg),ct=0;ct<ut.length;ct++)q0(ut[ct],it),it=So(it,it.next);return it}(k,R,Y,$)),k.length>80*$){te=ne=k[0],ae=me=k[1];for(let Oe=$;Oe<H;Oe+=$)_e=k[Oe],ve=k[Oe+1],_e<te&&(te=_e),ve<ae&&(ae=ve),_e>ne&&(ne=_e),ve>me&&(me=ve);Ne=Math.max(ne-te,me-ae),Ne=Ne!==0?1/Ne:0}return ti(Y,ee,$,te,ae,Ne),ee}(h,p);for(let k=0;k<I.length;k+=3)w.push(I.slice(k,k+3));return w}}function ji(T){const n=T.length;n>2&&T[n-1].equals(T[0])&&T.pop()}function ba(T,n){for(let o=0;o<n.length;o++)T.push(n[o].x),T.push(n[o].y)}class rl extends On{constructor(n,o){super(),this.type="ExtrudeGeometry",this.parameters={shapes:n,options:o},n=Array.isArray(n)?n:[n];const h=this,p=[],w=[];for(let I=0,k=n.length;I<k;I++)S(n[I]);function S(I){const k=[],R=o.curveSegments!==void 0?o.curveSegments:12,$=o.steps!==void 0?o.steps:1;let j=o.depth!==void 0?o.depth:100,H=o.bevelEnabled===void 0||o.bevelEnabled,Y=o.bevelThickness!==void 0?o.bevelThickness:6,ee=o.bevelSize!==void 0?o.bevelSize:Y-2,te=o.bevelOffset!==void 0?o.bevelOffset:0,ae=o.bevelSegments!==void 0?o.bevelSegments:3;const ne=o.extrudePath,me=o.UVGenerator!==void 0?o.UVGenerator:im;o.amount!==void 0&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),j=o.amount);let _e,ve,Ne,Oe,tt,it=!1;ne&&(_e=ne.getSpacedPoints($),it=!0,H=!1,ve=ne.computeFrenetFrames($,!1),Ne=new Te,Oe=new Te,tt=new Te),H||(ae=0,Y=0,ee=0,te=0);const gt=I.extractPoints(R);let ut=gt.shape;const ct=gt.holes;if(!Wr.isClockWise(ut)){ut=ut.reverse();for(let mt=0,Ae=ct.length;mt<Ae;mt++){const dt=ct[mt];Wr.isClockWise(dt)&&(ct[mt]=dt.reverse())}}const an=Wr.triangulateShape(ut,ct),Gt=ut;for(let mt=0,Ae=ct.length;mt<Ae;mt++){const dt=ct[mt];ut=ut.concat(dt)}function Lt(mt,Ae,dt){return Ae||console.error("THREE.ExtrudeGeometry: vec does not exist"),Ae.clone().multiplyScalar(dt).add(mt)}const Yt=ut.length,Tn=an.length;function In(mt,Ae,dt){let $t,kt,Nt;const bn=mt.x-Ae.x,fn=mt.y-Ae.y,Pe=dt.x-mt.x,mn=dt.y-mt.y,Br=bn*bn+fn*fn,Ii=bn*mn-fn*Pe;if(Math.abs(Ii)>Number.EPSILON){const Rr=Math.sqrt(Br),xs=Math.sqrt(Pe*Pe+mn*mn),ci=Ae.x-fn/Rr,Yr=Ae.y+bn/Rr,wa=((dt.x-mn/xs-ci)*mn-(dt.y+Pe/xs-Yr)*Pe)/(bn*mn-fn*Pe);$t=ci+bn*wa-mt.x,kt=Yr+fn*wa-mt.y;const io=$t*$t+kt*kt;if(io<=2)return new Qt($t,kt);Nt=Math.sqrt(io/2)}else{let Rr=!1;bn>Number.EPSILON?Pe>Number.EPSILON&&(Rr=!0):bn<-Number.EPSILON?Pe<-Number.EPSILON&&(Rr=!0):Math.sign(fn)===Math.sign(mn)&&(Rr=!0),Rr?($t=-fn,kt=bn,Nt=Math.sqrt(Br)):($t=bn,kt=fn,Nt=Math.sqrt(Br/2))}return new Qt($t/Nt,kt/Nt)}const Pn=[];for(let mt=0,Ae=Gt.length,dt=Ae-1,$t=mt+1;mt<Ae;mt++,dt++,$t++)dt===Ae&&(dt=0),$t===Ae&&($t=0),Pn[mt]=In(Gt[mt],Gt[dt],Gt[$t]);const nr=[];let er,ke=Pn.concat();for(let mt=0,Ae=ct.length;mt<Ae;mt++){const dt=ct[mt];er=[];for(let $t=0,kt=dt.length,Nt=kt-1,bn=$t+1;$t<kt;$t++,Nt++,bn++)Nt===kt&&(Nt=0),bn===kt&&(bn=0),er[$t]=In(dt[$t],dt[Nt],dt[bn]);nr.push(er),ke=ke.concat(er)}for(let mt=0;mt<ae;mt++){const Ae=mt/ae,dt=Y*Math.cos(Ae*Math.PI/2),$t=ee*Math.sin(Ae*Math.PI/2)+te;for(let kt=0,Nt=Gt.length;kt<Nt;kt++){const bn=Lt(Gt[kt],Pn[kt],$t);zt(bn.x,bn.y,-dt)}for(let kt=0,Nt=ct.length;kt<Nt;kt++){const bn=ct[kt];er=nr[kt];for(let fn=0,Pe=bn.length;fn<Pe;fn++){const mn=Lt(bn[fn],er[fn],$t);zt(mn.x,mn.y,-dt)}}}const Ue=ee+te;for(let mt=0;mt<Yt;mt++){const Ae=H?Lt(ut[mt],ke[mt],Ue):ut[mt];it?(Oe.copy(ve.normals[0]).multiplyScalar(Ae.x),Ne.copy(ve.binormals[0]).multiplyScalar(Ae.y),tt.copy(_e[0]).add(Oe).add(Ne),zt(tt.x,tt.y,tt.z)):zt(Ae.x,Ae.y,0)}for(let mt=1;mt<=$;mt++)for(let Ae=0;Ae<Yt;Ae++){const dt=H?Lt(ut[Ae],ke[Ae],Ue):ut[Ae];it?(Oe.copy(ve.normals[mt]).multiplyScalar(dt.x),Ne.copy(ve.binormals[mt]).multiplyScalar(dt.y),tt.copy(_e[mt]).add(Oe).add(Ne),zt(tt.x,tt.y,tt.z)):zt(dt.x,dt.y,j/$*mt)}for(let mt=ae-1;mt>=0;mt--){const Ae=mt/ae,dt=Y*Math.cos(Ae*Math.PI/2),$t=ee*Math.sin(Ae*Math.PI/2)+te;for(let kt=0,Nt=Gt.length;kt<Nt;kt++){const bn=Lt(Gt[kt],Pn[kt],$t);zt(bn.x,bn.y,j+dt)}for(let kt=0,Nt=ct.length;kt<Nt;kt++){const bn=ct[kt];er=nr[kt];for(let fn=0,Pe=bn.length;fn<Pe;fn++){const mn=Lt(bn[fn],er[fn],$t);it?zt(mn.x,mn.y+_e[$-1].y,_e[$-1].x+dt):zt(mn.x,mn.y,j+dt)}}}function Dt(mt,Ae){let dt=mt.length;for(;--dt>=0;){const $t=dt;let kt=dt-1;kt<0&&(kt=mt.length-1);for(let Nt=0,bn=$+2*ae;Nt<bn;Nt++){const fn=Yt*Nt,Pe=Yt*(Nt+1);Kt(Ae+$t+fn,Ae+kt+fn,Ae+kt+Pe,Ae+$t+Pe)}}}function zt(mt,Ae,dt){k.push(mt),k.push(Ae),k.push(dt)}function Pt(mt,Ae,dt){gn(mt),gn(Ae),gn(dt);const $t=p.length/3,kt=me.generateTopUV(h,p,$t-3,$t-2,$t-1);dn(kt[0]),dn(kt[1]),dn(kt[2])}function Kt(mt,Ae,dt,$t){gn(mt),gn(Ae),gn($t),gn(Ae),gn(dt),gn($t);const kt=p.length/3,Nt=me.generateSideWallUV(h,p,kt-6,kt-3,kt-2,kt-1);dn(Nt[0]),dn(Nt[1]),dn(Nt[3]),dn(Nt[1]),dn(Nt[2]),dn(Nt[3])}function gn(mt){p.push(k[3*mt+0]),p.push(k[3*mt+1]),p.push(k[3*mt+2])}function dn(mt){w.push(mt.x),w.push(mt.y)}(function(){const mt=p.length/3;if(H){let Ae=0,dt=Yt*Ae;for(let $t=0;$t<Tn;$t++){const kt=an[$t];Pt(kt[2]+dt,kt[1]+dt,kt[0]+dt)}Ae=$+2*ae,dt=Yt*Ae;for(let $t=0;$t<Tn;$t++){const kt=an[$t];Pt(kt[0]+dt,kt[1]+dt,kt[2]+dt)}}else{for(let Ae=0;Ae<Tn;Ae++){const dt=an[Ae];Pt(dt[2],dt[1],dt[0])}for(let Ae=0;Ae<Tn;Ae++){const dt=an[Ae];Pt(dt[0]+Yt*$,dt[1]+Yt*$,dt[2]+Yt*$)}}h.addGroup(mt,p.length/3-mt,0)})(),function(){const mt=p.length/3;let Ae=0;Dt(Gt,Ae),Ae+=Gt.length;for(let dt=0,$t=ct.length;dt<$t;dt++){const kt=ct[dt];Dt(kt,Ae),Ae+=kt.length}h.addGroup(mt,p.length/3-mt,1)}()}this.setAttribute("position",new pn(p,3)),this.setAttribute("uv",new pn(w,2)),this.computeVertexNormals()}toJSON(){const n=super.toJSON();return function(o,h,p){if(p.shapes=[],Array.isArray(o))for(let w=0,S=o.length;w<S;w++){const I=o[w];p.shapes.push(I.uuid)}else p.shapes.push(o.uuid);return h.extrudePath!==void 0&&(p.options.extrudePath=h.extrudePath.toJSON()),p}(this.parameters.shapes,this.parameters.options,n)}static fromJSON(n,o){const h=[];for(let w=0,S=n.shapes.length;w<S;w++){const I=o[n.shapes[w]];h.push(I)}const p=n.options.extrudePath;return p!==void 0&&(n.options.extrudePath=new rm[p.type]().fromJSON(p)),new rl(h,n.options)}}const im={generateTopUV:function(T,n,o,h,p){const w=n[3*o],S=n[3*o+1],I=n[3*h],k=n[3*h+1],R=n[3*p],$=n[3*p+1];return[new Qt(w,S),new Qt(I,k),new Qt(R,$)]},generateSideWallUV:function(T,n,o,h,p,w){const S=n[3*o],I=n[3*o+1],k=n[3*o+2],R=n[3*h],$=n[3*h+1],j=n[3*h+2],H=n[3*p],Y=n[3*p+1],ee=n[3*p+2],te=n[3*w],ae=n[3*w+1],ne=n[3*w+2];return Math.abs(I-$)<Math.abs(S-R)?[new Qt(S,1-k),new Qt(R,1-j),new Qt(H,1-ee),new Qt(te,1-ne)]:[new Qt(I,1-k),new Qt($,1-j),new Qt(Y,1-ee),new Qt(ae,1-ne)]}};class il extends Cl{constructor(n=1,o=0){const h=(1+Math.sqrt(5))/2;super([-1,h,0,1,h,0,-1,-h,0,1,-h,0,0,-1,h,0,1,h,0,-1,-h,0,1,-h,h,0,-1,h,0,1,-h,0,-1,-h,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],n,o),this.type="IcosahedronGeometry",this.parameters={radius:n,detail:o}}static fromJSON(n){return new il(n.radius,n.detail)}}class uc extends On{constructor(n,o=12,h=0,p=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:n,segments:o,phiStart:h,phiLength:p},o=Math.floor(o),p=Vi(p,0,2*Math.PI);const w=[],S=[],I=[],k=1/o,R=new Te,$=new Qt;for(let j=0;j<=o;j++){const H=h+j*k*p,Y=Math.sin(H),ee=Math.cos(H);for(let te=0;te<=n.length-1;te++)R.x=n[te].x*Y,R.y=n[te].y,R.z=n[te].x*ee,S.push(R.x,R.y,R.z),$.x=j/o,$.y=te/(n.length-1),I.push($.x,$.y)}for(let j=0;j<o;j++)for(let H=0;H<n.length-1;H++){const Y=H+j*n.length,ee=Y,te=Y+n.length,ae=Y+n.length+1,ne=Y+1;w.push(ee,te,ne),w.push(te,ae,ne)}if(this.setIndex(w),this.setAttribute("position",new pn(S,3)),this.setAttribute("uv",new pn(I,2)),this.computeVertexNormals(),p===2*Math.PI){const j=this.attributes.normal.array,H=new Te,Y=new Te,ee=new Te,te=o*n.length*3;for(let ae=0,ne=0;ae<n.length;ae++,ne+=3)H.x=j[ne+0],H.y=j[ne+1],H.z=j[ne+2],Y.x=j[te+ne+0],Y.y=j[te+ne+1],Y.z=j[te+ne+2],ee.addVectors(H,Y).normalize(),j[ne+0]=j[te+ne+0]=ee.x,j[ne+1]=j[te+ne+1]=ee.y,j[ne+2]=j[te+ne+2]=ee.z}}static fromJSON(n){return new uc(n.points,n.segments,n.phiStart,n.phiLength)}}class du extends Cl{constructor(n=1,o=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],n,o),this.type="OctahedronGeometry",this.parameters={radius:n,detail:o}}static fromJSON(n){return new du(n.radius,n.detail)}}class Rh extends On{constructor(n,o,h){super(),this.type="ParametricGeometry",this.parameters={func:n,slices:o,stacks:h};const p=[],w=[],S=[],I=[],k=1e-5,R=new Te,$=new Te,j=new Te,H=new Te,Y=new Te;n.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");const ee=o+1;for(let te=0;te<=h;te++){const ae=te/h;for(let ne=0;ne<=o;ne++){const me=ne/o;n(me,ae,$),w.push($.x,$.y,$.z),me-k>=0?(n(me-k,ae,j),H.subVectors($,j)):(n(me+k,ae,j),H.subVectors(j,$)),ae-k>=0?(n(me,ae-k,j),Y.subVectors($,j)):(n(me,ae+k,j),Y.subVectors(j,$)),R.crossVectors(H,Y).normalize(),S.push(R.x,R.y,R.z),I.push(me,ae)}}for(let te=0;te<h;te++)for(let ae=0;ae<o;ae++){const ne=te*ee+ae,me=te*ee+ae+1,_e=(te+1)*ee+ae+1,ve=(te+1)*ee+ae;p.push(ne,me,ve),p.push(me,_e,ve)}this.setIndex(p),this.setAttribute("position",new pn(w,3)),this.setAttribute("normal",new pn(S,3)),this.setAttribute("uv",new pn(I,2))}}class dp extends On{constructor(n=.5,o=1,h=8,p=1,w=0,S=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:n,outerRadius:o,thetaSegments:h,phiSegments:p,thetaStart:w,thetaLength:S},h=Math.max(3,h);const I=[],k=[],R=[],$=[];let j=n;const H=(o-n)/(p=Math.max(1,p)),Y=new Te,ee=new Qt;for(let te=0;te<=p;te++){for(let ae=0;ae<=h;ae++){const ne=w+ae/h*S;Y.x=j*Math.cos(ne),Y.y=j*Math.sin(ne),k.push(Y.x,Y.y,Y.z),R.push(0,0,1),ee.x=(Y.x/o+1)/2,ee.y=(Y.y/o+1)/2,$.push(ee.x,ee.y)}j+=H}for(let te=0;te<p;te++){const ae=te*(h+1);for(let ne=0;ne<h;ne++){const me=ne+ae,_e=me,ve=me+h+1,Ne=me+h+2,Oe=me+1;I.push(_e,ve,Oe),I.push(ve,Ne,Oe)}}this.setIndex(I),this.setAttribute("position",new pn(k,3)),this.setAttribute("normal",new pn(R,3)),this.setAttribute("uv",new pn($,2))}static fromJSON(n){return new dp(n.innerRadius,n.outerRadius,n.thetaSegments,n.phiSegments,n.thetaStart,n.thetaLength)}}class cc extends On{constructor(n,o=12){super(),this.type="ShapeGeometry",this.parameters={shapes:n,curveSegments:o};const h=[],p=[],w=[],S=[];let I=0,k=0;if(Array.isArray(n)===!1)R(n);else for(let $=0;$<n.length;$++)R(n[$]),this.addGroup(I,k,$),I+=k,k=0;function R($){const j=p.length/3,H=$.extractPoints(o);let Y=H.shape;const ee=H.holes;Wr.isClockWise(Y)===!1&&(Y=Y.reverse());for(let ae=0,ne=ee.length;ae<ne;ae++){const me=ee[ae];Wr.isClockWise(me)===!0&&(ee[ae]=me.reverse())}const te=Wr.triangulateShape(Y,ee);for(let ae=0,ne=ee.length;ae<ne;ae++){const me=ee[ae];Y=Y.concat(me)}for(let ae=0,ne=Y.length;ae<ne;ae++){const me=Y[ae];p.push(me.x,me.y,0),w.push(0,0,1),S.push(me.x,me.y)}for(let ae=0,ne=te.length;ae<ne;ae++){const me=te[ae],_e=me[0]+j,ve=me[1]+j,Ne=me[2]+j;h.push(_e,ve,Ne),k+=3}}this.setIndex(h),this.setAttribute("position",new pn(p,3)),this.setAttribute("normal",new pn(w,3)),this.setAttribute("uv",new pn(S,2))}toJSON(){const n=super.toJSON();return function(o,h){if(h.shapes=[],Array.isArray(o))for(let p=0,w=o.length;p<w;p++){const S=o[p];h.shapes.push(S.uuid)}else h.shapes.push(o.uuid);return h}(this.parameters.shapes,n)}static fromJSON(n,o){const h=[];for(let p=0,w=n.shapes.length;p<w;p++){const S=o[n.shapes[p]];h.push(S)}return new cc(h,n.curveSegments)}}class eo extends On{constructor(n=1,o=32,h=16,p=0,w=2*Math.PI,S=0,I=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:n,widthSegments:o,heightSegments:h,phiStart:p,phiLength:w,thetaStart:S,thetaLength:I},o=Math.max(3,Math.floor(o)),h=Math.max(2,Math.floor(h));const k=Math.min(S+I,Math.PI);let R=0;const $=[],j=new Te,H=new Te,Y=[],ee=[],te=[],ae=[];for(let ne=0;ne<=h;ne++){const me=[],_e=ne/h;let ve=0;ne==0&&S==0?ve=.5/o:ne==h&&k==Math.PI&&(ve=-.5/o);for(let Ne=0;Ne<=o;Ne++){const Oe=Ne/o;j.x=-n*Math.cos(p+Oe*w)*Math.sin(S+_e*I),j.y=n*Math.cos(S+_e*I),j.z=n*Math.sin(p+Oe*w)*Math.sin(S+_e*I),ee.push(j.x,j.y,j.z),H.copy(j).normalize(),te.push(H.x,H.y,H.z),ae.push(Oe+ve,1-_e),me.push(R++)}$.push(me)}for(let ne=0;ne<h;ne++)for(let me=0;me<o;me++){const _e=$[ne][me+1],ve=$[ne][me],Ne=$[ne+1][me],Oe=$[ne+1][me+1];(ne!==0||S>0)&&Y.push(_e,ve,Oe),(ne!==h-1||k<Math.PI)&&Y.push(ve,Ne,Oe)}this.setIndex(Y),this.setAttribute("position",new pn(ee,3)),this.setAttribute("normal",new pn(te,3)),this.setAttribute("uv",new pn(ae,2))}static fromJSON(n){return new eo(n.radius,n.widthSegments,n.heightSegments,n.phiStart,n.phiLength,n.thetaStart,n.thetaLength)}}class ms extends Cl{constructor(n=1,o=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],n,o),this.type="TetrahedronGeometry",this.parameters={radius:n,detail:o}}static fromJSON(n){return new ms(n.radius,n.detail)}}class Pg extends rl{constructor(n,o={}){const h=o.font;if(!h||!h.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new On;const p=h.generateShapes(n,o.size);o.depth=o.height!==void 0?o.height:50,o.bevelThickness===void 0&&(o.bevelThickness=10),o.bevelSize===void 0&&(o.bevelSize=8),o.bevelEnabled===void 0&&(o.bevelEnabled=!1),super(p,o),this.type="TextGeometry"}}class Na extends On{constructor(n=1,o=.4,h=8,p=6,w=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:n,tube:o,radialSegments:h,tubularSegments:p,arc:w},h=Math.floor(h),p=Math.floor(p);const S=[],I=[],k=[],R=[],$=new Te,j=new Te,H=new Te;for(let Y=0;Y<=h;Y++)for(let ee=0;ee<=p;ee++){const te=ee/p*w,ae=Y/h*Math.PI*2;j.x=(n+o*Math.cos(ae))*Math.cos(te),j.y=(n+o*Math.cos(ae))*Math.sin(te),j.z=o*Math.sin(ae),I.push(j.x,j.y,j.z),$.x=n*Math.cos(te),$.y=n*Math.sin(te),H.subVectors(j,$).normalize(),k.push(H.x,H.y,H.z),R.push(ee/p),R.push(Y/h)}for(let Y=1;Y<=h;Y++)for(let ee=1;ee<=p;ee++){const te=(p+1)*Y+ee-1,ae=(p+1)*(Y-1)+ee-1,ne=(p+1)*(Y-1)+ee,me=(p+1)*Y+ee;S.push(te,ae,me),S.push(ae,ne,me)}this.setIndex(S),this.setAttribute("position",new pn(I,3)),this.setAttribute("normal",new pn(k,3)),this.setAttribute("uv",new pn(R,2))}static fromJSON(n){return new Na(n.radius,n.tube,n.radialSegments,n.tubularSegments,n.arc)}}class pp extends On{constructor(n=1,o=.4,h=64,p=8,w=2,S=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:n,tube:o,tubularSegments:h,radialSegments:p,p:w,q:S},h=Math.floor(h),p=Math.floor(p);const I=[],k=[],R=[],$=[],j=new Te,H=new Te,Y=new Te,ee=new Te,te=new Te,ae=new Te,ne=new Te;for(let _e=0;_e<=h;++_e){const ve=_e/h*w*Math.PI*2;me(ve,w,S,n,Y),me(ve+.01,w,S,n,ee),ae.subVectors(ee,Y),ne.addVectors(ee,Y),te.crossVectors(ae,ne),ne.crossVectors(te,ae),te.normalize(),ne.normalize();for(let Ne=0;Ne<=p;++Ne){const Oe=Ne/p*Math.PI*2,tt=-o*Math.cos(Oe),it=o*Math.sin(Oe);j.x=Y.x+(tt*ne.x+it*te.x),j.y=Y.y+(tt*ne.y+it*te.y),j.z=Y.z+(tt*ne.z+it*te.z),k.push(j.x,j.y,j.z),H.subVectors(j,Y).normalize(),R.push(H.x,H.y,H.z),$.push(_e/h),$.push(Ne/p)}}for(let _e=1;_e<=h;_e++)for(let ve=1;ve<=p;ve++){const Ne=(p+1)*(_e-1)+(ve-1),Oe=(p+1)*_e+(ve-1),tt=(p+1)*_e+ve,it=(p+1)*(_e-1)+ve;I.push(Ne,Oe,it),I.push(Oe,tt,it)}function me(_e,ve,Ne,Oe,tt){const it=Math.cos(_e),gt=Math.sin(_e),ut=Ne/ve*_e,ct=Math.cos(ut);tt.x=Oe*(2+ct)*.5*it,tt.y=Oe*(2+ct)*gt*.5,tt.z=Oe*Math.sin(ut)*.5}this.setIndex(I),this.setAttribute("position",new pn(k,3)),this.setAttribute("normal",new pn(R,3)),this.setAttribute("uv",new pn($,2))}static fromJSON(n){return new pp(n.radius,n.tube,n.tubularSegments,n.radialSegments,n.p,n.q)}}class fp extends On{constructor(n,o=64,h=1,p=8,w=!1){super(),this.type="TubeGeometry",this.parameters={path:n,tubularSegments:o,radius:h,radialSegments:p,closed:w};const S=n.computeFrenetFrames(o,w);this.tangents=S.tangents,this.normals=S.normals,this.binormals=S.binormals;const I=new Te,k=new Te,R=new Qt;let $=new Te;const j=[],H=[],Y=[],ee=[];function te(ae){$=n.getPointAt(ae/o,$);const ne=S.normals[ae],me=S.binormals[ae];for(let _e=0;_e<=p;_e++){const ve=_e/p*Math.PI*2,Ne=Math.sin(ve),Oe=-Math.cos(ve);k.x=Oe*ne.x+Ne*me.x,k.y=Oe*ne.y+Ne*me.y,k.z=Oe*ne.z+Ne*me.z,k.normalize(),H.push(k.x,k.y,k.z),I.x=$.x+h*k.x,I.y=$.y+h*k.y,I.z=$.z+h*k.z,j.push(I.x,I.y,I.z)}}(function(){for(let ae=0;ae<o;ae++)te(ae);te(w===!1?o:0),function(){for(let ae=0;ae<=o;ae++)for(let ne=0;ne<=p;ne++)R.x=ae/o,R.y=ne/p,Y.push(R.x,R.y)}(),function(){for(let ae=1;ae<=o;ae++)for(let ne=1;ne<=p;ne++){const me=(p+1)*(ae-1)+(ne-1),_e=(p+1)*ae+(ne-1),ve=(p+1)*ae+ne,Ne=(p+1)*(ae-1)+ne;ee.push(me,_e,Ne),ee.push(_e,ve,Ne)}}()})(),this.setIndex(ee),this.setAttribute("position",new pn(j,3)),this.setAttribute("normal",new pn(H,3)),this.setAttribute("uv",new pn(Y,2))}toJSON(){const n=super.toJSON();return n.path=this.parameters.path.toJSON(),n}static fromJSON(n){return new fp(new rm[n.path.type]().fromJSON(n.path),n.tubularSegments,n.radius,n.radialSegments,n.closed)}}class Y0 extends On{constructor(n){if(super(),this.type="WireframeGeometry",n.isGeometry===!0)return void console.error("THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");const o=[],h=new Set,p=new Te,w=new Te;if(n.index!==null){const S=n.attributes.position,I=n.index;let k=n.groups;k.length===0&&(k=[{start:0,count:I.count,materialIndex:0}]);for(let R=0,$=k.length;R<$;++R){const j=k[R],H=j.start;for(let Y=H,ee=H+j.count;Y<ee;Y+=3)for(let te=0;te<3;te++){const ae=I.getX(Y+te),ne=I.getX(Y+(te+1)%3);p.fromBufferAttribute(S,ae),w.fromBufferAttribute(S,ne),Mb(p,w,h)===!0&&(o.push(p.x,p.y,p.z),o.push(w.x,w.y,w.z))}}}else{const S=n.attributes.position;for(let I=0,k=S.count/3;I<k;I++)for(let R=0;R<3;R++){const $=3*I+R,j=3*I+(R+1)%3;p.fromBufferAttribute(S,$),w.fromBufferAttribute(S,j),Mb(p,w,h)===!0&&(o.push(p.x,p.y,p.z),o.push(w.x,w.y,w.z))}}this.setAttribute("position",new pn(o,3))}}function Mb(T,n,o){const h=`${T.x},${T.y},${T.z}-${n.x},${n.y},${n.z}`,p=`${n.x},${n.y},${n.z}-${T.x},${T.y},${T.z}`;return o.has(h)!==!0&&o.has(p)!==!0&&(o.add(h,p),!0)}var mp=Object.freeze({__proto__:null,BoxGeometry:Ka,BoxBufferGeometry:Ka,CircleGeometry:Eh,CircleBufferGeometry:Eh,ConeGeometry:nl,ConeBufferGeometry:nl,CylinderGeometry:Il,CylinderBufferGeometry:Il,DodecahedronGeometry:ic,DodecahedronBufferGeometry:ic,EdgesGeometry:kg,ExtrudeGeometry:rl,ExtrudeBufferGeometry:rl,IcosahedronGeometry:il,IcosahedronBufferGeometry:il,LatheGeometry:uc,LatheBufferGeometry:uc,OctahedronGeometry:du,OctahedronBufferGeometry:du,ParametricGeometry:Rh,ParametricBufferGeometry:Rh,PlaneGeometry:ch,PlaneBufferGeometry:ch,PolyhedronGeometry:Cl,PolyhedronBufferGeometry:Cl,RingGeometry:dp,RingBufferGeometry:dp,ShapeGeometry:cc,ShapeBufferGeometry:cc,SphereGeometry:eo,SphereBufferGeometry:eo,TetrahedronGeometry:ms,TetrahedronBufferGeometry:ms,TextGeometry:Pg,TextBufferGeometry:Pg,TorusGeometry:Na,TorusBufferGeometry:Na,TorusKnotGeometry:pp,TorusKnotBufferGeometry:pp,TubeGeometry:fp,TubeBufferGeometry:fp,WireframeGeometry:Y0});class Fg extends fr{constructor(n){super(),this.type="ShadowMaterial",this.color=new yn(0),this.transparent=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this}}Fg.prototype.isShadowMaterial=!0;class hc extends fr{constructor(n){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new yn(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new yn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Oo,this.normalScale=new Qt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(n)}copy(n){return super.copy(n),this.defines={STANDARD:""},this.color.copy(n.color),this.roughness=n.roughness,this.metalness=n.metalness,this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.roughnessMap=n.roughnessMap,this.metalnessMap=n.metalnessMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.envMapIntensity=n.envMapIntensity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.flatShading=n.flatShading,this}}hc.prototype.isMeshStandardMaterial=!0;class gp extends hc{constructor(n){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Qt(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Vi(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(o){this.ior=(1+.4*o)/(1-.4*o)}}),this.sheenTint=new yn(0),this.transmission=0,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationTint=new yn(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularTint=new yn(1,1,1),this.specularTintMap=null,this._clearcoat=0,this._transmission=0,this.setValues(n)}get clearcoat(){return this._clearcoat}set clearcoat(n){this._clearcoat>0!=n>0&&this.version++,this._clearcoat=n}get transmission(){return this._transmission}set transmission(n){this._transmission>0!=n>0&&this.version++,this._transmission=n}copy(n){return super.copy(n),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=n.clearcoat,this.clearcoatMap=n.clearcoatMap,this.clearcoatRoughness=n.clearcoatRoughness,this.clearcoatRoughnessMap=n.clearcoatRoughnessMap,this.clearcoatNormalMap=n.clearcoatNormalMap,this.clearcoatNormalScale.copy(n.clearcoatNormalScale),this.ior=n.ior,this.sheenTint.copy(n.sheenTint),this.transmission=n.transmission,this.transmissionMap=n.transmissionMap,this.thickness=n.thickness,this.thicknessMap=n.thicknessMap,this.attenuationDistance=n.attenuationDistance,this.attenuationTint.copy(n.attenuationTint),this.specularIntensity=n.specularIntensity,this.specularIntensityMap=n.specularIntensityMap,this.specularTint.copy(n.specularTint),this.specularTintMap=n.specularTintMap,this}}gp.prototype.isMeshPhysicalMaterial=!0;class K0 extends fr{constructor(n){super(),this.type="MeshPhongMaterial",this.color=new yn(16777215),this.specular=new yn(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new yn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Oo,this.normalScale=new Qt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=vn,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.specular.copy(n.specular),this.shininess=n.shininess,this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.flatShading=n.flatShading,this}}K0.prototype.isMeshPhongMaterial=!0;class dc extends fr{constructor(n){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new yn(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new yn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Oo,this.normalScale=new Qt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.gradientMap=n.gradientMap,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.alphaMap=n.alphaMap,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this}}dc.prototype.isMeshToonMaterial=!0;class sm extends fr{constructor(n){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Oo,this.normalScale=new Qt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(n)}copy(n){return super.copy(n),this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.flatShading=n.flatShading,this}}sm.prototype.isMeshNormalMaterial=!0;class Z0 extends fr{constructor(n){super(),this.type="MeshLambertMaterial",this.color=new yn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new yn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=vn,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this}}Z0.prototype.isMeshLambertMaterial=!0;class J0 extends fr{constructor(n){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new yn(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Oo,this.normalScale=new Qt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(n)}copy(n){return super.copy(n),this.defines={MATCAP:""},this.color.copy(n.color),this.matcap=n.matcap,this.map=n.map,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.alphaMap=n.alphaMap,this.flatShading=n.flatShading,this}}J0.prototype.isMeshMatcapMaterial=!0;class Q0 extends fs{constructor(n){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(n)}copy(n){return super.copy(n),this.scale=n.scale,this.dashSize=n.dashSize,this.gapSize=n.gapSize,this}}Q0.prototype.isLineDashedMaterial=!0;var Tb=Object.freeze({__proto__:null,ShadowMaterial:Fg,SpriteMaterial:yh,RawShaderMaterial:ka,ShaderMaterial:qs,PointsMaterial:rc,MeshPhysicalMaterial:gp,MeshStandardMaterial:hc,MeshPhongMaterial:K0,MeshToonMaterial:dc,MeshNormalMaterial:sm,MeshLambertMaterial:Z0,MeshDepthMaterial:xg,MeshDistanceMaterial:qf,MeshBasicMaterial:di,MeshMatcapMaterial:J0,LineDashedMaterial:Q0,LineBasicMaterial:fs,Material:fr});const Zr={arraySlice:function(T,n,o){return Zr.isTypedArray(T)?new T.constructor(T.subarray(n,o!==void 0?o:T.length)):T.slice(n,o)},convertArray:function(T,n,o){return!T||!o&&T.constructor===n?T:typeof n.BYTES_PER_ELEMENT=="number"?new n(T):Array.prototype.slice.call(T)},isTypedArray:function(T){return ArrayBuffer.isView(T)&&!(T instanceof DataView)},getKeyframeOrder:function(T){const n=T.length,o=new Array(n);for(let h=0;h!==n;++h)o[h]=h;return o.sort(function(h,p){return T[h]-T[p]}),o},sortedArray:function(T,n,o){const h=T.length,p=new T.constructor(h);for(let w=0,S=0;S!==h;++w){const I=o[w]*n;for(let k=0;k!==n;++k)p[S++]=T[I+k]}return p},flattenJSON:function(T,n,o,h){let p=1,w=T[0];for(;w!==void 0&&w[h]===void 0;)w=T[p++];if(w===void 0)return;let S=w[h];if(S!==void 0)if(Array.isArray(S))do S=w[h],S!==void 0&&(n.push(w.time),o.push.apply(o,S)),w=T[p++];while(w!==void 0);else if(S.toArray!==void 0)do S=w[h],S!==void 0&&(n.push(w.time),S.toArray(o,o.length)),w=T[p++];while(w!==void 0);else do S=w[h],S!==void 0&&(n.push(w.time),o.push(S)),w=T[p++];while(w!==void 0)},subclip:function(T,n,o,h,p=30){const w=T.clone();w.name=n;const S=[];for(let k=0;k<w.tracks.length;++k){const R=w.tracks[k],$=R.getValueSize(),j=[],H=[];for(let Y=0;Y<R.times.length;++Y){const ee=R.times[Y]*p;if(!(ee<o||ee>=h)){j.push(R.times[Y]);for(let te=0;te<$;++te)H.push(R.values[Y*$+te])}}j.length!==0&&(R.times=Zr.convertArray(j,R.times.constructor),R.values=Zr.convertArray(H,R.values.constructor),S.push(R))}w.tracks=S;let I=1/0;for(let k=0;k<w.tracks.length;++k)I>w.tracks[k].times[0]&&(I=w.tracks[k].times[0]);for(let k=0;k<w.tracks.length;++k)w.tracks[k].shift(-1*I);return w.resetDuration(),w},makeClipAdditive:function(T,n=0,o=T,h=30){h<=0&&(h=30);const p=o.tracks.length,w=n/h;for(let S=0;S<p;++S){const I=o.tracks[S],k=I.ValueTypeName;if(k==="bool"||k==="string")continue;const R=T.tracks.find(function(ne){return ne.name===I.name&&ne.ValueTypeName===k});if(R===void 0)continue;let $=0;const j=I.getValueSize();I.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&($=j/3);let H=0;const Y=R.getValueSize();R.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(H=Y/3);const ee=I.times.length-1;let te;if(w<=I.times[0]){const ne=$,me=j-$;te=Zr.arraySlice(I.values,ne,me)}else if(w>=I.times[ee]){const ne=ee*j+$,me=ne+j-$;te=Zr.arraySlice(I.values,ne,me)}else{const ne=I.createInterpolant(),me=$,_e=j-$;ne.evaluate(w),te=Zr.arraySlice(ne.resultBuffer,me,_e)}k==="quaternion"&&new Zi().fromArray(te).normalize().conjugate().toArray(te);const ae=R.times.length;for(let ne=0;ne<ae;++ne){const me=ne*Y+H;if(k==="quaternion")Zi.multiplyQuaternionsFlat(R.values,me,te,0,R.values,me);else{const _e=Y-2*H;for(let ve=0;ve<_e;++ve)R.values[me+ve]-=te[ve]}}}return T.blendMode=md,T}};class Ra{constructor(n,o,h,p){this.parameterPositions=n,this._cachedIndex=0,this.resultBuffer=p!==void 0?p:new o.constructor(h),this.sampleValues=o,this.valueSize=h,this.settings=null,this.DefaultSettings_={}}evaluate(n){const o=this.parameterPositions;let h=this._cachedIndex,p=o[h],w=o[h-1];e:{t:{let S;n:{r:if(!(n<p)){for(let I=h+2;;){if(p===void 0){if(n<w)break r;return h=o.length,this._cachedIndex=h,this.afterEnd_(h-1,n,w)}if(h===I)break;if(w=p,p=o[++h],n<p)break t}S=o.length;break n}if(n>=w)break e;{const I=o[1];n<I&&(h=2,w=I);for(let k=h-2;;){if(w===void 0)return this._cachedIndex=0,this.beforeStart_(0,n,p);if(h===k)break;if(p=w,w=o[--h-1],n>=w)break t}S=h,h=0}}for(;h<S;){const I=h+S>>>1;n<o[I]?S=I:h=I+1}if(p=o[h],w=o[h-1],w===void 0)return this._cachedIndex=0,this.beforeStart_(0,n,p);if(p===void 0)return h=o.length,this._cachedIndex=h,this.afterEnd_(h-1,w,n)}this._cachedIndex=h,this.intervalChanged_(h,w,p)}return this.interpolate_(h,w,n,p)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(n){const o=this.resultBuffer,h=this.sampleValues,p=this.valueSize,w=n*p;for(let S=0;S!==p;++S)o[S]=h[w+S];return o}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}Ra.prototype.beforeStart_=Ra.prototype.copySampleValue_,Ra.prototype.afterEnd_=Ra.prototype.copySampleValue_;class yp extends Ra{constructor(n,o,h,p){super(n,o,h,p),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Fo,endingEnd:Fo}}intervalChanged_(n,o,h){const p=this.parameterPositions;let w=n-2,S=n+1,I=p[w],k=p[S];if(I===void 0)switch(this.getSettings_().endingStart){case gl:w=n,I=2*o-h;break;case Fu:w=p.length-2,I=o+p[w]-p[w+1];break;default:w=n,I=h}if(k===void 0)switch(this.getSettings_().endingEnd){case gl:S=n,k=2*h-o;break;case Fu:S=1,k=h+p[1]-p[0];break;default:S=n-1,k=o}const R=.5*(h-o),$=this.valueSize;this._weightPrev=R/(o-I),this._weightNext=R/(k-h),this._offsetPrev=w*$,this._offsetNext=S*$}interpolate_(n,o,h,p){const w=this.resultBuffer,S=this.sampleValues,I=this.valueSize,k=n*I,R=k-I,$=this._offsetPrev,j=this._offsetNext,H=this._weightPrev,Y=this._weightNext,ee=(h-o)/(p-o),te=ee*ee,ae=te*ee,ne=-H*ae+2*H*te-H*ee,me=(1+H)*ae+(-1.5-2*H)*te+(-.5+H)*ee+1,_e=(-1-Y)*ae+(1.5+Y)*te+.5*ee,ve=Y*ae-Y*te;for(let Ne=0;Ne!==I;++Ne)w[Ne]=ne*S[$+Ne]+me*S[R+Ne]+_e*S[k+Ne]+ve*S[j+Ne];return w}}class am extends Ra{constructor(n,o,h,p){super(n,o,h,p)}interpolate_(n,o,h,p){const w=this.resultBuffer,S=this.sampleValues,I=this.valueSize,k=n*I,R=k-I,$=(h-o)/(p-o),j=1-$;for(let H=0;H!==I;++H)w[H]=S[R+H]*j+S[k+H]*$;return w}}class To extends Ra{constructor(n,o,h,p){super(n,o,h,p)}interpolate_(n){return this.copySampleValue_(n-1)}}class La{constructor(n,o,h,p){if(n===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(o===void 0||o.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+n);this.name=n,this.times=Zr.convertArray(o,this.TimeBufferType),this.values=Zr.convertArray(h,this.ValueBufferType),this.setInterpolation(p||this.DefaultInterpolation)}static toJSON(n){const o=n.constructor;let h;if(o.toJSON!==this.toJSON)h=o.toJSON(n);else{h={name:n.name,times:Zr.convertArray(n.times,Array),values:Zr.convertArray(n.values,Array)};const p=n.getInterpolation();p!==n.DefaultInterpolation&&(h.interpolation=p)}return h.type=n.ValueTypeName,h}InterpolantFactoryMethodDiscrete(n){return new To(this.times,this.values,this.getValueSize(),n)}InterpolantFactoryMethodLinear(n){return new am(this.times,this.values,this.getValueSize(),n)}InterpolantFactoryMethodSmooth(n){return new yp(this.times,this.values,this.getValueSize(),n)}setInterpolation(n){let o;switch(n){case Du:o=this.InterpolantFactoryMethodDiscrete;break;case Pu:o=this.InterpolantFactoryMethodLinear;break;case Gc:o=this.InterpolantFactoryMethodSmooth}if(o===void 0){const h="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0){if(n===this.DefaultInterpolation)throw new Error(h);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",h),this}return this.createInterpolant=o,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Du;case this.InterpolantFactoryMethodLinear:return Pu;case this.InterpolantFactoryMethodSmooth:return Gc}}getValueSize(){return this.values.length/this.times.length}shift(n){if(n!==0){const o=this.times;for(let h=0,p=o.length;h!==p;++h)o[h]+=n}return this}scale(n){if(n!==1){const o=this.times;for(let h=0,p=o.length;h!==p;++h)o[h]*=n}return this}trim(n,o){const h=this.times,p=h.length;let w=0,S=p-1;for(;w!==p&&h[w]<n;)++w;for(;S!==-1&&h[S]>o;)--S;if(++S,w!==0||S!==p){w>=S&&(S=Math.max(S,1),w=S-1);const I=this.getValueSize();this.times=Zr.arraySlice(h,w,S),this.values=Zr.arraySlice(this.values,w*I,S*I)}return this}validate(){let n=!0;const o=this.getValueSize();o-Math.floor(o)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),n=!1);const h=this.times,p=this.values,w=h.length;w===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),n=!1);let S=null;for(let I=0;I!==w;I++){const k=h[I];if(typeof k=="number"&&isNaN(k)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,I,k),n=!1;break}if(S!==null&&S>k){console.error("THREE.KeyframeTrack: Out of order keys.",this,I,k,S),n=!1;break}S=k}if(p!==void 0&&Zr.isTypedArray(p))for(let I=0,k=p.length;I!==k;++I){const R=p[I];if(isNaN(R)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,I,R),n=!1;break}}return n}optimize(){const n=Zr.arraySlice(this.times),o=Zr.arraySlice(this.values),h=this.getValueSize(),p=this.getInterpolation()===Gc,w=n.length-1;let S=1;for(let I=1;I<w;++I){let k=!1;const R=n[I];if(R!==n[I+1]&&(I!==1||R!==n[0]))if(p)k=!0;else{const $=I*h,j=$-h,H=$+h;for(let Y=0;Y!==h;++Y){const ee=o[$+Y];if(ee!==o[j+Y]||ee!==o[H+Y]){k=!0;break}}}if(k){if(I!==S){n[S]=n[I];const $=I*h,j=S*h;for(let H=0;H!==h;++H)o[j+H]=o[$+H]}++S}}if(w>0){n[S]=n[w];for(let I=w*h,k=S*h,R=0;R!==h;++R)o[k+R]=o[I+R];++S}return S!==n.length?(this.times=Zr.arraySlice(n,0,S),this.values=Zr.arraySlice(o,0,S*h)):(this.times=n,this.values=o),this}clone(){const n=Zr.arraySlice(this.times,0),o=Zr.arraySlice(this.values,0),h=new this.constructor(this.name,n,o);return h.createInterpolant=this.createInterpolant,h}}La.prototype.TimeBufferType=Float32Array,La.prototype.ValueBufferType=Float32Array,La.prototype.DefaultInterpolation=Pu;class os extends La{}os.prototype.ValueTypeName="bool",os.prototype.ValueBufferType=Array,os.prototype.DefaultInterpolation=Du,os.prototype.InterpolantFactoryMethodLinear=void 0,os.prototype.InterpolantFactoryMethodSmooth=void 0;class ex extends La{}ex.prototype.ValueTypeName="color";class om extends La{}om.prototype.ValueTypeName="number";class Eb extends Ra{constructor(n,o,h,p){super(n,o,h,p)}interpolate_(n,o,h,p){const w=this.resultBuffer,S=this.sampleValues,I=this.valueSize,k=(h-o)/(p-o);let R=n*I;for(let $=R+I;R!==$;R+=4)Zi.slerpFlat(w,0,S,R-I,S,R,k);return w}}class xp extends La{InterpolantFactoryMethodLinear(n){return new Eb(this.times,this.values,this.getValueSize(),n)}}xp.prototype.ValueTypeName="quaternion",xp.prototype.DefaultInterpolation=Pu,xp.prototype.InterpolantFactoryMethodSmooth=void 0;class Nl extends La{}Nl.prototype.ValueTypeName="string",Nl.prototype.ValueBufferType=Array,Nl.prototype.DefaultInterpolation=Du,Nl.prototype.InterpolantFactoryMethodLinear=void 0,Nl.prototype.InterpolantFactoryMethodSmooth=void 0;class pc extends La{}pc.prototype.ValueTypeName="vector";class fc{constructor(n,o=-1,h,p=Ul){this.name=n,this.tracks=h,this.duration=o,this.blendMode=p,this.uuid=Vs(),this.duration<0&&this.resetDuration()}static parse(n){const o=[],h=n.tracks,p=1/(n.fps||1);for(let S=0,I=h.length;S!==I;++S)o.push(tx(h[S]).scale(p));const w=new this(n.name,n.duration,o,n.blendMode);return w.uuid=n.uuid,w}static toJSON(n){const o=[],h=n.tracks,p={name:n.name,duration:n.duration,tracks:o,uuid:n.uuid,blendMode:n.blendMode};for(let w=0,S=h.length;w!==S;++w)o.push(La.toJSON(h[w]));return p}static CreateFromMorphTargetSequence(n,o,h,p){const w=o.length,S=[];for(let I=0;I<w;I++){let k=[],R=[];k.push((I+w-1)%w,I,(I+1)%w),R.push(0,1,0);const $=Zr.getKeyframeOrder(k);k=Zr.sortedArray(k,1,$),R=Zr.sortedArray(R,1,$),p||k[0]!==0||(k.push(w),R.push(R[0])),S.push(new om(".morphTargetInfluences["+o[I].name+"]",k,R).scale(1/h))}return new this(n,-1,S)}static findByName(n,o){let h=n;if(!Array.isArray(n)){const p=n;h=p.geometry&&p.geometry.animations||p.animations}for(let p=0;p<h.length;p++)if(h[p].name===o)return h[p];return null}static CreateClipsFromMorphTargetSequences(n,o,h){const p={},w=/^([\w-]*?)([\d]+)$/;for(let I=0,k=n.length;I<k;I++){const R=n[I],$=R.name.match(w);if($&&$.length>1){const j=$[1];let H=p[j];H||(p[j]=H=[]),H.push(R)}}const S=[];for(const I in p)S.push(this.CreateFromMorphTargetSequence(I,p[I],o,h));return S}static parseAnimation(n,o){if(!n)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const h=function($,j,H,Y,ee){if(H.length!==0){const te=[],ae=[];Zr.flattenJSON(H,te,ae,Y),te.length!==0&&ee.push(new $(j,te,ae))}},p=[],w=n.name||"default",S=n.fps||30,I=n.blendMode;let k=n.length||-1;const R=n.hierarchy||[];for(let $=0;$<R.length;$++){const j=R[$].keys;if(j&&j.length!==0)if(j[0].morphTargets){const H={};let Y;for(Y=0;Y<j.length;Y++)if(j[Y].morphTargets)for(let ee=0;ee<j[Y].morphTargets.length;ee++)H[j[Y].morphTargets[ee]]=-1;for(const ee in H){const te=[],ae=[];for(let ne=0;ne!==j[Y].morphTargets.length;++ne){const me=j[Y];te.push(me.time),ae.push(me.morphTarget===ee?1:0)}p.push(new om(".morphTargetInfluence["+ee+"]",te,ae))}k=H.length*(S||1)}else{const H=".bones["+o[$].name+"]";h(pc,H+".position",j,"pos",p),h(xp,H+".quaternion",j,"rot",p),h(pc,H+".scale",j,"scl",p)}}return p.length===0?null:new this(w,k,p,I)}resetDuration(){let n=0;for(let o=0,h=this.tracks.length;o!==h;++o){const p=this.tracks[o];n=Math.max(n,p.times[p.times.length-1])}return this.duration=n,this}trim(){for(let n=0;n<this.tracks.length;n++)this.tracks[n].trim(0,this.duration);return this}validate(){let n=!0;for(let o=0;o<this.tracks.length;o++)n=n&&this.tracks[o].validate();return n}optimize(){for(let n=0;n<this.tracks.length;n++)this.tracks[n].optimize();return this}clone(){const n=[];for(let o=0;o<this.tracks.length;o++)n.push(this.tracks[o].clone());return new this.constructor(this.name,this.duration,n,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function tx(T){if(T.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const n=function(o){switch(o.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return om;case"vector":case"vector2":case"vector3":case"vector4":return pc;case"color":return ex;case"quaternion":return xp;case"bool":case"boolean":return os;case"string":return Nl}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+o)}(T.type);if(T.times===void 0){const o=[],h=[];Zr.flattenJSON(T.keys,o,h,"value"),T.times=o,T.values=h}return n.parse!==void 0?n.parse(T):new n(T.name,T.times,T.values,T.interpolation)}const mc={enabled:!1,files:{},add:function(T,n){this.enabled!==!1&&(this.files[T]=n)},get:function(T){if(this.enabled!==!1)return this.files[T]},remove:function(T){delete this.files[T]},clear:function(){this.files={}}};class lm{constructor(n,o,h){const p=this;let w,S=!1,I=0,k=0;const R=[];this.onStart=void 0,this.onLoad=n,this.onProgress=o,this.onError=h,this.itemStart=function($){k++,S===!1&&p.onStart!==void 0&&p.onStart($,I,k),S=!0},this.itemEnd=function($){I++,p.onProgress!==void 0&&p.onProgress($,I,k),I===k&&(S=!1,p.onLoad!==void 0&&p.onLoad())},this.itemError=function($){p.onError!==void 0&&p.onError($)},this.resolveURL=function($){return w?w($):$},this.setURLModifier=function($){return w=$,this},this.addHandler=function($,j){return R.push($,j),this},this.removeHandler=function($){const j=R.indexOf($);return j!==-1&&R.splice(j,2),this},this.getHandler=function($){for(let j=0,H=R.length;j<H;j+=2){const Y=R[j],ee=R[j+1];if(Y.global&&(Y.lastIndex=0),Y.test($))return ee}return null}}}const um=new lm;class gs{constructor(n){this.manager=n!==void 0?n:um,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(n,o){const h=this;return new Promise(function(p,w){h.load(n,p,o,w)})}parse(){}setCrossOrigin(n){return this.crossOrigin=n,this}setWithCredentials(n){return this.withCredentials=n,this}setPath(n){return this.path=n,this}setResourcePath(n){return this.resourcePath=n,this}setRequestHeader(n){return this.requestHeader=n,this}}const Da={};class to extends gs{constructor(n){super(n)}load(n,o,h,p){n===void 0&&(n=""),this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const w=this,S=mc.get(n);if(S!==void 0)return w.manager.itemStart(n),setTimeout(function(){o&&o(S),w.manager.itemEnd(n)},0),S;if(Da[n]!==void 0)return void Da[n].push({onLoad:o,onProgress:h,onError:p});const I=n.match(/^data:(.*?)(;base64)?,(.*)$/);let k;if(I){const R=I[1],$=!!I[2];let j=I[3];j=decodeURIComponent(j),$&&(j=atob(j));try{let H;const Y=(this.responseType||"").toLowerCase();switch(Y){case"arraybuffer":case"blob":const ee=new Uint8Array(j.length);for(let ae=0;ae<j.length;ae++)ee[ae]=j.charCodeAt(ae);H=Y==="blob"?new Blob([ee.buffer],{type:R}):ee.buffer;break;case"document":H=new DOMParser().parseFromString(j,R);break;case"json":H=JSON.parse(j);break;default:H=j}setTimeout(function(){o&&o(H),w.manager.itemEnd(n)},0)}catch(H){setTimeout(function(){p&&p(H),w.manager.itemError(n),w.manager.itemEnd(n)},0)}}else{Da[n]=[],Da[n].push({onLoad:o,onProgress:h,onError:p}),k=new XMLHttpRequest,k.open("GET",n,!0),k.addEventListener("load",function(R){const $=this.response,j=Da[n];if(delete Da[n],this.status===200||this.status===0){this.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),mc.add(n,$);for(let H=0,Y=j.length;H<Y;H++){const ee=j[H];ee.onLoad&&ee.onLoad($)}w.manager.itemEnd(n)}else{for(let H=0,Y=j.length;H<Y;H++){const ee=j[H];ee.onError&&ee.onError(R)}w.manager.itemError(n),w.manager.itemEnd(n)}},!1),k.addEventListener("progress",function(R){const $=Da[n];for(let j=0,H=$.length;j<H;j++){const Y=$[j];Y.onProgress&&Y.onProgress(R)}},!1),k.addEventListener("error",function(R){const $=Da[n];delete Da[n];for(let j=0,H=$.length;j<H;j++){const Y=$[j];Y.onError&&Y.onError(R)}w.manager.itemError(n),w.manager.itemEnd(n)},!1),k.addEventListener("abort",function(R){const $=Da[n];delete Da[n];for(let j=0,H=$.length;j<H;j++){const Y=$[j];Y.onError&&Y.onError(R)}w.manager.itemError(n),w.manager.itemEnd(n)},!1),this.responseType!==void 0&&(k.responseType=this.responseType),this.withCredentials!==void 0&&(k.withCredentials=this.withCredentials),k.overrideMimeType&&k.overrideMimeType(this.mimeType!==void 0?this.mimeType:"text/plain");for(const R in this.requestHeader)k.setRequestHeader(R,this.requestHeader[R]);k.send(null)}return w.manager.itemStart(n),k}setResponseType(n){return this.responseType=n,this}setMimeType(n){return this.mimeType=n,this}}class Og extends gs{constructor(n){super(n)}load(n,o,h,p){const w=this,S=new to(this.manager);S.setPath(this.path),S.setRequestHeader(this.requestHeader),S.setWithCredentials(this.withCredentials),S.load(n,function(I){try{o(w.parse(JSON.parse(I)))}catch(k){p?p(k):console.error(k),w.manager.itemError(n)}},h,p)}parse(n){const o=[];for(let h=0;h<n.length;h++){const p=fc.parse(n[h]);o.push(p)}return o}}class cm extends gs{constructor(n){super(n)}load(n,o,h,p){const w=this,S=[],I=new Th,k=new to(this.manager);k.setPath(this.path),k.setResponseType("arraybuffer"),k.setRequestHeader(this.requestHeader),k.setWithCredentials(w.withCredentials);let R=0;function $(j){k.load(n[j],function(H){const Y=w.parse(H,!0);S[j]={width:Y.width,height:Y.height,format:Y.format,mipmaps:Y.mipmaps},R+=1,R===6&&(Y.mipmapCount===1&&(I.minFilter=Or),I.image=S,I.format=Y.format,I.needsUpdate=!0,o&&o(I))},h,p)}if(Array.isArray(n))for(let j=0,H=n.length;j<H;++j)$(j);else k.load(n,function(j){const H=w.parse(j,!0);if(H.isCubemap){const Y=H.mipmaps.length/H.mipmapCount;for(let ee=0;ee<Y;ee++){S[ee]={mipmaps:[]};for(let te=0;te<H.mipmapCount;te++)S[ee].mipmaps.push(H.mipmaps[ee*H.mipmapCount+te]),S[ee].format=H.format,S[ee].width=H.width,S[ee].height=H.height}I.image=S}else I.image.width=H.width,I.image.height=H.height,I.mipmaps=H.mipmaps;H.mipmapCount===1&&(I.minFilter=Or),I.format=H.format,I.needsUpdate=!0,o&&o(I)},h,p);return I}}class pu extends gs{constructor(n){super(n)}load(n,o,h,p){this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const w=this,S=mc.get(n);if(S!==void 0)return w.manager.itemStart(n),setTimeout(function(){o&&o(S),w.manager.itemEnd(n)},0),S;const I=document.createElementNS("http://www.w3.org/1999/xhtml","img");function k(){I.removeEventListener("load",k,!1),I.removeEventListener("error",R,!1),mc.add(n,this),o&&o(this),w.manager.itemEnd(n)}function R($){I.removeEventListener("load",k,!1),I.removeEventListener("error",R,!1),p&&p($),w.manager.itemError(n),w.manager.itemEnd(n)}return I.addEventListener("load",k,!1),I.addEventListener("error",R,!1),n.substr(0,5)!=="data:"&&this.crossOrigin!==void 0&&(I.crossOrigin=this.crossOrigin),w.manager.itemStart(n),I.src=n,I}}class vp extends gs{constructor(n){super(n)}load(n,o,h,p){const w=new Xd,S=new pu(this.manager);S.setCrossOrigin(this.crossOrigin),S.setPath(this.path);let I=0;function k(R){S.load(n[R],function($){w.images[R]=$,I++,I===6&&(w.needsUpdate=!0,o&&o(w))},void 0,p)}for(let R=0;R<n.length;++R)k(R);return w}}class Lh extends gs{constructor(n){super(n)}load(n,o,h,p){const w=this,S=new Xe,I=new to(this.manager);return I.setResponseType("arraybuffer"),I.setRequestHeader(this.requestHeader),I.setPath(this.path),I.setWithCredentials(w.withCredentials),I.load(n,function(k){const R=w.parse(k);R&&(R.image!==void 0?S.image=R.image:R.data!==void 0&&(S.image.width=R.width,S.image.height=R.height,S.image.data=R.data),S.wrapS=R.wrapS!==void 0?R.wrapS:qn,S.wrapT=R.wrapT!==void 0?R.wrapT:qn,S.magFilter=R.magFilter!==void 0?R.magFilter:Or,S.minFilter=R.minFilter!==void 0?R.minFilter:Or,S.anisotropy=R.anisotropy!==void 0?R.anisotropy:1,R.encoding!==void 0&&(S.encoding=R.encoding),R.flipY!==void 0&&(S.flipY=R.flipY),R.format!==void 0&&(S.format=R.format),R.type!==void 0&&(S.type=R.type),R.mipmaps!==void 0&&(S.mipmaps=R.mipmaps,S.minFilter=Ns),R.mipmapCount===1&&(S.minFilter=Or),R.generateMipmaps!==void 0&&(S.generateMipmaps=R.generateMipmaps),S.needsUpdate=!0,o&&o(S,R))},h,p),S}}class hm extends gs{constructor(n){super(n)}load(n,o,h,p){const w=new Ri,S=new pu(this.manager);return S.setCrossOrigin(this.crossOrigin),S.setPath(this.path),S.load(n,function(I){w.image=I;const k=n.search(/\.jpe?g($|\?)/i)>0||n.search(/^data\:image\/jpeg/)===0;w.format=k?Xt:Xn,w.needsUpdate=!0,o!==void 0&&o(w)},h,p),w}}class Qs extends Es{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(n){this.curves.push(n)}closePath(){const n=this.curves[0].getPoint(0),o=this.curves[this.curves.length-1].getPoint(1);n.equals(o)||this.curves.push(new Ih(o,n))}getPoint(n){const o=n*this.getLength(),h=this.getCurveLengths();let p=0;for(;p<h.length;){if(h[p]>=o){const w=h[p]-o,S=this.curves[p],I=S.getLength(),k=I===0?0:1-w/I;return S.getPointAt(k)}p++}return null}getLength(){const n=this.getCurveLengths();return n[n.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const n=[];let o=0;for(let h=0,p=this.curves.length;h<p;h++)o+=this.curves[h].getLength(),n.push(o);return this.cacheLengths=n,n}getSpacedPoints(n=40){const o=[];for(let h=0;h<=n;h++)o.push(this.getPoint(h/n));return this.autoClose&&o.push(o[0]),o}getPoints(n=12){const o=[];let h;for(let p=0,w=this.curves;p<w.length;p++){const S=w[p],I=S&&S.isEllipseCurve?2*n:S&&(S.isLineCurve||S.isLineCurve3)?1:S&&S.isSplineCurve?n*S.points.length:n,k=S.getPoints(I);for(let R=0;R<k.length;R++){const $=k[R];h&&h.equals($)||(o.push($),h=$)}}return this.autoClose&&o.length>1&&!o[o.length-1].equals(o[0])&&o.push(o[0]),o}copy(n){super.copy(n),this.curves=[];for(let o=0,h=n.curves.length;o<h;o++){const p=n.curves[o];this.curves.push(p.clone())}return this.autoClose=n.autoClose,this}toJSON(){const n=super.toJSON();n.autoClose=this.autoClose,n.curves=[];for(let o=0,h=this.curves.length;o<h;o++){const p=this.curves[o];n.curves.push(p.toJSON())}return n}fromJSON(n){super.fromJSON(n),this.autoClose=n.autoClose,this.curves=[];for(let o=0,h=n.curves.length;o<h;o++){const p=n.curves[o];this.curves.push(new rm[p.type]().fromJSON(p))}return this}}class fu extends Qs{constructor(n){super(),this.type="Path",this.currentPoint=new Qt,n&&this.setFromPoints(n)}setFromPoints(n){this.moveTo(n[0].x,n[0].y);for(let o=1,h=n.length;o<h;o++)this.lineTo(n[o].x,n[o].y);return this}moveTo(n,o){return this.currentPoint.set(n,o),this}lineTo(n,o){const h=new Ih(this.currentPoint.clone(),new Qt(n,o));return this.curves.push(h),this.currentPoint.set(n,o),this}quadraticCurveTo(n,o,h,p){const w=new Ch(this.currentPoint.clone(),new Qt(n,o),new Qt(h,p));return this.curves.push(w),this.currentPoint.set(h,p),this}bezierCurveTo(n,o,h,p,w,S){const I=new tm(this.currentPoint.clone(),new Qt(n,o),new Qt(h,p),new Qt(w,S));return this.curves.push(I),this.currentPoint.set(w,S),this}splineThru(n){const o=[this.currentPoint.clone()].concat(n),h=new nm(o);return this.curves.push(h),this.currentPoint.copy(n[n.length-1]),this}arc(n,o,h,p,w,S){const I=this.currentPoint.x,k=this.currentPoint.y;return this.absarc(n+I,o+k,h,p,w,S),this}absarc(n,o,h,p,w,S){return this.absellipse(n,o,h,h,p,w,S),this}ellipse(n,o,h,p,w,S,I,k){const R=this.currentPoint.x,$=this.currentPoint.y;return this.absellipse(n+R,o+$,h,p,w,S,I,k),this}absellipse(n,o,h,p,w,S,I,k){const R=new Ah(n,o,h,p,w,S,I,k);if(this.curves.length>0){const j=R.getPoint(0);j.equals(this.currentPoint)||this.lineTo(j.x,j.y)}this.curves.push(R);const $=R.getPoint(1);return this.currentPoint.copy($),this}copy(n){return super.copy(n),this.currentPoint.copy(n.currentPoint),this}toJSON(){const n=super.toJSON();return n.currentPoint=this.currentPoint.toArray(),n}fromJSON(n){return super.fromJSON(n),this.currentPoint.fromArray(n.currentPoint),this}}class sl extends fu{constructor(n){super(n),this.uuid=Vs(),this.type="Shape",this.holes=[]}getPointsHoles(n){const o=[];for(let h=0,p=this.holes.length;h<p;h++)o[h]=this.holes[h].getPoints(n);return o}extractPoints(n){return{shape:this.getPoints(n),holes:this.getPointsHoles(n)}}copy(n){super.copy(n),this.holes=[];for(let o=0,h=n.holes.length;o<h;o++){const p=n.holes[o];this.holes.push(p.clone())}return this}toJSON(){const n=super.toJSON();n.uuid=this.uuid,n.holes=[];for(let o=0,h=this.holes.length;o<h;o++){const p=this.holes[o];n.holes.push(p.toJSON())}return n}fromJSON(n){super.fromJSON(n),this.uuid=n.uuid,this.holes=[];for(let o=0,h=n.holes.length;o<h;o++){const p=n.holes[o];this.holes.push(new fu().fromJSON(p))}return this}}class ls extends Cr{constructor(n,o=1){super(),this.type="Light",this.color=new yn(n),this.intensity=o}dispose(){}copy(n){return super.copy(n),this.color.copy(n.color),this.intensity=n.intensity,this}toJSON(n){const o=super.toJSON(n);return o.object.color=this.color.getHex(),o.object.intensity=this.intensity,this.groundColor!==void 0&&(o.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(o.object.distance=this.distance),this.angle!==void 0&&(o.object.angle=this.angle),this.decay!==void 0&&(o.object.decay=this.decay),this.penumbra!==void 0&&(o.object.penumbra=this.penumbra),this.shadow!==void 0&&(o.object.shadow=this.shadow.toJSON()),o}}ls.prototype.isLight=!0;class ea extends ls{constructor(n,o,h){super(n,h),this.type="HemisphereLight",this.position.copy(Cr.DefaultUp),this.updateMatrix(),this.groundColor=new yn(o)}copy(n){return ls.prototype.copy.call(this,n),this.groundColor.copy(n.groundColor),this}}ea.prototype.isHemisphereLight=!0;const Dh=new Gn,zg=new Te,Bg=new Te;class us{constructor(n){this.camera=n,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Qt(512,512),this.map=null,this.mapPass=null,this.matrix=new Gn,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new $f,this._frameExtents=new Qt(1,1),this._viewportCount=1,this._viewports=[new Xr(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(n){const o=this.camera,h=this.matrix;zg.setFromMatrixPosition(n.matrixWorld),o.position.copy(zg),Bg.setFromMatrixPosition(n.target.matrixWorld),o.lookAt(Bg),o.updateMatrixWorld(),Dh.multiplyMatrices(o.projectionMatrix,o.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Dh),h.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),h.multiply(o.projectionMatrix),h.multiply(o.matrixWorldInverse)}getViewport(n){return this._viewports[n]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(n){return this.camera=n.camera.clone(),this.bias=n.bias,this.radius=n.radius,this.mapSize.copy(n.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const n={};return this.bias!==0&&(n.bias=this.bias),this.normalBias!==0&&(n.normalBias=this.normalBias),this.radius!==1&&(n.radius=this.radius),this.mapSize.x===512&&this.mapSize.y===512||(n.mapSize=this.mapSize.toArray()),n.camera=this.camera.toJSON(!1).object,delete n.camera.matrix,n}}class gc extends us{constructor(){super(new ss(50,1,.5,500)),this.focus=1}updateMatrices(n){const o=this.camera,h=2*vl*n.angle*this.focus,p=this.mapSize.width/this.mapSize.height,w=n.distance||o.far;h===o.fov&&p===o.aspect&&w===o.far||(o.fov=h,o.aspect=p,o.far=w,o.updateProjectionMatrix()),super.updateMatrices(n)}copy(n){return super.copy(n),this.focus=n.focus,this}}gc.prototype.isSpotLightShadow=!0;class nx extends ls{constructor(n,o,h=0,p=Math.PI/3,w=0,S=1){super(n,o),this.type="SpotLight",this.position.copy(Cr.DefaultUp),this.updateMatrix(),this.target=new Cr,this.distance=h,this.angle=p,this.penumbra=w,this.decay=S,this.shadow=new gc}get power(){return this.intensity*Math.PI}set power(n){this.intensity=n/Math.PI}dispose(){this.shadow.dispose()}copy(n){return super.copy(n),this.distance=n.distance,this.angle=n.angle,this.penumbra=n.penumbra,this.decay=n.decay,this.target=n.target.clone(),this.shadow=n.shadow.clone(),this}}nx.prototype.isSpotLight=!0;const Ab=new Gn,dm=new Te,pm=new Te;class fm extends us{constructor(){super(new ss(90,1,.5,500)),this._frameExtents=new Qt(4,2),this._viewportCount=6,this._viewports=[new Xr(2,1,1,1),new Xr(0,1,1,1),new Xr(3,1,1,1),new Xr(1,1,1,1),new Xr(3,0,1,1),new Xr(1,0,1,1)],this._cubeDirections=[new Te(1,0,0),new Te(-1,0,0),new Te(0,0,1),new Te(0,0,-1),new Te(0,1,0),new Te(0,-1,0)],this._cubeUps=[new Te(0,1,0),new Te(0,1,0),new Te(0,1,0),new Te(0,1,0),new Te(0,0,1),new Te(0,0,-1)]}updateMatrices(n,o=0){const h=this.camera,p=this.matrix,w=n.distance||h.far;w!==h.far&&(h.far=w,h.updateProjectionMatrix()),dm.setFromMatrixPosition(n.matrixWorld),h.position.copy(dm),pm.copy(h.position),pm.add(this._cubeDirections[o]),h.up.copy(this._cubeUps[o]),h.lookAt(pm),h.updateMatrixWorld(),p.makeTranslation(-dm.x,-dm.y,-dm.z),Ab.multiplyMatrices(h.projectionMatrix,h.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ab)}}fm.prototype.isPointLightShadow=!0;class bp extends ls{constructor(n,o,h=0,p=1){super(n,o),this.type="PointLight",this.distance=h,this.decay=p,this.shadow=new fm}get power(){return 4*this.intensity*Math.PI}set power(n){this.intensity=n/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(n){return super.copy(n),this.distance=n.distance,this.decay=n.decay,this.shadow=n.shadow.clone(),this}}bp.prototype.isPointLight=!0;class $g extends us{constructor(){super(new Uf(-5,5,5,-5,.5,500))}}$g.prototype.isDirectionalLightShadow=!0;class Pa extends ls{constructor(n,o){super(n,o),this.type="DirectionalLight",this.position.copy(Cr.DefaultUp),this.updateMatrix(),this.target=new Cr,this.shadow=new $g}dispose(){this.shadow.dispose()}copy(n){return super.copy(n),this.target=n.target.clone(),this.shadow=n.shadow.clone(),this}}Pa.prototype.isDirectionalLight=!0;class Ug extends ls{constructor(n,o){super(n,o),this.type="AmbientLight"}}Ug.prototype.isAmbientLight=!0;class wp extends ls{constructor(n,o,h=10,p=10){super(n,o),this.type="RectAreaLight",this.width=h,this.height=p}get power(){return this.intensity*this.width*this.height*Math.PI}set power(n){this.intensity=n/(this.width*this.height*Math.PI)}copy(n){return super.copy(n),this.width=n.width,this.height=n.height,this}toJSON(n){const o=super.toJSON(n);return o.object.width=this.width,o.object.height=this.height,o}}wp.prototype.isRectAreaLight=!0;class mm{constructor(){this.coefficients=[];for(let n=0;n<9;n++)this.coefficients.push(new Te)}set(n){for(let o=0;o<9;o++)this.coefficients[o].copy(n[o]);return this}zero(){for(let n=0;n<9;n++)this.coefficients[n].set(0,0,0);return this}getAt(n,o){const h=n.x,p=n.y,w=n.z,S=this.coefficients;return o.copy(S[0]).multiplyScalar(.282095),o.addScaledVector(S[1],.488603*p),o.addScaledVector(S[2],.488603*w),o.addScaledVector(S[3],.488603*h),o.addScaledVector(S[4],h*p*1.092548),o.addScaledVector(S[5],p*w*1.092548),o.addScaledVector(S[6],.315392*(3*w*w-1)),o.addScaledVector(S[7],h*w*1.092548),o.addScaledVector(S[8],.546274*(h*h-p*p)),o}getIrradianceAt(n,o){const h=n.x,p=n.y,w=n.z,S=this.coefficients;return o.copy(S[0]).multiplyScalar(.886227),o.addScaledVector(S[1],1.023328*p),o.addScaledVector(S[2],1.023328*w),o.addScaledVector(S[3],1.023328*h),o.addScaledVector(S[4],.858086*h*p),o.addScaledVector(S[5],.858086*p*w),o.addScaledVector(S[6],.743125*w*w-.247708),o.addScaledVector(S[7],.858086*h*w),o.addScaledVector(S[8],.429043*(h*h-p*p)),o}add(n){for(let o=0;o<9;o++)this.coefficients[o].add(n.coefficients[o]);return this}addScaledSH(n,o){for(let h=0;h<9;h++)this.coefficients[h].addScaledVector(n.coefficients[h],o);return this}scale(n){for(let o=0;o<9;o++)this.coefficients[o].multiplyScalar(n);return this}lerp(n,o){for(let h=0;h<9;h++)this.coefficients[h].lerp(n.coefficients[h],o);return this}equals(n){for(let o=0;o<9;o++)if(!this.coefficients[o].equals(n.coefficients[o]))return!1;return!0}copy(n){return this.set(n.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(n,o=0){const h=this.coefficients;for(let p=0;p<9;p++)h[p].fromArray(n,o+3*p);return this}toArray(n=[],o=0){const h=this.coefficients;for(let p=0;p<9;p++)h[p].toArray(n,o+3*p);return n}static getBasisAt(n,o){const h=n.x,p=n.y,w=n.z;o[0]=.282095,o[1]=.488603*p,o[2]=.488603*w,o[3]=.488603*h,o[4]=1.092548*h*p,o[5]=1.092548*p*w,o[6]=.315392*(3*w*w-1),o[7]=1.092548*h*w,o[8]=.546274*(h*h-p*p)}}mm.prototype.isSphericalHarmonics3=!0;class gm extends ls{constructor(n=new mm,o=1){super(void 0,o),this.sh=n}copy(n){return super.copy(n),this.sh.copy(n.sh),this}fromJSON(n){return this.intensity=n.intensity,this.sh.fromArray(n.sh),this}toJSON(n){const o=super.toJSON(n);return o.object.sh=this.sh.toArray(),o}}gm.prototype.isLightProbe=!0;class rx extends gs{constructor(n){super(n),this.textures={}}load(n,o,h,p){const w=this,S=new to(w.manager);S.setPath(w.path),S.setRequestHeader(w.requestHeader),S.setWithCredentials(w.withCredentials),S.load(n,function(I){try{o(w.parse(JSON.parse(I)))}catch(k){p?p(k):console.error(k),w.manager.itemError(n)}},h,p)}parse(n){const o=this.textures;function h(w){return o[w]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",w),o[w]}const p=new Tb[n.type];if(n.uuid!==void 0&&(p.uuid=n.uuid),n.name!==void 0&&(p.name=n.name),n.color!==void 0&&p.color!==void 0&&p.color.setHex(n.color),n.roughness!==void 0&&(p.roughness=n.roughness),n.metalness!==void 0&&(p.metalness=n.metalness),n.sheenTint!==void 0&&(p.sheenTint=new yn().setHex(n.sheenTint)),n.emissive!==void 0&&p.emissive!==void 0&&p.emissive.setHex(n.emissive),n.specular!==void 0&&p.specular!==void 0&&p.specular.setHex(n.specular),n.specularIntensity!==void 0&&(p.specularIntensity=n.specularIntensity),n.specularTint!==void 0&&p.specularTint!==void 0&&p.specularTint.setHex(n.specularTint),n.shininess!==void 0&&(p.shininess=n.shininess),n.clearcoat!==void 0&&(p.clearcoat=n.clearcoat),n.clearcoatRoughness!==void 0&&(p.clearcoatRoughness=n.clearcoatRoughness),n.transmission!==void 0&&(p.transmission=n.transmission),n.thickness!==void 0&&(p.thickness=n.thickness),n.attenuationDistance!==void 0&&(p.attenuationDistance=n.attenuationDistance),n.attenuationTint!==void 0&&p.attenuationTint!==void 0&&p.attenuationTint.setHex(n.attenuationTint),n.fog!==void 0&&(p.fog=n.fog),n.flatShading!==void 0&&(p.flatShading=n.flatShading),n.blending!==void 0&&(p.blending=n.blending),n.combine!==void 0&&(p.combine=n.combine),n.side!==void 0&&(p.side=n.side),n.shadowSide!==void 0&&(p.shadowSide=n.shadowSide),n.opacity!==void 0&&(p.opacity=n.opacity),n.format!==void 0&&(p.format=n.format),n.transparent!==void 0&&(p.transparent=n.transparent),n.alphaTest!==void 0&&(p.alphaTest=n.alphaTest),n.depthTest!==void 0&&(p.depthTest=n.depthTest),n.depthWrite!==void 0&&(p.depthWrite=n.depthWrite),n.colorWrite!==void 0&&(p.colorWrite=n.colorWrite),n.stencilWrite!==void 0&&(p.stencilWrite=n.stencilWrite),n.stencilWriteMask!==void 0&&(p.stencilWriteMask=n.stencilWriteMask),n.stencilFunc!==void 0&&(p.stencilFunc=n.stencilFunc),n.stencilRef!==void 0&&(p.stencilRef=n.stencilRef),n.stencilFuncMask!==void 0&&(p.stencilFuncMask=n.stencilFuncMask),n.stencilFail!==void 0&&(p.stencilFail=n.stencilFail),n.stencilZFail!==void 0&&(p.stencilZFail=n.stencilZFail),n.stencilZPass!==void 0&&(p.stencilZPass=n.stencilZPass),n.wireframe!==void 0&&(p.wireframe=n.wireframe),n.wireframeLinewidth!==void 0&&(p.wireframeLinewidth=n.wireframeLinewidth),n.wireframeLinecap!==void 0&&(p.wireframeLinecap=n.wireframeLinecap),n.wireframeLinejoin!==void 0&&(p.wireframeLinejoin=n.wireframeLinejoin),n.rotation!==void 0&&(p.rotation=n.rotation),n.linewidth!==1&&(p.linewidth=n.linewidth),n.dashSize!==void 0&&(p.dashSize=n.dashSize),n.gapSize!==void 0&&(p.gapSize=n.gapSize),n.scale!==void 0&&(p.scale=n.scale),n.polygonOffset!==void 0&&(p.polygonOffset=n.polygonOffset),n.polygonOffsetFactor!==void 0&&(p.polygonOffsetFactor=n.polygonOffsetFactor),n.polygonOffsetUnits!==void 0&&(p.polygonOffsetUnits=n.polygonOffsetUnits),n.dithering!==void 0&&(p.dithering=n.dithering),n.alphaToCoverage!==void 0&&(p.alphaToCoverage=n.alphaToCoverage),n.premultipliedAlpha!==void 0&&(p.premultipliedAlpha=n.premultipliedAlpha),n.visible!==void 0&&(p.visible=n.visible),n.toneMapped!==void 0&&(p.toneMapped=n.toneMapped),n.userData!==void 0&&(p.userData=n.userData),n.vertexColors!==void 0&&(typeof n.vertexColors=="number"?p.vertexColors=n.vertexColors>0:p.vertexColors=n.vertexColors),n.uniforms!==void 0)for(const w in n.uniforms){const S=n.uniforms[w];switch(p.uniforms[w]={},S.type){case"t":p.uniforms[w].value=h(S.value);break;case"c":p.uniforms[w].value=new yn().setHex(S.value);break;case"v2":p.uniforms[w].value=new Qt().fromArray(S.value);break;case"v3":p.uniforms[w].value=new Te().fromArray(S.value);break;case"v4":p.uniforms[w].value=new Xr().fromArray(S.value);break;case"m3":p.uniforms[w].value=new Ni().fromArray(S.value);break;case"m4":p.uniforms[w].value=new Gn().fromArray(S.value);break;default:p.uniforms[w].value=S.value}}if(n.defines!==void 0&&(p.defines=n.defines),n.vertexShader!==void 0&&(p.vertexShader=n.vertexShader),n.fragmentShader!==void 0&&(p.fragmentShader=n.fragmentShader),n.extensions!==void 0)for(const w in n.extensions)p.extensions[w]=n.extensions[w];if(n.shading!==void 0&&(p.flatShading=n.shading===1),n.size!==void 0&&(p.size=n.size),n.sizeAttenuation!==void 0&&(p.sizeAttenuation=n.sizeAttenuation),n.map!==void 0&&(p.map=h(n.map)),n.matcap!==void 0&&(p.matcap=h(n.matcap)),n.alphaMap!==void 0&&(p.alphaMap=h(n.alphaMap)),n.bumpMap!==void 0&&(p.bumpMap=h(n.bumpMap)),n.bumpScale!==void 0&&(p.bumpScale=n.bumpScale),n.normalMap!==void 0&&(p.normalMap=h(n.normalMap)),n.normalMapType!==void 0&&(p.normalMapType=n.normalMapType),n.normalScale!==void 0){let w=n.normalScale;Array.isArray(w)===!1&&(w=[w,w]),p.normalScale=new Qt().fromArray(w)}return n.displacementMap!==void 0&&(p.displacementMap=h(n.displacementMap)),n.displacementScale!==void 0&&(p.displacementScale=n.displacementScale),n.displacementBias!==void 0&&(p.displacementBias=n.displacementBias),n.roughnessMap!==void 0&&(p.roughnessMap=h(n.roughnessMap)),n.metalnessMap!==void 0&&(p.metalnessMap=h(n.metalnessMap)),n.emissiveMap!==void 0&&(p.emissiveMap=h(n.emissiveMap)),n.emissiveIntensity!==void 0&&(p.emissiveIntensity=n.emissiveIntensity),n.specularMap!==void 0&&(p.specularMap=h(n.specularMap)),n.specularIntensityMap!==void 0&&(p.specularIntensityMap=h(n.specularIntensityMap)),n.specularTintMap!==void 0&&(p.specularTintMap=h(n.specularTintMap)),n.envMap!==void 0&&(p.envMap=h(n.envMap)),n.envMapIntensity!==void 0&&(p.envMapIntensity=n.envMapIntensity),n.reflectivity!==void 0&&(p.reflectivity=n.reflectivity),n.refractionRatio!==void 0&&(p.refractionRatio=n.refractionRatio),n.lightMap!==void 0&&(p.lightMap=h(n.lightMap)),n.lightMapIntensity!==void 0&&(p.lightMapIntensity=n.lightMapIntensity),n.aoMap!==void 0&&(p.aoMap=h(n.aoMap)),n.aoMapIntensity!==void 0&&(p.aoMapIntensity=n.aoMapIntensity),n.gradientMap!==void 0&&(p.gradientMap=h(n.gradientMap)),n.clearcoatMap!==void 0&&(p.clearcoatMap=h(n.clearcoatMap)),n.clearcoatRoughnessMap!==void 0&&(p.clearcoatRoughnessMap=h(n.clearcoatRoughnessMap)),n.clearcoatNormalMap!==void 0&&(p.clearcoatNormalMap=h(n.clearcoatNormalMap)),n.clearcoatNormalScale!==void 0&&(p.clearcoatNormalScale=new Qt().fromArray(n.clearcoatNormalScale)),n.transmissionMap!==void 0&&(p.transmissionMap=h(n.transmissionMap)),n.thicknessMap!==void 0&&(p.thicknessMap=h(n.thicknessMap)),p}setTextures(n){return this.textures=n,this}}class Ph{static decodeText(n){if(typeof TextDecoder!="undefined")return new TextDecoder().decode(n);let o="";for(let h=0,p=n.length;h<p;h++)o+=String.fromCharCode(n[h]);try{return decodeURIComponent(escape(o))}catch{return o}}static extractUrlBase(n){const o=n.lastIndexOf("/");return o===-1?"./":n.substr(0,o+1)}}class ix extends On{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(n){return super.copy(n),this.instanceCount=n.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const n=super.toJSON(this);return n.instanceCount=this.instanceCount,n.isInstancedBufferGeometry=!0,n}}ix.prototype.isInstancedBufferGeometry=!0;class sx extends gs{constructor(n){super(n)}load(n,o,h,p){const w=this,S=new to(w.manager);S.setPath(w.path),S.setRequestHeader(w.requestHeader),S.setWithCredentials(w.withCredentials),S.load(n,function(I){try{o(w.parse(JSON.parse(I)))}catch(k){p?p(k):console.error(k),w.manager.itemError(n)}},h,p)}parse(n){const o={},h={};function p(j,H){if(o[H]!==void 0)return o[H];const Y=j.interleavedBuffers[H],ee=function(ne,me){if(h[me]!==void 0)return h[me];const _e=ne.arrayBuffers[me],ve=new Uint32Array(_e).buffer;return h[me]=ve,ve}(j,Y.buffer),te=Tt(Y.type,ee),ae=new Tl(te,Y.stride);return ae.uuid=Y.uuid,o[H]=ae,ae}const w=n.isInstancedBufferGeometry?new ix:new On,S=n.data.index;if(S!==void 0){const j=Tt(S.type,S.array);w.setIndex(new Mr(j,1))}const I=n.data.attributes;for(const j in I){const H=I[j];let Y;if(H.isInterleavedBufferAttribute){const ee=p(n.data,H.data);Y=new Qo(ee,H.itemSize,H.offset,H.normalized)}else{const ee=Tt(H.type,H.array);Y=new(H.isInstancedBufferAttribute?Rs:Mr)(ee,H.itemSize,H.normalized)}H.name!==void 0&&(Y.name=H.name),H.usage!==void 0&&Y.setUsage(H.usage),H.updateRange!==void 0&&(Y.updateRange.offset=H.updateRange.offset,Y.updateRange.count=H.updateRange.count),w.setAttribute(j,Y)}const k=n.data.morphAttributes;if(k)for(const j in k){const H=k[j],Y=[];for(let ee=0,te=H.length;ee<te;ee++){const ae=H[ee];let ne;if(ae.isInterleavedBufferAttribute){const me=p(n.data,ae.data);ne=new Qo(me,ae.itemSize,ae.offset,ae.normalized)}else{const me=Tt(ae.type,ae.array);ne=new Mr(me,ae.itemSize,ae.normalized)}ae.name!==void 0&&(ne.name=ae.name),Y.push(ne)}w.morphAttributes[j]=Y}n.data.morphTargetsRelative&&(w.morphTargetsRelative=!0);const R=n.data.groups||n.data.drawcalls||n.data.offsets;if(R!==void 0)for(let j=0,H=R.length;j!==H;++j){const Y=R[j];w.addGroup(Y.start,Y.count,Y.materialIndex)}const $=n.data.boundingSphere;if($!==void 0){const j=new Te;$.center!==void 0&&j.fromArray($.center),w.boundingSphere=new $o(j,$.radius)}return n.name&&(w.name=n.name),n.userData&&(w.userData=n.userData),w}}class ax extends gs{constructor(n){super(n)}load(n,o,h,p){const w=this,S=this.path===""?Ph.extractUrlBase(n):this.path;this.resourcePath=this.resourcePath||S;const I=new to(this.manager);I.setPath(this.path),I.setRequestHeader(this.requestHeader),I.setWithCredentials(this.withCredentials),I.load(n,function(k){let R=null;try{R=JSON.parse(k)}catch(j){return p!==void 0&&p(j),void console.error("THREE:ObjectLoader: Can't parse "+n+".",j.message)}const $=R.metadata;$!==void 0&&$.type!==void 0&&$.type.toLowerCase()!=="geometry"?w.parse(R,o):console.error("THREE.ObjectLoader: Can't load "+n)},h,p)}async loadAsync(n,o){const h=this.path===""?Ph.extractUrlBase(n):this.path;this.resourcePath=this.resourcePath||h;const p=new to(this.manager);p.setPath(this.path),p.setRequestHeader(this.requestHeader),p.setWithCredentials(this.withCredentials);const w=await p.loadAsync(n,o),S=JSON.parse(w),I=S.metadata;if(I===void 0||I.type===void 0||I.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+n);return await this.parseAsync(S)}parse(n,o){const h=this.parseAnimations(n.animations),p=this.parseShapes(n.shapes),w=this.parseGeometries(n.geometries,p),S=this.parseImages(n.images,function(){o!==void 0&&o(R)}),I=this.parseTextures(n.textures,S),k=this.parseMaterials(n.materials,I),R=this.parseObject(n.object,w,k,I,h),$=this.parseSkeletons(n.skeletons,R);if(this.bindSkeletons(R,$),o!==void 0){let j=!1;for(const H in S)if(S[H]instanceof HTMLImageElement){j=!0;break}j===!1&&o(R)}return R}async parseAsync(n){const o=this.parseAnimations(n.animations),h=this.parseShapes(n.shapes),p=this.parseGeometries(n.geometries,h),w=await this.parseImagesAsync(n.images),S=this.parseTextures(n.textures,w),I=this.parseMaterials(n.materials,S),k=this.parseObject(n.object,p,I,S,o),R=this.parseSkeletons(n.skeletons,k);return this.bindSkeletons(k,R),k}parseShapes(n){const o={};if(n!==void 0)for(let h=0,p=n.length;h<p;h++){const w=new sl().fromJSON(n[h]);o[w.uuid]=w}return o}parseSkeletons(n,o){const h={},p={};if(o.traverse(function(w){w.isBone&&(p[w.uuid]=w)}),n!==void 0)for(let w=0,S=n.length;w<S;w++){const I=new bi().fromJSON(n[w],p);h[I.uuid]=I}return h}parseGeometries(n,o){const h={};if(n!==void 0){const p=new sx;for(let w=0,S=n.length;w<S;w++){let I;const k=n[w];switch(k.type){case"BufferGeometry":case"InstancedBufferGeometry":I=p.parse(k);break;case"Geometry":console.error("THREE.ObjectLoader: The legacy Geometry type is no longer supported.");break;default:k.type in mp?I=mp[k.type].fromJSON(k,o):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${k.type}"`)}I.uuid=k.uuid,k.name!==void 0&&(I.name=k.name),I.isBufferGeometry===!0&&k.userData!==void 0&&(I.userData=k.userData),h[k.uuid]=I}}return h}parseMaterials(n,o){const h={},p={};if(n!==void 0){const w=new rx;w.setTextures(o);for(let S=0,I=n.length;S<I;S++){const k=n[S];if(k.type==="MultiMaterial"){const R=[];for(let $=0;$<k.materials.length;$++){const j=k.materials[$];h[j.uuid]===void 0&&(h[j.uuid]=w.parse(j)),R.push(h[j.uuid])}p[k.uuid]=R}else h[k.uuid]===void 0&&(h[k.uuid]=w.parse(k)),p[k.uuid]=h[k.uuid]}}return p}parseAnimations(n){const o={};if(n!==void 0)for(let h=0;h<n.length;h++){const p=n[h],w=fc.parse(p);o[w.uuid]=w}return o}parseImages(n,o){const h=this,p={};let w;function S(I){if(typeof I=="string"){const k=I;return function(R){return h.manager.itemStart(R),w.load(R,function(){h.manager.itemEnd(R)},void 0,function(){h.manager.itemError(R),h.manager.itemEnd(R)})}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(k)?k:h.resourcePath+k)}return I.data?{data:Tt(I.type,I.data),width:I.width,height:I.height}:null}if(n!==void 0&&n.length>0){const I=new lm(o);w=new pu(I),w.setCrossOrigin(this.crossOrigin);for(let k=0,R=n.length;k<R;k++){const $=n[k],j=$.url;if(Array.isArray(j)){p[$.uuid]=[];for(let H=0,Y=j.length;H<Y;H++){const ee=S(j[H]);ee!==null&&(ee instanceof HTMLImageElement?p[$.uuid].push(ee):p[$.uuid].push(new Xe(ee.data,ee.width,ee.height)))}}else{const H=S($.url);H!==null&&(p[$.uuid]=H)}}}return p}async parseImagesAsync(n){const o=this,h={};let p;async function w(S){if(typeof S=="string"){const I=S,k=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(I)?I:o.resourcePath+I;return await p.loadAsync(k)}return S.data?{data:Tt(S.type,S.data),width:S.width,height:S.height}:null}if(n!==void 0&&n.length>0){p=new pu(this.manager),p.setCrossOrigin(this.crossOrigin);for(let S=0,I=n.length;S<I;S++){const k=n[S],R=k.url;if(Array.isArray(R)){h[k.uuid]=[];for(let $=0,j=R.length;$<j;$++){const H=R[$],Y=await w(H);Y!==null&&(Y instanceof HTMLImageElement?h[k.uuid].push(Y):h[k.uuid].push(new Xe(Y.data,Y.width,Y.height)))}}else{const $=await w(k.url);$!==null&&(h[k.uuid]=$)}}}return h}parseTextures(n,o){function h(w,S){return typeof w=="number"?w:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",w),S[w])}const p={};if(n!==void 0)for(let w=0,S=n.length;w<S;w++){const I=n[w];let k;I.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',I.uuid),o[I.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",I.image);const R=o[I.image];Array.isArray(R)?(k=new Xd(R),R.length===6&&(k.needsUpdate=!0)):(k=R&&R.data?new Xe(R.data,R.width,R.height):new Ri(R),R&&(k.needsUpdate=!0)),k.uuid=I.uuid,I.name!==void 0&&(k.name=I.name),I.mapping!==void 0&&(k.mapping=h(I.mapping,Ib)),I.offset!==void 0&&k.offset.fromArray(I.offset),I.repeat!==void 0&&k.repeat.fromArray(I.repeat),I.center!==void 0&&k.center.fromArray(I.center),I.rotation!==void 0&&(k.rotation=I.rotation),I.wrap!==void 0&&(k.wrapS=h(I.wrap[0],ox),k.wrapT=h(I.wrap[1],ox)),I.format!==void 0&&(k.format=I.format),I.type!==void 0&&(k.type=I.type),I.encoding!==void 0&&(k.encoding=I.encoding),I.minFilter!==void 0&&(k.minFilter=h(I.minFilter,lx)),I.magFilter!==void 0&&(k.magFilter=h(I.magFilter,lx)),I.anisotropy!==void 0&&(k.anisotropy=I.anisotropy),I.flipY!==void 0&&(k.flipY=I.flipY),I.premultiplyAlpha!==void 0&&(k.premultiplyAlpha=I.premultiplyAlpha),I.unpackAlignment!==void 0&&(k.unpackAlignment=I.unpackAlignment),p[I.uuid]=k}return p}parseObject(n,o,h,p,w){let S,I,k;function R(H){return o[H]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",H),o[H]}function $(H){if(H!==void 0){if(Array.isArray(H)){const Y=[];for(let ee=0,te=H.length;ee<te;ee++){const ae=H[ee];h[ae]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",ae),Y.push(h[ae])}return Y}return h[H]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",H),h[H]}}function j(H){return p[H]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",H),p[H]}switch(n.type){case"Scene":S=new Qa,n.background!==void 0&&(Number.isInteger(n.background)?S.background=new yn(n.background):S.background=j(n.background)),n.environment!==void 0&&(S.environment=j(n.environment)),n.fog!==void 0&&(n.fog.type==="Fog"?S.fog=new mr(n.fog.color,n.fog.near,n.fog.far):n.fog.type==="FogExp2"&&(S.fog=new Ei(n.fog.color,n.fog.density)));break;case"PerspectiveCamera":S=new ss(n.fov,n.aspect,n.near,n.far),n.focus!==void 0&&(S.focus=n.focus),n.zoom!==void 0&&(S.zoom=n.zoom),n.filmGauge!==void 0&&(S.filmGauge=n.filmGauge),n.filmOffset!==void 0&&(S.filmOffset=n.filmOffset),n.view!==void 0&&(S.view=Object.assign({},n.view));break;case"OrthographicCamera":S=new Uf(n.left,n.right,n.top,n.bottom,n.near,n.far),n.zoom!==void 0&&(S.zoom=n.zoom),n.view!==void 0&&(S.view=Object.assign({},n.view));break;case"AmbientLight":S=new Ug(n.color,n.intensity);break;case"DirectionalLight":S=new Pa(n.color,n.intensity);break;case"PointLight":S=new bp(n.color,n.intensity,n.distance,n.decay);break;case"RectAreaLight":S=new wp(n.color,n.intensity,n.width,n.height);break;case"SpotLight":S=new nx(n.color,n.intensity,n.distance,n.angle,n.penumbra,n.decay);break;case"HemisphereLight":S=new ea(n.color,n.groundColor,n.intensity);break;case"LightProbe":S=new gm().fromJSON(n);break;case"SkinnedMesh":I=R(n.geometry),k=$(n.material),S=new es(I,k),n.bindMode!==void 0&&(S.bindMode=n.bindMode),n.bindMatrix!==void 0&&S.bindMatrix.fromArray(n.bindMatrix),n.skeleton!==void 0&&(S.skeleton=n.skeleton);break;case"Mesh":I=R(n.geometry),k=$(n.material),S=new Ji(I,k);break;case"InstancedMesh":I=R(n.geometry),k=$(n.material);const H=n.count,Y=n.instanceMatrix,ee=n.instanceColor;S=new nc(I,k,H),S.instanceMatrix=new Rs(new Float32Array(Y.array),16),ee!==void 0&&(S.instanceColor=new Rs(new Float32Array(ee.array),ee.itemSize));break;case"LOD":S=new Mg;break;case"Line":S=new tl(R(n.geometry),$(n.material));break;case"LineLoop":S=new Cg(R(n.geometry),$(n.material));break;case"LineSegments":S=new ga(R(n.geometry),$(n.material));break;case"PointCloud":case"Points":S=new Mh(R(n.geometry),$(n.material));break;case"Sprite":S=new ma($(n.material));break;case"Group":S=new vo;break;case"Bone":S=new wo;break;default:S=new Cr}if(S.uuid=n.uuid,n.name!==void 0&&(S.name=n.name),n.matrix!==void 0?(S.matrix.fromArray(n.matrix),n.matrixAutoUpdate!==void 0&&(S.matrixAutoUpdate=n.matrixAutoUpdate),S.matrixAutoUpdate&&S.matrix.decompose(S.position,S.quaternion,S.scale)):(n.position!==void 0&&S.position.fromArray(n.position),n.rotation!==void 0&&S.rotation.fromArray(n.rotation),n.quaternion!==void 0&&S.quaternion.fromArray(n.quaternion),n.scale!==void 0&&S.scale.fromArray(n.scale)),n.castShadow!==void 0&&(S.castShadow=n.castShadow),n.receiveShadow!==void 0&&(S.receiveShadow=n.receiveShadow),n.shadow&&(n.shadow.bias!==void 0&&(S.shadow.bias=n.shadow.bias),n.shadow.normalBias!==void 0&&(S.shadow.normalBias=n.shadow.normalBias),n.shadow.radius!==void 0&&(S.shadow.radius=n.shadow.radius),n.shadow.mapSize!==void 0&&S.shadow.mapSize.fromArray(n.shadow.mapSize),n.shadow.camera!==void 0&&(S.shadow.camera=this.parseObject(n.shadow.camera))),n.visible!==void 0&&(S.visible=n.visible),n.frustumCulled!==void 0&&(S.frustumCulled=n.frustumCulled),n.renderOrder!==void 0&&(S.renderOrder=n.renderOrder),n.userData!==void 0&&(S.userData=n.userData),n.layers!==void 0&&(S.layers.mask=n.layers),n.children!==void 0){const H=n.children;for(let Y=0;Y<H.length;Y++)S.add(this.parseObject(H[Y],o,h,p,w))}if(n.animations!==void 0){const H=n.animations;for(let Y=0;Y<H.length;Y++){const ee=H[Y];S.animations.push(w[ee])}}if(n.type==="LOD"){n.autoUpdate!==void 0&&(S.autoUpdate=n.autoUpdate);const H=n.levels;for(let Y=0;Y<H.length;Y++){const ee=H[Y],te=S.getObjectByProperty("uuid",ee.object);te!==void 0&&S.addLevel(te,ee.distance)}}return S}bindSkeletons(n,o){Object.keys(o).length!==0&&n.traverse(function(h){if(h.isSkinnedMesh===!0&&h.skeleton!==void 0){const p=o[h.skeleton];p===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",h.skeleton):h.bind(p,h.bindMatrix)}})}setTexturePath(n){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(n)}}const Ib={UVMapping:Je,CubeReflectionMapping:at,CubeRefractionMapping:he,EquirectangularReflectionMapping:It,EquirectangularRefractionMapping:Le,CubeUVReflectionMapping:_t,CubeUVRefractionMapping:Wt},ox={RepeatWrapping:on,ClampToEdgeWrapping:qn,MirroredRepeatWrapping:Ir},lx={NearestFilter:Sr,NearestMipmapNearestFilter:Kr,NearestMipmapLinearFilter:Ui,LinearFilter:Or,LinearMipmapNearestFilter:Rc,LinearMipmapLinearFilter:Ns};class Vg extends gs{constructor(n){super(n),typeof createImageBitmap=="undefined"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch=="undefined"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(n){return this.options=n,this}load(n,o,h,p){n===void 0&&(n=""),this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const w=this,S=mc.get(n);if(S!==void 0)return w.manager.itemStart(n),setTimeout(function(){o&&o(S),w.manager.itemEnd(n)},0),S;const I={};I.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",I.headers=this.requestHeader,fetch(n,I).then(function(k){return k.blob()}).then(function(k){return createImageBitmap(k,Object.assign(w.options,{colorSpaceConversion:"none"}))}).then(function(k){mc.add(n,k),o&&o(k),w.manager.itemEnd(n)}).catch(function(k){p&&p(k),w.manager.itemError(n),w.manager.itemEnd(n)}),w.manager.itemStart(n)}}Vg.prototype.isImageBitmapLoader=!0;class Cb{constructor(){this.type="ShapePath",this.color=new yn,this.subPaths=[],this.currentPath=null}moveTo(n,o){return this.currentPath=new fu,this.subPaths.push(this.currentPath),this.currentPath.moveTo(n,o),this}lineTo(n,o){return this.currentPath.lineTo(n,o),this}quadraticCurveTo(n,o,h,p){return this.currentPath.quadraticCurveTo(n,o,h,p),this}bezierCurveTo(n,o,h,p,w,S){return this.currentPath.bezierCurveTo(n,o,h,p,w,S),this}splineThru(n){return this.currentPath.splineThru(n),this}toShapes(n,o){function h(me){const _e=[];for(let ve=0,Ne=me.length;ve<Ne;ve++){const Oe=me[ve],tt=new sl;tt.curves=Oe.curves,_e.push(tt)}return _e}function p(me,_e){const ve=_e.length;let Ne=!1;for(let Oe=ve-1,tt=0;tt<ve;Oe=tt++){let it=_e[Oe],gt=_e[tt],ut=gt.x-it.x,ct=gt.y-it.y;if(Math.abs(ct)>Number.EPSILON){if(ct<0&&(it=_e[tt],ut=-ut,gt=_e[Oe],ct=-ct),me.y<it.y||me.y>gt.y)continue;if(me.y===it.y){if(me.x===it.x)return!0}else{const an=ct*(me.x-it.x)-ut*(me.y-it.y);if(an===0)return!0;if(an<0)continue;Ne=!Ne}}else{if(me.y!==it.y)continue;if(gt.x<=me.x&&me.x<=it.x||it.x<=me.x&&me.x<=gt.x)return!0}}return Ne}const w=Wr.isClockWise,S=this.subPaths;if(S.length===0)return[];if(o===!0)return h(S);let I,k,R;const $=[];if(S.length===1)return k=S[0],R=new sl,R.curves=k.curves,$.push(R),$;let j=!w(S[0].getPoints());j=n?!j:j;const H=[],Y=[];let ee,te,ae=[],ne=0;Y[ne]=void 0,ae[ne]=[];for(let me=0,_e=S.length;me<_e;me++)k=S[me],ee=k.getPoints(),I=w(ee),I=n?!I:I,I?(!j&&Y[ne]&&ne++,Y[ne]={s:new sl,p:ee},Y[ne].s.curves=k.curves,j&&ne++,ae[ne]=[]):ae[ne].push({h:k,p:ee[0]});if(!Y[0])return h(S);if(Y.length>1){let me=!1;const _e=[];for(let ve=0,Ne=Y.length;ve<Ne;ve++)H[ve]=[];for(let ve=0,Ne=Y.length;ve<Ne;ve++){const Oe=ae[ve];for(let tt=0;tt<Oe.length;tt++){const it=Oe[tt];let gt=!0;for(let ut=0;ut<Y.length;ut++)p(it.p,Y[ut].p)&&(ve!==ut&&_e.push({froms:ve,tos:ut,hole:tt}),gt?(gt=!1,H[ut].push(it)):me=!0);gt&&H[ve].push(it)}}_e.length>0&&(me||(ae=H))}for(let me=0,_e=Y.length;me<_e;me++){R=Y[me].s,$.push(R),te=ae[me];for(let ve=0,Ne=te.length;ve<Ne;ve++)R.holes.push(te[ve].h)}return $}}class ym{constructor(n){this.type="Font",this.data=n}generateShapes(n,o=100){const h=[],p=function(w,S,I){const k=Array.from(w),R=S/I.resolution,$=(I.boundingBox.yMax-I.boundingBox.yMin+I.underlineThickness)*R,j=[];let H=0,Y=0;for(let ee=0;ee<k.length;ee++){const te=k[ee];if(te===`
`)H=0,Y-=$;else{const ae=Wg(te,R,H,Y,I);H+=ae.offsetX,j.push(ae.path)}}return j}(n,o,this.data);for(let w=0,S=p.length;w<S;w++)Array.prototype.push.apply(h,p[w].toShapes());return h}}function Wg(T,n,o,h,p){const w=p.glyphs[T]||p.glyphs["?"];if(!w)return void console.error('THREE.Font: character "'+T+'" does not exists in font family '+p.familyName+".");const S=new Cb;let I,k,R,$,j,H,Y,ee;if(w.o){const te=w._cachedOutline||(w._cachedOutline=w.o.split(" "));for(let ae=0,ne=te.length;ae<ne;)switch(te[ae++]){case"m":I=te[ae++]*n+o,k=te[ae++]*n+h,S.moveTo(I,k);break;case"l":I=te[ae++]*n+o,k=te[ae++]*n+h,S.lineTo(I,k);break;case"q":R=te[ae++]*n+o,$=te[ae++]*n+h,j=te[ae++]*n+o,H=te[ae++]*n+h,S.quadraticCurveTo(j,H,R,$);break;case"b":R=te[ae++]*n+o,$=te[ae++]*n+h,j=te[ae++]*n+o,H=te[ae++]*n+h,Y=te[ae++]*n+o,ee=te[ae++]*n+h,S.bezierCurveTo(j,H,Y,ee,R,$)}}return{offsetX:w.ha*n,path:S}}ym.prototype.isFont=!0;class Gg extends gs{constructor(n){super(n)}load(n,o,h,p){const w=this,S=new to(this.manager);S.setPath(this.path),S.setRequestHeader(this.requestHeader),S.setWithCredentials(w.withCredentials),S.load(n,function(I){let k;try{k=JSON.parse(I)}catch{console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),k=JSON.parse(I.substring(65,I.length-2))}const R=w.parse(k);o&&o(R)},h,p)}parse(n){return new ym(n)}}let Fh;const _p={getContext:function(){return Fh===void 0&&(Fh=new(window.AudioContext||window.webkitAudioContext)),Fh},setContext:function(T){Fh=T}};class Hg extends gs{constructor(n){super(n)}load(n,o,h,p){const w=this,S=new to(this.manager);S.setResponseType("arraybuffer"),S.setPath(this.path),S.setRequestHeader(this.requestHeader),S.setWithCredentials(this.withCredentials),S.load(n,function(I){try{const k=I.slice(0);_p.getContext().decodeAudioData(k,function(R){o(R)})}catch(k){p?p(k):console.error(k),w.manager.itemError(n)}},h,p)}}class ux extends gm{constructor(n,o,h=1){super(void 0,h);const p=new yn().set(n),w=new yn().set(o),S=new Te(p.r,p.g,p.b),I=new Te(w.r,w.g,w.b),k=Math.sqrt(Math.PI),R=k*Math.sqrt(.75);this.sh.coefficients[0].copy(S).add(I).multiplyScalar(k),this.sh.coefficients[1].copy(S).sub(I).multiplyScalar(R)}}ux.prototype.isHemisphereLightProbe=!0;class cx extends gm{constructor(n,o=1){super(void 0,o);const h=new yn().set(n);this.sh.coefficients[0].set(h.r,h.g,h.b).multiplyScalar(2*Math.sqrt(Math.PI))}}cx.prototype.isAmbientLightProbe=!0;const hx=new Gn,xm=new Gn;class T_{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new ss,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new ss,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(n){const o=this._cache;if(o.focus!==n.focus||o.fov!==n.fov||o.aspect!==n.aspect*this.aspect||o.near!==n.near||o.far!==n.far||o.zoom!==n.zoom||o.eyeSep!==this.eyeSep){o.focus=n.focus,o.fov=n.fov,o.aspect=n.aspect*this.aspect,o.near=n.near,o.far=n.far,o.zoom=n.zoom,o.eyeSep=this.eyeSep;const h=n.projectionMatrix.clone(),p=o.eyeSep/2,w=p*o.near/o.focus,S=o.near*Math.tan(zo*o.fov*.5)/o.zoom;let I,k;xm.elements[12]=-p,hx.elements[12]=p,I=-S*o.aspect+w,k=S*o.aspect+w,h.elements[0]=2*o.near/(k-I),h.elements[8]=(k+I)/(k-I),this.cameraL.projectionMatrix.copy(h),I=-S*o.aspect-w,k=S*o.aspect-w,h.elements[0]=2*o.near/(k-I),h.elements[8]=(k+I)/(k-I),this.cameraR.projectionMatrix.copy(h)}this.cameraL.matrixWorld.copy(n.matrixWorld).multiply(xm),this.cameraR.matrixWorld.copy(n.matrixWorld).multiply(hx)}}class dx{constructor(n=!0){this.autoStart=n,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=px(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let n=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const o=px();n=(o-this.oldTime)/1e3,this.oldTime=o,this.elapsedTime+=n}return n}}function px(){return(typeof performance=="undefined"?Date:performance).now()}const Oh=new Te,kb=new Zi,E_=new Te,zh=new Te;class A_ extends Cr{constructor(){super(),this.type="AudioListener",this.context=_p.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new dx}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(n){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=n,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(n){return this.gain.gain.setTargetAtTime(n,this.context.currentTime,.01),this}updateMatrixWorld(n){super.updateMatrixWorld(n);const o=this.context.listener,h=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(Oh,kb,E_),zh.set(0,0,-1).applyQuaternion(kb),o.positionX){const p=this.context.currentTime+this.timeDelta;o.positionX.linearRampToValueAtTime(Oh.x,p),o.positionY.linearRampToValueAtTime(Oh.y,p),o.positionZ.linearRampToValueAtTime(Oh.z,p),o.forwardX.linearRampToValueAtTime(zh.x,p),o.forwardY.linearRampToValueAtTime(zh.y,p),o.forwardZ.linearRampToValueAtTime(zh.z,p),o.upX.linearRampToValueAtTime(h.x,p),o.upY.linearRampToValueAtTime(h.y,p),o.upZ.linearRampToValueAtTime(h.z,p)}else o.setPosition(Oh.x,Oh.y,Oh.z),o.setOrientation(zh.x,zh.y,zh.z,h.x,h.y,h.z)}}class yc extends Cr{constructor(n){super(),this.type="Audio",this.listener=n,this.context=n.context,this.gain=this.context.createGain(),this.gain.connect(n.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(n){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=n,this.connect(),this}setMediaElementSource(n){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(n),this.connect(),this}setMediaStreamSource(n){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(n),this.connect(),this}setBuffer(n){return this.buffer=n,this.sourceType="buffer",this.autoplay&&this.play(),this}play(n=0){if(this.isPlaying===!0)return void console.warn("THREE.Audio: Audio is already playing.");if(this.hasPlaybackControl===!1)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+n;const o=this.context.createBufferSource();return o.buffer=this.buffer,o.loop=this.loop,o.loopStart=this.loopStart,o.loopEnd=this.loopEnd,o.onended=this.onEnded.bind(this),o.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=o,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl!==!1)return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(this.hasPlaybackControl!==!1)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let n=1,o=this.filters.length;n<o;n++)this.filters[n-1].connect(this.filters[n]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let n=1,o=this.filters.length;n<o;n++)this.filters[n-1].disconnect(this.filters[n]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(n){return n||(n=[]),this._connected===!0?(this.disconnect(),this.filters=n.slice(),this.connect()):this.filters=n.slice(),this}setDetune(n){if(this.detune=n,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(n){return this.setFilters(n?[n]:[])}setPlaybackRate(n){if(this.hasPlaybackControl!==!1)return this.playbackRate=n,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(n){if(this.hasPlaybackControl!==!1)return this.loop=n,this.isPlaying===!0&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(n){return this.loopStart=n,this}setLoopEnd(n){return this.loopEnd=n,this}getVolume(){return this.gain.gain.value}setVolume(n){return this.gain.gain.setTargetAtTime(n,this.context.currentTime,.01),this}}const Bh=new Te,Nb=new Zi,I_=new Te,Rl=new Te;class jg extends yc{constructor(n){super(n),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(n){return this.panner.refDistance=n,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(n){return this.panner.rolloffFactor=n,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(n){return this.panner.distanceModel=n,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(n){return this.panner.maxDistance=n,this}setDirectionalCone(n,o,h){return this.panner.coneInnerAngle=n,this.panner.coneOuterAngle=o,this.panner.coneOuterGain=h,this}updateMatrixWorld(n){if(super.updateMatrixWorld(n),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(Bh,Nb,I_),Rl.set(0,0,1).applyQuaternion(Nb);const o=this.panner;if(o.positionX){const h=this.context.currentTime+this.listener.timeDelta;o.positionX.linearRampToValueAtTime(Bh.x,h),o.positionY.linearRampToValueAtTime(Bh.y,h),o.positionZ.linearRampToValueAtTime(Bh.z,h),o.orientationX.linearRampToValueAtTime(Rl.x,h),o.orientationY.linearRampToValueAtTime(Rl.y,h),o.orientationZ.linearRampToValueAtTime(Rl.z,h)}else o.setPosition(Bh.x,Bh.y,Bh.z),o.setOrientation(Rl.x,Rl.y,Rl.z)}}class vm{constructor(n,o=2048){this.analyser=n.context.createAnalyser(),this.analyser.fftSize=o,this.data=new Uint8Array(this.analyser.frequencyBinCount),n.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let n=0;const o=this.getFrequencyData();for(let h=0;h<o.length;h++)n+=o[h];return n/o.length}}class qg{constructor(n,o,h){let p,w,S;switch(this.binding=n,this.valueSize=h,o){case"quaternion":p=this._slerp,w=this._slerpAdditive,S=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*h),this._workIndex=5;break;case"string":case"bool":p=this._select,w=this._select,S=this._setAdditiveIdentityOther,this.buffer=new Array(5*h);break;default:p=this._lerp,w=this._lerpAdditive,S=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*h)}this._mixBufferRegion=p,this._mixBufferRegionAdditive=w,this._setIdentity=S,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(n,o){const h=this.buffer,p=this.valueSize,w=n*p+p;let S=this.cumulativeWeight;if(S===0){for(let I=0;I!==p;++I)h[w+I]=h[I];S=o}else{S+=o;const I=o/S;this._mixBufferRegion(h,w,0,I,p)}this.cumulativeWeight=S}accumulateAdditive(n){const o=this.buffer,h=this.valueSize,p=h*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(o,p,0,n,h),this.cumulativeWeightAdditive+=n}apply(n){const o=this.valueSize,h=this.buffer,p=n*o+o,w=this.cumulativeWeight,S=this.cumulativeWeightAdditive,I=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,w<1){const k=o*this._origIndex;this._mixBufferRegion(h,p,k,1-w,o)}S>0&&this._mixBufferRegionAdditive(h,p,this._addIndex*o,1,o);for(let k=o,R=o+o;k!==R;++k)if(h[k]!==h[k+o]){I.setValue(h,p);break}}saveOriginalState(){const n=this.binding,o=this.buffer,h=this.valueSize,p=h*this._origIndex;n.getValue(o,p);for(let w=h,S=p;w!==S;++w)o[w]=o[p+w%h];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const n=3*this.valueSize;this.binding.setValue(this.buffer,n)}_setAdditiveIdentityNumeric(){const n=this._addIndex*this.valueSize,o=n+this.valueSize;for(let h=n;h<o;h++)this.buffer[h]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const n=this._origIndex*this.valueSize,o=this._addIndex*this.valueSize;for(let h=0;h<this.valueSize;h++)this.buffer[o+h]=this.buffer[n+h]}_select(n,o,h,p,w){if(p>=.5)for(let S=0;S!==w;++S)n[o+S]=n[h+S]}_slerp(n,o,h,p){Zi.slerpFlat(n,o,n,o,n,h,p)}_slerpAdditive(n,o,h,p,w){const S=this._workIndex*w;Zi.multiplyQuaternionsFlat(n,S,n,o,n,h),Zi.slerpFlat(n,o,n,o,n,S,p)}_lerp(n,o,h,p,w){const S=1-p;for(let I=0;I!==w;++I){const k=o+I;n[k]=n[k]*S+n[h+I]*p}}_lerpAdditive(n,o,h,p,w){for(let S=0;S!==w;++S){const I=o+S;n[I]=n[I]+n[h+S]*p}}}const C_=new RegExp("[\\[\\]\\.:\\/]","g"),fx="[^\\[\\]\\.:\\/]",Rb="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",k_=/((?:WC+[\/:])*)/.source.replace("WC",fx),N_=/(WCOD+)?/.source.replace("WCOD",Rb),Lb=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",fx),Db=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",fx),R_=new RegExp("^"+k_+N_+Lb+Db+"$"),L_=["material","materials","bones"];class Gr{constructor(n,o,h){this.path=o,this.parsedPath=h||Gr.parseTrackName(o),this.node=Gr.findNode(n,this.parsedPath.nodeName)||n,this.rootNode=n,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(n,o,h){return n&&n.isAnimationObjectGroup?new Gr.Composite(n,o,h):new Gr(n,o,h)}static sanitizeNodeName(n){return n.replace(/\s/g,"_").replace(C_,"")}static parseTrackName(n){const o=R_.exec(n);if(!o)throw new Error("PropertyBinding: Cannot parse trackName: "+n);const h={nodeName:o[2],objectName:o[3],objectIndex:o[4],propertyName:o[5],propertyIndex:o[6]},p=h.nodeName&&h.nodeName.lastIndexOf(".");if(p!==void 0&&p!==-1){const w=h.nodeName.substring(p+1);L_.indexOf(w)!==-1&&(h.nodeName=h.nodeName.substring(0,p),h.objectName=w)}if(h.propertyName===null||h.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+n);return h}static findNode(n,o){if(!o||o===""||o==="."||o===-1||o===n.name||o===n.uuid)return n;if(n.skeleton){const h=n.skeleton.getBoneByName(o);if(h!==void 0)return h}if(n.children){const h=function(w){for(let S=0;S<w.length;S++){const I=w[S];if(I.name===o||I.uuid===o)return I;const k=h(I.children);if(k)return k}return null},p=h(n.children);if(p)return p}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(n,o){n[o]=this.targetObject[this.propertyName]}_getValue_array(n,o){const h=this.resolvedProperty;for(let p=0,w=h.length;p!==w;++p)n[o++]=h[p]}_getValue_arrayElement(n,o){n[o]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(n,o){this.resolvedProperty.toArray(n,o)}_setValue_direct(n,o){this.targetObject[this.propertyName]=n[o]}_setValue_direct_setNeedsUpdate(n,o){this.targetObject[this.propertyName]=n[o],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(n,o){this.targetObject[this.propertyName]=n[o],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(n,o){const h=this.resolvedProperty;for(let p=0,w=h.length;p!==w;++p)h[p]=n[o++]}_setValue_array_setNeedsUpdate(n,o){const h=this.resolvedProperty;for(let p=0,w=h.length;p!==w;++p)h[p]=n[o++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(n,o){const h=this.resolvedProperty;for(let p=0,w=h.length;p!==w;++p)h[p]=n[o++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(n,o){this.resolvedProperty[this.propertyIndex]=n[o]}_setValue_arrayElement_setNeedsUpdate(n,o){this.resolvedProperty[this.propertyIndex]=n[o],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(n,o){this.resolvedProperty[this.propertyIndex]=n[o],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(n,o){this.resolvedProperty.fromArray(n,o)}_setValue_fromArray_setNeedsUpdate(n,o){this.resolvedProperty.fromArray(n,o),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(n,o){this.resolvedProperty.fromArray(n,o),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(n,o){this.bind(),this.getValue(n,o)}_setValue_unbound(n,o){this.bind(),this.setValue(n,o)}bind(){let n=this.node;const o=this.parsedPath,h=o.objectName,p=o.propertyName;let w=o.propertyIndex;if(n||(n=Gr.findNode(this.rootNode,o.nodeName)||this.rootNode,this.node=n),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!n)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(h){let R=o.objectIndex;switch(h){case"materials":if(!n.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!n.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);n=n.material.materials;break;case"bones":if(!n.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);n=n.skeleton.bones;for(let $=0;$<n.length;$++)if(n[$].name===R){R=$;break}break;default:if(n[h]===void 0)return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);n=n[h]}if(R!==void 0){if(n[R]===void 0)return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,n);n=n[R]}}const S=n[p];if(S===void 0){const R=o.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+R+"."+p+" but it wasn't found.",n)}let I=this.Versioning.None;this.targetObject=n,n.needsUpdate!==void 0?I=this.Versioning.NeedsUpdate:n.matrixWorldNeedsUpdate!==void 0&&(I=this.Versioning.MatrixWorldNeedsUpdate);let k=this.BindingType.Direct;if(w!==void 0){if(p==="morphTargetInfluences"){if(!n.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!n.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!n.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);n.morphTargetDictionary[w]!==void 0&&(w=n.morphTargetDictionary[w])}k=this.BindingType.ArrayElement,this.resolvedProperty=S,this.propertyIndex=w}else S.fromArray!==void 0&&S.toArray!==void 0?(k=this.BindingType.HasFromToArray,this.resolvedProperty=S):Array.isArray(S)?(k=this.BindingType.EntireArray,this.resolvedProperty=S):this.propertyName=p;this.getValue=this.GetterByBindingType[k],this.setValue=this.SetterByBindingTypeAndVersioning[k][I]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Gr.Composite=class{constructor(T,n,o){const h=o||Gr.parseTrackName(n);this._targetGroup=T,this._bindings=T.subscribe_(n,h)}getValue(T,n){this.bind();const o=this._targetGroup.nCachedObjects_,h=this._bindings[o];h!==void 0&&h.getValue(T,n)}setValue(T,n){const o=this._bindings;for(let h=this._targetGroup.nCachedObjects_,p=o.length;h!==p;++h)o[h].setValue(T,n)}bind(){const T=this._bindings;for(let n=this._targetGroup.nCachedObjects_,o=T.length;n!==o;++n)T[n].bind()}unbind(){const T=this._bindings;for(let n=this._targetGroup.nCachedObjects_,o=T.length;n!==o;++n)T[n].unbind()}},Gr.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Gr.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Gr.prototype.GetterByBindingType=[Gr.prototype._getValue_direct,Gr.prototype._getValue_array,Gr.prototype._getValue_arrayElement,Gr.prototype._getValue_toArray],Gr.prototype.SetterByBindingTypeAndVersioning=[[Gr.prototype._setValue_direct,Gr.prototype._setValue_direct_setNeedsUpdate,Gr.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Gr.prototype._setValue_array,Gr.prototype._setValue_array_setNeedsUpdate,Gr.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Gr.prototype._setValue_arrayElement,Gr.prototype._setValue_arrayElement_setNeedsUpdate,Gr.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Gr.prototype._setValue_fromArray,Gr.prototype._setValue_fromArray_setNeedsUpdate,Gr.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Pb{constructor(){this.uuid=Vs(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const n={};this._indicesByUUID=n;for(let h=0,p=arguments.length;h!==p;++h)n[arguments[h].uuid]=h;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const o=this;this.stats={objects:{get total(){return o._objects.length},get inUse(){return this.total-o.nCachedObjects_}},get bindingsPerObject(){return o._bindings.length}}}add(){const n=this._objects,o=this._indicesByUUID,h=this._paths,p=this._parsedPaths,w=this._bindings,S=w.length;let I,k=n.length,R=this.nCachedObjects_;for(let $=0,j=arguments.length;$!==j;++$){const H=arguments[$],Y=H.uuid;let ee=o[Y];if(ee===void 0){ee=k++,o[Y]=ee,n.push(H);for(let te=0,ae=S;te!==ae;++te)w[te].push(new Gr(H,h[te],p[te]))}else if(ee<R){I=n[ee];const te=--R,ae=n[te];o[ae.uuid]=ee,n[ee]=ae,o[Y]=te,n[te]=H;for(let ne=0,me=S;ne!==me;++ne){const _e=w[ne],ve=_e[te];let Ne=_e[ee];_e[ee]=ve,Ne===void 0&&(Ne=new Gr(H,h[ne],p[ne])),_e[te]=Ne}}else n[ee]!==I&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=R}remove(){const n=this._objects,o=this._indicesByUUID,h=this._bindings,p=h.length;let w=this.nCachedObjects_;for(let S=0,I=arguments.length;S!==I;++S){const k=arguments[S],R=k.uuid,$=o[R];if($!==void 0&&$>=w){const j=w++,H=n[j];o[H.uuid]=$,n[$]=H,o[R]=j,n[j]=k;for(let Y=0,ee=p;Y!==ee;++Y){const te=h[Y],ae=te[j],ne=te[$];te[$]=ae,te[j]=ne}}}this.nCachedObjects_=w}uncache(){const n=this._objects,o=this._indicesByUUID,h=this._bindings,p=h.length;let w=this.nCachedObjects_,S=n.length;for(let I=0,k=arguments.length;I!==k;++I){const R=arguments[I].uuid,$=o[R];if($!==void 0)if(delete o[R],$<w){const j=--w,H=n[j],Y=--S,ee=n[Y];o[H.uuid]=$,n[$]=H,o[ee.uuid]=j,n[j]=ee,n.pop();for(let te=0,ae=p;te!==ae;++te){const ne=h[te],me=ne[j],_e=ne[Y];ne[$]=me,ne[j]=_e,ne.pop()}}else{const j=--S,H=n[j];j>0&&(o[H.uuid]=$),n[$]=H,n.pop();for(let Y=0,ee=p;Y!==ee;++Y){const te=h[Y];te[$]=te[j],te.pop()}}}this.nCachedObjects_=w}subscribe_(n,o){const h=this._bindingsIndicesByPath;let p=h[n];const w=this._bindings;if(p!==void 0)return w[p];const S=this._paths,I=this._parsedPaths,k=this._objects,R=k.length,$=this.nCachedObjects_,j=new Array(R);p=w.length,h[n]=p,S.push(n),I.push(o),w.push(j);for(let H=$,Y=k.length;H!==Y;++H){const ee=k[H];j[H]=new Gr(ee,n,o)}return j}unsubscribe_(n){const o=this._bindingsIndicesByPath,h=o[n];if(h!==void 0){const p=this._paths,w=this._parsedPaths,S=this._bindings,I=S.length-1,k=S[I];o[n[I]]=h,S[h]=k,S.pop(),w[h]=w[I],w.pop(),p[h]=p[I],p.pop()}}}Pb.prototype.isAnimationObjectGroup=!0;class Fb{constructor(n,o,h=null,p=o.blendMode){this._mixer=n,this._clip=o,this._localRoot=h,this.blendMode=p;const w=o.tracks,S=w.length,I=new Array(S),k={endingStart:Fo,endingEnd:Fo};for(let R=0;R!==S;++R){const $=w[R].createInterpolant(null);I[R]=$,$.settings=k}this._interpolantSettings=k,this._interpolants=I,this._propertyBindings=new Array(S),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=ff,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(n){return this._startTime=n,this}setLoop(n,o){return this.loop=n,this.repetitions=o,this}setEffectiveWeight(n){return this.weight=n,this._effectiveWeight=this.enabled?n:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(n){return this._scheduleFading(n,0,1)}fadeOut(n){return this._scheduleFading(n,1,0)}crossFadeFrom(n,o,h){if(n.fadeOut(o),this.fadeIn(o),h){const p=this._clip.duration,w=n._clip.duration,S=w/p,I=p/w;n.warp(1,S,o),this.warp(I,1,o)}return this}crossFadeTo(n,o,h){return n.crossFadeFrom(this,o,h)}stopFading(){const n=this._weightInterpolant;return n!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(n)),this}setEffectiveTimeScale(n){return this.timeScale=n,this._effectiveTimeScale=this.paused?0:n,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(n){return this.timeScale=this._clip.duration/n,this.stopWarping()}syncWith(n){return this.time=n.time,this.timeScale=n.timeScale,this.stopWarping()}halt(n){return this.warp(this._effectiveTimeScale,0,n)}warp(n,o,h){const p=this._mixer,w=p.time,S=this.timeScale;let I=this._timeScaleInterpolant;I===null&&(I=p._lendControlInterpolant(),this._timeScaleInterpolant=I);const k=I.parameterPositions,R=I.sampleValues;return k[0]=w,k[1]=w+h,R[0]=n/S,R[1]=o/S,this}stopWarping(){const n=this._timeScaleInterpolant;return n!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(n)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(n,o,h,p){if(!this.enabled)return void this._updateWeight(n);const w=this._startTime;if(w!==null){const k=(n-w)*h;if(k<0||h===0)return;this._startTime=null,o=h*k}o*=this._updateTimeScale(n);const S=this._updateTime(o),I=this._updateWeight(n);if(I>0){const k=this._interpolants,R=this._propertyBindings;switch(this.blendMode){case md:for(let $=0,j=k.length;$!==j;++$)k[$].evaluate(S),R[$].accumulateAdditive(I);break;case Ul:default:for(let $=0,j=k.length;$!==j;++$)k[$].evaluate(S),R[$].accumulate(p,I)}}}_updateWeight(n){let o=0;if(this.enabled){o=this.weight;const h=this._weightInterpolant;if(h!==null){const p=h.evaluate(n)[0];o*=p,n>h.parameterPositions[1]&&(this.stopFading(),p===0&&(this.enabled=!1))}}return this._effectiveWeight=o,o}_updateTimeScale(n){let o=0;if(!this.paused){o=this.timeScale;const h=this._timeScaleInterpolant;h!==null&&(o*=h.evaluate(n)[0],n>h.parameterPositions[1]&&(this.stopWarping(),o===0?this.paused=!0:this.timeScale=o))}return this._effectiveTimeScale=o,o}_updateTime(n){const o=this._clip.duration,h=this.loop;let p=this.time+n,w=this._loopCount;const S=h===fd;if(n===0)return w===-1?p:S&&(1&w)==1?o-p:p;if(h===pf){w===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(p>=o)p=o;else{if(!(p<0)){this.time=p;break e}p=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=p,this._mixer.dispatchEvent({type:"finished",action:this,direction:n<0?-1:1})}}else{if(w===-1&&(n>=0?(w=0,this._setEndings(!0,this.repetitions===0,S)):this._setEndings(this.repetitions===0,!0,S)),p>=o||p<0){const I=Math.floor(p/o);p-=o*I,w+=Math.abs(I);const k=this.repetitions-w;if(k<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,p=n>0?o:0,this.time=p,this._mixer.dispatchEvent({type:"finished",action:this,direction:n>0?1:-1});else{if(k===1){const R=n<0;this._setEndings(R,!R,S)}else this._setEndings(!1,!1,S);this._loopCount=w,this.time=p,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:I})}}else this.time=p;if(S&&(1&w)==1)return o-p}return p}_setEndings(n,o,h){const p=this._interpolantSettings;h?(p.endingStart=gl,p.endingEnd=gl):(p.endingStart=n?this.zeroSlopeAtStart?gl:Fo:Fu,p.endingEnd=o?this.zeroSlopeAtEnd?gl:Fo:Fu)}_scheduleFading(n,o,h){const p=this._mixer,w=p.time;let S=this._weightInterpolant;S===null&&(S=p._lendControlInterpolant(),this._weightInterpolant=S);const I=S.parameterPositions,k=S.sampleValues;return I[0]=w,k[0]=o,I[1]=w+n,k[1]=h,this}}class Ob extends co{constructor(n){super(),this._root=n,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(n,o){const h=n._localRoot||this._root,p=n._clip.tracks,w=p.length,S=n._propertyBindings,I=n._interpolants,k=h.uuid,R=this._bindingsByRootAndName;let $=R[k];$===void 0&&($={},R[k]=$);for(let j=0;j!==w;++j){const H=p[j],Y=H.name;let ee=$[Y];if(ee!==void 0)S[j]=ee;else{if(ee=S[j],ee!==void 0){ee._cacheIndex===null&&(++ee.referenceCount,this._addInactiveBinding(ee,k,Y));continue}const te=o&&o._propertyBindings[j].binding.parsedPath;ee=new qg(Gr.create(h,Y,te),H.ValueTypeName,H.getValueSize()),++ee.referenceCount,this._addInactiveBinding(ee,k,Y),S[j]=ee}I[j].resultBuffer=ee.buffer}}_activateAction(n){if(!this._isActiveAction(n)){if(n._cacheIndex===null){const h=(n._localRoot||this._root).uuid,p=n._clip.uuid,w=this._actionsByClip[p];this._bindAction(n,w&&w.knownActions[0]),this._addInactiveAction(n,p,h)}const o=n._propertyBindings;for(let h=0,p=o.length;h!==p;++h){const w=o[h];w.useCount++==0&&(this._lendBinding(w),w.saveOriginalState())}this._lendAction(n)}}_deactivateAction(n){if(this._isActiveAction(n)){const o=n._propertyBindings;for(let h=0,p=o.length;h!==p;++h){const w=o[h];--w.useCount==0&&(w.restoreOriginalState(),this._takeBackBinding(w))}this._takeBackAction(n)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const n=this;this.stats={actions:{get total(){return n._actions.length},get inUse(){return n._nActiveActions}},bindings:{get total(){return n._bindings.length},get inUse(){return n._nActiveBindings}},controlInterpolants:{get total(){return n._controlInterpolants.length},get inUse(){return n._nActiveControlInterpolants}}}}_isActiveAction(n){const o=n._cacheIndex;return o!==null&&o<this._nActiveActions}_addInactiveAction(n,o,h){const p=this._actions,w=this._actionsByClip;let S=w[o];if(S===void 0)S={knownActions:[n],actionByRoot:{}},n._byClipCacheIndex=0,w[o]=S;else{const I=S.knownActions;n._byClipCacheIndex=I.length,I.push(n)}n._cacheIndex=p.length,p.push(n),S.actionByRoot[h]=n}_removeInactiveAction(n){const o=this._actions,h=o[o.length-1],p=n._cacheIndex;h._cacheIndex=p,o[p]=h,o.pop(),n._cacheIndex=null;const w=n._clip.uuid,S=this._actionsByClip,I=S[w],k=I.knownActions,R=k[k.length-1],$=n._byClipCacheIndex;R._byClipCacheIndex=$,k[$]=R,k.pop(),n._byClipCacheIndex=null,delete I.actionByRoot[(n._localRoot||this._root).uuid],k.length===0&&delete S[w],this._removeInactiveBindingsForAction(n)}_removeInactiveBindingsForAction(n){const o=n._propertyBindings;for(let h=0,p=o.length;h!==p;++h){const w=o[h];--w.referenceCount==0&&this._removeInactiveBinding(w)}}_lendAction(n){const o=this._actions,h=n._cacheIndex,p=this._nActiveActions++,w=o[p];n._cacheIndex=p,o[p]=n,w._cacheIndex=h,o[h]=w}_takeBackAction(n){const o=this._actions,h=n._cacheIndex,p=--this._nActiveActions,w=o[p];n._cacheIndex=p,o[p]=n,w._cacheIndex=h,o[h]=w}_addInactiveBinding(n,o,h){const p=this._bindingsByRootAndName,w=this._bindings;let S=p[o];S===void 0&&(S={},p[o]=S),S[h]=n,n._cacheIndex=w.length,w.push(n)}_removeInactiveBinding(n){const o=this._bindings,h=n.binding,p=h.rootNode.uuid,w=h.path,S=this._bindingsByRootAndName,I=S[p],k=o[o.length-1],R=n._cacheIndex;k._cacheIndex=R,o[R]=k,o.pop(),delete I[w],Object.keys(I).length===0&&delete S[p]}_lendBinding(n){const o=this._bindings,h=n._cacheIndex,p=this._nActiveBindings++,w=o[p];n._cacheIndex=p,o[p]=n,w._cacheIndex=h,o[h]=w}_takeBackBinding(n){const o=this._bindings,h=n._cacheIndex,p=--this._nActiveBindings,w=o[p];n._cacheIndex=p,o[p]=n,w._cacheIndex=h,o[h]=w}_lendControlInterpolant(){const n=this._controlInterpolants,o=this._nActiveControlInterpolants++;let h=n[o];return h===void 0&&(h=new am(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),h.__cacheIndex=o,n[o]=h),h}_takeBackControlInterpolant(n){const o=this._controlInterpolants,h=n.__cacheIndex,p=--this._nActiveControlInterpolants,w=o[p];n.__cacheIndex=p,o[p]=n,w.__cacheIndex=h,o[h]=w}clipAction(n,o,h){const p=o||this._root,w=p.uuid;let S=typeof n=="string"?fc.findByName(p,n):n;const I=S!==null?S.uuid:n,k=this._actionsByClip[I];let R=null;if(h===void 0&&(h=S!==null?S.blendMode:Ul),k!==void 0){const j=k.actionByRoot[w];if(j!==void 0&&j.blendMode===h)return j;R=k.knownActions[0],S===null&&(S=R._clip)}if(S===null)return null;const $=new Fb(this,S,o,h);return this._bindAction($,R),this._addInactiveAction($,I,w),$}existingAction(n,o){const h=o||this._root,p=h.uuid,w=typeof n=="string"?fc.findByName(h,n):n,S=w?w.uuid:n,I=this._actionsByClip[S];return I!==void 0&&I.actionByRoot[p]||null}stopAllAction(){const n=this._actions;for(let o=this._nActiveActions-1;o>=0;--o)n[o].stop();return this}update(n){n*=this.timeScale;const o=this._actions,h=this._nActiveActions,p=this.time+=n,w=Math.sign(n),S=this._accuIndex^=1;for(let R=0;R!==h;++R)o[R]._update(p,n,w,S);const I=this._bindings,k=this._nActiveBindings;for(let R=0;R!==k;++R)I[R].apply(S);return this}setTime(n){this.time=0;for(let o=0;o<this._actions.length;o++)this._actions[o].time=0;return this.update(n)}getRoot(){return this._root}uncacheClip(n){const o=this._actions,h=n.uuid,p=this._actionsByClip,w=p[h];if(w!==void 0){const S=w.knownActions;for(let I=0,k=S.length;I!==k;++I){const R=S[I];this._deactivateAction(R);const $=R._cacheIndex,j=o[o.length-1];R._cacheIndex=null,R._byClipCacheIndex=null,j._cacheIndex=$,o[$]=j,o.pop(),this._removeInactiveBindingsForAction(R)}delete p[h]}}uncacheRoot(n){const o=n.uuid,h=this._actionsByClip;for(const w in h){const S=h[w].actionByRoot[o];S!==void 0&&(this._deactivateAction(S),this._removeInactiveAction(S))}const p=this._bindingsByRootAndName[o];if(p!==void 0)for(const w in p){const S=p[w];S.restoreOriginalState(),this._removeInactiveBinding(S)}}uncacheAction(n,o){const h=this.existingAction(n,o);h!==null&&(this._deactivateAction(h),this._removeInactiveAction(h))}}Ob.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class ys{constructor(n){typeof n=="string"&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),n=arguments[1]),this.value=n}clone(){return new ys(this.value.clone===void 0?this.value:this.value.clone())}}class Ll extends Tl{constructor(n,o,h=1){super(n,o),this.meshPerAttribute=h}copy(n){return super.copy(n),this.meshPerAttribute=n.meshPerAttribute,this}clone(n){const o=super.clone(n);return o.meshPerAttribute=this.meshPerAttribute,o}toJSON(n){const o=super.toJSON(n);return o.isInstancedInterleavedBuffer=!0,o.meshPerAttribute=this.meshPerAttribute,o}}Ll.prototype.isInstancedInterleavedBuffer=!0;class zb{constructor(n,o,h,p,w){this.buffer=n,this.type=o,this.itemSize=h,this.elementSize=p,this.count=w,this.version=0}set needsUpdate(n){n===!0&&this.version++}setBuffer(n){return this.buffer=n,this}setType(n,o){return this.type=n,this.elementSize=o,this}setItemSize(n){return this.itemSize=n,this}setCount(n){return this.count=n,this}}zb.prototype.isGLBufferAttribute=!0;class D_{constructor(n,o,h=0,p=1/0){this.ray=new Vo(n,o),this.near=h,this.far=p,this.camera=null,this.layers=new nh,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(n,o){this.ray.set(n,o)}setFromCamera(n,o){o&&o.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(o.matrixWorld),this.ray.direction.set(n.x,n.y,.5).unproject(o).sub(this.ray.origin).normalize(),this.camera=o):o&&o.isOrthographicCamera?(this.ray.origin.set(n.x,n.y,(o.near+o.far)/(o.near-o.far)).unproject(o),this.ray.direction.set(0,0,-1).transformDirection(o.matrixWorld),this.camera=o):console.error("THREE.Raycaster: Unsupported camera type: "+o.type)}intersectObject(n,o=!1,h=[]){return mx(n,this,h,o),h.sort(Bb),h}intersectObjects(n,o=!1,h=[]){for(let p=0,w=n.length;p<w;p++)mx(n[p],this,h,o);return h.sort(Bb),h}}function Bb(T,n){return T.distance-n.distance}function mx(T,n,o,h){if(T.layers.test(n.layers)&&T.raycast(n,o),h===!0){const p=T.children;for(let w=0,S=p.length;w<S;w++)mx(p[w],n,o,!0)}}class P_{constructor(n=1,o=0,h=0){return this.radius=n,this.phi=o,this.theta=h,this}set(n,o,h){return this.radius=n,this.phi=o,this.theta=h,this}copy(n){return this.radius=n.radius,this.phi=n.phi,this.theta=n.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(n){return this.setFromCartesianCoords(n.x,n.y,n.z)}setFromCartesianCoords(n,o,h){return this.radius=Math.sqrt(n*n+o*o+h*h),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(n,h),this.phi=Math.acos(Vi(o/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class F_{constructor(n=1,o=0,h=0){return this.radius=n,this.theta=o,this.y=h,this}set(n,o,h){return this.radius=n,this.theta=o,this.y=h,this}copy(n){return this.radius=n.radius,this.theta=n.theta,this.y=n.y,this}setFromVector3(n){return this.setFromCartesianCoords(n.x,n.y,n.z)}setFromCartesianCoords(n,o,h){return this.radius=Math.sqrt(n*n+h*h),this.theta=Math.atan2(n,h),this.y=o,this}clone(){return new this.constructor().copy(this)}}const $b=new Qt;class Sp{constructor(n=new Qt(1/0,1/0),o=new Qt(-1/0,-1/0)){this.min=n,this.max=o}set(n,o){return this.min.copy(n),this.max.copy(o),this}setFromPoints(n){this.makeEmpty();for(let o=0,h=n.length;o<h;o++)this.expandByPoint(n[o]);return this}setFromCenterAndSize(n,o){const h=$b.copy(o).multiplyScalar(.5);return this.min.copy(n).sub(h),this.max.copy(n).add(h),this}clone(){return new this.constructor().copy(this)}copy(n){return this.min.copy(n.min),this.max.copy(n.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(n){return this.isEmpty()?n.set(0,0):n.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(n){return this.isEmpty()?n.set(0,0):n.subVectors(this.max,this.min)}expandByPoint(n){return this.min.min(n),this.max.max(n),this}expandByVector(n){return this.min.sub(n),this.max.add(n),this}expandByScalar(n){return this.min.addScalar(-n),this.max.addScalar(n),this}containsPoint(n){return!(n.x<this.min.x||n.x>this.max.x||n.y<this.min.y||n.y>this.max.y)}containsBox(n){return this.min.x<=n.min.x&&n.max.x<=this.max.x&&this.min.y<=n.min.y&&n.max.y<=this.max.y}getParameter(n,o){return o.set((n.x-this.min.x)/(this.max.x-this.min.x),(n.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(n){return!(n.max.x<this.min.x||n.min.x>this.max.x||n.max.y<this.min.y||n.min.y>this.max.y)}clampPoint(n,o){return o.copy(n).clamp(this.min,this.max)}distanceToPoint(n){return $b.copy(n).clamp(this.min,this.max).sub(n).length()}intersect(n){return this.min.max(n.min),this.max.min(n.max),this}union(n){return this.min.min(n.min),this.max.max(n.max),this}translate(n){return this.min.add(n),this.max.add(n),this}equals(n){return n.min.equals(this.min)&&n.max.equals(this.max)}}Sp.prototype.isBox2=!0;const Ub=new Te,Xg=new Te;class Vb{constructor(n=new Te,o=new Te){this.start=n,this.end=o}set(n,o){return this.start.copy(n),this.end.copy(o),this}copy(n){return this.start.copy(n.start),this.end.copy(n.end),this}getCenter(n){return n.addVectors(this.start,this.end).multiplyScalar(.5)}delta(n){return n.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(n,o){return this.delta(o).multiplyScalar(n).add(this.start)}closestPointToPointParameter(n,o){Ub.subVectors(n,this.start),Xg.subVectors(this.end,this.start);const h=Xg.dot(Xg);let p=Xg.dot(Ub)/h;return o&&(p=Vi(p,0,1)),p}closestPointToPoint(n,o,h){const p=this.closestPointToPointParameter(n,o);return this.delta(h).multiplyScalar(p).add(this.start)}applyMatrix4(n){return this.start.applyMatrix4(n),this.end.applyMatrix4(n),this}equals(n){return n.start.equals(this.start)&&n.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}class Wb extends Cr{constructor(n){super(),this.material=n,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}Wb.prototype.isImmediateRenderObject=!0;const Gb=new Te;class O_ extends Cr{constructor(n,o){super(),this.light=n,this.light.updateMatrixWorld(),this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.color=o;const h=new On,p=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let S=0,I=1,k=32;S<k;S++,I++){const R=S/k*Math.PI*2,$=I/k*Math.PI*2;p.push(Math.cos(R),Math.sin(R),1,Math.cos($),Math.sin($),1)}h.setAttribute("position",new pn(p,3));const w=new fs({fog:!1,toneMapped:!1});this.cone=new ga(h,w),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const n=this.light.distance?this.light.distance:1e3,o=n*Math.tan(this.light.angle);this.cone.scale.set(o,o,n),Gb.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Gb),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const xc=new Te,Yg=new Gn,gx=new Gn;class no extends ga{constructor(n){const o=yx(n),h=new On,p=[],w=[],S=new yn(0,0,1),I=new yn(0,1,0);for(let k=0;k<o.length;k++){const R=o[k];R.parent&&R.parent.isBone&&(p.push(0,0,0),p.push(0,0,0),w.push(S.r,S.g,S.b),w.push(I.r,I.g,I.b))}h.setAttribute("position",new pn(p,3)),h.setAttribute("color",new pn(w,3)),super(h,new fs({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=n,this.bones=o,this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(n){const o=this.bones,h=this.geometry,p=h.getAttribute("position");gx.copy(this.root.matrixWorld).invert();for(let w=0,S=0;w<o.length;w++){const I=o[w];I.parent&&I.parent.isBone&&(Yg.multiplyMatrices(gx,I.matrixWorld),xc.setFromMatrixPosition(Yg),p.setXYZ(S,xc.x,xc.y,xc.z),Yg.multiplyMatrices(gx,I.parent.matrixWorld),xc.setFromMatrixPosition(Yg),p.setXYZ(S+1,xc.x,xc.y,xc.z),S+=2)}h.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(n)}}function yx(T){const n=[];T&&T.isBone&&n.push(T);for(let o=0;o<T.children.length;o++)n.push.apply(n,yx(T.children[o]));return n}class z_ extends Ji{constructor(n,o,h){super(new eo(o,4,2),new di({wireframe:!0,fog:!1,toneMapped:!1})),this.light=n,this.light.updateMatrixWorld(),this.color=h,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const bm=new Te,wm=new yn,vc=new yn;class $h extends Cr{constructor(n,o,h){super(),this.light=n,this.light.updateMatrixWorld(),this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.color=h;const p=new du(o);p.rotateY(.5*Math.PI),this.material=new di({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const w=p.getAttribute("position"),S=new Float32Array(3*w.count);p.setAttribute("color",new Mr(S,3)),this.add(new Ji(p,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const n=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const o=n.geometry.getAttribute("color");wm.copy(this.light.color),vc.copy(this.light.groundColor);for(let h=0,p=o.count;h<p;h++){const w=h<p/2?wm:vc;o.setXYZ(h,w.r,w.g,w.b)}o.needsUpdate=!0}n.lookAt(bm.setFromMatrixPosition(this.light.matrixWorld).negate())}}class Hb extends ga{constructor(n=10,o=10,h=4473924,p=8947848){h=new yn(h),p=new yn(p);const w=o/2,S=n/o,I=n/2,k=[],R=[];for(let j=0,H=0,Y=-I;j<=o;j++,Y+=S){k.push(-I,0,Y,I,0,Y),k.push(Y,0,-I,Y,0,I);const ee=j===w?h:p;ee.toArray(R,H),H+=3,ee.toArray(R,H),H+=3,ee.toArray(R,H),H+=3,ee.toArray(R,H),H+=3}const $=new On;$.setAttribute("position",new pn(k,3)),$.setAttribute("color",new pn(R,3)),super($,new fs({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}class Kg extends ga{constructor(n=10,o=16,h=8,p=64,w=4473924,S=8947848){w=new yn(w),S=new yn(S);const I=[],k=[];for(let $=0;$<=o;$++){const j=$/o*(2*Math.PI),H=Math.sin(j)*n,Y=Math.cos(j)*n;I.push(0,0,0),I.push(H,0,Y);const ee=1&$?w:S;k.push(ee.r,ee.g,ee.b),k.push(ee.r,ee.g,ee.b)}for(let $=0;$<=h;$++){const j=1&$?w:S,H=n-n/h*$;for(let Y=0;Y<p;Y++){let ee=Y/p*(2*Math.PI),te=Math.sin(ee)*H,ae=Math.cos(ee)*H;I.push(te,0,ae),k.push(j.r,j.g,j.b),ee=(Y+1)/p*(2*Math.PI),te=Math.sin(ee)*H,ae=Math.cos(ee)*H,I.push(te,0,ae),k.push(j.r,j.g,j.b)}}const R=new On;R.setAttribute("position",new pn(I,3)),R.setAttribute("color",new pn(k,3)),super(R,new fs({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}}const Zg=new Te,ro=new Te,Jg=new Te;class Qg extends Cr{constructor(n,o,h){super(),this.light=n,this.light.updateMatrixWorld(),this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.color=h,o===void 0&&(o=1);let p=new On;p.setAttribute("position",new pn([-o,o,0,o,o,0,o,-o,0,-o,-o,0,-o,o,0],3));const w=new fs({fog:!1,toneMapped:!1});this.lightPlane=new tl(p,w),this.add(this.lightPlane),p=new On,p.setAttribute("position",new pn([0,0,0,0,0,1],3)),this.targetLine=new tl(p,w),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){Zg.setFromMatrixPosition(this.light.matrixWorld),ro.setFromMatrixPosition(this.light.target.matrixWorld),Jg.subVectors(ro,Zg),this.lightPlane.lookAt(ro),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(ro),this.targetLine.scale.z=Jg.length()}}const Mp=new Te,pi=new Xs;class _m extends ga{constructor(n){const o=new On,h=new fs({color:16777215,vertexColors:!0,toneMapped:!1}),p=[],w=[],S={},I=new yn(16755200),k=new yn(16711680),R=new yn(43775),$=new yn(16777215),j=new yn(3355443);function H(ee,te,ae){Y(ee,ae),Y(te,ae)}function Y(ee,te){p.push(0,0,0),w.push(te.r,te.g,te.b),S[ee]===void 0&&(S[ee]=[]),S[ee].push(p.length/3-1)}H("n1","n2",I),H("n2","n4",I),H("n4","n3",I),H("n3","n1",I),H("f1","f2",I),H("f2","f4",I),H("f4","f3",I),H("f3","f1",I),H("n1","f1",I),H("n2","f2",I),H("n3","f3",I),H("n4","f4",I),H("p","n1",k),H("p","n2",k),H("p","n3",k),H("p","n4",k),H("u1","u2",R),H("u2","u3",R),H("u3","u1",R),H("c","t",$),H("p","c",j),H("cn1","cn2",j),H("cn3","cn4",j),H("cf1","cf2",j),H("cf3","cf4",j),o.setAttribute("position",new pn(p,3)),o.setAttribute("color",new pn(w,3)),super(o,h),this.type="CameraHelper",this.camera=n,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=S,this.update()}update(){const n=this.geometry,o=this.pointMap;pi.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),wi("c",o,n,pi,0,0,-1),wi("t",o,n,pi,0,0,1),wi("n1",o,n,pi,-1,-1,-1),wi("n2",o,n,pi,1,-1,-1),wi("n3",o,n,pi,-1,1,-1),wi("n4",o,n,pi,1,1,-1),wi("f1",o,n,pi,-1,-1,1),wi("f2",o,n,pi,1,-1,1),wi("f3",o,n,pi,-1,1,1),wi("f4",o,n,pi,1,1,1),wi("u1",o,n,pi,.7,1.1,-1),wi("u2",o,n,pi,-.7,1.1,-1),wi("u3",o,n,pi,0,2,-1),wi("cf1",o,n,pi,-1,0,1),wi("cf2",o,n,pi,1,0,1),wi("cf3",o,n,pi,0,-1,1),wi("cf4",o,n,pi,0,1,1),wi("cn1",o,n,pi,-1,0,-1),wi("cn2",o,n,pi,1,0,-1),wi("cn3",o,n,pi,0,-1,-1),wi("cn4",o,n,pi,0,1,-1),n.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function wi(T,n,o,h,p,w,S){Mp.set(p,w,S).unproject(h);const I=n[T];if(I!==void 0){const k=o.getAttribute("position");for(let R=0,$=I.length;R<$;R++)k.setXYZ(I[R],Mp.x,Mp.y,Mp.z)}}const Tp=new Ws;class ey extends ga{constructor(n,o=16776960){const h=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),p=new Float32Array(24),w=new On;w.setIndex(new Mr(h,1)),w.setAttribute("position",new Mr(p,3)),super(w,new fs({color:o,toneMapped:!1})),this.object=n,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(n){if(n!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&Tp.setFromObject(this.object),Tp.isEmpty())return;const o=Tp.min,h=Tp.max,p=this.geometry.attributes.position,w=p.array;w[0]=h.x,w[1]=h.y,w[2]=h.z,w[3]=o.x,w[4]=h.y,w[5]=h.z,w[6]=o.x,w[7]=o.y,w[8]=h.z,w[9]=h.x,w[10]=o.y,w[11]=h.z,w[12]=h.x,w[13]=h.y,w[14]=o.z,w[15]=o.x,w[16]=h.y,w[17]=o.z,w[18]=o.x,w[19]=o.y,w[20]=o.z,w[21]=h.x,w[22]=o.y,w[23]=o.z,p.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(n){return this.object=n,this.update(),this}copy(n){return ga.prototype.copy.call(this,n),this.object=n.object,this}}class ty extends ga{constructor(n,o=16776960){const h=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),p=new On;p.setIndex(new Mr(h,1)),p.setAttribute("position",new pn([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(p,new fs({color:o,toneMapped:!1})),this.box=n,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(n){const o=this.box;o.isEmpty()||(o.getCenter(this.position),o.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(n))}}class ny extends tl{constructor(n,o=1,h=16776960){const p=h,w=new On;w.setAttribute("position",new pn([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),w.computeBoundingSphere(),super(w,new fs({color:p,toneMapped:!1})),this.type="PlaneHelper",this.plane=n,this.size=o;const S=new On;S.setAttribute("position",new pn([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),S.computeBoundingSphere(),this.add(new Ji(S,new di({color:p,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(n){let o=-this.plane.constant;Math.abs(o)<1e-8&&(o=1e-8),this.scale.set(.5*this.size,.5*this.size,o),this.children[0].material.side=o<0?Z:V,this.lookAt(this.plane.normal),super.updateMatrixWorld(n)}}const ry=new Te;let Ep,Sm;class xx extends Cr{constructor(n=new Te(0,0,1),o=new Te(0,0,0),h=1,p=16776960,w=.2*h,S=.2*w){super(),this.type="ArrowHelper",Ep===void 0&&(Ep=new On,Ep.setAttribute("position",new pn([0,0,0,0,1,0],3)),Sm=new Il(0,.5,1,5,1),Sm.translate(0,-.5,0)),this.position.copy(o),this.line=new tl(Ep,new fs({color:p,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Ji(Sm,new di({color:p,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(n),this.setLength(h,w,S)}setDirection(n){if(n.y>.99999)this.quaternion.set(0,0,0,1);else if(n.y<-.99999)this.quaternion.set(1,0,0,0);else{ry.set(n.z,0,-n.x).normalize();const o=Math.acos(n.y);this.quaternion.setFromAxisAngle(ry,o)}}setLength(n,o=.2*n,h=.2*o){this.line.scale.set(1,Math.max(1e-4,n-o),1),this.line.updateMatrix(),this.cone.scale.set(h,o,h),this.cone.position.y=n,this.cone.updateMatrix()}setColor(n){this.line.material.color.set(n),this.cone.material.color.set(n)}copy(n){return super.copy(n,!1),this.line.copy(n.line),this.cone.copy(n.cone),this}}class iy extends ga{constructor(n=1){const o=[0,0,0,n,0,0,0,0,0,0,n,0,0,0,0,0,0,n],h=new On;h.setAttribute("position",new pn(o,3)),h.setAttribute("color",new pn([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3)),super(h,new fs({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(n,o,h){const p=new yn,w=this.geometry.attributes.color.array;return p.set(n),p.toArray(w,0),p.toArray(w,3),p.set(o),p.toArray(w,6),p.toArray(w,9),p.set(h),p.toArray(w,12),p.toArray(w,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}const sy=new Float32Array(1),mu=new Int32Array(sy.buffer);class jb{static toHalfFloat(n){sy[0]=n;const o=mu[0];let h=o>>16&32768,p=o>>12&2047;const w=o>>23&255;return w<103?h:w>142?(h|=31744,h|=(w==255?0:1)&&8388607&o,h):w<113?(p|=2048,h|=(p>>114-w)+(p>>113-w&1),h):(h|=w-112<<10|p>>1,h+=1&p,h)}}const qb=0,Xb=1,vx=0,Yb=1,Kb=2;function Zb(T){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),T}function B_(T=[]){return console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),T.isMultiMaterial=!0,T.materials=T,T.clone=function(){return T.slice()},T}function bx(T,n){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new Mh(T,n)}function wx(T){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new ma(T)}function _x(T,n){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new Mh(T,n)}function Sx(T){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new rc(T)}function Mx(T){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new rc(T)}function $_(T){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new rc(T)}function Tx(T,n,o){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new Te(T,n,o)}function Jb(T,n){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."),new Mr(T,n).setUsage(qc)}function Qb(T,n){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new Dv(T,n)}function Ex(T,n){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new Pv(T,n)}function Uh(T,n){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new Fv(T,n)}function ew(T,n){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Ov(T,n)}function tw(T,n){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Gu(T,n)}function U_(T,n){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new _0(T,n)}function V_(T,n){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new sh(T,n)}function W_(T,n){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new pn(T,n)}function G_(T,n){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Xo(T,n)}function H_(T){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new iy(T)}function j_(T,n){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new ey(T,n)}function q_(T,n){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new ga(new kg(T.geometry),new fs({color:n!==void 0?n:16777215}))}function X_(T,n){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new ga(new Y0(T.geometry),new fs({color:n!==void 0?n:16777215}))}function Y_(T){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new to(T)}function K_(T){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new Lh(T)}function Z_(T,n,o){return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."),new Yd(T,o)}function J_(){console.error("THREE.CanvasRenderer has been removed")}function Q_(){console.error("THREE.JSONLoader has been removed.")}Es.create=function(T,n){return console.log("THREE.Curve.create() has been deprecated"),T.prototype=Object.create(Es.prototype),T.prototype.constructor=T,T.prototype.getPoint=n,T},fu.prototype.fromPoints=function(T){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(T)},Hb.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},no.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},gs.prototype.extractUrlBase=function(T){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Ph.extractUrlBase(T)},gs.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Sp.prototype.center=function(T){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(T)},Sp.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Sp.prototype.isIntersectionBox=function(T){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(T)},Sp.prototype.size=function(T){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(T)},Ws.prototype.center=function(T){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(T)},Ws.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Ws.prototype.isIntersectionBox=function(T){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(T)},Ws.prototype.isIntersectionSphere=function(T){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(T)},Ws.prototype.size=function(T){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(T)},$o.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},$f.prototype.setFromMatrix=function(T){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(T)},Vb.prototype.center=function(T){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(T)},Ni.prototype.flattenToArrayOffset=function(T,n){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(T,n)},Ni.prototype.multiplyVector3=function(T){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),T.applyMatrix3(this)},Ni.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},Ni.prototype.applyToBufferAttribute=function(T){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),T.applyMatrix3(this)},Ni.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},Ni.prototype.getInverse=function(T){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(T).invert()},Gn.prototype.extractPosition=function(T){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(T)},Gn.prototype.flattenToArrayOffset=function(T,n){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(T,n)},Gn.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new Te().setFromMatrixColumn(this,3)},Gn.prototype.setRotationFromQuaternion=function(T){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(T)},Gn.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Gn.prototype.multiplyVector3=function(T){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),T.applyMatrix4(this)},Gn.prototype.multiplyVector4=function(T){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),T.applyMatrix4(this)},Gn.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Gn.prototype.rotateAxis=function(T){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),T.transformDirection(this)},Gn.prototype.crossVector=function(T){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),T.applyMatrix4(this)},Gn.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Gn.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Gn.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Gn.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Gn.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Gn.prototype.applyToBufferAttribute=function(T){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),T.applyMatrix4(this)},Gn.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Gn.prototype.makeFrustum=function(T,n,o,h,p,w){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(T,n,h,o,p,w)},Gn.prototype.getInverse=function(T){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(T).invert()},Ko.prototype.isIntersectionLine=function(T){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(T)},Zi.prototype.multiplyVector3=function(T){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),T.applyQuaternion(this)},Zi.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Vo.prototype.isIntersectionBox=function(T){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(T)},Vo.prototype.isIntersectionPlane=function(T){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(T)},Vo.prototype.isIntersectionSphere=function(T){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(T)},Li.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},Li.prototype.barycoordFromPoint=function(T,n){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(T,n)},Li.prototype.midpoint=function(T){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(T)},Li.prototypenormal=function(T){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(T)},Li.prototype.plane=function(T){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(T)},Li.barycoordFromPoint=function(T,n,o,h,p){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Li.getBarycoord(T,n,o,h,p)},Li.normal=function(T,n,o,h){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Li.getNormal(T,n,o,h)},sl.prototype.extractAllPoints=function(T){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(T)},sl.prototype.extrude=function(T){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new rl(this,T)},sl.prototype.makeGeometry=function(T){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new cc(this,T)},Qt.prototype.fromAttribute=function(T,n,o){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(T,n,o)},Qt.prototype.distanceToManhattan=function(T){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(T)},Qt.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Te.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},Te.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},Te.prototype.getPositionFromMatrix=function(T){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(T)},Te.prototype.getScaleFromMatrix=function(T){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(T)},Te.prototype.getColumnFromMatrix=function(T,n){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(n,T)},Te.prototype.applyProjection=function(T){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(T)},Te.prototype.fromAttribute=function(T,n,o){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(T,n,o)},Te.prototype.distanceToManhattan=function(T){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(T)},Te.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Xr.prototype.fromAttribute=function(T,n,o){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(T,n,o)},Xr.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Cr.prototype.getChildByName=function(T){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(T)},Cr.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},Cr.prototype.translate=function(T,n){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(n,T)},Cr.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},Cr.prototype.applyMatrix=function(T){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(T)},Object.defineProperties(Cr.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(T){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=T}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Ji.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(Ji.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),Hc},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),es.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},ss.prototype.setLens=function(T,n){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),n!==void 0&&(this.filmGauge=n),this.setFocalLength(T)},Object.defineProperties(ls.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(T){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=T}},shadowCameraLeft:{set:function(T){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=T}},shadowCameraRight:{set:function(T){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=T}},shadowCameraTop:{set:function(T){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=T}},shadowCameraBottom:{set:function(T){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=T}},shadowCameraNear:{set:function(T){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=T}},shadowCameraFar:{set:function(T){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=T}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(T){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=T}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(T){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=T}},shadowMapHeight:{set:function(T){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=T}}}),Object.defineProperties(Mr.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===qc},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(qc)}}}),Mr.prototype.setDynamic=function(T){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(T===!0?qc:xl),this},Mr.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Mr.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},On.prototype.addIndex=function(T){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(T)},On.prototype.addAttribute=function(T,n){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),n&&n.isBufferAttribute||n&&n.isInterleavedBufferAttribute?T==="index"?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(n),this):this.setAttribute(T,n):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(T,new Mr(arguments[1],arguments[2])))},On.prototype.addDrawCall=function(T,n,o){o!==void 0&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(T,n)},On.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},On.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},On.prototype.removeAttribute=function(T){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(T)},On.prototype.applyMatrix=function(T){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(T)},Object.defineProperties(On.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Tl.prototype.setDynamic=function(T){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(T===!0?qc:xl),this},Tl.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},rl.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},rl.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},rl.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},Qa.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},ys.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(fr.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new yn}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(T){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=T===fe}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(T){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=T}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}}),Object.defineProperties(qs.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(T){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=T}}}),ur.prototype.clearTarget=function(T,n,o,h){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(T),this.clear(n,o,h)},ur.prototype.animate=function(T){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(T)},ur.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},ur.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},ur.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},ur.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},ur.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},ur.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},ur.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},ur.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},ur.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},ur.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},ur.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},ur.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},ur.prototype.enableScissorTest=function(T){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(T)},ur.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},ur.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},ur.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},ur.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},ur.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},ur.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},ur.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},ur.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},ur.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},ur.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(ur.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(T){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=T}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(T){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=T}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(T){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=T===!0?yl:ps}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}}),Object.defineProperties(Zo.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Ea.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(T){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=T}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(T){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=T}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(T){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=T}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(T){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=T}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(T){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=T}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(T){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=T}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(T){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=T}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(T){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=T}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(T){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=T}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(T){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=T}}}),yc.prototype.load=function(T){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const n=this;return new Hg().load(T,function(o){n.setBuffer(o)}),this},vm.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},uh.prototype.updateCubeMap=function(T,n){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(T,n)},uh.prototype.clear=function(T,n,o,h){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(T,n,o,h)},Yc.crossOrigin=void 0,Yc.loadTexture=function(T,n,o,h){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const p=new hm;p.setCrossOrigin(this.crossOrigin);const w=p.load(T,o,void 0,h);return n&&(w.mapping=n),w},Yc.loadTextureCube=function(T,n,o,h){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const p=new vp;p.setCrossOrigin(this.crossOrigin);const w=p.load(T,o,void 0,h);return n&&(w.mapping=n),w},Yc.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},Yc.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};const eS={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function tS(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:M}})),typeof window!="undefined"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=M)},21564:(g,v,b)=>{b.r(v),b.d(v,{CSS3DObject:()=>O,CSS3DSprite:()=>z,CSS3DRenderer:()=>G});var M=b(2212);const N=new M.Vector3,F=new M.Quaternion,D=new M.Vector3;class O extends M.Object3D{constructor(J){super(),this.element=J||document.createElement("div"),this.element.style.position="absolute",this.element.style.pointerEvents="auto",this.element.style.userSelect="none",this.element.setAttribute("draggable",!1),this.addEventListener("removed",function(){this.traverse(function(V){V.element instanceof Element&&V.element.parentNode!==null&&V.element.parentNode.removeChild(V.element)})})}copy(J,V){return super.copy(J,V),this.element=J.element.cloneNode(!0),this}}O.prototype.isCSS3DObject=!0;class z extends O{constructor(J){super(J),this.rotation2D=0}copy(J,V){return super.copy(J,V),this.rotation2D=J.rotation2D,this}}z.prototype.isCSS3DSprite=!0;const B=new M.Matrix4,W=new M.Matrix4;class G{constructor(){const J=this;let V,Z,le,fe;const be={camera:{fov:0,style:""},objects:new WeakMap},Me=document.createElement("div");Me.style.overflow="hidden",this.domElement=Me;const ce=document.createElement("div");function We(ue){return Math.abs(ue)<1e-10?0:ue}function Ke(ue){const Se=ue.elements;return"matrix3d("+We(Se[0])+","+We(-Se[1])+","+We(Se[2])+","+We(Se[3])+","+We(Se[4])+","+We(-Se[5])+","+We(Se[6])+","+We(Se[7])+","+We(Se[8])+","+We(-Se[9])+","+We(Se[10])+","+We(Se[11])+","+We(Se[12])+","+We(-Se[13])+","+We(Se[14])+","+We(Se[15])+")"}function Ye(ue){const Se=ue.elements;return"translate(-50%,-50%)matrix3d("+We(Se[0])+","+We(Se[1])+","+We(Se[2])+","+We(Se[3])+","+We(-Se[4])+","+We(-Se[5])+","+We(-Se[6])+","+We(-Se[7])+","+We(Se[8])+","+We(Se[9])+","+We(Se[10])+","+We(Se[11])+","+We(Se[12])+","+We(Se[13])+","+We(Se[14])+","+We(Se[15])+")"}function xe(ue,Se,je,rt){if(ue.isCSS3DObject){let et;ue.onBeforeRender(J,Se,je),ue.isCSS3DSprite?(B.copy(je.matrixWorldInverse),B.transpose(),ue.rotation2D!==0&&B.multiply(W.makeRotationZ(ue.rotation2D)),ue.matrixWorld.decompose(N,F,D),B.setPosition(N),B.scale(D),B.elements[3]=0,B.elements[7]=0,B.elements[11]=0,B.elements[15]=1,et=Ye(B)):et=Ye(ue.matrixWorld);const ot=ue.element,Et=be.objects.get(ue);if(Et===void 0||Et.style!==et){ot.style.transform=et;const tn={style:et};be.objects.set(ue,tn)}ot.style.display=ue.visible?"":"none",ot.parentNode!==ce&&ce.appendChild(ot),ue.onAfterRender(J,Se,je)}for(let et=0,ot=ue.children.length;et<ot;et++)xe(ue.children[et],Se,je)}ce.style.transformStyle="preserve-3d",ce.style.pointerEvents="none",Me.appendChild(ce),this.getSize=function(){return{width:V,height:Z}},this.render=function(ue,Se){const je=Se.projectionMatrix.elements[5]*fe;let rt,et;be.camera.fov!==je&&(Me.style.perspective=Se.isPerspectiveCamera?je+"px":"",be.camera.fov=je),ue.autoUpdate===!0&&ue.updateMatrixWorld(),Se.parent===null&&Se.updateMatrixWorld(),Se.isOrthographicCamera&&(rt=-(Se.right+Se.left)/2,et=(Se.top+Se.bottom)/2);const ot=Se.isOrthographicCamera?"scale("+je+")translate("+We(rt)+"px,"+We(et)+"px)"+Ke(Se.matrixWorldInverse):"translateZ("+je+"px)"+Ke(Se.matrixWorldInverse),Et=ot+"translate("+le+"px,"+fe+"px)";be.camera.style!==Et&&(ce.style.transform=Et,be.camera.style=Et),xe(ue,ue,Se)},this.setSize=function(ue,Se){V=ue,Z=Se,le=V/2,fe=Z/2,Me.style.width=ue+"px",Me.style.height=Se+"px",ce.style.width=ue+"px",ce.style.height=Se+"px"}}}},80383:(g,v,b)=>{g.exports=function(){return b(69855)('(()=>{var t={508:(t,e,r)=>{const{resize:a}=r(140);t.exports={buildImageList:t=>{const e=[];let r=100/Math.min(t.width,t.height);for(;;)if(e.push(r),r*=Math.pow(2,1/3),r>=.95){r=1;break}e.push(r),e.reverse();const i=[];for(let r=0;r<e.length;r++)t.width,e[r],t.height,e[r],i.push(Object.assign(a({image:t,ratio:e[r]}),{scale:e[r]}));return i},buildTrackingImageList:t=>{const e=Math.min(t.width,t.height),r=[],i=[];r.push(256/e),r.push(128/e);for(let e=0;e<r.length;e++)i.push(Object.assign(a({image:t,ratio:r[e]}),{scale:r[e]}));return i}}},589:(t,e,r)=>{const{Cumsum:a}=r(535),i=({image:t,cx:e,cy:r,sdThresh:a,imageDataCumsum:i,imageDataSqrCumsum:s})=>{if(e-6<0||e+6>=t.width)return null;if(r-6<0||r+6>=t.height)return null;let h=i.query(e-6,r-6,e+6,r+6);h/=169;let o=s.query(e-6,r-6,e+6,r+6);return o-=2*h*i.query(e-6,r-6,e+6,r+6),o+=169*h*h,o/169<a*a?null:(o=Math.sqrt(o),o)},s=t=>{const{image:e,cx:r,cy:a,vlen:i,tx:s,ty:h,imageDataCumsum:o,imageDataSqrCumsum:l}=t,{data:u,width:n,height:m}=e;if(r-6<0||r+6>=n)return null;if(a-6<0||a+6>=m)return null;let c=o.query(r-6,a-6,r+6,a+6),f=l.query(r-6,a-6,r+6,a+6),g=0,d=(a-6)*n+(r-6),p=(h-6)*n+(s-6),w=n-13;for(let t=0;t<13;t++){for(let t=0;t<13;t++)g+=u[d]*u[p],d+=1,p+=1;d+=w,p+=w}let M=o.query(s-6,h-6,s+6,h+6);M/=169,g-=M*c;let y=f-c*c/169;return 0==y?null:(y=Math.sqrt(y),1*g/(i*y))};t.exports={extract:t=>{const{data:e,width:r,height:h,scale:o}=t,l=[r*h];for(let t=0;t<l.length;t++)l[t]=!1;const u=new Float32Array(e.length);for(let t=0;t<r;t++)u[t]=-1,u[r*(h-1)+t]=-1;for(let t=0;t<h;t++)u[t*r]=-1,u[t*r+r-1]=-1;for(let t=1;t<r-1;t++)for(let a=1;a<h-1;a++){let i=t+r*a,s=0,h=0;for(let t=-1;t<=1;t++)s+=e[i+r*t+1]-e[i+r*t-1],h+=e[i+r+t]-e[i-r+t];s/=768,h/=768,u[i]=Math.sqrt((s*s+h*h)/2)}const n=new Uint32Array(1e3);for(let t=0;t<1e3;t++)n[t]=0;const m=[-1,1,-r,r];let c=0;for(let t=1;t<r-1;t++)for(let e=1;e<h-1;e++){let a=t+r*e,i=!0;for(let t=0;t<m.length;t++)if(u[a]<=u[a+m[t]]){i=!1;break}if(i){let t=Math.floor(1e3*u[a]);t>999&&(t=999),t<0&&(t=0),n[t]+=1,c+=1,l[a]=!0}}const f=.02*r*h;let g=999,d=0;for(;g>=0&&(d+=n[g],!(d>f));)g--;for(let t=0;t<l.length;t++)l[t]&&1e3*u[t]<g&&(l[t]=!1);const p=[];for(let t=0;t<e.length;t++)p[t]=e[t]*e[t];const w=new a(e,r,h),M=new a(p,r,h),y=new Float32Array(e.length);for(let e=0;e<r;e++)for(let a=0;a<h;a++){const h=a*r+e;if(!l[h]){y[h]=1;continue}const o=i({image:t,cx:e,cy:a,sdThresh:5,imageDataCumsum:w,imageDataSqrCumsum:M});if(null===o){y[h]=1;continue}let u=-1;for(let r=-10;r<=10;r++){for(let i=-10;i<=10;i++){if(i*i+r*r<=4)continue;const h=s({image:t,cx:e+i,cy:a+r,vlen:o,tx:e,ty:a,imageDataCumsum:w,imageDataSqrCumsum:M});if(null!==h&&h>u&&(u=h,u>.95))break}if(u>.95)break}y[h]=u}return(t=>{let{image:e,featureMap:r,templateSize:a,searchSize:h,occSize:o,maxSimThresh:l,minSimThresh:u,sdThresh:n,imageDataCumsum:m,imageDataSqrCumsum:c}=t;const{data:f,width:g,height:d,scale:p}=e;o=Math.floor(Math.min(e.width,e.height)/10);const w=3*(2*a+1),M=Math.floor(g/w),y=Math.floor(d/w);let x=Math.floor(g/o)*Math.floor(d/o)+M*y;const q=[],C=new Float32Array(f.length);for(let t=0;t<C.length;t++)C[t]=r[t];let S=0;for(;S<x;){let t=l,r=-1,f=-1;for(let e=0;e<d;e++)for(let a=0;a<g;a++)C[e*g+a]<t&&(t=C[e*g+a],r=a,f=e);if(-1===r)break;const p=i({image:e,cx:r,cy:f,sdThresh:0,imageDataCumsum:m,imageDataSqrCumsum:c});if(null===p){C[f*g+r]=1;continue}if(p/(2*a+1)<n){C[f*g+r]=1;continue}let w=1,M=-1;for(let a=-h;a<=h;a++){for(let i=-h;i<=h;i++){if(i*i+a*a>h*h)continue;if(0===i&&0===a)continue;const o=s({image:e,vlen:p,cx:r+i,cy:f+a,tx:r,ty:f,imageDataCumsum:m,imageDataSqrCumsum:c});if(null!==o){if(o<w&&(w=o,w<u&&w<t))break;if(o>M&&(M=o,M>.99))break}}if(w<u&&w<t||M>.99)break}if(w<u&&w<t||M>.99)C[f*g+r]=1;else{q.push({x:r,y:f}),S+=1;for(let t=-o;t<=o;t++)for(let e=-o;e<=o;e++)f+t<0||f+t>=d||r+e<0||r+e>=g||(C[(f+t)*g+(r+e)]=1)}}return q})({image:t,featureMap:y,templateSize:6,searchSize:2,occSize:16,maxSimThresh:.9,minSimThresh:.2,sdThresh:8,imageDataCumsum:w,imageDataSqrCumsum:M})}}},535:t=>{t.exports={Cumsum:class{constructor(t,e,r){this.cumsum=[];for(let t=0;t<r;t++){this.cumsum.push([]);for(let r=0;r<e;r++)this.cumsum[t].push(0)}this.cumsum[0][0]=t[0];for(let r=1;r<e;r++)this.cumsum[0][r]=this.cumsum[0][r-1]+t[r];for(let a=1;a<r;a++)this.cumsum[a][0]=this.cumsum[a-1][0]+t[a*e];for(let a=1;a<r;a++)for(let r=1;r<e;r++)this.cumsum[a][r]=t[a*e+r]+this.cumsum[a-1][r]+this.cumsum[a][r-1]-this.cumsum[a-1][r-1]}query(t,e,r,a){let i=this.cumsum[a][r];return e>0&&(i-=this.cumsum[e-1][r]),t>0&&(i-=this.cumsum[a][t-1]),t>0&&e>0&&(i+=this.cumsum[e-1][t-1]),i}}}},140:t=>{t.exports={downsampleBilinear:({image:t})=>{const{data:e,width:r,height:a}=t,i=Math.floor(r/2),s=Math.floor(a/2),h=new Float32Array(i*s),o=[0,1,r,r+1];for(let t=0;t<s;t++)for(let a=0;a<i;a++){let s=2*t*r+2*a,l=0;for(let t=0;t<o.length;t++)l+=e[s+o[t]];l*=.25,h[t*i+a]=l}return{data:h,width:i,height:s}},upsampleBilinear:({image:t,padOneWidth:e,padOneHeight:r})=>{const{width:a,height:i,data:s}=t,h=2*t.width+(e?1:0),o=2*t.height+(r?1:0),l=new Float32Array(h*o);for(let t=0;t<h;t++){const e=.5*t-.25;let r=Math.floor(e),u=Math.ceil(e);r<0&&(r=0),u>=a&&(u=a-1);for(let n=0;n<o;n++){const o=.5*n-.25;let m=Math.floor(o),c=Math.ceil(o);m<0&&(m=0),c>=i&&(c=i-1);const f=(u-e)*(c-o)*s[m*a+r]+(u-e)*(o-m)*s[c*a+r]+(e-r)*(c-o)*s[m*a+u]+(e-r)*(o-m)*s[c*a+u];l[n*h+t]=f}}return{data:l,width:h,height:o}},resize:({image:t,ratio:e})=>{const r=Math.round(t.width*e),a=Math.round(t.height*e),i=new Uint8Array(r*a);for(let s=0;s<r;s++){let h=Math.round(1*s/e),o=Math.round(1*(s+1)/e)-1;o>=t.width&&(o=t.width-1);for(let l=0;l<a;l++){let a=Math.round(1*l/e),u=Math.round(1*(l+1)/e)-1;u>=t.height&&(u=t.height-1);let n=0,m=0;for(let e=h;e<=o;e++)for(let r=a;r<=u;r++)n+=1*t.data[r*t.width+e],m+=1;i[l*r+s]=Math.floor(n/m)}}return{data:i,width:r,height:a}}}}},e={};function r(a){if(e[a])return e[a].exports;var i=e[a]={exports:{}};return t[a](i,i.exports,r),i.exports}(()=>{const{extract:t}=r(589),{buildTrackingImageList:e}=r(508);onmessage=t=>{const{data:r}=t;if("compile"===r.type){const{targetImages:t}=r,i=50/t.length;let s=0;const h=[];for(let r=0;r<t.length;r++){const o=t[r],l=e(o),u=i/l.length,n=a(l,(t=>{s+=u,postMessage({type:"progress",percent:s})}));h.push(n)}postMessage({type:"compileDone",list:h})}};const a=(e,r)=>{const a=[];for(let i=0;i<e.length;i++){const s=e[i],h=t(s),o={data:s.data,scale:s.scale,width:s.width,height:s.height,points:h};a.push(o),r(i)}return a}})()})();',b.p+"compiler.worker.prod.js")}},71077:(g,v,b)=>{g.exports=function(){return b(69855)('(()=>{var t={331:(t,e,r)=>{"use strict";r.r(e),r.d(e,{AbstractMatrix:()=>v,CHO:()=>tt,CholeskyDecomposition:()=>tt,EVD:()=>K,EigenvalueDecomposition:()=>K,LU:()=>H,LuDecomposition:()=>H,Matrix:()=>k,MatrixColumnSelectionView:()=>T,MatrixColumnView:()=>I,MatrixFlipColumnView:()=>A,MatrixFlipRowView:()=>q,MatrixRowSelectionView:()=>P,MatrixRowView:()=>C,MatrixSelectionView:()=>V,MatrixSubView:()=>N,MatrixTransposeView:()=>j,NIPALS:()=>et,Nipals:()=>et,QR:()=>$,QrDecomposition:()=>$,SVD:()=>L,SingularValueDecomposition:()=>L,WrapperMatrix1D:()=>z,WrapperMatrix2D:()=>F,correlation:()=>J,covariance:()=>B,default:()=>k,determinant:()=>X,inverse:()=>O,linearDependencies:()=>Q,pseudoInverse:()=>W,solve:()=>U,wrap:()=>D});const s=Object.prototype.toString;function o(t){return s.call(t).endsWith("Array]")}const n=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!o(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var r=e.fromIndex,s=void 0===r?0:r,n=e.toIndex,i=void 0===n?t.length:n;if(s<0||s>=t.length||!Number.isInteger(s))throw new Error("fromIndex must be a positive integer smaller than length");if(i<=s||i>t.length||!Number.isInteger(i))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var h=t[s],l=s+1;l<i;l++)t[l]>h&&(h=t[l]);return h},i=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!o(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var r=e.fromIndex,s=void 0===r?0:r,n=e.toIndex,i=void 0===n?t.length:n;if(s<0||s>=t.length||!Number.isInteger(s))throw new Error("fromIndex must be a positive integer smaller than length");if(i<=s||i>t.length||!Number.isInteger(i))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var h=t[s],l=s+1;l<i;l++)t[l]<h&&(h=t[l]);return h},h=function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!o(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");if(void 0!==r.output){if(!o(r.output))throw new TypeError("output option must be an array if specified");e=r.output}else e=new Array(t.length);var s=i(t),h=n(t);if(s===h)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var l=r.min,u=void 0===l?r.autoMinMax?s:0:l,a=r.max,c=void 0===a?r.autoMinMax?h:1:a;if(u>=c)throw new RangeError("min option must be smaller than max option");for(var f=(c-u)/(h-s),m=0;m<t.length;m++)e[m]=(t[m]-s)*f+u;return e},l=" ".repeat(2),u=" ".repeat(4);function a(t,e={}){const{maxRows:r=15,maxColumns:s=10,maxNumSize:o=8}=e;return`${t.constructor.name} {\\n${l}[\\n${u}${function(t,e,r,s){const{rows:o,columns:n}=t,i=Math.min(o,e),h=Math.min(n,r),l=[];for(let e=0;e<i;e++){let r=[];for(let o=0;o<h;o++)r.push(c(t.get(e,o),s));l.push(`${r.join(" ")}`)}return h!==n&&(l[l.length-1]+=` ... ${n-r} more columns`),i!==o&&l.push(`... ${o-e} more rows`),l.join(`\\n${u}`)}(t,r,s,o)}\\n${l}]\\n${l}rows: ${t.rows}\\n${l}columns: ${t.columns}\\n}`}function c(t,e){const r=String(t);if(r.length<=e)return r.padEnd(e," ");const s=t.toPrecision(e-2);if(s.length<=e)return s;const o=t.toExponential(e-2),n=o.indexOf("e"),i=o.slice(n);return o.slice(0,e-i.length)+i}function f(t,e,r){let s=r?t.rows:t.rows-1;if(e<0||e>s)throw new RangeError("Row index out of range")}function m(t,e,r){let s=r?t.columns:t.columns-1;if(e<0||e>s)throw new RangeError("Column index out of range")}function g(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function w(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function p(t,e,r){return{row:d(t,e),column:y(t,r)}}function d(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for row indices");if(e.some((e=>e<0||e>=t.rows)))throw new RangeError("row indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function y(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for column indices");if(e.some((e=>e<0||e>=t.columns)))throw new RangeError("column indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function M(t,e,r,s,o){if(5!==arguments.length)throw new RangeError("expected 4 arguments");if(x("startRow",e),x("endRow",r),x("startColumn",s),x("endColumn",o),e>r||s>o||e<0||e>=t.rows||r<0||r>=t.rows||s<0||s>=t.columns||o<0||o>=t.columns)throw new RangeError("Submatrix indices are out of range")}function b(t,e=0){let r=[];for(let s=0;s<t;s++)r.push(e);return r}function x(t,e){if("number"!=typeof e)throw new TypeError(`${t} must be a number`)}function E(t){if(t.isEmpty())throw new Error("Empty matrix has no elements to index")}class v{static from1DArray(t,e,r){if(t*e!==r.length)throw new RangeError("data length does not match given dimensions");let s=new k(t,e);for(let o=0;o<t;o++)for(let t=0;t<e;t++)s.set(o,t,r[o*e+t]);return s}static rowVector(t){let e=new k(1,t.length);for(let r=0;r<t.length;r++)e.set(0,r,t[r]);return e}static columnVector(t){let e=new k(t.length,1);for(let r=0;r<t.length;r++)e.set(r,0,t[r]);return e}static zeros(t,e){return new k(t,e)}static ones(t,e){return new k(t,e).fill(1)}static rand(t,e,r={}){if("object"!=typeof r)throw new TypeError("options must be an object");const{random:s=Math.random}=r;let o=new k(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++)o.set(r,t,s());return o}static randInt(t,e,r={}){if("object"!=typeof r)throw new TypeError("options must be an object");const{min:s=0,max:o=1e3,random:n=Math.random}=r;if(!Number.isInteger(s))throw new TypeError("min must be an integer");if(!Number.isInteger(o))throw new TypeError("max must be an integer");if(s>=o)throw new RangeError("min must be smaller than max");let i=o-s,h=new k(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++){let e=s+Math.round(n()*i);h.set(r,t,e)}return h}static eye(t,e,r){void 0===e&&(e=t),void 0===r&&(r=1);let s=Math.min(t,e),o=this.zeros(t,e);for(let t=0;t<s;t++)o.set(t,t,r);return o}static diag(t,e,r){let s=t.length;void 0===e&&(e=s),void 0===r&&(r=e);let o=Math.min(s,e,r),n=this.zeros(e,r);for(let e=0;e<o;e++)n.set(e,e,t[e]);return n}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,s=t.columns,o=new k(r,s);for(let n=0;n<r;n++)for(let r=0;r<s;r++)o.set(n,r,Math.min(t.get(n,r),e.get(n,r)));return o}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,s=t.columns,o=new this(r,s);for(let n=0;n<r;n++)for(let r=0;r<s;r++)o.set(n,r,Math.max(t.get(n,r),e.get(n,r)));return o}static checkMatrix(t){return v.isMatrix(t)?t:new k(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.call(this,e,r);return this}to1DArray(){let t=[];for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.push(this.get(e,r));return t}to2DArray(){let t=[];for(let e=0;e<this.rows;e++){t.push([]);for(let r=0;r<this.columns;r++)t[e].push(this.get(e,r))}return t}toJSON(){return this.to2DArray()}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isEmpty(){return 0===this.rows||0===this.columns}isSymmetric(){if(this.isSquare()){for(let t=0;t<this.rows;t++)for(let e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}isEchelonForm(){let t=0,e=0,r=-1,s=!0,o=!1;for(;t<this.rows&&s;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(o=!0,r=e):(s=!1,o=!0);t++}return s}isReducedEchelonForm(){let t=0,e=0,r=-1,s=!0,o=!1;for(;t<this.rows&&s;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(o=!0,r=e):(s=!1,o=!0);for(let r=e+1;r<this.rows;r++)0!==this.get(t,r)&&(s=!1);t++}return s}echelonForm(){let t=this.clone(),e=0,r=0;for(;e<t.rows&&r<t.columns;){let s=e;for(let o=e;o<t.rows;o++)t.get(o,r)>t.get(s,r)&&(s=o);if(0===t.get(s,r))r++;else{t.swapRows(e,s);let o=t.get(e,r);for(let s=r;s<t.columns;s++)t.set(e,s,t.get(e,s)/o);for(let s=e+1;s<t.rows;s++){let o=t.get(s,r)/t.get(e,r);t.set(s,r,0);for(let n=r+1;n<t.columns;n++)t.set(s,n,t.get(s,n)-t.get(e,n)*o)}e++,r++}}return t}reducedEchelonForm(){let t=this.echelonForm(),e=t.columns,r=t.rows,s=r-1;for(;s>=0;)if(0===t.maxRow(s))s--;else{let o=0,n=!1;for(;o<r&&!1===n;)1===t.get(s,o)?n=!0:o++;for(let r=0;r<s;r++){let n=t.get(r,o);for(let i=o;i<e;i++){let e=t.get(r,i)-n*t.get(s,i);t.set(r,i,e)}}s--}return t}set(){throw new Error("set method is unimplemented")}get(){throw new Error("get method is unimplemented")}repeat(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{rows:e=1,columns:r=1}=t;if(!Number.isInteger(e)||e<=0)throw new TypeError("rows must be a positive integer");if(!Number.isInteger(r)||r<=0)throw new TypeError("columns must be a positive integer");let s=new k(this.rows*e,this.columns*r);for(let t=0;t<e;t++)for(let e=0;e<r;e++)s.setSubMatrix(this,this.rows*t,this.columns*e);return s}fill(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,t);return this}neg(){return this.mulS(-1)}getRow(t){f(this,t);let e=[];for(let r=0;r<this.columns;r++)e.push(this.get(t,r));return e}getRowVector(t){return k.rowVector(this.getRow(t))}setRow(t,e){f(this,t),e=g(this,e);for(let r=0;r<this.columns;r++)this.set(t,r,e[r]);return this}swapRows(t,e){f(this,t),f(this,e);for(let r=0;r<this.columns;r++){let s=this.get(t,r);this.set(t,r,this.get(e,r)),this.set(e,r,s)}return this}getColumn(t){m(this,t);let e=[];for(let r=0;r<this.rows;r++)e.push(this.get(r,t));return e}getColumnVector(t){return k.columnVector(this.getColumn(t))}setColumn(t,e){m(this,t),e=w(this,e);for(let r=0;r<this.rows;r++)this.set(r,t,e[r]);return this}swapColumns(t,e){m(this,t),m(this,e);for(let r=0;r<this.rows;r++){let s=this.get(r,t);this.set(r,t,this.get(r,e)),this.set(r,e,s)}return this}addRowVector(t){t=g(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[r]);return this}subRowVector(t){t=g(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[r]);return this}mulRowVector(t){t=g(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[r]);return this}divRowVector(t){t=g(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[r]);return this}addColumnVector(t){t=w(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[e]);return this}subColumnVector(t){t=w(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[e]);return this}mulColumnVector(t){t=w(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[e]);return this}divColumnVector(t){t=w(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[e]);return this}mulRow(t,e){f(this,t);for(let r=0;r<this.columns;r++)this.set(t,r,this.get(t,r)*e);return this}mulColumn(t,e){m(this,t);for(let r=0;r<this.rows;r++)this.set(r,t,this.get(r,t)*e);return this}max(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)>t&&(t=this.get(e,r));return t}maxIndex(){E(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let s=0;s<this.columns;s++)this.get(r,s)>t&&(t=this.get(r,s),e[0]=r,e[1]=s);return e}min(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)<t&&(t=this.get(e,r));return t}minIndex(){E(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let s=0;s<this.columns;s++)this.get(r,s)<t&&(t=this.get(r,s),e[0]=r,e[1]=s);return e}maxRow(t){if(f(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r));return e}maxRowIndex(t){f(this,t),E(this);let e=this.get(t,0),r=[t,0];for(let s=1;s<this.columns;s++)this.get(t,s)>e&&(e=this.get(t,s),r[1]=s);return r}minRow(t){if(f(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r));return e}minRowIndex(t){f(this,t),E(this);let e=this.get(t,0),r=[t,0];for(let s=1;s<this.columns;s++)this.get(t,s)<e&&(e=this.get(t,s),r[1]=s);return r}maxColumn(t){if(m(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t));return e}maxColumnIndex(t){m(this,t),E(this);let e=this.get(0,t),r=[0,t];for(let s=1;s<this.rows;s++)this.get(s,t)>e&&(e=this.get(s,t),r[0]=s);return r}minColumn(t){if(m(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t));return e}minColumnIndex(t){m(this,t),E(this);let e=this.get(0,t),r=[0,t];for(let s=1;s<this.rows;s++)this.get(s,t)<e&&(e=this.get(s,t),r[0]=s);return r}diag(){let t=Math.min(this.rows,this.columns),e=[];for(let r=0;r<t;r++)e.push(this.get(r,r));return e}norm(t="frobenius"){let e=0;if("max"===t)return this.max();if("frobenius"===t){for(let t=0;t<this.rows;t++)for(let r=0;r<this.columns;r++)e+=this.get(t,r)*this.get(t,r);return Math.sqrt(e)}throw new RangeError(`unknown norm type: ${t}`)}cumulativeSum(){let t=0;for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t+=this.get(e,r),this.set(e,r,t);return this}dot(t){v.isMatrix(t)&&(t=t.to1DArray());let e=this.to1DArray();if(e.length!==t.length)throw new RangeError("vectors do not have the same size");let r=0;for(let s=0;s<e.length;s++)r+=e[s]*t[s];return r}mmul(t){t=k.checkMatrix(t);let e=this.rows,r=this.columns,s=t.columns,o=new k(e,s),n=new Float64Array(r);for(let i=0;i<s;i++){for(let e=0;e<r;e++)n[e]=t.get(e,i);for(let t=0;t<e;t++){let e=0;for(let s=0;s<r;s++)e+=this.get(t,s)*n[s];o.set(t,i,e)}}return o}strassen2x2(t){t=k.checkMatrix(t);let e=new k(2,2);const r=this.get(0,0),s=t.get(0,0),o=this.get(0,1),n=t.get(0,1),i=this.get(1,0),h=t.get(1,0),l=this.get(1,1),u=t.get(1,1),a=(r+l)*(s+u),c=(i+l)*s,f=r*(n-u),m=l*(h-s),g=(r+o)*u,w=a+m-g+(o-l)*(h+u),p=f+g,d=c+m,y=a-c+f+(i-r)*(s+n);return e.set(0,0,w),e.set(0,1,p),e.set(1,0,d),e.set(1,1,y),e}strassen3x3(t){t=k.checkMatrix(t);let e=new k(3,3);const r=this.get(0,0),s=this.get(0,1),o=this.get(0,2),n=this.get(1,0),i=this.get(1,1),h=this.get(1,2),l=this.get(2,0),u=this.get(2,1),a=this.get(2,2),c=t.get(0,0),f=t.get(0,1),m=t.get(0,2),g=t.get(1,0),w=t.get(1,1),p=t.get(1,2),d=t.get(2,0),y=t.get(2,1),M=t.get(2,2),b=(r-n)*(-f+w),x=(-r+n+i)*(c-f+w),E=(n+i)*(-c+f),v=r*c,S=(-r+l+u)*(c-m+p),R=(-r+l)*(m-p),I=(l+u)*(-c+m),T=(-o+u+a)*(w+d-y),A=(o-a)*(w-y),q=o*d,C=(u+a)*(-d+y),P=(-o+i+h)*(p+d-M),V=(o-h)*(p-M),N=(i+h)*(-d+M),j=v+q+s*g,z=(r+s+o-n-i-u-a)*w+x+E+v+T+q+C,F=v+S+I+(r+s+o-i-h-l-u)*p+q+P+N,D=b+i*(-c+f+g-w-p-d+M)+x+v+q+P+V,H=b+x+E+v+h*y,_=q+P+V+N+n*m,$=v+S+R+u*(-c+m+g-w-p-d+y)+T+A+q,L=T+A+q+C+l*f,O=v+S+R+I+a*M;return e.set(0,0,j),e.set(0,1,z),e.set(0,2,F),e.set(1,0,D),e.set(1,1,H),e.set(1,2,_),e.set(2,0,$),e.set(2,1,L),e.set(2,2,O),e}mmulStrassen(t){t=k.checkMatrix(t);let e=this.clone(),r=e.rows,s=e.columns,o=t.rows,n=t.columns;function i(t,e,r){let s=t.rows,o=t.columns;if(s===e&&o===r)return t;{let s=v.zeros(e,r);return s=s.setSubMatrix(t,0,0),s}}s!==o&&console.warn(`Multiplying ${r} x ${s} and ${o} x ${n} matrix: dimensions do not match.`);let h=Math.max(r,o),l=Math.max(s,n);return e=i(e,h,l),function t(e,r,s,o){if(s<=512||o<=512)return e.mmul(r);s%2==1&&o%2==1?(e=i(e,s+1,o+1),r=i(r,s+1,o+1)):s%2==1?(e=i(e,s+1,o),r=i(r,s+1,o)):o%2==1&&(e=i(e,s,o+1),r=i(r,s,o+1));let n=parseInt(e.rows/2,10),h=parseInt(e.columns/2,10),l=e.subMatrix(0,n-1,0,h-1),u=r.subMatrix(0,n-1,0,h-1),a=e.subMatrix(0,n-1,h,e.columns-1),c=r.subMatrix(0,n-1,h,r.columns-1),f=e.subMatrix(n,e.rows-1,0,h-1),m=r.subMatrix(n,r.rows-1,0,h-1),g=e.subMatrix(n,e.rows-1,h,e.columns-1),w=r.subMatrix(n,r.rows-1,h,r.columns-1),p=t(v.add(l,g),v.add(u,w),n,h),d=t(v.add(f,g),u,n,h),y=t(l,v.sub(c,w),n,h),M=t(g,v.sub(m,u),n,h),b=t(v.add(l,a),w,n,h),x=t(v.sub(f,l),v.add(u,c),n,h),E=t(v.sub(a,g),v.add(m,w),n,h),S=v.add(p,M);S.sub(b),S.add(E);let k=v.add(y,b),R=v.add(d,M),I=v.sub(p,d);I.add(y),I.add(x);let T=v.zeros(2*S.rows,2*S.columns);return T=T.setSubMatrix(S,0,0),T=T.setSubMatrix(k,S.rows,0),T=T.setSubMatrix(R,0,S.columns),T=T.setSubMatrix(I,S.rows,S.columns),T.subMatrix(0,s-1,0,o-1)}(e,t=i(t,h,l),h,l)}scaleRows(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(r))throw new TypeError("max must be a number");if(e>=r)throw new RangeError("min must be smaller than max");let s=new k(this.rows,this.columns);for(let t=0;t<this.rows;t++){const o=this.getRow(t);o.length>0&&h(o,{min:e,max:r,output:o}),s.setRow(t,o)}return s}scaleColumns(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(r))throw new TypeError("max must be a number");if(e>=r)throw new RangeError("min must be smaller than max");let s=new k(this.rows,this.columns);for(let t=0;t<this.columns;t++){const o=this.getColumn(t);o.length&&h(o,{min:e,max:r,output:o}),s.setColumn(t,o)}return s}flipRows(){const t=Math.ceil(this.columns/2);for(let e=0;e<this.rows;e++)for(let r=0;r<t;r++){let t=this.get(e,r),s=this.get(e,this.columns-1-r);this.set(e,r,s),this.set(e,this.columns-1-r,t)}return this}flipColumns(){const t=Math.ceil(this.rows/2);for(let e=0;e<this.columns;e++)for(let r=0;r<t;r++){let t=this.get(r,e),s=this.get(this.rows-1-r,e);this.set(r,e,s),this.set(this.rows-1-r,e,t)}return this}kroneckerProduct(t){t=k.checkMatrix(t);let e=this.rows,r=this.columns,s=t.rows,o=t.columns,n=new k(e*s,r*o);for(let i=0;i<e;i++)for(let e=0;e<r;e++)for(let r=0;r<s;r++)for(let h=0;h<o;h++)n.set(s*i+r,o*e+h,this.get(i,e)*t.get(r,h));return n}transpose(){let t=new k(this.columns,this.rows);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(r,e,this.get(e,r));return t}sortRows(t=S){for(let e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t=S){for(let e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,r,s){M(this,t,e,r,s);let o=new k(e-t+1,s-r+1);for(let n=t;n<=e;n++)for(let e=r;e<=s;e++)o.set(n-t,e-r,this.get(n,e));return o}subMatrixRow(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.columns-1),e>r||e<0||e>=this.columns||r<0||r>=this.columns)throw new RangeError("Argument out of range");let s=new k(t.length,r-e+1);for(let o=0;o<t.length;o++)for(let n=e;n<=r;n++){if(t[o]<0||t[o]>=this.rows)throw new RangeError(`Row index out of range: ${t[o]}`);s.set(o,n-e,this.get(t[o],n))}return s}subMatrixColumn(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.rows-1),e>r||e<0||e>=this.rows||r<0||r>=this.rows)throw new RangeError("Argument out of range");let s=new k(r-e+1,t.length);for(let o=0;o<t.length;o++)for(let n=e;n<=r;n++){if(t[o]<0||t[o]>=this.columns)throw new RangeError(`Column index out of range: ${t[o]}`);s.set(n-e,o,this.get(n,t[o]))}return s}setSubMatrix(t,e,r){if((t=k.checkMatrix(t)).isEmpty())return this;M(this,e,e+t.rows-1,r,r+t.columns-1);for(let s=0;s<t.rows;s++)for(let o=0;o<t.columns;o++)this.set(e+s,r+o,t.get(s,o));return this}selection(t,e){let r=p(this,t,e),s=new k(t.length,e.length);for(let t=0;t<r.row.length;t++){let e=r.row[t];for(let o=0;o<r.column.length;o++){let n=r.column[o];s.set(t,o,this.get(e,n))}}return s}trace(){let t=Math.min(this.rows,this.columns),e=0;for(let r=0;r<t;r++)e+=this.get(r,r);return e}clone(){let t=new k(this.rows,this.columns);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(e,r,this.get(e,r));return t}sum(t){switch(t){case"row":return function(t){let e=b(t.rows);for(let r=0;r<t.rows;++r)for(let s=0;s<t.columns;++s)e[r]+=t.get(r,s);return e}(this);case"column":return function(t){let e=b(t.columns);for(let r=0;r<t.rows;++r)for(let s=0;s<t.columns;++s)e[s]+=t.get(r,s);return e}(this);case void 0:return function(t){let e=0;for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)e+=t.get(r,s);return e}(this);default:throw new Error(`invalid option: ${t}`)}}product(t){switch(t){case"row":return function(t){let e=b(t.rows,1);for(let r=0;r<t.rows;++r)for(let s=0;s<t.columns;++s)e[r]*=t.get(r,s);return e}(this);case"column":return function(t){let e=b(t.columns,1);for(let r=0;r<t.rows;++r)for(let s=0;s<t.columns;++s)e[s]*=t.get(r,s);return e}(this);case void 0:return function(t){let e=1;for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)e*=t.get(r,s);return e}(this);default:throw new Error(`invalid option: ${t}`)}}mean(t){const e=this.sum(t);switch(t){case"row":for(let t=0;t<this.rows;t++)e[t]/=this.columns;return e;case"column":for(let t=0;t<this.columns;t++)e[t]/=this.rows;return e;case void 0:return e/this.size;default:throw new Error(`invalid option: ${t}`)}}variance(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{unbiased:r=!0,mean:s=this.mean(t)}=e;if("boolean"!=typeof r)throw new TypeError("unbiased must be a boolean");switch(t){case"row":if(!Array.isArray(s))throw new TypeError("mean must be an array");return function(t,e,r){const s=t.rows,o=t.columns,n=[];for(let i=0;i<s;i++){let s=0,h=0,l=0;for(let e=0;e<o;e++)l=t.get(i,e)-r[i],s+=l,h+=l*l;e?n.push((h-s*s/o)/(o-1)):n.push((h-s*s/o)/o)}return n}(this,r,s);case"column":if(!Array.isArray(s))throw new TypeError("mean must be an array");return function(t,e,r){const s=t.rows,o=t.columns,n=[];for(let i=0;i<o;i++){let o=0,h=0,l=0;for(let e=0;e<s;e++)l=t.get(e,i)-r[i],o+=l,h+=l*l;e?n.push((h-o*o/s)/(s-1)):n.push((h-o*o/s)/s)}return n}(this,r,s);case void 0:if("number"!=typeof s)throw new TypeError("mean must be a number");return function(t,e,r){const s=t.rows,o=t.columns,n=s*o;let i=0,h=0,l=0;for(let e=0;e<s;e++)for(let s=0;s<o;s++)l=t.get(e,s)-r,i+=l,h+=l*l;return e?(h-i*i/n)/(n-1):(h-i*i/n)/n}(this,r,s);default:throw new Error(`invalid option: ${t}`)}}standardDeviation(t,e){"object"==typeof t&&(e=t,t=void 0);const r=this.variance(t,e);if(void 0===t)return Math.sqrt(r);for(let t=0;t<r.length;t++)r[t]=Math.sqrt(r[t]);return r}center(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{center:r=this.mean(t)}=e;switch(t){case"row":if(!Array.isArray(r))throw new TypeError("center must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)-e[r])}(this,r),this;case"column":if(!Array.isArray(r))throw new TypeError("center must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)-e[s])}(this,r),this;case void 0:if("number"!=typeof r)throw new TypeError("center must be a number");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)-e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}scale(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");let r=e.scale;switch(t){case"row":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.rows;r++){let s=0;for(let e=0;e<t.columns;e++)s+=Math.pow(t.get(r,e),2)/(t.columns-1);e.push(Math.sqrt(s))}return e}(this);else if(!Array.isArray(r))throw new TypeError("scale must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)/e[r])}(this,r),this;case"column":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.columns;r++){let s=0;for(let e=0;e<t.rows;e++)s+=Math.pow(t.get(e,r),2)/(t.rows-1);e.push(Math.sqrt(s))}return e}(this);else if(!Array.isArray(r))throw new TypeError("scale must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)/e[s])}(this,r),this;case void 0:if(void 0===r)r=function(t){const e=t.size-1;let r=0;for(let s=0;s<t.columns;s++)for(let o=0;o<t.rows;o++)r+=Math.pow(t.get(o,s),2)/e;return Math.sqrt(r)}(this);else if("number"!=typeof r)throw new TypeError("scale must be a number");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)/e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}toString(t){return a(this,t)}}function S(t,e){return t-e}v.prototype.klass="Matrix","undefined"!=typeof Symbol&&(v.prototype[Symbol.for("nodejs.util.inspect.custom")]=function(){return a(this)}),v.random=v.rand,v.randomInt=v.randInt,v.diagonal=v.diag,v.prototype.diagonal=v.prototype.diag,v.identity=v.eye,v.prototype.negate=v.prototype.neg,v.prototype.tensorProduct=v.prototype.kroneckerProduct;class k extends v{constructor(t,e){if(super(),k.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>=0){if(this.data=[],!(Number.isInteger(e)&&e>=0))throw new TypeError("nColumns must be a positive integer");for(let r=0;r<t;r++)this.data.push(new Float64Array(e))}else{if(!Array.isArray(t))throw new TypeError("First argument must be a positive number or an array");{const r=t;if("number"!=typeof(e=(t=r.length)?r[0].length:0))throw new TypeError("Data must be a 2D array with at least one element");this.data=[];for(let s=0;s<t;s++){if(r[s].length!==e)throw new RangeError("Inconsistent array dimensions");this.data.push(Float64Array.from(r[s]))}}}this.rows=t,this.columns=e}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}removeRow(t){return f(this,t),this.data.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),f(this,t,!0),e=Float64Array.from(g(this,e)),this.data.splice(t,0,e),this.rows+=1,this}removeColumn(t){m(this,t);for(let e=0;e<this.rows;e++){const r=new Float64Array(this.columns-1);for(let s=0;s<t;s++)r[s]=this.data[e][s];for(let s=t+1;s<this.columns;s++)r[s-1]=this.data[e][s];this.data[e]=r}return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),m(this,t,!0),e=w(this,e);for(let r=0;r<this.rows;r++){const s=new Float64Array(this.columns+1);let o=0;for(;o<t;o++)s[o]=this.data[r][o];for(s[o++]=e[r];o<this.columns+1;o++)s[o]=this.data[r][o-1];this.data[r]=s}return this.columns+=1,this}}!function(t,e){t.prototype.add=function(t){return"number"==typeof t?this.addS(t):this.addM(t)},t.prototype.addS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t);return this},t.prototype.addM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t.get(e,r));return this},t.add=function(t,r){return new e(t).add(r)},t.prototype.sub=function(t){return"number"==typeof t?this.subS(t):this.subM(t)},t.prototype.subS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t);return this},t.prototype.subM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t.get(e,r));return this},t.sub=function(t,r){return new e(t).sub(r)},t.prototype.subtract=t.prototype.sub,t.prototype.subtractS=t.prototype.subS,t.prototype.subtractM=t.prototype.subM,t.subtract=t.sub,t.prototype.mul=function(t){return"number"==typeof t?this.mulS(t):this.mulM(t)},t.prototype.mulS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t);return this},t.prototype.mulM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t.get(e,r));return this},t.mul=function(t,r){return new e(t).mul(r)},t.prototype.multiply=t.prototype.mul,t.prototype.multiplyS=t.prototype.mulS,t.prototype.multiplyM=t.prototype.mulM,t.multiply=t.mul,t.prototype.div=function(t){return"number"==typeof t?this.divS(t):this.divM(t)},t.prototype.divS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t);return this},t.prototype.divM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t.get(e,r));return this},t.div=function(t,r){return new e(t).div(r)},t.prototype.divide=t.prototype.div,t.prototype.divideS=t.prototype.divS,t.prototype.divideM=t.prototype.divM,t.divide=t.div,t.prototype.mod=function(t){return"number"==typeof t?this.modS(t):this.modM(t)},t.prototype.modS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t);return this},t.prototype.modM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t.get(e,r));return this},t.mod=function(t,r){return new e(t).mod(r)},t.prototype.modulus=t.prototype.mod,t.prototype.modulusS=t.prototype.modS,t.prototype.modulusM=t.prototype.modM,t.modulus=t.mod,t.prototype.and=function(t){return"number"==typeof t?this.andS(t):this.andM(t)},t.prototype.andS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t);return this},t.prototype.andM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t.get(e,r));return this},t.and=function(t,r){return new e(t).and(r)},t.prototype.or=function(t){return"number"==typeof t?this.orS(t):this.orM(t)},t.prototype.orS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t);return this},t.prototype.orM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t.get(e,r));return this},t.or=function(t,r){return new e(t).or(r)},t.prototype.xor=function(t){return"number"==typeof t?this.xorS(t):this.xorM(t)},t.prototype.xorS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t);return this},t.prototype.xorM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t.get(e,r));return this},t.xor=function(t,r){return new e(t).xor(r)},t.prototype.leftShift=function(t){return"number"==typeof t?this.leftShiftS(t):this.leftShiftM(t)},t.prototype.leftShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t);return this},t.prototype.leftShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t.get(e,r));return this},t.leftShift=function(t,r){return new e(t).leftShift(r)},t.prototype.signPropagatingRightShift=function(t){return"number"==typeof t?this.signPropagatingRightShiftS(t):this.signPropagatingRightShiftM(t)},t.prototype.signPropagatingRightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t);return this},t.prototype.signPropagatingRightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t.get(e,r));return this},t.signPropagatingRightShift=function(t,r){return new e(t).signPropagatingRightShift(r)},t.prototype.rightShift=function(t){return"number"==typeof t?this.rightShiftS(t):this.rightShiftM(t)},t.prototype.rightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t);return this},t.prototype.rightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t.get(e,r));return this},t.rightShift=function(t,r){return new e(t).rightShift(r)},t.prototype.zeroFillRightShift=t.prototype.rightShift,t.prototype.zeroFillRightShiftS=t.prototype.rightShiftS,t.prototype.zeroFillRightShiftM=t.prototype.rightShiftM,t.zeroFillRightShift=t.rightShift,t.prototype.not=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,~this.get(t,e));return this},t.not=function(t){return new e(t).not()},t.prototype.abs=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.abs(this.get(t,e)));return this},t.abs=function(t){return new e(t).abs()},t.prototype.acos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acos(this.get(t,e)));return this},t.acos=function(t){return new e(t).acos()},t.prototype.acosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acosh(this.get(t,e)));return this},t.acosh=function(t){return new e(t).acosh()},t.prototype.asin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asin(this.get(t,e)));return this},t.asin=function(t){return new e(t).asin()},t.prototype.asinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asinh(this.get(t,e)));return this},t.asinh=function(t){return new e(t).asinh()},t.prototype.atan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atan(this.get(t,e)));return this},t.atan=function(t){return new e(t).atan()},t.prototype.atanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atanh(this.get(t,e)));return this},t.atanh=function(t){return new e(t).atanh()},t.prototype.cbrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cbrt(this.get(t,e)));return this},t.cbrt=function(t){return new e(t).cbrt()},t.prototype.ceil=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.ceil(this.get(t,e)));return this},t.ceil=function(t){return new e(t).ceil()},t.prototype.clz32=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.clz32(this.get(t,e)));return this},t.clz32=function(t){return new e(t).clz32()},t.prototype.cos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cos(this.get(t,e)));return this},t.cos=function(t){return new e(t).cos()},t.prototype.cosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cosh(this.get(t,e)));return this},t.cosh=function(t){return new e(t).cosh()},t.prototype.exp=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.exp(this.get(t,e)));return this},t.exp=function(t){return new e(t).exp()},t.prototype.expm1=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.expm1(this.get(t,e)));return this},t.expm1=function(t){return new e(t).expm1()},t.prototype.floor=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.floor(this.get(t,e)));return this},t.floor=function(t){return new e(t).floor()},t.prototype.fround=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.fround(this.get(t,e)));return this},t.fround=function(t){return new e(t).fround()},t.prototype.log=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log(this.get(t,e)));return this},t.log=function(t){return new e(t).log()},t.prototype.log1p=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log1p(this.get(t,e)));return this},t.log1p=function(t){return new e(t).log1p()},t.prototype.log10=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log10(this.get(t,e)));return this},t.log10=function(t){return new e(t).log10()},t.prototype.log2=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log2(this.get(t,e)));return this},t.log2=function(t){return new e(t).log2()},t.prototype.round=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.round(this.get(t,e)));return this},t.round=function(t){return new e(t).round()},t.prototype.sign=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sign(this.get(t,e)));return this},t.sign=function(t){return new e(t).sign()},t.prototype.sin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sin(this.get(t,e)));return this},t.sin=function(t){return new e(t).sin()},t.prototype.sinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sinh(this.get(t,e)));return this},t.sinh=function(t){return new e(t).sinh()},t.prototype.sqrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sqrt(this.get(t,e)));return this},t.sqrt=function(t){return new e(t).sqrt()},t.prototype.tan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tan(this.get(t,e)));return this},t.tan=function(t){return new e(t).tan()},t.prototype.tanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tanh(this.get(t,e)));return this},t.tanh=function(t){return new e(t).tanh()},t.prototype.trunc=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.trunc(this.get(t,e)));return this},t.trunc=function(t){return new e(t).trunc()},t.pow=function(t,r){return new e(t).pow(r)},t.prototype.pow=function(t){return"number"==typeof t?this.powS(t):this.powM(t)},t.prototype.powS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t));return this},t.prototype.powM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t.get(e,r)));return this}}(v,k);class R extends v{constructor(t,e,r){super(),this.matrix=t,this.rows=e,this.columns=r}}class I extends R{constructor(t,e){m(t,e),super(t,t.rows,1),this.column=e}set(t,e,r){return this.matrix.set(t,this.column,r),this}get(t){return this.matrix.get(t,this.column)}}class T extends R{constructor(t,e){e=y(t,e),super(t,t.rows,e.length),this.columnIndices=e}set(t,e,r){return this.matrix.set(t,this.columnIndices[e],r),this}get(t,e){return this.matrix.get(t,this.columnIndices[e])}}class A extends R{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(t,this.columns-e-1,r),this}get(t,e){return this.matrix.get(t,this.columns-e-1)}}class q extends R{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(this.rows-t-1,e,r),this}get(t,e){return this.matrix.get(this.rows-t-1,e)}}class C extends R{constructor(t,e){f(t,e),super(t,1,t.columns),this.row=e}set(t,e,r){return this.matrix.set(this.row,e,r),this}get(t,e){return this.matrix.get(this.row,e)}}class P extends R{constructor(t,e){super(t,(e=d(t,e)).length,t.columns),this.rowIndices=e}set(t,e,r){return this.matrix.set(this.rowIndices[t],e,r),this}get(t,e){return this.matrix.get(this.rowIndices[t],e)}}class V extends R{constructor(t,e,r){let s=p(t,e,r);super(t,s.row.length,s.column.length),this.rowIndices=s.row,this.columnIndices=s.column}set(t,e,r){return this.matrix.set(this.rowIndices[t],this.columnIndices[e],r),this}get(t,e){return this.matrix.get(this.rowIndices[t],this.columnIndices[e])}}class N extends R{constructor(t,e,r,s,o){M(t,e,r,s,o),super(t,r-e+1,o-s+1),this.startRow=e,this.startColumn=s}set(t,e,r){return this.matrix.set(this.startRow+t,this.startColumn+e,r),this}get(t,e){return this.matrix.get(this.startRow+t,this.startColumn+e)}}class j extends R{constructor(t){super(t,t.columns,t.rows)}set(t,e,r){return this.matrix.set(e,t,r),this}get(t,e){return this.matrix.get(e,t)}}class z extends v{constructor(t,e={}){const{rows:r=1}=e;if(t.length%r!=0)throw new Error("the data length is not divisible by the number of rows");super(),this.rows=r,this.columns=t.length/r,this.data=t}set(t,e,r){let s=this._calculateIndex(t,e);return this.data[s]=r,this}get(t,e){let r=this._calculateIndex(t,e);return this.data[r]}_calculateIndex(t,e){return t*this.columns+e}}class F extends v{constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}}function D(t,e){if(Array.isArray(t))return t[0]&&Array.isArray(t[0])?new F(t):new z(t,e);throw new Error("the argument is not an array")}class H{constructor(t){let e,r,s,o,n,i,h,l,u,a=(t=F.checkMatrix(t)).clone(),c=a.rows,f=a.columns,m=new Float64Array(c),g=1;for(e=0;e<c;e++)m[e]=e;for(l=new Float64Array(c),r=0;r<f;r++){for(e=0;e<c;e++)l[e]=a.get(e,r);for(e=0;e<c;e++){for(u=Math.min(e,r),n=0,s=0;s<u;s++)n+=a.get(e,s)*l[s];l[e]-=n,a.set(e,r,l[e])}for(o=r,e=r+1;e<c;e++)Math.abs(l[e])>Math.abs(l[o])&&(o=e);if(o!==r){for(s=0;s<f;s++)i=a.get(o,s),a.set(o,s,a.get(r,s)),a.set(r,s,i);h=m[o],m[o]=m[r],m[r]=h,g=-g}if(r<c&&0!==a.get(r,r))for(e=r+1;e<c;e++)a.set(e,r,a.get(e,r)/a.get(r,r))}this.LU=a,this.pivotVector=m,this.pivotSign=g}isSingular(){let t=this.LU,e=t.columns;for(let r=0;r<e;r++)if(0===t.get(r,r))return!0;return!1}solve(t){t=k.checkMatrix(t);let e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");let r,s,o,n=t.columns,i=t.subMatrixRow(this.pivotVector,0,n-1),h=e.columns;for(o=0;o<h;o++)for(r=o+1;r<h;r++)for(s=0;s<n;s++)i.set(r,s,i.get(r,s)-i.get(o,s)*e.get(r,o));for(o=h-1;o>=0;o--){for(s=0;s<n;s++)i.set(o,s,i.get(o,s)/e.get(o,o));for(r=0;r<o;r++)for(s=0;s<n;s++)i.set(r,s,i.get(r,s)-i.get(o,s)*e.get(r,o))}return i}get determinant(){let t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");let e=this.pivotSign,r=t.columns;for(let s=0;s<r;s++)e*=t.get(s,s);return e}get lowerTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,s=new k(e,r);for(let o=0;o<e;o++)for(let e=0;e<r;e++)o>e?s.set(o,e,t.get(o,e)):o===e?s.set(o,e,1):s.set(o,e,0);return s}get upperTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,s=new k(e,r);for(let o=0;o<e;o++)for(let e=0;e<r;e++)o<=e?s.set(o,e,t.get(o,e)):s.set(o,e,0);return s}get pivotPermutationVector(){return Array.from(this.pivotVector)}}function _(t,e){let r=0;return Math.abs(t)>Math.abs(e)?(r=e/t,Math.abs(t)*Math.sqrt(1+r*r)):0!==e?(r=t/e,Math.abs(e)*Math.sqrt(1+r*r)):0}class ${constructor(t){let e,r,s,o,n=(t=F.checkMatrix(t)).clone(),i=t.rows,h=t.columns,l=new Float64Array(h);for(s=0;s<h;s++){let t=0;for(e=s;e<i;e++)t=_(t,n.get(e,s));if(0!==t){for(n.get(s,s)<0&&(t=-t),e=s;e<i;e++)n.set(e,s,n.get(e,s)/t);for(n.set(s,s,n.get(s,s)+1),r=s+1;r<h;r++){for(o=0,e=s;e<i;e++)o+=n.get(e,s)*n.get(e,r);for(o=-o/n.get(s,s),e=s;e<i;e++)n.set(e,r,n.get(e,r)+o*n.get(e,s))}}l[s]=-t}this.QR=n,this.Rdiag=l}solve(t){t=k.checkMatrix(t);let e=this.QR,r=e.rows;if(t.rows!==r)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");let s,o,n,i,h=t.columns,l=t.clone(),u=e.columns;for(n=0;n<u;n++)for(o=0;o<h;o++){for(i=0,s=n;s<r;s++)i+=e.get(s,n)*l.get(s,o);for(i=-i/e.get(n,n),s=n;s<r;s++)l.set(s,o,l.get(s,o)+i*e.get(s,n))}for(n=u-1;n>=0;n--){for(o=0;o<h;o++)l.set(n,o,l.get(n,o)/this.Rdiag[n]);for(s=0;s<n;s++)for(o=0;o<h;o++)l.set(s,o,l.get(s,o)-l.get(n,o)*e.get(s,n))}return l.subMatrix(0,u-1,0,h-1)}isFullRank(){let t=this.QR.columns;for(let e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){let t,e,r=this.QR,s=r.columns,o=new k(s,s);for(t=0;t<s;t++)for(e=0;e<s;e++)t<e?o.set(t,e,r.get(t,e)):t===e?o.set(t,e,this.Rdiag[t]):o.set(t,e,0);return o}get orthogonalMatrix(){let t,e,r,s,o=this.QR,n=o.rows,i=o.columns,h=new k(n,i);for(r=i-1;r>=0;r--){for(t=0;t<n;t++)h.set(t,r,0);for(h.set(r,r,1),e=r;e<i;e++)if(0!==o.get(r,r)){for(s=0,t=r;t<n;t++)s+=o.get(t,r)*h.get(t,e);for(s=-s/o.get(r,r),t=r;t<n;t++)h.set(t,e,h.get(t,e)+s*o.get(t,r))}}return h}}class L{constructor(t,e={}){if((t=F.checkMatrix(t)).isEmpty())throw new Error("Matrix must be non-empty");let r=t.rows,s=t.columns;const{computeLeftSingularVectors:o=!0,computeRightSingularVectors:n=!0,autoTranspose:i=!1}=e;let h,l=Boolean(o),u=Boolean(n),a=!1;if(r<s)if(i){h=t.transpose(),r=h.rows,s=h.columns,a=!0;let e=l;l=u,u=e}else h=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else h=t.clone();let c=Math.min(r,s),f=Math.min(r+1,s),m=new Float64Array(f),g=new k(r,c),w=new k(s,s),p=new Float64Array(s),d=new Float64Array(r),y=new Float64Array(f);for(let t=0;t<f;t++)y[t]=t;let M=Math.min(r-1,s),b=Math.max(0,Math.min(s-2,r)),x=Math.max(M,b);for(let t=0;t<x;t++){if(t<M){m[t]=0;for(let e=t;e<r;e++)m[t]=_(m[t],h.get(e,t));if(0!==m[t]){h.get(t,t)<0&&(m[t]=-m[t]);for(let e=t;e<r;e++)h.set(e,t,h.get(e,t)/m[t]);h.set(t,t,h.get(t,t)+1)}m[t]=-m[t]}for(let e=t+1;e<s;e++){if(t<M&&0!==m[t]){let s=0;for(let o=t;o<r;o++)s+=h.get(o,t)*h.get(o,e);s=-s/h.get(t,t);for(let o=t;o<r;o++)h.set(o,e,h.get(o,e)+s*h.get(o,t))}p[e]=h.get(t,e)}if(l&&t<M)for(let e=t;e<r;e++)g.set(e,t,h.get(e,t));if(t<b){p[t]=0;for(let e=t+1;e<s;e++)p[t]=_(p[t],p[e]);if(0!==p[t]){p[t+1]<0&&(p[t]=0-p[t]);for(let e=t+1;e<s;e++)p[e]/=p[t];p[t+1]+=1}if(p[t]=-p[t],t+1<r&&0!==p[t]){for(let e=t+1;e<r;e++)d[e]=0;for(let e=t+1;e<r;e++)for(let r=t+1;r<s;r++)d[e]+=p[r]*h.get(e,r);for(let e=t+1;e<s;e++){let s=-p[e]/p[t+1];for(let o=t+1;o<r;o++)h.set(o,e,h.get(o,e)+s*d[o])}}if(u)for(let e=t+1;e<s;e++)w.set(e,t,p[e])}}let E=Math.min(s,r+1);if(M<s&&(m[M]=h.get(M,M)),r<E&&(m[E-1]=0),b+1<E&&(p[b]=h.get(b,E-1)),p[E-1]=0,l){for(let t=M;t<c;t++){for(let e=0;e<r;e++)g.set(e,t,0);g.set(t,t,1)}for(let t=M-1;t>=0;t--)if(0!==m[t]){for(let e=t+1;e<c;e++){let s=0;for(let o=t;o<r;o++)s+=g.get(o,t)*g.get(o,e);s=-s/g.get(t,t);for(let o=t;o<r;o++)g.set(o,e,g.get(o,e)+s*g.get(o,t))}for(let e=t;e<r;e++)g.set(e,t,-g.get(e,t));g.set(t,t,1+g.get(t,t));for(let e=0;e<t-1;e++)g.set(e,t,0)}else{for(let e=0;e<r;e++)g.set(e,t,0);g.set(t,t,1)}}if(u)for(let t=s-1;t>=0;t--){if(t<b&&0!==p[t])for(let e=t+1;e<s;e++){let r=0;for(let o=t+1;o<s;o++)r+=w.get(o,t)*w.get(o,e);r=-r/w.get(t+1,t);for(let o=t+1;o<s;o++)w.set(o,e,w.get(o,e)+r*w.get(o,t))}for(let e=0;e<s;e++)w.set(e,t,0);w.set(t,t,1)}let v=E-1,S=0,R=Number.EPSILON;for(;E>0;){let t,e;for(t=E-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+R*Math.abs(m[t]+Math.abs(m[t+1]));if(Math.abs(p[t])<=e||Number.isNaN(p[t])){p[t]=0;break}}if(t===E-2)e=4;else{let r;for(r=E-1;r>=t&&r!==t;r--){let e=(r!==E?Math.abs(p[r]):0)+(r!==t+1?Math.abs(p[r-1]):0);if(Math.abs(m[r])<=R*e){m[r]=0;break}}r===t?e=3:r===E-1?e=1:(e=2,t=r)}switch(t++,e){case 1:{let e=p[E-2];p[E-2]=0;for(let r=E-2;r>=t;r--){let o=_(m[r],e),n=m[r]/o,i=e/o;if(m[r]=o,r!==t&&(e=-i*p[r-1],p[r-1]=n*p[r-1]),u)for(let t=0;t<s;t++)o=n*w.get(t,r)+i*w.get(t,E-1),w.set(t,E-1,-i*w.get(t,r)+n*w.get(t,E-1)),w.set(t,r,o)}break}case 2:{let e=p[t-1];p[t-1]=0;for(let s=t;s<E;s++){let o=_(m[s],e),n=m[s]/o,i=e/o;if(m[s]=o,e=-i*p[s],p[s]=n*p[s],l)for(let e=0;e<r;e++)o=n*g.get(e,s)+i*g.get(e,t-1),g.set(e,t-1,-i*g.get(e,s)+n*g.get(e,t-1)),g.set(e,s,o)}break}case 3:{const e=Math.max(Math.abs(m[E-1]),Math.abs(m[E-2]),Math.abs(p[E-2]),Math.abs(m[t]),Math.abs(p[t])),o=m[E-1]/e,n=m[E-2]/e,i=p[E-2]/e,h=m[t]/e,a=p[t]/e,c=((n+o)*(n-o)+i*i)/2,f=o*i*(o*i);let d=0;0===c&&0===f||(d=c<0?0-Math.sqrt(c*c+f):Math.sqrt(c*c+f),d=f/(c+d));let y=(h+o)*(h-o)+d,M=h*a;for(let e=t;e<E-1;e++){let o=_(y,M);0===o&&(o=Number.MIN_VALUE);let n=y/o,i=M/o;if(e!==t&&(p[e-1]=o),y=n*m[e]+i*p[e],p[e]=n*p[e]-i*m[e],M=i*m[e+1],m[e+1]=n*m[e+1],u)for(let t=0;t<s;t++)o=n*w.get(t,e)+i*w.get(t,e+1),w.set(t,e+1,-i*w.get(t,e)+n*w.get(t,e+1)),w.set(t,e,o);if(o=_(y,M),0===o&&(o=Number.MIN_VALUE),n=y/o,i=M/o,m[e]=o,y=n*p[e]+i*m[e+1],m[e+1]=-i*p[e]+n*m[e+1],M=i*p[e+1],p[e+1]=n*p[e+1],l&&e<r-1)for(let t=0;t<r;t++)o=n*g.get(t,e)+i*g.get(t,e+1),g.set(t,e+1,-i*g.get(t,e)+n*g.get(t,e+1)),g.set(t,e,o)}p[E-2]=y,S+=1;break}case 4:if(m[t]<=0&&(m[t]=m[t]<0?-m[t]:0,u))for(let e=0;e<=v;e++)w.set(e,t,-w.get(e,t));for(;t<v&&!(m[t]>=m[t+1]);){let e=m[t];if(m[t]=m[t+1],m[t+1]=e,u&&t<s-1)for(let r=0;r<s;r++)e=w.get(r,t+1),w.set(r,t+1,w.get(r,t)),w.set(r,t,e);if(l&&t<r-1)for(let s=0;s<r;s++)e=g.get(s,t+1),g.set(s,t+1,g.get(s,t)),g.set(s,t,e);t++}S=0,E--}}if(a){let t=w;w=g,g=t}this.m=r,this.n=s,this.s=m,this.U=g,this.V=w}solve(t){let e=t,r=this.threshold,s=this.s.length,o=k.zeros(s,s);for(let t=0;t<s;t++)Math.abs(this.s[t])<=r?o.set(t,t,0):o.set(t,t,1/this.s[t]);let n=this.U,i=this.rightSingularVectors,h=i.mmul(o),l=i.rows,u=n.rows,a=k.zeros(l,u);for(let t=0;t<l;t++)for(let e=0;e<u;e++){let r=0;for(let o=0;o<s;o++)r+=h.get(t,o)*n.get(e,o);a.set(t,e,r)}return a.mmul(e)}solveForDiagonal(t){return this.solve(k.diag(t))}inverse(){let t=this.V,e=this.threshold,r=t.rows,s=t.columns,o=new k(r,this.s.length);for(let n=0;n<r;n++)for(let r=0;r<s;r++)Math.abs(this.s[r])>e&&o.set(n,r,t.get(n,r)/this.s[r]);let n=this.U,i=n.rows,h=n.columns,l=new k(r,i);for(let t=0;t<r;t++)for(let e=0;e<i;e++){let r=0;for(let s=0;s<h;s++)r+=o.get(t,s)*n.get(e,s);l.set(t,e,r)}return l}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,r=this.s;for(let s=0,o=r.length;s<o;s++)r[s]>t&&e++;return e}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return k.diag(this.s)}}function O(t,e=!1){return t=F.checkMatrix(t),e?new L(t).inverse():U(t,k.eye(t.rows))}function U(t,e,r=!1){return t=F.checkMatrix(t),e=F.checkMatrix(e),r?new L(t).solve(e):t.isSquare()?new H(t).solve(e):new $(t).solve(e)}function X(t){if((t=k.checkMatrix(t)).isSquare()){if(0===t.columns)return 1;let e,r,s,o;if(2===t.columns)return e=t.get(0,0),r=t.get(0,1),s=t.get(1,0),o=t.get(1,1),e*o-r*s;if(3===t.columns){let o,n,i;return o=new V(t,[1,2],[1,2]),n=new V(t,[1,2],[0,2]),i=new V(t,[1,2],[0,1]),e=t.get(0,0),r=t.get(0,1),s=t.get(0,2),e*X(o)-r*X(n)+s*X(i)}return new H(t).determinant}throw Error("determinant can only be calculated for a square matrix")}function Y(t,e){let r=[];for(let s=0;s<t;s++)s!==e&&r.push(s);return r}function G(t,e,r,s=1e-9,o=1e-9){if(t>o)return new Array(e.rows+1).fill(0);{let t=e.addRow(r,[0]);for(let e=0;e<t.rows;e++)Math.abs(t.get(e,0))<s&&t.set(e,0,0);return t.to1DArray()}}function Q(t,e={}){const{thresholdValue:r=1e-9,thresholdError:s=1e-9}=e;let o=(t=k.checkMatrix(t)).rows,n=new k(o,o);for(let e=0;e<o;e++){let i=k.columnVector(t.getRow(e)),h=t.subMatrixRow(Y(o,e)).transpose(),l=new L(h).solve(i),u=k.sub(i,h.mmul(l)).abs().max();n.setRow(e,G(u,l,e,r,s))}return n}function W(t,e=Number.EPSILON){if((t=k.checkMatrix(t)).isEmpty())return t.transpose();let r=new L(t,{autoTranspose:!0}),s=r.leftSingularVectors,o=r.rightSingularVectors,n=r.diagonal;for(let t=0;t<n.length;t++)Math.abs(n[t])>e?n[t]=1/n[t]:n[t]=0;return o.mmul(k.diag(n).mmul(s.transpose()))}function B(t,e=t,r={}){t=new k(t);let s=!1;if("object"!=typeof e||k.isMatrix(e)||Array.isArray(e)?e=new k(e):(r=e,e=t,s=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:o=!0}=r;o&&(t=t.center("column"),s||(e=e.center("column")));const n=t.transpose().mmul(e);for(let e=0;e<n.rows;e++)for(let r=0;r<n.columns;r++)n.set(e,r,n.get(e,r)*(1/(t.rows-1)));return n}function J(t,e=t,r={}){t=new k(t);let s=!1;if("object"!=typeof e||k.isMatrix(e)||Array.isArray(e)?e=new k(e):(r=e,e=t,s=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:o=!0,scale:n=!0}=r;o&&(t.center("column"),s||e.center("column")),n&&(t.scale("column"),s||e.scale("column"));const i=t.standardDeviation("column",{unbiased:!0}),h=s?i:e.standardDeviation("column",{unbiased:!0}),l=t.transpose().mmul(e);for(let e=0;e<l.rows;e++)for(let r=0;r<l.columns;r++)l.set(e,r,l.get(e,r)*(1/(i[e]*h[r]))*(1/(t.rows-1)));return l}class K{constructor(t,e={}){const{assumeSymmetric:r=!1}=e;if(!(t=F.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");if(t.isEmpty())throw new Error("Matrix must be non-empty");let s,o,n=t.columns,i=new k(n,n),h=new Float64Array(n),l=new Float64Array(n),u=t,a=!1;if(a=!!r||t.isSymmetric(),a){for(s=0;s<n;s++)for(o=0;o<n;o++)i.set(s,o,u.get(s,o));!function(t,e,r,s){let o,n,i,h,l,u,a,c;for(l=0;l<t;l++)r[l]=s.get(t-1,l);for(h=t-1;h>0;h--){for(c=0,i=0,u=0;u<h;u++)c+=Math.abs(r[u]);if(0===c)for(e[h]=r[h-1],l=0;l<h;l++)r[l]=s.get(h-1,l),s.set(h,l,0),s.set(l,h,0);else{for(u=0;u<h;u++)r[u]/=c,i+=r[u]*r[u];for(o=r[h-1],n=Math.sqrt(i),o>0&&(n=-n),e[h]=c*n,i-=o*n,r[h-1]=o-n,l=0;l<h;l++)e[l]=0;for(l=0;l<h;l++){for(o=r[l],s.set(l,h,o),n=e[l]+s.get(l,l)*o,u=l+1;u<=h-1;u++)n+=s.get(u,l)*r[u],e[u]+=s.get(u,l)*o;e[l]=n}for(o=0,l=0;l<h;l++)e[l]/=i,o+=e[l]*r[l];for(a=o/(i+i),l=0;l<h;l++)e[l]-=a*r[l];for(l=0;l<h;l++){for(o=r[l],n=e[l],u=l;u<=h-1;u++)s.set(u,l,s.get(u,l)-(o*e[u]+n*r[u]));r[l]=s.get(h-1,l),s.set(h,l,0)}}r[h]=i}for(h=0;h<t-1;h++){if(s.set(t-1,h,s.get(h,h)),s.set(h,h,1),i=r[h+1],0!==i){for(u=0;u<=h;u++)r[u]=s.get(u,h+1)/i;for(l=0;l<=h;l++){for(n=0,u=0;u<=h;u++)n+=s.get(u,h+1)*s.get(u,l);for(u=0;u<=h;u++)s.set(u,l,s.get(u,l)-n*r[u])}}for(u=0;u<=h;u++)s.set(u,h+1,0)}for(l=0;l<t;l++)r[l]=s.get(t-1,l),s.set(t-1,l,0);s.set(t-1,t-1,1),e[0]=0}(n,l,h,i),function(t,e,r,s){let o,n,i,h,l,u,a,c,f,m,g,w,p,d,y,M,b;for(i=1;i<t;i++)e[i-1]=e[i];e[t-1]=0;let x=0,E=0,v=Number.EPSILON;for(u=0;u<t;u++){for(E=Math.max(E,Math.abs(r[u])+Math.abs(e[u])),a=u;a<t&&!(Math.abs(e[a])<=v*E);)a++;if(a>u){b=0;do{for(b+=1,o=r[u],c=(r[u+1]-o)/(2*e[u]),f=_(c,1),c<0&&(f=-f),r[u]=e[u]/(c+f),r[u+1]=e[u]*(c+f),m=r[u+1],n=o-r[u],i=u+2;i<t;i++)r[i]-=n;for(x+=n,c=r[a],g=1,w=g,p=g,d=e[u+1],y=0,M=0,i=a-1;i>=u;i--)for(p=w,w=g,M=y,o=g*e[i],n=g*c,f=_(c,e[i]),e[i+1]=y*f,y=e[i]/f,g=c/f,c=g*r[i]-y*o,r[i+1]=n+y*(g*o+y*r[i]),l=0;l<t;l++)n=s.get(l,i+1),s.set(l,i+1,y*s.get(l,i)+g*n),s.set(l,i,g*s.get(l,i)-y*n);c=-y*M*p*d*e[u]/m,e[u]=y*c,r[u]=g*c}while(Math.abs(e[u])>v*E)}r[u]=r[u]+x,e[u]=0}for(i=0;i<t-1;i++){for(l=i,c=r[i],h=i+1;h<t;h++)r[h]<c&&(l=h,c=r[h]);if(l!==i)for(r[l]=r[i],r[i]=c,h=0;h<t;h++)c=s.get(h,i),s.set(h,i,s.get(h,l)),s.set(h,l,c)}}(n,l,h,i)}else{let t=new k(n,n),e=new Float64Array(n);for(o=0;o<n;o++)for(s=0;s<n;s++)t.set(s,o,u.get(s,o));!function(t,e,r,s){let o,n,i,h,l,u,a,c=t-1;for(u=1;u<=c-1;u++){for(a=0,h=u;h<=c;h++)a+=Math.abs(e.get(h,u-1));if(0!==a){for(i=0,h=c;h>=u;h--)r[h]=e.get(h,u-1)/a,i+=r[h]*r[h];for(n=Math.sqrt(i),r[u]>0&&(n=-n),i-=r[u]*n,r[u]=r[u]-n,l=u;l<t;l++){for(o=0,h=c;h>=u;h--)o+=r[h]*e.get(h,l);for(o/=i,h=u;h<=c;h++)e.set(h,l,e.get(h,l)-o*r[h])}for(h=0;h<=c;h++){for(o=0,l=c;l>=u;l--)o+=r[l]*e.get(h,l);for(o/=i,l=u;l<=c;l++)e.set(h,l,e.get(h,l)-o*r[l])}r[u]=a*r[u],e.set(u,u-1,a*n)}}for(h=0;h<t;h++)for(l=0;l<t;l++)s.set(h,l,h===l?1:0);for(u=c-1;u>=1;u--)if(0!==e.get(u,u-1)){for(h=u+1;h<=c;h++)r[h]=e.get(h,u-1);for(l=u;l<=c;l++){for(n=0,h=u;h<=c;h++)n+=r[h]*s.get(h,l);for(n=n/r[u]/e.get(u,u-1),h=u;h<=c;h++)s.set(h,l,s.get(h,l)+n*r[h])}}}(n,t,e,i),function(t,e,r,s,o){let n,i,h,l,u,a,c,f,m,g,w,p,d,y,M,b=t-1,x=t-1,E=Number.EPSILON,v=0,S=0,k=0,R=0,I=0,T=0,A=0,q=0;for(n=0;n<t;n++)for((n<0||n>x)&&(r[n]=o.get(n,n),e[n]=0),i=Math.max(n-1,0);i<t;i++)S+=Math.abs(o.get(n,i));for(;b>=0;){for(l=b;l>0&&(T=Math.abs(o.get(l-1,l-1))+Math.abs(o.get(l,l)),0===T&&(T=S),!(Math.abs(o.get(l,l-1))<E*T));)l--;if(l===b)o.set(b,b,o.get(b,b)+v),r[b]=o.get(b,b),e[b]=0,b--,q=0;else if(l===b-1){if(c=o.get(b,b-1)*o.get(b-1,b),k=(o.get(b-1,b-1)-o.get(b,b))/2,R=k*k+c,A=Math.sqrt(Math.abs(R)),o.set(b,b,o.get(b,b)+v),o.set(b-1,b-1,o.get(b-1,b-1)+v),f=o.get(b,b),R>=0){for(A=k>=0?k+A:k-A,r[b-1]=f+A,r[b]=r[b-1],0!==A&&(r[b]=f-c/A),e[b-1]=0,e[b]=0,f=o.get(b,b-1),T=Math.abs(f)+Math.abs(A),k=f/T,R=A/T,I=Math.sqrt(k*k+R*R),k/=I,R/=I,i=b-1;i<t;i++)A=o.get(b-1,i),o.set(b-1,i,R*A+k*o.get(b,i)),o.set(b,i,R*o.get(b,i)-k*A);for(n=0;n<=b;n++)A=o.get(n,b-1),o.set(n,b-1,R*A+k*o.get(n,b)),o.set(n,b,R*o.get(n,b)-k*A);for(n=0;n<=x;n++)A=s.get(n,b-1),s.set(n,b-1,R*A+k*s.get(n,b)),s.set(n,b,R*s.get(n,b)-k*A)}else r[b-1]=f+k,r[b]=f+k,e[b-1]=A,e[b]=-A;b-=2,q=0}else{if(f=o.get(b,b),m=0,c=0,l<b&&(m=o.get(b-1,b-1),c=o.get(b,b-1)*o.get(b-1,b)),10===q){for(v+=f,n=0;n<=b;n++)o.set(n,n,o.get(n,n)-f);T=Math.abs(o.get(b,b-1))+Math.abs(o.get(b-1,b-2)),f=m=.75*T,c=-.4375*T*T}if(30===q&&(T=(m-f)/2,T=T*T+c,T>0)){for(T=Math.sqrt(T),m<f&&(T=-T),T=f-c/((m-f)/2+T),n=0;n<=b;n++)o.set(n,n,o.get(n,n)-T);v+=T,f=m=c=.964}for(q+=1,u=b-2;u>=l&&(A=o.get(u,u),I=f-A,T=m-A,k=(I*T-c)/o.get(u+1,u)+o.get(u,u+1),R=o.get(u+1,u+1)-A-I-T,I=o.get(u+2,u+1),T=Math.abs(k)+Math.abs(R)+Math.abs(I),k/=T,R/=T,I/=T,u!==l)&&!(Math.abs(o.get(u,u-1))*(Math.abs(R)+Math.abs(I))<E*(Math.abs(k)*(Math.abs(o.get(u-1,u-1))+Math.abs(A)+Math.abs(o.get(u+1,u+1)))));)u--;for(n=u+2;n<=b;n++)o.set(n,n-2,0),n>u+2&&o.set(n,n-3,0);for(h=u;h<=b-1&&(y=h!==b-1,h!==u&&(k=o.get(h,h-1),R=o.get(h+1,h-1),I=y?o.get(h+2,h-1):0,f=Math.abs(k)+Math.abs(R)+Math.abs(I),0!==f&&(k/=f,R/=f,I/=f)),0!==f);h++)if(T=Math.sqrt(k*k+R*R+I*I),k<0&&(T=-T),0!==T){for(h!==u?o.set(h,h-1,-T*f):l!==u&&o.set(h,h-1,-o.get(h,h-1)),k+=T,f=k/T,m=R/T,A=I/T,R/=k,I/=k,i=h;i<t;i++)k=o.get(h,i)+R*o.get(h+1,i),y&&(k+=I*o.get(h+2,i),o.set(h+2,i,o.get(h+2,i)-k*A)),o.set(h,i,o.get(h,i)-k*f),o.set(h+1,i,o.get(h+1,i)-k*m);for(n=0;n<=Math.min(b,h+3);n++)k=f*o.get(n,h)+m*o.get(n,h+1),y&&(k+=A*o.get(n,h+2),o.set(n,h+2,o.get(n,h+2)-k*I)),o.set(n,h,o.get(n,h)-k),o.set(n,h+1,o.get(n,h+1)-k*R);for(n=0;n<=x;n++)k=f*s.get(n,h)+m*s.get(n,h+1),y&&(k+=A*s.get(n,h+2),s.set(n,h+2,s.get(n,h+2)-k*I)),s.set(n,h,s.get(n,h)-k),s.set(n,h+1,s.get(n,h+1)-k*R)}}}if(0!==S){for(b=t-1;b>=0;b--)if(k=r[b],R=e[b],0===R)for(l=b,o.set(b,b,1),n=b-1;n>=0;n--){for(c=o.get(n,n)-k,I=0,i=l;i<=b;i++)I+=o.get(n,i)*o.get(i,b);if(e[n]<0)A=c,T=I;else if(l=n,0===e[n]?o.set(n,b,0!==c?-I/c:-I/(E*S)):(f=o.get(n,n+1),m=o.get(n+1,n),R=(r[n]-k)*(r[n]-k)+e[n]*e[n],a=(f*T-A*I)/R,o.set(n,b,a),o.set(n+1,b,Math.abs(f)>Math.abs(A)?(-I-c*a)/f:(-T-m*a)/A)),a=Math.abs(o.get(n,b)),E*a*a>1)for(i=n;i<=b;i++)o.set(i,b,o.get(i,b)/a)}else if(R<0)for(l=b-1,Math.abs(o.get(b,b-1))>Math.abs(o.get(b-1,b))?(o.set(b-1,b-1,R/o.get(b,b-1)),o.set(b-1,b,-(o.get(b,b)-k)/o.get(b,b-1))):(M=Z(0,-o.get(b-1,b),o.get(b-1,b-1)-k,R),o.set(b-1,b-1,M[0]),o.set(b-1,b,M[1])),o.set(b,b-1,0),o.set(b,b,1),n=b-2;n>=0;n--){for(g=0,w=0,i=l;i<=b;i++)g+=o.get(n,i)*o.get(i,b-1),w+=o.get(n,i)*o.get(i,b);if(c=o.get(n,n)-k,e[n]<0)A=c,I=g,T=w;else if(l=n,0===e[n]?(M=Z(-g,-w,c,R),o.set(n,b-1,M[0]),o.set(n,b,M[1])):(f=o.get(n,n+1),m=o.get(n+1,n),p=(r[n]-k)*(r[n]-k)+e[n]*e[n]-R*R,d=2*(r[n]-k)*R,0===p&&0===d&&(p=E*S*(Math.abs(c)+Math.abs(R)+Math.abs(f)+Math.abs(m)+Math.abs(A))),M=Z(f*I-A*g+R*w,f*T-A*w-R*g,p,d),o.set(n,b-1,M[0]),o.set(n,b,M[1]),Math.abs(f)>Math.abs(A)+Math.abs(R)?(o.set(n+1,b-1,(-g-c*o.get(n,b-1)+R*o.get(n,b))/f),o.set(n+1,b,(-w-c*o.get(n,b)-R*o.get(n,b-1))/f)):(M=Z(-I-m*o.get(n,b-1),-T-m*o.get(n,b),A,R),o.set(n+1,b-1,M[0]),o.set(n+1,b,M[1]))),a=Math.max(Math.abs(o.get(n,b-1)),Math.abs(o.get(n,b))),E*a*a>1)for(i=n;i<=b;i++)o.set(i,b-1,o.get(i,b-1)/a),o.set(i,b,o.get(i,b)/a)}for(n=0;n<t;n++)if(n<0||n>x)for(i=n;i<t;i++)s.set(n,i,o.get(n,i));for(i=t-1;i>=0;i--)for(n=0;n<=x;n++){for(A=0,h=0;h<=Math.min(i,x);h++)A+=s.get(n,h)*o.get(h,i);s.set(n,i,A)}}}(n,l,h,i,t)}this.n=n,this.e=l,this.d=h,this.V=i}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let t,e,r=this.n,s=this.e,o=this.d,n=new k(r,r);for(t=0;t<r;t++){for(e=0;e<r;e++)n.set(t,e,0);n.set(t,t,o[t]),s[t]>0?n.set(t,t+1,s[t]):s[t]<0&&n.set(t,t-1,s[t])}return n}}function Z(t,e,r,s){let o,n;return Math.abs(r)>Math.abs(s)?(o=s/r,n=r+o*s,[(t+o*e)/n,(e-o*t)/n]):(o=r/s,n=s+o*r,[(o*t+e)/n,(o*e-t)/n])}class tt{constructor(t){if(!(t=F.checkMatrix(t)).isSymmetric())throw new Error("Matrix is not symmetric");let e,r,s,o=t,n=o.rows,i=new k(n,n),h=!0;for(r=0;r<n;r++){let t=0;for(s=0;s<r;s++){let n=0;for(e=0;e<s;e++)n+=i.get(s,e)*i.get(r,e);n=(o.get(r,s)-n)/i.get(s,s),i.set(r,s,n),t+=n*n}for(t=o.get(r,r)-t,h&=t>0,i.set(r,r,Math.sqrt(Math.max(t,0))),s=r+1;s<n;s++)i.set(r,s,0)}this.L=i,this.positiveDefinite=Boolean(h)}isPositiveDefinite(){return this.positiveDefinite}solve(t){t=F.checkMatrix(t);let e=this.L,r=e.rows;if(t.rows!==r)throw new Error("Matrix dimensions do not match");if(!1===this.isPositiveDefinite())throw new Error("Matrix is not positive definite");let s,o,n,i=t.columns,h=t.clone();for(n=0;n<r;n++)for(o=0;o<i;o++){for(s=0;s<n;s++)h.set(n,o,h.get(n,o)-h.get(s,o)*e.get(n,s));h.set(n,o,h.get(n,o)/e.get(n,n))}for(n=r-1;n>=0;n--)for(o=0;o<i;o++){for(s=n+1;s<r;s++)h.set(n,o,h.get(n,o)-h.get(s,o)*e.get(s,n));h.set(n,o,h.get(n,o)/e.get(n,n))}return h}get lowerTriangularMatrix(){return this.L}}class et{constructor(t,e={}){t=F.checkMatrix(t);let{Y:r}=e;const{scaleScores:s=!1,maxIterations:o=1e3,terminationCriteria:n=1e-10}=e;let i;if(r){if(r=Array.isArray(r)&&"number"==typeof r[0]?k.columnVector(r):F.checkMatrix(r),!r.isColumnVector()||r.rows!==t.rows)throw new Error("Y must be a column vector of length X.rows");i=r}else i=t.getColumnVector(0);let h,l,u,a,c=1;for(let e=0;e<o&&c>n;e++)u=t.transpose().mmul(i).div(i.transpose().mmul(i).get(0,0)),u=u.div(u.norm()),h=t.mmul(u).div(u.transpose().mmul(u).get(0,0)),e>0&&(c=h.clone().sub(a).pow(2).sum()),a=h.clone(),r?(l=r.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),l=l.div(l.norm()),i=r.mmul(l).div(l.transpose().mmul(l).get(0,0))):i=h;if(r){let e=t.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0));e=e.div(e.norm());let s=t.clone().sub(h.clone().mmul(e.transpose())),o=i.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),n=r.clone().sub(h.clone().mulS(o.get(0,0)).mmul(l.transpose()));this.t=h,this.p=e.transpose(),this.w=u.transpose(),this.q=l,this.u=i,this.s=h.transpose().mmul(h),this.xResidual=s,this.yResidual=n,this.betas=o}else this.w=u.transpose(),this.s=h.transpose().mmul(h).sqrt(),this.t=s?h.clone().div(this.s.get(0,0)):h,this.xResidual=t.sub(h.mmul(u.transpose()))}}},842:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});class s{constructor(t=[],e=o){if(this.data=t,this.length=this.data.length,this.compare=e,this.length>0)for(let t=(this.length>>1)-1;t>=0;t--)this._down(t)}push(t){this.data.push(t),this.length++,this._up(this.length-1)}pop(){if(0===this.length)return;const t=this.data[0],e=this.data.pop();return this.length--,this.length>0&&(this.data[0]=e,this._down(0)),t}peek(){return this.data[0]}_up(t){const{data:e,compare:r}=this,s=e[t];for(;t>0;){const o=t-1>>1,n=e[o];if(r(s,n)>=0)break;e[t]=n,t=o}e[t]=s}_down(t){const{data:e,compare:r}=this,s=this.length>>1,o=e[t];for(;t<s;){let s=1+(t<<1),n=e[s];const i=s+1;if(i<this.length&&r(e[i],n)<0&&(s=i,n=e[i]),r(n,o)>=0)break;e[t]=n,t=s}e[t]=o}}function o(t,e){return t<e?-1:t>e?1:0}},902:(t,e,r)=>{const{Matrix:s,inverse:o}=r(331),{solveHomography:n}=r(450);t.exports={estimate:({screenCoords:t,worldCoords:e,projectionTransform:r})=>{const i=n(e.map((t=>[t.x,t.y])),t.map((t=>[t.x,t.y]))),h=new s([[i[0],i[1],i[2]],[i[3],i[4],i[5]],[i[6],i[7],i[8]]]),l=new s(r),u=o(l).mmul(h).to1DArray(),a=Math.sqrt(u[0]*u[0]+u[3]*u[3]+u[6]*u[6]),c=Math.sqrt(u[1]*u[1]+u[4]*u[4]+u[7]*u[7]),f=(a+c)/2,m=[];m[0]=u[0]/a,m[3]=u[3]/a,m[6]=u[6]/a,m[1]=u[1]/c,m[4]=u[4]/c,m[7]=u[7]/c,m[2]=m[3]*m[7]-m[6]*m[4],m[5]=m[6]*m[1]-m[0]*m[7],m[8]=m[0]*m[4]-m[1]*m[3];const g=Math.sqrt(m[2]*m[2]+m[5]*m[5]+m[8]*m[8]);m[2]/=g,m[5]/=g,m[8]/=g;const w=[];return w[0]=u[2]/f,w[1]=u[5]/f,w[2]=u[8]/f,[[m[0],m[1],m[2],w[0]],[m[3],m[4],m[5],w[1]],[m[6],m[7],m[8],w[2]]]}}},421:(t,e,r)=>{const{estimate:s}=r(902),{refineEstimate:o}=r(269);t.exports={Estimator:class{constructor(t){this.projectionTransform=t}estimate({screenCoords:t,worldCoords:e}){return s({screenCoords:t,worldCoords:e,projectionTransform:this.projectionTransform})}refineEstimate({initialModelViewTransform:t,worldCoords:e,screenCoords:r}){return o({initialModelViewTransform:t,worldCoords:e,screenCoords:r,projectionTransform:this.projectionTransform})}}}},269:(t,e,r)=>{const{Matrix:s,inverse:o}=r(331),{normalizePoints:n,applyModelViewProjectionTransform:i,buildModelViewProjectionTransform:h,computeScreenCoordiate:l}=r(420);let u=[[],[],[]],a=[[],[]],c=[[],[],[]];const f=({initialModelViewTransform:t,projectionTransform:e,worldCoords:r,screenCoords:s,inlierProb:o})=>{const n=o<1;let i=t,u=0,a=0,c=new Array(r.length),f=new Array(r.length),p=new Array(r.length),d=new Array(r.length);for(let t=0;t<=10;t++){const y=h(e,i);for(let t=0;t<r.length;t++){const e=l(y,r[t].x,r[t].y,r[t].z),o=s[t].x-e.x,n=s[t].y-e.y;p[t]=o,d[t]=n,c[t]=o*o+n*n}let M;if(a=0,n){const t=Math.max(3,Math.floor(r.length*o)-1);for(let t=0;t<r.length;t++)f[t]=c[t];f.sort(((t,e)=>t-e)),M=Math.max(4*f[t],16);for(let t=0;t<r.length;t++)f[t]>M?a+=M/6:a+=M/6*(1-(1-f[t]/M)*(1-f[t]/M)*(1-f[t]/M))}else for(let t=0;t<r.length;t++)a+=c[t];if(a/=r.length,a<.1)break;if(t>0&&a/u>.99)break;if(10===t)break;u=a;const b=[],x=[];for(let t=0;t<r.length;t++){if(n&&c[t]>M)continue;const s=w({modelViewProjectionTransform:y,modelViewTransform:i,projectionTransform:e,worldCoord:r[t]});if(n){const e=(1-c[t]/M)*(1-c[t]/M);for(let t=0;t<2;t++)for(let r=0;r<6;r++)s[t][r]*=e;b.push([p[t]*e]),b.push([d[t]*e])}else b.push([p[t]]),b.push([d[t]]);for(let t=0;t<s.length;t++)x.push(s[t])}const E=g({dU:b,J_U_S:x});if(null===E)break;i=m({modelViewTransform:i,dS:E})}return{modelViewTransform:i,err:a}},m=({modelViewTransform:t,dS:e})=>{let r,s,o,n=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];n<1e-6?(r=1,s=0,o=0,n=0):(n=Math.sqrt(n),r=e[0]/n,s=e[1]/n,o=e[2]/n);const i=Math.cos(n),h=Math.sin(n),l=1-i;u[0][0]=r*r*l+i,u[0][1]=r*s*l-o*h,u[0][2]=r*o*l+s*h,u[0][3]=e[3],u[1][0]=s*r*l+o*h,u[1][1]=s*s*l+i,u[1][2]=s*o*l-r*h,u[1][3]=e[4],u[2][0]=o*r*l-s*h,u[2][1]=o*s*l+r*h,u[2][2]=o*o*l+i,u[2][3]=e[5];const a=[[],[],[]];for(let e=0;e<3;e++){for(let r=0;r<4;r++)a[e][r]=t[e][0]*u[0][r]+t[e][1]*u[1][r]+t[e][2]*u[2][r];a[e][3]+=t[e][3]}return a},g=({dU:t,J_U_S:e})=>{const r=new s(e),n=new s(t),i=r.transpose(),h=i.mmul(r),l=i.mmul(n);let u;try{u=o(h)}catch(t){return null}return u.mmul(l).to1DArray()},w=({modelViewProjectionTransform:t,modelViewTransform:e,projectionTransform:r,worldCoord:s})=>{const o=e,{x:n,y:h,z:l}=s,u=i(t,n,h,l),f=u.z*u.z;a[0][0]=r[0][0]*u.z/f,a[0][1]=r[0][1]*u.z/f,a[0][2]=(r[0][2]*u.z-r[2][2]*u.x)/f,a[1][0]=r[1][0]*u.z/f,a[1][1]=r[1][1]*u.z/f,a[1][2]=(r[1][2]*u.z-r[2][2]*u.y)/f,c[0][0]=o[0][2]*h,c[0][1]=-o[0][2]*n,c[0][2]=o[0][1]*n-o[0][0]*h,c[0][3]=o[0][0],c[0][4]=o[0][1],c[0][5]=o[0][2],c[1][0]=o[1][2]*h,c[1][1]=-o[1][2]*n,c[1][2]=o[1][1]*n-o[1][0]*h,c[1][3]=o[1][0],c[1][4]=o[1][1],c[1][5]=o[1][2],c[2][0]=o[2][2]*h,c[2][1]=-o[2][2]*n,c[2][2]=o[2][1]*n-o[2][0]*h,c[2][3]=o[2][0],c[2][4]=o[2][1],c[2][5]=o[2][2];const m=[[],[]];for(let t=0;t<2;t++)for(let e=0;e<6;e++){m[t][e]=0;for(let r=0;r<3;r++)m[t][e]+=a[t][r]*c[r][e]}return m};t.exports={refineEstimate:({initialModelViewTransform:t,projectionTransform:e,worldCoords:r,screenCoords:s})=>{let o=0,n=0;for(let t=0;t<r.length;t++)o+=r[t].x,n+=r[t].y;o/=r.length,n/=r.length;const i=[];for(let t=0;t<r.length;t++)i.push({x:r[t].x-o,y:r[t].y-n,z:r[t].z});const h=[[],[],[]];for(let e=0;e<3;e++)for(let r=0;r<3;r++)h[e][r]=t[e][r];h[0][3]=t[0][0]*o+t[0][1]*n+t[0][3],h[1][3]=t[1][0]*o+t[1][1]*n+t[1][3],h[2][3]=t[2][0]*o+t[2][1]*n+t[2][3];const l=[1,.8,.6,.4,0];let u=h,a=null;for(let t=0;t<l.length;t++){const r=f({initialModelViewTransform:u,projectionTransform:e,worldCoords:i,screenCoords:s,inlierProb:l[t]});if(u=r.modelViewTransform,r.err<5){a=u;break}}return null===a?null:(a[0][3]=a[0][3]-a[0][0]*o-a[0][1]*n,a[1][3]=a[1][3]-a[1][0]*o-a[1][1]*n,a[2][3]=a[2][3]-a[2][0]*o-a[2][1]*n,a)}}},420:t=>{const e=(t,e,r,s)=>({x:t[0][0]*e+t[0][1]*r+t[0][3],y:t[1][0]*e+t[1][1]*r+t[1][3],z:t[2][0]*e+t[2][1]*r+t[2][3]});t.exports={buildModelViewProjectionTransform:(t,e)=>[[t[0][0]*e[0][0]+t[0][2]*e[2][0],t[0][0]*e[0][1]+t[0][2]*e[2][1],t[0][0]*e[0][2]+t[0][2]*e[2][2],t[0][0]*e[0][3]+t[0][2]*e[2][3]],[t[1][1]*e[1][0]+t[1][2]*e[2][0],t[1][1]*e[1][1]+t[1][2]*e[2][1],t[1][1]*e[1][2]+t[1][2]*e[2][2],t[1][1]*e[1][3]+t[1][2]*e[2][3]],[e[2][0],e[2][1],e[2][2],e[2][3]]],applyModelViewProjectionTransform:e,computeScreenCoordiate:(t,r,s,o)=>{const{x:n,y:i,z:h}=e(t,r,s);return{x:n/h,y:i/h}}}},233:t=>{t.exports={compute:t=>{const{v1:e,v2:r}=t;let s=0;for(let t=0;t<e.length;t++){let i=(e[t]^r[t])>>>0;s+=(n=void 0,((n=((n=((n=((n=(o=i)-(o>>1&1431655765))>>2&858993459)+(858993459&n))>>4)+n&252645135)>>8)+n&16711935)>>16)+n&65535)}var o,n;return s}}},934:t=>{const e=({querypoint:t,keypoint:e,keycenterX:r,keycenterY:s,scaleOneOverLogK:o})=>{let n=t.angle-e.angle;n<=-Math.PI?n+=2*Math.PI:n>Math.PI&&(n-=2*Math.PI);const i=t.scale/e.scale,h=i*Math.cos(n),l=i*Math.sin(n),u=[h,-l,l,h],a=[u[0]*e.x+u[1]*e.y,u[2]*e.x+u[3]*e.y],c=t.x-a[0],f=t.y-a[1];return{x:u[0]*r+u[1]*s+c,y:u[2]*r+u[3]*s+f,angle:n,scale:Math.log(i)*o}};t.exports={computeHoughMatches:t=>{const{keywidth:r,keyheight:s,querywidth:o,queryheight:n,matches:i}=t,h=1.2*o,l=-h,u=1.2*n,a=-u,c=12,f=1/Math.log(10),m=Math.max(r,s),g=Math.floor(r/2),w=Math.floor(s/2),p=[];for(let t=0;t<i.length;t++){const e=i[t].querypoint.scale,r=i[t].keypoint.scale;0==r&&console.log("ERROR divide zero");const s=e/r;p.push(s*m)}p.sort(((t,e)=>t-e));const d=.25*p[Math.floor(p.length/2)-(p.length%2==0?1:0)-1],y=Math.max(5,Math.ceil((h-l)/d)),M=Math.max(5,Math.ceil((u-a)/d)),b=y*M,x=b*c,E=[],v=[],S={};for(let t=0;t<i.length;t++){const r=i[t].querypoint,s=i[t].keypoint,{x:o,y:n,scale:m,angle:p}=e({querypoint:r,keypoint:s,keycenterX:g,keycenterY:w,scaleOneOverLogK:f});if(o<l||o>=h||n<a||n>=u||p<=-Math.PI||p>Math.PI||m<-1||m>=1){E[t]=!1;continue}let d=y*(o-l)/(h-l),k=M*(n-a)/(u-a),R=c*(p+Math.PI)/(2*Math.PI),I=10*(m- -1)/2;v[t]={binX:d,binY:k,binAngle:R,binScale:I};let T=Math.floor(d-.5),A=Math.floor(k-.5),q=Math.floor(I-.5),C=(Math.floor(R-.5)+c)%c;if(T<0||T+1>=y||A<0||A+1>=M||q<0||q+1>=10)E[t]=!1;else{for(let t=0;t<2;t++){let e=T+t;for(let t=0;t<2;t++){let r=A+t;for(let t=0;t<2;t++){let s=(C+t)%c;for(let t=0;t<2;t++){const o=e+r*y+s*b+(q+t)*x;void 0===S[o]&&(S[o]=0),S[o]+=1}}}}E[t]=!0}}let k=0,R=-1;if(Object.keys(S).forEach((t=>{S[t]>k&&(k=S[t],R=t)})),k<3)return[];const I=Math.floor(R%x%b%y),T=Math.floor((R-I)%x%b/y),A=Math.floor((R-I-T*y)%x/b),q=Math.floor((R-I-T*y-A*b)/x),C=[];for(let t=0;t<i.length;t++){if(!E[t])continue;const e=v[t];if(Math.abs(e.binX-(I+.5))>=1)continue;if(Math.abs(e.binY-(T+.5))>=1)continue;if(Math.abs(e.binScale-(q+.5))>=1)continue;const r=Math.abs(e.binAngle-(A+.5));Math.min(r,c-r)>=1||C.push(i[t])}return C}}},582:(t,e,r)=>{const{match:s}=r(492);t.exports={Matcher:class{constructor(t,e,r=!1){this.queryWidth=t,this.queryHeight=e,this.debugMode=r}matchDetection(t,e){let r={frames:[]},o=null;for(let n=0;n<t.length;n++){const{H:i,matches:h,debugExtra:l}=s({keyframe:t[n],querypoints:e,querywidth:this.queryWidth,queryheight:this.queryHeight,debugMode:this.debugMode});r.frames.push(l),i&&(null===o||o.matches.length<h.length)&&(o={keyframeIndex:n,H:i,matches:h})}if(null===o)return{keyframeIndex:-1,debugExtra:r};const n=[],i=[],h=t[o.keyframeIndex];for(let t=0;t<o.matches.length;t++){const e=o.matches[t].querypoint,r=o.matches[t].keypoint;n.push({x:e.x,y:e.y}),i.push({x:(r.x+.5)/h.scale,y:(r.y+.5)/h.scale,z:0})}return{screenCoords:n,worldCoords:i,keyframeIndex:o.keyframeIndex,debugExtra:r}}}}},492:(t,e,r)=>{const s=r(842).Z,{compute:o}=r(233),{computeHoughMatches:n}=r(934),{computeHomography:i}=r(838),{multiplyPointHomographyInhomogenous:h,matrixInverse33:l}=r(289),u=({node:t,keypoints:e,querypoint:r,queue:s,keypointIndexes:n,numPop:i})=>{if(t.leaf){for(let e=0;e<t.pointIndexes.length;e++)n.push(t.pointIndexes[e]);return}const h=[];for(let s=0;s<t.children.length;s++){const n=t.children[s].centerPointIndex,i=o({v1:e[n].descriptors,v2:r.descriptors});h.push(i)}let l=Number.MAX_SAFE_INTEGER;for(let e=0;e<t.children.length;e++)l=Math.min(l,h[e]);for(let e=0;e<t.children.length;e++)h[e]!==l&&s.push({node:t.children[e],d:h[e]});for(let o=0;o<t.children.length;o++)h[o]===l&&u({node:t.children[o],keypoints:e,querypoint:r,queue:s,keypointIndexes:n,numPop:i});if(i<8&&s.length>0){const{node:t,d:o}=s.pop();u({node:t,keypoints:e,querypoint:r,queue:s,keypointIndexes:n,numPop:i+=1})}},a=t=>{const{H:e,matches:r,threshold:s}=t,o=s*s,n=[];for(let t=0;t<r.length;t++){const s=r[t].querypoint,i=r[t].keypoint,l=h([i.x,i.y],e);(l[0]-s.x)*(l[0]-s.x)+(l[1]-s.y)*(l[1]-s.y)<=o&&n.push(r[t])}return n};t.exports={match:({keyframe:t,querypoints:e,querywidth:r,queryheight:c,debugMode:f})=>{let m={};const g=[];for(let r=0;r<e.length;r++){const n=e[r],i=n.maxima?t.maximaPoints:t.minimaPoints;if(0===i.length)continue;const h=n.maxima?t.maximaPointsCluster.rootNode:t.minimaPointsCluster.rootNode,l=[],a=new s([],((t,e)=>t.d-e.d));u({node:h,keypoints:i,querypoint:n,queue:a,keypointIndexes:l,numPop:0});let c=-1,f=Number.MAX_SAFE_INTEGER,m=Number.MAX_SAFE_INTEGER;for(let t=0;t<l.length;t++){const e=i[l[t]],r=o({v1:e.descriptors,v2:n.descriptors});r<f?(m=f,f=r,c=l[t]):r<m&&(m=r)}-1!==c&&(m===Number.MAX_SAFE_INTEGER||1*f/m<.7)&&g.push({querypoint:n,keypoint:i[c]})}if(f&&(m.matches=g),g.length<6)return{debugExtra:m};const w=n({keywidth:t.width,keyheight:t.height,querywidth:r,queryheight:c,matches:g});f&&(m.houghMatches=w);const p=i({srcPoints:w.map((t=>[t.keypoint.x,t.keypoint.y])),dstPoints:w.map((t=>[t.querypoint.x,t.querypoint.y])),keyframe:t});if(null===p)return{debugExtra:m};const d=a({H:p,matches:w,threshold:3});if(f&&(m.inlierMatches=d),d.length<6)return{debugExtra:m};const y=l(p,1e-5),M=[];for(let r=0;r<e.length;r++){const s=e[r],n=h([s.x,s.y],y);let i=-1,l=Number.MAX_SAFE_INTEGER,u=Number.MAX_SAFE_INTEGER;const a=s.maxima?t.maximaPoints:t.minimaPoints;for(let t=0;t<a.length;t++){const e=a[t];if((e.x-n[0])*(e.x-n[0])+(e.y-n[1])*(e.y-n[1])>100)continue;const r=o({v1:e.descriptors,v2:s.descriptors});r<l?(u=l,l=r,i=t):r<u&&(u=r)}-1!==i&&(u===Number.MAX_SAFE_INTEGER||1*l/u<.7)&&M.push({querypoint:s,keypoint:a[i]})}f&&(m.matches2=M);const b=n({keywidth:t.width,keyheight:t.height,querywidth:r,queryheight:c,matches:M});f&&(m.houghMatches2=b);const x=i({srcPoints:b.map((t=>[t.keypoint.x,t.keypoint.y])),dstPoints:b.map((t=>[t.querypoint.x,t.querypoint.y])),keyframe:t});if(null===x)return{debugExtra:m};const E=a({H:x,matches:b,threshold:3});return f&&(m.inlierMatches2=E),{H:x,matches:E,debugExtra:m}}}},838:(t,e,r)=>{const{Matrix:s,inverse:o}=r(331),{createRandomizer:n}=r(48),{quadrilateralConvex:i,matrixInverse33:h,smallestTriangleArea:l,multiplyPointHomographyInhomogenous:u,checkThreePointsConsistent:a,checkFourPointsConsistent:c,determinant:f}=r(289),{solveHomography:m}=r(450),g=({H:t,testPoints:e,keyframe:r})=>{const s=h(t,1e-5);if(null===s)return!1;const o=[];for(let t=0;t<e.length;t++)o.push(u(e[t],s));return!(l(o[0],o[1],o[2],o[3])<r.width*r.height*1e-4||!i(o[0],o[1],o[2],o[3]))},w=({inH:t})=>{const e=1/t[8],r=[];for(let s=0;s<8;s++)r[s]=t[s]*e;return r[8]=1,r},p=({H:t,srcPoint:e,dstPoint:r,oneOverScale2:s})=>{const o=u(e,t),n=[o[0]-r[0],o[1]-r[1]];return Math.log(1+(n[0]*n[0]+n[1]*n[1])*s)},d=({H:t,testPoints:e})=>{const r=[];for(let s=0;s<e.length;s++)r[s]=u(e[s],t);for(let t=0;t<e.length;t++){const s=t,o=(t+1)%e.length,n=(t+2)%e.length;if(!a(e[s],e[o],e[n],r[s],r[o],r[n]))return!1}return!0};t.exports={computeHomography:t=>{const{srcPoints:e,dstPoints:r,keyframe:s,quickMode:o}=t,i=[[0,0],[s.width,0],[s.width,s.height],[0,s.height]];if(e.length<4)return null;const h=Math.min(10,e.length),l=n(),u=[];for(let t=0;t<e.length;t++)u[t]=t;l.arrayShuffle({arr:u,sampleSize:u.length});const a=o?10:20,f=2*a;let y=0;const M=[];for(;y<f&&M.length<a;){if(y+=1,l.arrayShuffle({arr:u,sampleSize:4}),!c(e[u[0]],e[u[1]],e[u[2]],e[u[3]],r[u[0]],r[u[1]],r[u[2]],r[u[3]]))continue;const t=m([e[u[0]],e[u[1]],e[u[2]],e[u[3]]],[r[u[0]],r[u[1]],r[u[2]],r[u[3]]]);null!==t&&d({H:t,testPoints:i})&&M.push(t)}if(0===M.length)return null;const b=[];for(let t=0;t<M.length;t++)b.push({H:M[t],cost:0});let x=h;for(let t=0;t<e.length&&b.length>2;t+=x){x=Math.min(h,e.length-t);let s=t+x;for(let o=0;o<b.length;o++)for(let n=t;n<s;n++){const t=p({H:b[o].H,srcPoint:e[n],dstPoint:r[n],oneOverScale2:1e4});b[o].cost+=t}b.sort(((t,e)=>t.cost-e.cost)),b.splice(-Math.floor((b.length+1)/2))}let E=null;for(let t=0;t<b.length;t++){const e=w({inH:b[t].H});if(g({H:e,testPoints:i,keyframe:s})){E=e;break}}return E}}},289:t=>{const e=(t,e,r)=>(e[0]-t[0])*(r[1]-t[1])-(e[1]-t[1])*(r[0]-t[0]),r=t=>{const e=t[4]*t[8]-t[5]*t[7],r=t[3]*t[8]-t[5]*t[6],s=t[3]*t[7]-t[4]*t[6];return t[0]*e-t[1]*r+t[2]*s},s=(t,e)=>[t[0]-e[0],t[1]-e[1]],o=(t,e)=>{const r=t[0]*e[1]-t[1]*e[0];return.5*Math.abs(r)};t.exports={matrixInverse33:(t,e)=>{const s=r(t);if(Math.abs(s)<=e)return null;const o=1/s;return[(t[4]*t[8]-t[5]*t[7])*o,(t[2]*t[7]-t[1]*t[8])*o,(t[1]*t[5]-t[2]*t[4])*o,(t[5]*t[6]-t[3]*t[8])*o,(t[0]*t[8]-t[2]*t[6])*o,(t[2]*t[3]-t[0]*t[5])*o,(t[3]*t[7]-t[4]*t[6])*o,(t[1]*t[6]-t[0]*t[7])*o,(t[0]*t[4]-t[1]*t[3])*o]},matrixMul33:(t,e)=>{const r=[];return r[0]=t[0]*e[0]+t[1]*e[3]+t[2]*e[6],r[1]=t[0]*e[1]+t[1]*e[4]+t[2]*e[7],r[2]=t[0]*e[2]+t[1]*e[5]+t[2]*e[8],r[3]=t[3]*e[0]+t[4]*e[3]+t[5]*e[6],r[4]=t[3]*e[1]+t[4]*e[4]+t[5]*e[7],r[5]=t[3]*e[2]+t[4]*e[5]+t[5]*e[8],r[6]=t[6]*e[0]+t[7]*e[3]+t[8]*e[6],r[7]=t[6]*e[1]+t[7]*e[4]+t[8]*e[7],r[8]=t[6]*e[2]+t[7]*e[5]+t[8]*e[8],r},quadrilateralConvex:(t,r,s,o)=>{const n=e(t,r,s)<=0;return e(r,s,o)<=0===n&&e(s,o,t)<=0===n&&e(o,t,r)<=0===n},smallestTriangleArea:(t,e,r,n)=>{const i=s(e,t),h=s(r,t),l=s(n,t),u=s(e,r),a=s(n,r),c=o(i,h),f=o(h,l),m=o(i,l),g=o(u,a);return Math.min(Math.min(Math.min(c,f),m),g)},multiplyPointHomographyInhomogenous:(t,e)=>{const r=e[6]*t[0]+e[7]*t[1]+e[8],s=[];return s[0]=(e[0]*t[0]+e[1]*t[1]+e[2])/r,s[1]=(e[3]*t[0]+e[4]*t[1]+e[5])/r,s},checkThreePointsConsistent:(t,r,s,o,n,i)=>e(t,r,s)>0==e(o,n,i)>0,checkFourPointsConsistent:(t,r,s,o,n,i,h,l)=>e(t,r,s)>0==e(n,i,h)>0&&e(r,s,o)>0==e(i,h,l)>0&&e(s,o,t)>0==e(h,l,n)>0&&e(o,t,r)>0==e(l,n,i)>0,determinant:r}},450:(t,e,r)=>{const{Matrix:s,inverse:o}=r(331),n=t=>{let e=0,r=0;for(let s=0;s<t.length;s++)e+=t[s][0],r+=t[s][1];let s=e/t.length,o=r/t.length,n=0;for(let e=0;e<t.length;e++){const r=t[e][0]-s,i=t[e][1]-o;n+=Math.sqrt(r*r+i*i)}let i=Math.sqrt(2)*t.length/n;const h=[];for(let e=0;e<t.length;e++)h.push([(t[e][0]-s)*i,(t[e][1]-o)*i]);return{normPoints:h,param:{meanX:s,meanY:o,s:i}}};t.exports={solveHomography:(t,e)=>{const{normPoints:r,param:i}=n(t),{normPoints:h,param:l}=n(e),u=h.length,a=[],c=[];for(let t=0;t<u;t++){const e=[r[t][0],r[t][1],1,0,0,0,-r[t][0]*h[t][0],-r[t][1]*h[t][0]],s=[0,0,0,r[t][0],r[t][1],1,-r[t][0]*h[t][1],-r[t][1]*h[t][1]];a.push(e),a.push(s),c.push([h[t][0]]),c.push([h[t][1]])}try{const t=new s(a),e=new s(c),r=t.transpose(),n=r.mmul(t),h=r.mmul(e);return((t,e,r)=>{const s=r.s*r.meanX,o=r.s*r.meanY,n=[t[0]+s*t[6],t[1]+s*t[7],(t[0]+s*t[6])*-e.meanX+(t[1]+s*t[7])*-e.meanY+(t[2]+s)/e.s,t[3]+o*t[6],t[4]+o*t[7],(t[3]+o*t[6])*-e.meanX+(t[4]+o*t[7])*-e.meanY+(t[5]+o)/e.s,r.s*t[6],r.s*t[7],r.s*t[6]*-e.meanX+r.s*t[7]*-e.meanY+r.s/e.s];for(let t=0;t<9;t++)n[t]=n[t]/n[8];return n})(o(n).mmul(h).to1DArray(),i,l)}catch(t){return null}}}},48:t=>{t.exports={createRandomizer:()=>({seed:1234,arrayShuffle(t){const{arr:e,sampleSize:r}=t;for(let t=0;t<r;t++){this.seed=(214013*this.seed+2531011)%(1<<31);let r=this.seed>>16&32767;r%=e.length;let s=e[t];e[t]=e[r],e[r]=s}},nextInt(t){this.seed=(214013*this.seed+2531011)%(1<<31);let e=this.seed>>16&32767;return e%=t,e}})}}},e={};function r(s){if(e[s])return e[s].exports;var o=e[s]={exports:{}};return t[s](o,o.exports,r),o.exports}r.d=(t,e)=>{for(var s in e)r.o(e,s)&&!r.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{const{Matcher:t}=r(582),{Estimator:e}=r(421);let s=null,o=null,n=!1,i=null,h=null;onmessage=r=>{const{data:l}=r;if("setup"===l.type)s=l.projectionTransform,o=l.matchingDataList,n=l.debugMode,i=new t(l.inputWidth,l.inputHeight,n),h=new e(l.projectionTransform);else if("match"===l.type){const t=l.targetIndexes;let e=-1,r=null,s=null;for(let n=0;n<t.length;n++){const u=t[n],{keyframeIndex:a,screenCoords:c,worldCoords:f,debugExtra:m}=i.matchDetection(o[u],l.featurePoints);if(s=m,-1!==a){const t=h.estimate({screenCoords:c,worldCoords:f});t&&(e=u,r=t);break}}postMessage({type:"matchDone",targetIndex:e,modelViewTransform:r,debugExtra:s})}else if("trackUpdate"===l.type){const{modelViewTransform:t,worldCoords:e,screenCoords:r}=l,s=h.refineEstimate({initialModelViewTransform:t,worldCoords:e,screenCoords:r});postMessage({type:"trackUpdateDone",modelViewTransform:s})}}})()})();',b.p+"controller.worker.prod.js")}},69855:g=>{var v=window.URL||window.webkitURL;g.exports=function(b,M){try{try{var N;try{(N=new(window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder)).append(b),N=N.getBlob()}catch{N=new Blob([b])}return new Worker(v.createObjectURL(N))}catch{return new Worker("data:application/javascript,"+encodeURIComponent(b))}}catch{if(!M)throw Error("Inline worker is not supported");return new Worker(M)}}},95217:(g,v,b)=>{const M=b(80383),{Detector:N}=b(66416),{buildImageList:F,buildTrackingImageList:D}=b(17508),{build:O}=b(80723),z=b(61113),B=b(75042),W=async(G,K)=>{const J=[];for(let V=0;V<G.length;V++){const Z=G[V],le=new N(Z.width,Z.height);await B.nextFrame(),B.tidy(()=>{const fe=B.tensor(Z.data,[Z.data.length],"float32").reshape([Z.height,Z.width]),{featurePoints:be}=le.detect(fe),Me=be.filter(Ye=>Ye.maxima),ce=be.filter(Ye=>!Ye.maxima),We=O({points:Me}),Ke=O({points:ce});J.push({maximaPoints:Me,minimaPoints:ce,maximaPointsCluster:We,minimaPointsCluster:Ke,width:Z.width,height:Z.height,scale:Z.scale}),K(V)})}return J};g.exports={Compiler:class{constructor(){this.data=null}compileImageTargets(G,K){return new Promise(async(J,V)=>{const Z=[];for(let Me=0;Me<G.length;Me++){const ce=G[Me],We=document.createElement("canvas");We.width=ce.width,We.height=ce.height;const Ke=We.getContext("2d");Ke.drawImage(ce,0,0,ce.width,ce.height);const Ye=Ke.getImageData(0,0,ce.width,ce.height),xe=new Uint8Array(ce.width*ce.height);for(let Se=0;Se<xe.length;Se++){const je=4*Se;xe[Se]=Math.floor((Ye.data[je]+Ye.data[je+1]+Ye.data[je+2])/3)}const ue={data:xe,height:ce.height,width:ce.width};Z.push(ue)}const le=50/Z.length;let fe=0;this.data=[];for(let Me=0;Me<Z.length;Me++){const ce=Z[Me],We=F(ce),Ke=le/We.length,Ye=await W(We,()=>{fe+=Ke,K(fe)});this.data.push({targetImage:ce,imageList:We,matchingData:Ye})}for(let Me=0;Me<Z.length;Me++){const ce=D(Z[Me]);this.data[Me].trackingImageList=ce}const be=await new Promise((Me,ce)=>{const We=new M;We.onmessage=Ke=>{Ke.data.type==="progress"?K(50+Ke.data.percent):Ke.data.type==="compileDone"&&Me(Ke.data.list)},We.postMessage({type:"compile",targetImages:Z})});for(let Me=0;Me<Z.length;Me++)this.data[Me].trackingData=be[Me];J(this.data)})}exportData(){const G=[];for(let K=0;K<this.data.length;K++)G.push({targetImage:{width:this.data[K].targetImage.width,height:this.data[K].targetImage.height},trackingData:this.data[K].trackingData,matchingData:this.data[K].matchingData});return z.encode({v:2,dataList:G})}importData(G){const K=z.decode(new Uint8Array(G));if(!K.v||K.v!==2)return console.error("Your compiled .mind might be outdated. Please recompile"),[];const{dataList:J}=K;this.data=[];for(let V=0;V<J.length;V++)this.data.push({targetImage:J[V].targetImage,trackingData:J[V].trackingData,matchingData:J[V].matchingData});return this.data}}}},57957:(g,v,b)=>{const M=b(75042),N=b(71077),{Tracker:F}=b(46417),{CropDetector:D}=b(47051),{Compiler:O}=b(95217),{InputLoader:z}=b(37325);g.exports={Controller:class{constructor({inputWidth:B,inputHeight:W,onUpdate:G=null,debugMode:K=!1,maxTrack:J=1}){this.inputWidth=B,this.inputHeight=W,this.maxTrack=J,this.cropDetector=new D(this.inputWidth,this.inputHeight,K),this.inputLoader=new z(this.inputWidth,this.inputHeight),this.markerDimensions=null,this.onUpdate=G,this.debugMode=K,this.processingVideo=!1,this.shouldCaptureRegion=!1,this.capturedRegion=null,this.interestedTargetIndex=-1,this.trackingStates=[];const V=45*Math.PI/180,Z=this.inputHeight/2/Math.tan(V/2);this.projectionTransform=[[Z,0,this.inputWidth/2],[0,Z,this.inputHeight/2],[0,0,1]],this.projectionMatrix=this._glProjectionMatrix({projectionTransform:this.projectionTransform,width:this.inputWidth,height:this.inputHeight,near:10,far:1e5}),this.worker=new N,this.workerMatchDone=null,this.workerTrackDone=null,this.worker.onmessage=le=>{le.data.type==="matchDone"&&this.workerMatchDone!==null&&this.workerMatchDone(le.data),le.data.type==="trackUpdateDone"&&this.workerTrackDone!==null&&this.workerTrackDone(le.data)}}showTFStats(){console.log(M.memory().numTensors),console.table(M.memory())}addImageTargets(B){return new Promise(async(W,G)=>{const K=await fetch(B),J=await K.arrayBuffer();W(this.addImageTargetsFromBuffer(J))})}addImageTargetsFromBuffer(B){const W=new O().importData(B),G=[],K=[],J=[];for(let V=0;V<W.length;V++)K.push(W[V].matchingData),G.push(W[V].trackingData),J.push([W[V].targetImage.width,W[V].targetImage.height]);return this.tracker=new F(J,G,this.projectionTransform,this.inputWidth,this.inputHeight,this.debugMode),this.worker.postMessage({type:"setup",inputWidth:this.inputWidth,inputHeight:this.inputHeight,projectionTransform:this.projectionTransform,debugMode:this.debugMode,matchingDataList:K}),this.markerDimensions=J,{dimensions:J,matchingDataList:K,trackingDataList:G}}dummyRun(B){const W=this.inputLoader.loadInput(B);this.cropDetector.detect(W),this.tracker.dummyRun(W),W.dispose()}getProjectionMatrix(){return this.projectionMatrix}getWorldMatrix(B,W){return this._glModelViewMatrix(B,W)}async _detectAndMatch(B,W){const{featurePoints:G}=this.cropDetector.detectMoving(B),{targetIndex:K,modelViewTransform:J}=await this._workerMatch(G,W);return{targetIndex:K,modelViewTransform:J}}async _trackAndUpdate(B,W,G){const{worldCoords:K,screenCoords:J}=this.tracker.track(B,W,G);return K.length<4?null:await this._workerTrackUpdate(W,{worldCoords:K,screenCoords:J})}processVideo(B){if(!this.processingVideo){this.processingVideo=!0,this.trackingStates=[];for(let W=0;W<this.markerDimensions.length;W++)this.trackingStates.push({showing:!1,isTracking:!1,currentModelViewTransform:null,trackCount:0,trackMiss:0});(async()=>{for(;this.processingVideo;){const W=this.inputLoader.loadInput(B);let G=!1;if(this.trackingStates.reduce((K,J)=>K+(J.isTracking?1:0),0)<this.maxTrack){const K=[];for(let Z=0;Z<this.trackingStates.length;Z++)this.trackingStates[Z].isTracking!==!0&&(this.interestedTargetIndex!==-1&&this.interestedTargetIndex!==Z||K.push(Z));const{targetIndex:J,modelViewTransform:V}=await this._detectAndMatch(W,K);J!==-1&&(this.trackingStates[J].isTracking=!0,this.trackingStates[J].currentModelViewTransform=V,this.shouldCaptureRegion&&(G=!0))}for(let K=0;K<this.trackingStates.length;K++){const J=this.trackingStates[K];if(J.isTracking){let V=await this._trackAndUpdate(W,J.currentModelViewTransform,K);V===null?J.isTracking=!1:(J.currentModelViewTransform=V,G&&(this.capturedRegion=this.captureRegion(B,V,K)))}if(J.showing||J.isTracking&&(J.trackMiss=0,J.trackCount+=1,J.trackCount>10&&(J.showing=!0,J.trackingMatrix=null)),J.showing&&(J.isTracking?J.trackMiss=0:(J.trackCount=0,J.trackMiss+=1,J.trackMiss>15&&(J.showing=!1,J.trackingMatrix=null,this.onUpdate&&this.onUpdate({type:"updateMatrix",targetIndex:K,worldMatrix:null})))),J.showing){const V=this._glModelViewMatrix(J.currentModelViewTransform,K);if(J.trackingMatrix===null)J.trackingMatrix=V;else for(let le=0;le<V.length;le++)J.trackingMatrix[le]=J.trackingMatrix[le]+(V[le]-J.trackingMatrix[le])/5;const Z=[];for(let le=0;le<V.length;le++)Z[le]=J.trackingMatrix[le];this.onUpdate&&this.onUpdate({type:"updateMatrix",targetIndex:K,worldMatrix:Z})}}W.dispose(),this.onUpdate&&this.onUpdate({type:"processDone"}),await M.nextFrame()}})()}}stopProcessVideo(){this.processingVideo=!1}async detect(B){const W=this.inputLoader.loadInput(B),{featurePoints:G,debugExtra:K}=await this.cropDetector.detect(W);return W.dispose(),{featurePoints:G,debugExtra:K}}async match(B,W){const{modelViewTransform:G,debugExtra:K}=await this._workerMatch(B,[W]);return{modelViewTransform:G,debugExtra:K}}async track(B,W,G){const K=this.inputLoader.loadInput(B),J=this.tracker.track(K,W,G);return K.dispose(),J}captureRegion(B,W,G){const K=M.browser.fromPixels(B),J=this.markerDimensions[G],V=Math.floor(800*J[1]/J[0]),Z=this.tracker.captureRegion(K,W,G,800,V);return K.dispose(),Z}async trackUpdate(B,W){return W.worldCoords.length<4?null:await this._workerTrackUpdate(B,W)}_workerMatch(B,W){return new Promise(async(G,K)=>{this.workerMatchDone=J=>{G({targetIndex:J.targetIndex,modelViewTransform:J.modelViewTransform,debugExtra:J.debugExtra})},this.worker.postMessage({type:"match",featurePoints:B,targetIndexes:W})})}_workerTrackUpdate(B,W){return new Promise(async(G,K)=>{this.workerTrackDone=Z=>{G(Z.modelViewTransform)};const{worldCoords:J,screenCoords:V}=W;this.worker.postMessage({type:"trackUpdate",modelViewTransform:B,worldCoords:J,screenCoords:V})})}_glModelViewMatrix(B,W){const G=this.markerDimensions[W][1];return[B[0][0],-B[1][0],-B[2][0],0,-B[0][1],B[1][1],B[2][1],0,-B[0][2],B[1][2],B[2][2],0,B[0][1]*G+B[0][3],-(B[1][1]*G+B[1][3]),-(B[2][1]*G+B[2][3]),1]}_glProjectionMatrix({projectionTransform:B,width:W,height:G,near:K,far:J}){const V=[[2*B[0][0]/W,0,-(2*B[0][2]/W-1),0],[0,2*B[1][1]/G,-(2*B[1][2]/G-1),0],[0,0,-(J+K)/(J-K),-2*J*K/(J-K)],[0,0,-1,0]],Z=[];for(let le=0;le<4;le++)for(let fe=0;fe<4;fe++)Z.push(V[fe][le]);return Z}}}},47051:(g,v,b)=>{b(75042);const{Detector:M}=b(66416);b(47420),g.exports={CropDetector:class{constructor(N,F,D=!1){this.debugMode=D,this.width=N,this.height=F;let O=Math.min(N,F)/2,z=Math.pow(2,Math.round(Math.log(O)/Math.log(2)));this.cropSize=z,this.detector=new M(z,z,D),this.kernelCaches={},this.lastRandomIndex=4}detect(N){const F=Math.floor(this.height/2-this.cropSize/2),D=Math.floor(this.width/2-this.cropSize/2),O=this._detect(N,D,F);return this.debugMode&&(O.debugExtra.crop={startX:D,startY:F,cropSize:this.cropSize}),O}detectMoving(N){const F=this.lastRandomIndex%3,D=Math.floor(this.lastRandomIndex/3);let O=Math.floor(this.height/2-this.cropSize+D*this.cropSize/2),z=Math.floor(this.width/2-this.cropSize+F*this.cropSize/2);return z<0&&(z=0),O<0&&(O=0),z>=this.width-this.cropSize&&(z=this.width-this.cropSize-1),O>=this.height-this.cropSize&&(O=this.height-this.cropSize-1),this.lastRandomIndex=(this.lastRandomIndex+1)%9,this._detect(N,z,O)}_detect(N,F,D){const O=N.slice([D,F],[this.cropSize,this.cropSize]),{featurePoints:z,debugExtra:B}=this.detector.detect(O);return z.forEach(W=>{W.x+=F,W.y+=D}),this.debugMode&&(B.projectedImage=O.arraySync()),O.dispose(),{featurePoints:z,debugExtra:B}}}}},66416:(g,v,b)=>{const M=b(75042),{FREAKPOINTS:N}=b(12793),F=(N.length-1)*N.length/2;g.exports={Detector:class{constructor(D,O,z=!1){this.debugMode=z,this.width=D,this.height=O;let B=0;for(;D>=8&&O>=8&&(D/=2,O/=2,B++,B!==5););this.numOctaves=B,this.tensorCaches={},this.kernelCaches={}}detectImageData(D){const O=new Uint8ClampedArray(4*D.length);for(let B=0;B<D.length;B++)O[4*B]=D[B],O[4*B+1]=D[B],O[4*B+2]=D[B],O[4*B+3]=255;const z=new ImageData(O,this.width,this.height);return this.detect(z)}detect(D){let O=null;const z=[];for(let Ke=0;Ke<this.numOctaves;Ke++){let Ye,xe;Ye=Ke===0?this._applyFilter(D):this._downsampleBilinear(z[Ke-1][z[Ke-1].length-1]),xe=this._applyFilter(Ye),z.push([Ye,xe])}const B=[];for(let Ke=0;Ke<this.numOctaves;Ke++){let Ye=this._differenceImageBinomial(z[Ke][0],z[Ke][1]);B.push(Ye)}const W=[];for(let Ke=1;Ke<this.numOctaves-1;Ke++){const Ye=this._buildExtremas(B[Ke-1],B[Ke],B[Ke+1]);W.push(Ye)}const G=this._applyPrune(W),K=this._computeLocalization(G,B),J=this._computeOrientationHistograms(K,z),V=this._smoothHistograms(J),Z=this._computeExtremaAngles(V),le=this._computeExtremaFreak(z,K,Z),fe=this._computeFreakDescriptors(le),be=K.arraySync(),Me=Z.arraySync(),ce=fe.arraySync();this.debugMode&&(O={pyramidImages:z.map(Ke=>Ke.map(Ye=>Ye.arraySync())),dogPyramidImages:B.map(Ke=>Ke?Ke.arraySync():null),extremasResults:W.map(Ke=>Ke.arraySync()),extremaAngles:Z.arraySync(),prunedExtremas:G,localizedExtremas:K.arraySync()}),z.forEach(Ke=>Ke.forEach(Ye=>Ye.dispose())),B.forEach(Ke=>Ke&&Ke.dispose()),W.forEach(Ke=>Ke.dispose()),K.dispose(),J.dispose(),V.dispose(),Z.dispose(),le.dispose(),fe.dispose();const We=[];for(let Ke=0;Ke<be.length;Ke++){if(be[Ke][0]==0)continue;const Ye=[];for(let et=0;et<ce[Ke].length;et+=4){let ot=16777216*ce[Ke][et]+65536*ce[Ke][et+1]+256*ce[Ke][et+2]+ce[Ke][et+3];Ye.push(ot)}const xe=be[Ke][1],ue=be[Ke][2],Se=be[Ke][3]*Math.pow(2,xe)+Math.pow(2,xe-1)-.5,je=ue*Math.pow(2,xe)+Math.pow(2,xe-1)-.5,rt=Math.pow(2,xe);We.push({maxima:be[Ke][0]>0,x:Se,y:je,scale:rt,angle:Me[Ke],descriptors:Ye})}return{featurePoints:We,debugExtra:O}}_computeFreakDescriptors(D){if(!this.tensorCaches.computeFreakDescriptors){const B=[],W=[];for(let J=0;J<D.shape[1];J++)for(let V=J+1;V<D.shape[1];V++)B.push(J),W.push(V);const G=M.tensor(B,[B.length]).cast("int32"),K=M.tensor(W,[W.length]).cast("int32");this.tensorCaches.computeFreakDescriptors={positionT:M.keep(M.stack([G,K],1))}}const{positionT:O}=this.tensorCaches.computeFreakDescriptors,z=Math.ceil(F/8);if(!this.kernelCaches.computeFreakDescriptors){const B={variableNames:["freak","p"],outputShape:[D.shape[0],z],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();
	    int featureIndex = coords[0];
	    int descIndex = coords[1] * 8;

	    int sum = 0;
	    for (int i = 0; i < 8; i++) {
	      if (descIndex + i >= ${F}) {
		continue;
	      }

	      int p1 = int(getP(descIndex + i, 0));
	      int p2 = int(getP(descIndex + i, 1));

	      float v1 = getFreak(featureIndex, p1);
	      float v2 = getFreak(featureIndex, p2);

	      if (v1 < v2 + 0.01) {
	        sum += int(pow(2.0, float(7 - i)));
	      }
	    }
	    setOutput(float(sum));
	  }
	`};this.kernelCaches.computeFreakDescriptors=[B]}return M.tidy(()=>{const[B]=this.kernelCaches.computeFreakDescriptors;return this._runWebGLProgram(B,[D,O],"int32")})}_computeExtremaFreak(D,O,z){this.tensorCaches._computeExtremaFreak||M.tidy(()=>{const G=M.tensor(N);this.tensorCaches._computeExtremaFreak={freakPointsT:M.keep(G)}});const{freakPointsT:B}=this.tensorCaches._computeExtremaFreak,W=[];for(let G=1;G<D.length;G++)W.push(D[G][1]);if(!this.kernelCaches._computeExtremaFreak){const G=[];for(let V=1;V<D.length;V++)G.push("image"+V);let K="float getPixel(int octave, int y, int x) {";for(let V=1;V<D.length;V++)K+=`
	  if (octave == ${V}) {
	    return getImage${V}(y, x);
	  }
	`;K+="}";const J={variableNames:[...G,"extrema","angles","freakPoints"],outputShape:[O.shape[0],N.length],userCode:`
	  ${K}
	  void main() {
	    ivec2 coords = getOutputCoords();
	    int featureIndex = coords[0];
	    int freakIndex = coords[1];

	    float freakSigma = getFreakPoints(freakIndex, 0);
	    float freakX = getFreakPoints(freakIndex, 1);
	    float freakY = getFreakPoints(freakIndex, 2);

	    int octave = int(getExtrema(featureIndex, 1));
	    float inputY = getExtrema(featureIndex, 2);
	    float inputX = getExtrema(featureIndex, 3);
	    float inputAngle = getAngles(featureIndex);
            float cos = 7. * cos(inputAngle);
            float sin = 7. * sin(inputAngle);

	    float yp = inputY + freakX * sin + freakY * cos;
	    float xp = inputX + freakX * cos + freakY * -sin;

	    int x0 = int(floor(xp));
	    int x1 = x0 + 1;
	    int y0 = int(floor(yp));
	    int y1 = y0 + 1;

	    float f1 = getPixel(octave, y0, x0);
	    float f2 = getPixel(octave, y0, x1);
	    float f3 = getPixel(octave, y1, x0);
	    float f4 = getPixel(octave, y1, x1);

	    float x1f = float(x1);
	    float y1f = float(y1);
	    float x0f = float(x0);
	    float y0f = float(y0);

	    // ratio for interpolation between four neighbouring points
	    float value = (x1f - xp) * (y1f - yp) * f1
			+ (xp - x0f) * (y1f - yp) * f2
			+ (x1f - xp) * (yp - y0f) * f3
			+ (xp - x0f) * (yp - y0f) * f4;

	    setOutput(value);
	  }
	`};this.kernelCaches._computeExtremaFreak=[J]}return M.tidy(()=>{const[G]=this.kernelCaches._computeExtremaFreak;return this._compileAndRun(G,[...W,O,z,B])})}_computeExtremaAngles(D){if(!this.kernelCaches.computeExtremaAngles){const O={variableNames:["histogram"],outputShape:[D.shape[0]],userCode:`
	  void main() {
	    int featureIndex = getOutputCoords();

	    int maxIndex = 0;
	    for (int i = 1; i < 36; i++) {
	      if (getHistogram(featureIndex, i) > getHistogram(featureIndex, maxIndex)) {
		maxIndex = i;
	      }
	    }

	    int prev = imod(maxIndex - 1 + 36, 36);
	    int next = imod(maxIndex + 1, 36);

	    /**
	     * Fit a quatratic to 3 points. The system of equations is:
	     *
	     * y0 = A*x0^2 + B*x0 + C
	     * y1 = A*x1^2 + B*x1 + C
	     * y2 = A*x2^2 + B*x2 + C
	     *
	     * This system of equations is solved for A,B,C.
	     */
	    float p10 = float(maxIndex - 1);
	    float p11 = getHistogram(featureIndex, prev); 
	    float p20 = float(maxIndex);
	    float p21 = getHistogram(featureIndex, maxIndex); 
	    float p30 = float(maxIndex + 1);
	    float p31 = getHistogram(featureIndex, next); 

	    float d1 = (p30-p20)*(p30-p10);
	    float d2 = (p10-p20)*(p30-p10);
	    float d3 = p10-p20;

	    // If any of the denominators are zero then, just use maxIndex.
            float fbin = float(maxIndex);
	    if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {
	      float a = p10*p10;
	      float b = p20*p20;

	      // Solve for the coefficients A,B,C
	      float A = ((p31-p21)/d1)-((p11-p21)/d2);
	      float B = ((p11-p21)+(A*(b-a)))/d3;
	      float C = p11-(A*a)-(B*p10);
	      fbin = -B / (2. * A);
	    }

	    float an = 2.0 *${Math.PI} * (fbin + 0.5) / 36. - ${Math.PI};
	    setOutput(an);
	  }
	`};this.kernelCaches.computeExtremaAngles=O}return M.tidy(()=>{const O=this.kernelCaches.computeExtremaAngles;return this._compileAndRun(O,[D])})}_computeOrientationHistograms(D,O){const z=[];for(let W=1;W<O.length;W++)z.push(O[W][1]);this.tensorCaches.orientationHistograms||M.tidy(()=>{const W=Math.ceil(4.5),G=[];for(let K=-W;K<=W;K++)for(let J=-W;J<=W;J++){const V=J*J+K*K;if(V<=20.25){const Z=-.05555555555555555*V;let le=.0013888888*(720+Z*(720+Z*(360+Z*(120+Z*(30+Z*(6+Z))))));G.push([K,J,le])}}this.tensorCaches.orientationHistograms={radialPropertiesT:M.keep(M.tensor(G,[G.length,3]))}});const{radialPropertiesT:B}=this.tensorCaches.orientationHistograms;if(!this.kernelCaches.computeOrientationHistograms){const W=[];for(let V=1;V<O.length;V++)W.push("image"+V);let G="float getPixel(int octave, int y, int x) {";for(let V=1;V<O.length;V++)G+=`
	  if (octave == ${V}) {
	    return getImage${V}(y, x);
	  }
	`;G+="}";const K={variableNames:[...W,"extrema","radial"],outputShape:[D.shape[0],B.shape[0],2],userCode:`
	  ${G}

	  void main() {
	    ivec3 coords = getOutputCoords();
	    int featureIndex = coords[0];
	    int radialIndex = coords[1];
	    int propertyIndex = coords[2];

	    int radialY = int(getRadial(radialIndex, 0));
	    int radialX = int(getRadial(radialIndex, 1));
	    float radialW = getRadial(radialIndex, 2);

	    int octave = int(getExtrema(featureIndex, 1));
	    int y = int(getExtrema(featureIndex, 2));
	    int x = int(getExtrema(featureIndex, 3));

	    int xp = x + radialX;
	    int yp = y + radialY;

	    float dy = getPixel(octave, yp+1, xp) - getPixel(octave, yp-1, xp);
	    float dx = getPixel(octave, yp, xp+1) - getPixel(octave, yp, xp-1);

	    if (propertyIndex == 0) {
	      // be careful that atan(0, 0) gives 1.57 instead of 0 (different from js), but doesn't matter here, coz magnitude is 0
	      
	      float angle = atan(dy, dx) + ${Math.PI};
	      float fbin = angle * 36. * 0.159154943091895;
	      setOutput(fbin);
	      return;
	    }

	    if (propertyIndex == 1) {
	      float mag = sqrt(dx * dx + dy * dy);
	      float magnitude = radialW * mag;
	      setOutput(magnitude);
	      return;
	    }
	  }

	`},J={variableNames:["fbinMag"],outputShape:[D.shape[0],36],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();
	    int featureIndex = coords[0];
	    int binIndex = coords[1];

	    float sum = 0.;
	    for (int i = 0; i < ${B.shape[0]}; i++) {
	      float fbin = getFbinMag(featureIndex, i, 0);
	      int bin = int(floor(fbin - 0.5));
	      int b1 = imod(bin + 36, 36);
	      int b2 = imod(bin + 1 + 36, 36);

	      if (b1 == binIndex || b2 == binIndex) {
		float magnitude = getFbinMag(featureIndex, i, 1);
		float w2 = fbin - float(bin) - 0.5;
		float w1 = w2 * -1. + 1.;

		if (b1 == binIndex) {
		  sum += w1 * magnitude;
		}
		if (b2 == binIndex) {
		  sum += w2 * magnitude;
		}
	      }
	    }
	    setOutput(sum);
	  }
	`};this.kernelCaches.computeOrientationHistograms=[K,J]}return M.tidy(()=>{const[W,G]=this.kernelCaches.computeOrientationHistograms,K=this._compileAndRun(W,[...z,D,B]);return this._compileAndRun(G,[K])})}_smoothHistograms(D){if(!this.kernelCaches.smoothHistograms){const O={variableNames:["histogram"],outputShape:[D.shape[0],36],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();

	    int featureIndex = coords[0];
	    int binIndex = coords[1];

	    int prevBin = imod(binIndex - 1 + 36, 36);
	    int nextBin = imod(binIndex + 1, 36);

            float result = 0.274068619061197 * getHistogram(featureIndex, prevBin) + 0.451862761877606 * getHistogram(featureIndex, binIndex) + 0.274068619061197 * getHistogram(featureIndex, nextBin);

	    setOutput(result);
	  }
	`};this.kernelCaches.smoothHistograms=O}return M.tidy(()=>{const O=this.kernelCaches.smoothHistograms;for(let z=0;z<5;z++)D=this._compileAndRun(O,[D]);return D})}_computeLocalization(D,O){if(!this.kernelCaches.computeLocalization){const z=[];let B="float getPixel(int octave, int y, int x) {";for(let G=1;G<O.length;G++)z.push("image"+G),B+=`
	  if (octave == ${G}) {
	    return getImage${G}(y, x);
	  }
 	`;B+="}";const W={variableNames:[...z,"extrema"],outputShape:[D.length,3,3],userCode:`
	  ${B}

	  void main() {
	    ivec3 coords = getOutputCoords();
	    int featureIndex = coords[0];
	    float score = getExtrema(featureIndex, 0);
	    if (score == 0.0) {
	      return;
	    }

	    int dy = coords[1]-1;
	    int dx = coords[2]-1;
	    int octave = int(getExtrema(featureIndex, 1));
	    int y = int(getExtrema(featureIndex, 2));
	    int x = int(getExtrema(featureIndex, 3));
	    setOutput(getPixel(octave, y+dy, x+dx));
	  }
	`};this.kernelCaches.computeLocalization=[W]}return M.tidy(()=>{const z=this.kernelCaches.computeLocalization[0],B=M.tensor(D,[D.length,D[0].length],"int32"),W=this._compileAndRun(z,[...O.slice(1),B]).arraySync(),G=[];for(let J=0;J<W.length;J++){G.push([]);for(let V=0;V<W[J].length;V++)G[J].push([])}const K=[];for(let J=0;J<D.length;J++)K[J]=[D[J][0],D[J][1],D[J][2],D[J][3]];for(let J=0;J<K.length;J++){if(K[J][0]===0)continue;const V=W[J],Z=.5*(V[1][2]-V[1][0]),le=.5*(V[2][1]-V[0][1]),fe=V[1][2]+V[1][0]-2*V[1][1],be=V[2][1]+V[0][1]-2*V[1][1],Me=.25*(V[0][0]+V[2][2]-V[0][2]-V[2][0]),ce=fe*be-Me*Me,We=(be*-Z+-Me*-le)/ce,Ke=(-Me*-Z+fe*-le)/ce,Ye=K[J][2]+Ke,xe=K[J][3]+We;Math.abs(ce)<1e-4||(K[J][2]=Ye,K[J][3]=xe)}return M.tensor(K,[K.length,K[0].length],"float32")})}_applyPrune(D){if(!this.kernelCaches.applyPrune){const W=[];for(let G=0;G<D.length;G++){const K=D[G].shape[0],J=D[G].shape[1],V={variableNames:["extrema"],outputShape:[Math.floor(K/2),Math.floor(J/2)],userCode:`
	    void main() {
	      ivec2 coords = getOutputCoords();
	      int y = coords[0] * 2;
	      int x = coords[1] * 2;

	      float location = 0.0;
	      float values = getExtrema(y, x);

	      if (getExtrema(y+1, x) != 0.0) {
	        location = 1.0;
		values = getExtrema(y+1, x);
	      }
	      else if (getExtrema(y, x+1) != 0.0) {
	        location = 2.0;
		values = getExtrema(y, x+1);
	      }
	      else if (getExtrema(y+1, x+1) != 0.0) {
	        location = 3.0;
		values = getExtrema(y+1, x+1);
	      }

	      if (values < 0.0) {
	        setOutput(location * -1000.0 + values);
	      } else {
	        setOutput(location * 1000.0 + values);
	      }
	    }
	  `};W.push(V)}this.kernelCaches.applyPrune={reductionKernels:W}}const O=[],z=[];for(let W=0;W<100;W++){z.push([]),O.push([]);for(let G=0;G<5;G++)z[W].push([0,0,0,0]),O[W].push(0)}M.tidy(()=>{const{reductionKernels:W}=this.kernelCaches.applyPrune;for(let G=0;G<D.length;G++){const K=W[G],J=this._compileAndRun(K,[D[G]]),V=G+1,Z=J.arraySync(),le=J.shape[0],fe=J.shape[1],be=2*fe/10,Me=2*le/10;for(let ce=0;ce<le;ce++)for(let We=0;We<fe;We++){const Ke=Z[ce][We];if(Ke==0)continue;const Ye=Ke%1e3,xe=Math.floor(Math.abs(Ke)/1e3),ue=2*We+(xe===2||xe===3?1:0),Se=2*ce+(xe===1||xe===3?1:0),je=Math.floor(ue/be),rt=10*Math.floor(Se/Me)+je,et=Math.abs(Ye);let ot=5;for(;ot>=1&&et>O[rt][ot-1];)ot-=1;if(ot<5){for(let Et=4;Et>=ot+1;Et--)O[rt][Et]=O[rt][Et-1],z[rt][Et][0]=z[rt][Et-1][0],z[rt][Et][1]=z[rt][Et-1][1],z[rt][Et][2]=z[rt][Et-1][2],z[rt][Et][3]=z[rt][Et-1][3];O[rt][ot]=et,z[rt][ot][0]=Ye,z[rt][ot][1]=V,z[rt][ot][2]=Se,z[rt][ot][3]=ue}}}});const B=[];for(let W=0;W<100;W++)for(let G=0;G<5;G++)B.push(z[W][G]);return B}_buildExtremas(D,O,z){const B=O.shape[0],W=O.shape[1],G="w"+W;if(this.kernelCaches.buildExtremas||(this.kernelCaches.buildExtremas={}),!this.kernelCaches.buildExtremas[G]){const K={variableNames:["image0","image1","image2"],outputShape:[B,W],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();

	    int y = coords[0];
	    int x = coords[1];

	    float value = getImage1(y, x);

	    // Step 1: find local maxima/minima
	    if (value * value < 9.) {
	      setOutput(0.);
	      return;
	    }
	    if (y < 7 || y > ${B-1-7}) {
	      setOutput(0.);
	      return;
	    }
	    if (x < 7 || x > ${W-1-7}) {
	      setOutput(0.);
	      return;
	    }

	    bool isMax = true;
	    bool isMin = true;
	    for (int dy = -1; dy <= 1; dy++) {
	      for (int dx = -1; dx <= 1; dx++) {
	        float value0 = getImage0(y+dy, x+dx);
	        float value1 = getImage1(y+dy, x+dx);
	        float value2 = getImage2(y+dy, x+dx);

		if (value < value0 || value < value1 || value < value2) {
		  isMax = false;
		}
		if (value > value0 || value > value1 || value > value2) {
		  isMin = false;
		}
	      }
	    }

	    if (!isMax && !isMin) {
	      setOutput(0.);
	      return;
	    }

	    // compute edge score and reject based on threshold
	    float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);
	    float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);
	    float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));

	    float det = (dxx * dyy) - (dxy * dxy);

	    if (abs(det) < 0.0001) { // determinant undefined. no solution
	      setOutput(0.);
	      return;
	    }

	    float edgeScore = (dxx + dyy) * (dxx + dyy) / det;

	    if (abs(edgeScore) >= 6.25 ) {
	      setOutput(0.);
	      return;
	    }
	    setOutput(getImage1(y,x));
	  }
	`};this.kernelCaches.buildExtremas[G]=K}return M.tidy(()=>{const K=this.kernelCaches.buildExtremas[G];return D=this._downsampleBilinear(D),z=this._upsampleBilinear(z,O),this._compileAndRun(K,[D,O,z])})}_differenceImageBinomial(D,O){return M.tidy(()=>D.sub(O))}_applyFilter(D){const O=D.shape[0],z=D.shape[1],B="w"+z;if(this.kernelCaches.applyFilter||(this.kernelCaches.applyFilter={}),!this.kernelCaches.applyFilter[B]){const W={variableNames:["p"],outputShape:[O,z],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();

	    float sum = getP(coords[0], coords[1]-2);
	    sum += getP(coords[0], coords[1]-1) * 4.;
	    sum += getP(coords[0], coords[1]) * 6.;
	    sum += getP(coords[0], coords[1]+1) * 4.;
	    sum += getP(coords[0], coords[1]+2);
	    setOutput(sum);
	  }
	`},G={variableNames:["p"],outputShape:[O,z],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();

	    float sum = getP(coords[0]-2, coords[1]);
	    sum += getP(coords[0]-1, coords[1]) * 4.;
	    sum += getP(coords[0], coords[1]) * 6.;
	    sum += getP(coords[0]+1, coords[1]) * 4.;
	    sum += getP(coords[0]+2, coords[1]);
	    sum /= 256.;
	    setOutput(sum);
	  }
	`};this.kernelCaches.applyFilter[B]=[W,G]}return M.tidy(()=>{const[W,G]=this.kernelCaches.applyFilter[B],K=this._compileAndRun(W,[D]);return this._compileAndRun(G,[K])})}_upsampleBilinear(D,O){D.shape[0];const z="w"+D.shape[1];if(this.kernelCaches.upsampleBilinear||(this.kernelCaches.upsampleBilinear={}),!this.kernelCaches.upsampleBilinear[z]){const B={variableNames:["p"],outputShape:[O.shape[0],O.shape[1]],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();
	    int j = coords[0];
	    int i = coords[1];

	    float sj = 0.5 * float(j) - 0.25; 
	    float si = 0.5 * float(i) - 0.25;

	    float sj0 = floor(sj);
	    float sj1 = ceil(sj);
	    float si0 = floor(si);
	    float si1 = ceil(si);

	    int sj0I = int(sj0);
	    int sj1I = int(sj1);
	    int si0I = int(si0);
	    int si1I = int(si1);

	    float sum = 0.0;
	    sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
	    sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
	    sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
	    sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
	    setOutput(sum);
	  }
	`};this.kernelCaches.upsampleBilinear[z]=B}return M.tidy(()=>{const B=this.kernelCaches.upsampleBilinear[z];return this._compileAndRun(B,[D])})}_downsampleBilinear(D){const O=D.shape[0],z=D.shape[1],B="w"+z;if(this.kernelCaches.downsampleBilinear||(this.kernelCaches.downsampleBilinear={}),!this.kernelCaches.downsampleBilinear[B]){const W={variableNames:["p"],outputShape:[Math.floor(O/2),Math.floor(z/2)],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();
	    int y = coords[0] * 2;
	    int x = coords[1] * 2;

	    float sum = getP(y, x) * 0.25;
	    sum += getP(y+1,x) * 0.25; 
	    sum += getP(y, x+1) * 0.25; 
	    sum += getP(y+1,x+1) * 0.25;
	    setOutput(sum);
	  }
	`};this.kernelCaches.downsampleBilinear[B]=W}return M.tidy(()=>{const W=this.kernelCaches.downsampleBilinear[B];return this._compileAndRun(W,[D])})}_compileAndRun(D,O){const z=M.backend().compileAndRun(D,O);return M.engine().makeTensorFromDataId(z.dataId,z.shape,z.dtype)}_runWebGLProgram(D,O,z){const B=M.backend().runWebGLProgram(D,O,z);return M.engine().makeTensorFromDataId(B.dataId,B.shape,B.dtype)}}}},12793:g=>{const v=[{sigma:.55,points:[[-1,0],[-.5,-.866025],[.5,-.866025],[1,-0],[.5,.866025],[-.5,.866025]]},{sigma:.475,points:[[0,.930969],[-.806243,.465485],[-.806243,-.465485],[-0,-.930969],[.806243,-.465485],[.806243,.465485]]},{sigma:.4,points:[[.847306,-0],[.423653,.733789],[-.423653,.733789],[-.847306,0],[-.423653,-.733789],[.423653,-.733789]]},{sigma:.325,points:[[-0,-.741094],[.641806,-.370547],[.641806,.370547],[0,.741094],[-.641806,.370547],[-.641806,-.370547]]},{sigma:.25,points:[[-.595502,0],[-.297751,-.51572],[.297751,-.51572],[.595502,-0],[.297751,.51572],[-.297751,.51572]]},{sigma:.175,points:[[0,.362783],[-.314179,.181391],[-.314179,-.181391],[-0,-.362783],[.314179,-.181391],[.314179,.181391]]},{sigma:.1,points:[[0,0]]}],b=[];for(let M=0;M<v.length;M++){const N=v[M].sigma;for(let F=0;F<v[M].points.length;F++){const D=v[M].points[F];b.push([N,D[0],D[1]])}}g.exports={FREAKPOINTS:b}},47420:g=>{const v=(b,M,N,F)=>({x:b[0][0]*M+b[0][1]*N+b[0][3],y:b[1][0]*M+b[1][1]*N+b[1][3],z:b[2][0]*M+b[2][1]*N+b[2][3]});g.exports={buildModelViewProjectionTransform:(b,M)=>[[b[0][0]*M[0][0]+b[0][2]*M[2][0],b[0][0]*M[0][1]+b[0][2]*M[2][1],b[0][0]*M[0][2]+b[0][2]*M[2][2],b[0][0]*M[0][3]+b[0][2]*M[2][3]],[b[1][1]*M[1][0]+b[1][2]*M[2][0],b[1][1]*M[1][1]+b[1][2]*M[2][1],b[1][1]*M[1][2]+b[1][2]*M[2][2],b[1][1]*M[1][3]+b[1][2]*M[2][3]],[M[2][0],M[2][1],M[2][2],M[2][3]]],applyModelViewProjectionTransform:v,computeScreenCoordiate:(b,M,N,F)=>{const{x:D,y:O,z}=v(b,M,N);return{x:D/z,y:O/z}}}},17508:(g,v,b)=>{const{resize:M}=b(9140);g.exports={buildImageList:N=>{const F=[];let D=100/Math.min(N.width,N.height);for(;;)if(F.push(D),D*=Math.pow(2,.3333333333333333),D>=.95){D=1;break}F.push(D),F.reverse();const O=[];for(let z=0;z<F.length;z++)N.width,N.height,O.push(Object.assign(M({image:N,ratio:F[z]}),{scale:F[z]}));return O},buildTrackingImageList:N=>{const F=Math.min(N.width,N.height),D=[],O=[];D.push(256/F),D.push(128/F);for(let z=0;z<D.length;z++)O.push(Object.assign(M({image:N,ratio:D[z]}),{scale:D[z]}));return O}}},37325:(g,v,b)=>{const M=b(75042);g.exports={InputLoader:class{constructor(N,F){this.width=N,this.height=F,this.texShape=[F,N];const D=document.createElement("canvas").getContext("2d");D.canvas.width=N,D.canvas.height=F,this.context=D,this.program=this.buildProgram(N,F);const O=M.backend();this.tempPixelHandle=O.makeTensorInfo(this.texShape,"float32"),O.texData.get(this.tempPixelHandle.dataId).usage=2}_loadInput(N){return M.tidy(()=>{let F=M.browser.fromPixels(N);return F=F.mean(2),F})}loadInput(N){this.context.drawImage(N,0,0,this.width,this.height);const F=M.backend();return F.gpgpu.uploadPixelDataToTexture(F.getTexture(this.tempPixelHandle.dataId),this.context.canvas),this._compileAndRun(this.program,[this.tempPixelHandle])}buildProgram(N,F){const D=M.env().getNumber("WEBGL_VERSION")===2?"texture":"texture2D";return{variableNames:["A"],outputShape:this.texShape,userCode:`
	void main() {
	  ivec2 coords = getOutputCoords();
	  int texR = coords[0];
	  int texC = coords[1];
	  vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${N}.0, ${F}.0);

	  vec4 values = ${D}(A, uv);
	  setOutput((0.299 * values.r + 0.587 * values.g + 0.114 * values.b) * 255.0);
	}
      `}}_compileAndRun(N,F){const D=M.backend().compileAndRun(N,F);return M.engine().makeTensorFromDataId(D.dataId,D.shape,D.dtype)}_runWebGLProgram(N,F,D){const O=M.backend().runWebGLProgram(N,F,D);return M.engine().makeTensorFromDataId(O.dataId,O.shape,O.dtype)}}}},32233:g=>{g.exports={compute:v=>{const{v1:b,v2:M}=v;let N=0;for(let O=0;O<b.length;O++){let z=(b[O]^M[O])>>>0;N+=(D=void 0,((D=((D=((D=((D=(F=z)-(F>>1&1431655765))>>2&858993459)+(858993459&D))>>4)+D&252645135)>>8)+D&16711935)>>16)+D&65535)}var F,D;return N}}},80723:(g,v,b)=>{const{compute:M}=b(32233),{createRandomizer:N}=b(6048),F=D=>{const{points:O,pointIndexes:z,centerPointIndex:B,randomizer:W}=D;let G=!1;(z.length<=8||z.length<=16)&&(G=!0);const K={};if(!G){const V=_computeKMedoids({points:O,pointIndexes:z,randomizer:W});for(let Z=0;Z<V.length;Z++)K[z[V[Z]]]===void 0&&(K[z[V[Z]]]=[]),K[z[V[Z]]].push(z[Z])}Object.keys(K).length===1&&(G=!0);const J={centerPointIndex:B};if(G){J.leaf=!0,J.pointIndexes=[];for(let V=0;V<z.length;V++)J.pointIndexes.push(z[V]);return J}return J.leaf=!1,J.children=[],Object.keys(K).forEach(V=>{J.children.push(F({points:O,pointIndexes:K[V],centerPointIndex:V,randomizer:W}))}),J};_computeKMedoids=D=>{const{points:O,pointIndexes:z,randomizer:B}=D,W=[];for(let V=0;V<z.length;V++)W.push(V);let G=Number.MAX_SAFE_INTEGER,K=-1;const J=[];for(let V=0;V<128;V++){B.arrayShuffle({arr:W,sampleSize:8});let Z=0;const le=[];for(let fe=0;fe<z.length;fe++){let be=Number.MAX_SAFE_INTEGER;for(let Me=0;Me<8;Me++){const ce=z[W[Me]],We=M({v1:O[z[fe]].descriptors,v2:O[ce].descriptors});We<be&&(le[fe]=W[Me],be=We)}Z+=be}J.push(le),Z<G&&(G=Z,K=V)}return J[K]},g.exports={build:({points:D})=>{const O=[];for(let B=0;B<D.length;B++)O.push(B);const z=N();return{rootNode:F({points:D,pointIndexes:O,centerPointIndex:null,randomizer:z})}}}},46417:(g,v,b)=>{const M=b(75042),{buildModelViewProjectionTransform:N,computeScreenCoordiate:F}=b(47420);g.exports={Tracker:class{constructor(D,O,z,B,W,G=!1){this.markerDimensions=D,this.trackingDataList=O,this.projectionTransform=z,this.debugMode=G,this.trackingKeyframeList=[];for(let J=0;J<O.length;J++)this.trackingKeyframeList.push(O[J][1]);let K=0;for(let J=0;J<this.trackingKeyframeList.length;J++)K=Math.max(K,this.trackingKeyframeList[J].points.length);this.featurePointsListT=[],this.imagePixelsListT=[],this.imagePropertiesListT=[];for(let J=0;J<this.trackingKeyframeList.length;J++){const{featurePoints:V,imagePixels:Z,imageProperties:le}=this._prebuild(this.trackingKeyframeList[J],K);this.featurePointsListT[J]=V,this.imagePixelsListT[J]=Z,this.imagePropertiesListT[J]=le}this.kernelCaches={}}dummyRun(D){let O=[[1,1,1,1],[1,1,1,1],[1,1,1,1]];for(let z=0;z<this.featurePointsListT.length;z++)this.track(D,O,z)}captureRegion(D,O,z,B,W){const G=N(this.projectionTransform,O),K=this._buildAdjustedModelViewTransform(G),J=this._computeColoredProjection(K,D,z,B,W),V=J.arraySync();return K.dispose(),J.dispose(),V}track(D,O,z){let B={};const W=N(this.projectionTransform,O),G=this._buildAdjustedModelViewTransform(W),K=(this.markerDimensions[z][0],this.markerDimensions[z][1],this.trackingKeyframeList[z].width,this.trackingKeyframeList[z].height,this.featurePointsListT[z]),J=this.imagePixelsListT[z],V=this.imagePropertiesListT[z],Z=this._computeProjection(G,D,z),{matchingPointsT:le,simT:fe}=this._computeMatching(K,J,V,Z),be=le.arraySync(),Me=fe.arraySync(),ce=this.trackingKeyframeList[z],We=[],Ke=[],Ye=[];for(let xe=0;xe<be.length;xe++)if(Me[xe]>.8&&xe<ce.points.length){Ye.push(xe);const ue=F(W,be[xe][0],be[xe][1]);Ke.push(ue),We.push({x:ce.points[xe].x/ce.scale,y:ce.points[xe].y/ce.scale,z:0})}return this.debugMode&&(B={projectedImage:Z.arraySync(),matchingPoints:le.arraySync(),goodTrack:Ye,trackedPoints:Ke}),G.dispose(),Z.dispose(),le.dispose(),fe.dispose(),{worldCoords:We,screenCoords:Ke,debugExtra:B}}_computeMatching(D,O,z,B){const W=B.shape[0],G=B.shape[1],K=D.shape[0];if(!this.kernelCaches.computeMatching){const J={variableNames:["features","markerPixels","markerProperties","targetPixels"],outputShape:[K,441],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();

	    int featureIndex = coords[0];
	    int searchOffsetIndex = coords[1];

	    int markerWidth = int(getMarkerProperties(0));
	    int markerHeight = int(getMarkerProperties(1));
	    float markerScale = getMarkerProperties(2);

	    int searchOffsetX = imod(searchOffsetIndex, 21) * 1;
	    int searchOffsetY = searchOffsetIndex / 21 * 1;

	    int sCenterX = int(getFeatures(featureIndex, 0) * markerScale);
	    int sCenterY = int(getFeatures(featureIndex, 1) * markerScale);

	    int sx = sCenterX + searchOffsetX - 10;
	    int sy = sCenterY + searchOffsetY - 10;

	    if (sx < 6 || sx >= (${G} - 6) || sy < 6 || sy >= (${W} - 6)) {
	      setOutput(-2.);
	    } 
	    else {
	      float sumPoint = 0.;
	      float sumPointSquare = 0.;
	      float sumTemplate = 0.;
	      float sumTemplateSquare = 0.;
	      float sumPointTemplate = 0.;

	      for (int templateOffsetY = 0; templateOffsetY < 13; templateOffsetY++) {
		for (int templateOffsetX = 0; templateOffsetX < 13; templateOffsetX++) {
		  int fx2 = sCenterX + templateOffsetX - 6;
		  int fy2 = sCenterY + templateOffsetY - 6;

		  int sx2 = sx + templateOffsetX - 6;
		  int sy2 = sy + templateOffsetY - 6;

		  int markerPixelIndex = fy2 * markerWidth + fx2;
		  float markerPixel = getMarkerPixels(markerPixelIndex);
		  float targetPixel = getTargetPixels(sy2, sx2);

		  sumTemplate += markerPixel;
		  sumTemplateSquare += markerPixel * markerPixel;
		  sumPoint += targetPixel;
		  sumPointSquare += targetPixel * targetPixel;
		  sumPointTemplate += targetPixel * markerPixel;
		}
	      }

	      // Normalized cross-correlation
	      // !important divide first avoid overflow (e.g. sumPoint / count * sumPoint)
	      float count = float(13 * 13);
	      float pointVariance = sqrt(sumPointSquare - sumPoint / count * sumPoint);
	      float templateVariance = sqrt(sumTemplateSquare - sumTemplate / count * sumTemplate);

	      if (pointVariance < 0.0000001) {
		setOutput(-3.);
	      } else if (templateVariance < 0.0000001) {
		//setOutput(sumTemplate);
		setOutput(-4.);
	      } else {
		sumPointTemplate -= sumPoint / count * sumTemplate;
		float sim = sumPointTemplate / pointVariance / templateVariance;  
		setOutput(sim);
	      }
	    }
	  }
	`},V={variableNames:["featurePoints","markerProperties","maxIndex"],outputShape:[K,2],userCode:`
	  void main() {
	    ivec2 coords = getOutputCoords();

	    float markerScale = getMarkerProperties(2);

	    int featureIndex = coords[0];

	    int maxIndex = int(getMaxIndex(featureIndex));
	    int searchLocationIndex = maxIndex / 441;
	    int searchOffsetIndex = imod(maxIndex, 441);

	    if (coords[1] == 0) {
	      int searchOffsetX = imod(searchOffsetIndex, 21) * 1;
	      setOutput(getFeaturePoints(featureIndex, 0) + float(searchOffsetX - 10) / markerScale);
	    }
	    else if (coords[1] == 1) {
	      int searchOffsetY = searchOffsetIndex / 21 * 1;
	      setOutput(getFeaturePoints(featureIndex, 1) + float(searchOffsetY - 10) / markerScale);
	    }
	  }
	`},Z={variableNames:["sims","maxIndex"],outputShape:[K],userCode:`
	  void main() {
	    int featureIndex = getOutputCoords();
	    int maxIndex = int(getMaxIndex(featureIndex));
	    setOutput(getSims(featureIndex, maxIndex));
	  }
	`};this.kernelCaches.computeMatching=[J,V,Z]}return M.tidy(()=>{const J=this.kernelCaches.computeMatching,V=this._compileAndRun(J[0],[D,O,z,B]),Z=V.argMax(1);return{matchingPointsT:this._compileAndRun(J[1],[D,z,Z]),simT:this._compileAndRun(J[2],[V,Z])}})}_computeProjection(D,O,z){const B=this.trackingKeyframeList[z].width,W=this.trackingKeyframeList[z].height,G=this.trackingKeyframeList[z].scale,K=B+"-"+W;if(this.kernelCaches.computeProjection||(this.kernelCaches.computeProjection={}),!this.kernelCaches.computeProjection[K]){const J={variableNames:["M","pixel"],outputShape:[W,B],userCode:`
	  void main() {
	      ivec2 coords = getOutputCoords();

	      float m00 = getM(0, 0) * 1000.;
	      float m01 = getM(0, 1) * 1000.;
	      float m03 = getM(0, 3) * 1000.;
	      float m10 = getM(1, 0) * 1000.;
	      float m11 = getM(1, 1) * 1000.;
	      float m13 = getM(1, 3) * 1000.;
	      float m20 = getM(2, 0) * 1000.;
	      float m21 = getM(2, 1) * 1000.;
	      float m23 = getM(2, 3) * 1000.;

	      float y = float(coords[0]) / float(${G});
	      float x = float(coords[1]) / float(${G});
	      float uz = (x * m20) + (y * m21) + m23;
	      float oneOverUz = 1. / uz;

	      float ux = (x * m00) + (y * m01) + m03;
	      float uy = (x * m10) + (y * m11) + m13;

	      ux = floor(ux * oneOverUz + 0.5);
	      uy = floor(uy * oneOverUz + 0.5);
	      setOutput(getPixel(int(uy), int(ux)));
	    }
	`};this.kernelCaches.computeProjection[K]=J}return M.tidy(()=>{const J=this.kernelCaches.computeProjection[K];return this._compileAndRun(J,[D,O])})}_computeColoredProjection(D,O,z,B,W){const G=this.trackingKeyframeList[z].width,K=(this.trackingKeyframeList[z].height,this.trackingKeyframeList[z].scale*B/G),J=B+"-"+W;if(this.kernelCaches._computeColoredProjection||(this.kernelCaches._computeColoredProjection={}),!this.kernelCaches._computeColoredProjection[J]){const V={variableNames:["M","pixel"],outputShape:[W,B,3],userCode:`
	  void main() {
	      ivec3 coords = getOutputCoords();

	      float m00 = getM(0, 0) * 1000.;
	      float m01 = getM(0, 1) * 1000.;
	      float m03 = getM(0, 3) * 1000.;
	      float m10 = getM(1, 0) * 1000.;
	      float m11 = getM(1, 1) * 1000.;
	      float m13 = getM(1, 3) * 1000.;
	      float m20 = getM(2, 0) * 1000.;
	      float m21 = getM(2, 1) * 1000.;
	      float m23 = getM(2, 3) * 1000.;

	      float y = float(coords[0]) / float(${K});
	      float x = float(coords[1]) / float(${K});
	      float uz = (x * m20) + (y * m21) + m23;
	      float oneOverUz = 1. / uz;

	      float ux = (x * m00) + (y * m01) + m03;
	      float uy = (x * m10) + (y * m11) + m13;

	      ux = floor(ux * oneOverUz + 0.5);
	      uy = floor(uy * oneOverUz + 0.5);
	      setOutput(getPixel(int(uy), int(ux), coords[2]));
	    }
	`};this.kernelCaches._computeColoredProjection[J]=V}return M.tidy(()=>{const V=this.kernelCaches._computeColoredProjection[J];return this._compileAndRun(V,[D,O])})}_buildAdjustedModelViewTransform(D){return M.tidy(()=>{let O=[];for(let z=0;z<D.length;z++){O.push([]);for(let B=0;B<D[z].length;B++)O[z].push(D[z][B]/1e3)}return M.tensor(O,[3,4])})}_prebuild(D,O){return M.tidy(()=>{const z=D.scale,B=[];for(let K=0;K<O;K++)K<D.points.length?B.push([D.points[K].x/z,D.points[K].y/z]):B.push([-1,-1]);const W=M.tensor(D.data,[D.width*D.height]),G=M.tensor([D.width,D.height,D.scale],[3]);return{featurePoints:M.tensor(B,[B.length,2],"float32"),imagePixels:W,imageProperties:G}})}_compileAndRun(D,O){const z=M.backend().compileAndRun(D,O);return M.engine().makeTensorFromDataId(z.dataId,z.shape,z.dtype)}}}},9140:g=>{g.exports={downsampleBilinear:({image:v})=>{const{data:b,width:M,height:N}=v,F=Math.floor(M/2),D=Math.floor(N/2),O=new Float32Array(F*D),z=[0,1,M,M+1];for(let B=0;B<D;B++)for(let W=0;W<F;W++){let G=2*B*M+2*W,K=0;for(let J=0;J<z.length;J++)K+=b[G+z[J]];K*=.25,O[B*F+W]=K}return{data:O,width:F,height:D}},upsampleBilinear:({image:v,padOneWidth:b,padOneHeight:M})=>{const{width:N,height:F,data:D}=v,O=2*v.width+(b?1:0),z=2*v.height+(M?1:0),B=new Float32Array(O*z);for(let W=0;W<O;W++){const G=.5*W-.25;let K=Math.floor(G),J=Math.ceil(G);K<0&&(K=0),J>=N&&(J=N-1);for(let V=0;V<z;V++){const Z=.5*V-.25;let le=Math.floor(Z),fe=Math.ceil(Z);le<0&&(le=0),fe>=F&&(fe=F-1);const be=(J-G)*(fe-Z)*D[le*N+K]+(J-G)*(Z-le)*D[fe*N+K]+(G-K)*(fe-Z)*D[le*N+J]+(G-K)*(Z-le)*D[fe*N+J];B[V*O+W]=be}}return{data:B,width:O,height:z}},resize:({image:v,ratio:b})=>{const M=Math.round(v.width*b),N=Math.round(v.height*b),F=new Uint8Array(M*N);for(let D=0;D<M;D++){let O=Math.round(1*D/b),z=Math.round(1*(D+1)/b)-1;z>=v.width&&(z=v.width-1);for(let B=0;B<N;B++){let W=Math.round(1*B/b),G=Math.round(1*(B+1)/b)-1;G>=v.height&&(G=v.height-1);let K=0,J=0;for(let V=O;V<=z;V++)for(let Z=W;Z<=G;Z++)K+=1*v.data[Z*v.width+V],J+=1;F[B*M+D]=Math.floor(K/J)}}return{data:F,width:M,height:N}}}},6048:g=>{g.exports={createRandomizer:()=>({seed:1234,arrayShuffle(v){const{arr:b,sampleSize:M}=v;for(let N=0;N<M;N++){this.seed=(214013*this.seed+2531011)%-2147483648;let F=this.seed>>16&32767;F%=b.length;let D=b[N];b[N]=b[F],b[F]=D}},nextInt(v){this.seed=(214013*this.seed+2531011)%-2147483648;let b=this.seed>>16&32767;return b%=v,b}})}},82749:(g,v,b)=>{b(74412);const M=b(69894).Z,N=b(97676).Z,F=b(22810).Z;g.exports={UI:class{constructor({uiLoading:D,uiScanning:O,uiError:z}){D==="yes"?this.loadingModal=this._loadHTML(M):D!=="no"&&(this.loadingModal=document.querySelector(D)),z==="yes"?this.compatibilityModal=this._loadHTML(N):z!=="no"&&(this.compatibilityModal=document.querySelector(z)),O==="yes"?this.scanningMask=this._loadHTML(F):O!=="no"&&(this.scanningMask=document.querySelector(O)),this.hideLoading(),this.hideCompatibility(),this.hideScanning()}showLoading(){this.loadingModal&&this.loadingModal.classList.remove("hidden")}hideLoading(){this.loadingModal&&this.loadingModal.classList.add("hidden")}showCompatibility(){this.compatibilityModal&&this.compatibilityModal.classList.remove("hidden")}hideCompatibility(){this.compatibilityModal&&this.compatibilityModal.classList.add("hidden")}showScanning(){this.scanningMask&&this.scanningMask.classList.remove("hidden")}hideScanning(){this.scanningMask&&this.scanningMask.classList.add("hidden")}_loadHTML(D){const O=document.createElement("template");O.innerHTML=D.trim();const z=O.content.firstChild;return document.getElementsByTagName("body")[0].appendChild(z),z}}}},63906:()=>{},12993:()=>{},78352:()=>{},84589:()=>{},61758:()=>{}},i={};function u(g){if(i[g])return i[g].exports;var v=i[g]={id:g,loaded:!1,exports:{}};return E[g].call(v.exports,v,v.exports,u),v.loaded=!0,v.exports}u.amdD=function(){throw new Error("define cannot be used indirect")},u.amdO={},u.n=g=>{var v=g&&g.__esModule?()=>g.default:()=>g;return u.d(v,{a:v}),v},u.d=(g,v)=>{for(var b in v)u.o(v,b)&&!u.o(g,b)&&Object.defineProperty(g,b,{enumerable:!0,get:v[b]})},u.g=function(){if(typeof globalThis=="object")return globalThis;try{return this||new Function("return this")()}catch{if(typeof window=="object")return window}}(),u.o=(g,v)=>Object.prototype.hasOwnProperty.call(g,v),u.r=g=>{typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},u.nmd=g=>(g.paths=[],g.children||(g.children=[]),g),u.p="",(()=>{const g=u(2212),v=u(75042),{CSS3DRenderer:b}=u(21564),{Controller:M}=u(57957),{UI:N}=u(82749),F=new g.Matrix4;F.compose(new g.Vector3,new g.Quaternion,new g.Vector3(.001,.001,.001)),window.MINDAR||(window.MINDAR={}),window.MINDAR.IMAGE||(window.MINDAR.IMAGE={}),window.MINDAR.IMAGE.MindARThree=class{constructor({container:D,imageTargetSrc:O,maxTrack:z,captureRegion:B=!1,uiLoading:W="yes",uiScanning:G="yes",uiError:K="yes"}){this.container=D,this.imageTargetSrc=O,this.maxTrack=z,this.captureRegion=B,this.ui=new N({uiLoading:W,uiScanning:G,uiError:K}),this.scene=new g.Scene,this.cssScene=new g.Scene,this.renderer=new g.WebGLRenderer({antialias:!0,alpha:!0}),this.cssRenderer=new b({antialias:!0}),this.renderer.outputEncoding=g.sRGBEncoding,this.renderer.setPixelRatio(window.devicePixelRatio),this.camera=new g.PerspectiveCamera,this.anchors=[],this.renderer.domElement.style.position="absolute",this.cssRenderer.domElement.style.position="absolute",this.container.appendChild(this.renderer.domElement),this.container.appendChild(this.cssRenderer.domElement),window.addEventListener("resize",this.resize.bind(this))}async start(){this.ui.showLoading(),await this._startVideo(),await this._startAR()}stop(){this.controller.stopProcessVideo(),this.video.srcObject.getTracks().forEach(function(D){D.stop()}),this.video.remove()}addAnchor(D){const O=new g.Group;O.visible=!1,O.matrixAutoUpdate=!1;const z={group:O,targetIndex:D,onTargetFound:null,onTargetLost:null,css:!1,visible:!1};return this.anchors.push(z),this.scene.add(O),z}addCSSAnchor(D){const O=new g.Group;O.visible=!1,O.matrixAutoUpdate=!1;const z={group:O,targetIndex:D,onTargetFound:null,onTargetLost:null,css:!0,visible:!1};return this.anchors.push(z),this.cssScene.add(O),z}_startVideo(){return new Promise((D,O)=>{if(this.video=document.createElement("video"),this.video.setAttribute("autoplay",""),this.video.setAttribute("muted",""),this.video.setAttribute("playsinline",""),this.video.style.position="absolute",this.video.style.top="0px",this.video.style.left="0px",this.video.style.zIndex="-2",this.container.appendChild(this.video),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)return this.ui.showCompatibility(),void O();navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"environment"}}).then(z=>{this.video.addEventListener("loadedmetadata",()=>{this.video.setAttribute("width",this.video.videoWidth),this.video.setAttribute("height",this.video.videoHeight),D()}),this.video.srcObject=z}).catch(z=>{console.log("getUserMedia error",z),O()})})}_startAR(){return new Promise(async(D,O)=>{const z=this.video;this.container,this.controller=new M({inputWidth:z.videoWidth,inputHeight:z.videoHeight,maxTrack:this.maxTrack,onUpdate:W=>{if(W.type==="updateMatrix"){const{targetIndex:G,worldMatrix:K}=W;for(let J=0;J<this.anchors.length;J++)if(this.anchors[J].targetIndex===G){if(this.anchors[J].onTargetLost&&this.anchors[J].visible&&K===null&&(this.anchors[J].onTargetLost(),this.anchors[J].visible=!1),this.anchors[J].onTargetFound&&!this.anchors[J].visible&&K!==null){let V=null;this.captureRegion&&(V=this._pixels3DToImage(this.controller.capturedRegion)),this.anchors[J].onTargetFound({capturedImage:V}),this.anchors[J].visible=!0}if(this.anchors[J].css?this.anchors[J].group.children.forEach(V=>{V.element.style.visibility=K===null?"hidden":"visible"}):this.anchors[J].group.visible=K!==null,K!==null){let V=new g.Matrix4;V.elements=[...K],V.multiply(this.postMatrixs[G]),this.anchors[J].css&&V.multiply(F),this.anchors[J].group.matrix=V}K!==null&&this.ui.hideScanning()}}}}),this.captureRegion&&(this.controller.shouldCaptureRegion=!0),this.resize();const{dimensions:B}=await this.controller.addImageTargets(this.imageTargetSrc);this.postMatrixs=[];for(let W=0;W<B.length;W++){const G=new g.Vector3,K=new g.Quaternion,J=new g.Vector3,[V,Z]=B[W];G.x=V/2,G.y=V/2+(Z-V)/2,J.x=V,J.y=V,J.z=V;const le=new g.Matrix4;le.compose(G,K,J),this.postMatrixs.push(le)}await this.controller.dummyRun(this.video),this.ui.hideLoading(),this.ui.showScanning(),this.controller.processVideo(this.video),D()})}resize(){const{renderer:D,cssRenderer:O,camera:z,container:B,video:W}=this;if(!W)return;let G,K;const J=W.videoWidth/W.videoHeight;J>B.clientWidth/B.clientHeight?(K=B.clientHeight,G=K*J):(G=B.clientWidth,K=G/J);const V=this.controller.getProjectionMatrix(),Z=2*Math.atan(1/V[5]/K*B.clientHeight)*180/Math.PI,le=V[14]/(V[10]-1),fe=V[14]/(V[10]+1);V[5],V[0],z.fov=Z,z.near=le,z.far=fe,z.aspect=B.clientWidth/B.clientHeight,z.updateProjectionMatrix(),W.style.top=-(K-B.clientHeight)/2+"px",W.style.left=-(G-B.clientWidth)/2+"px",W.style.width=G+"px",W.style.height=K+"px";const be=D.domElement,Me=O.domElement;be.style.position="absolute",be.style.left=0,be.style.top=0,be.style.width=B.clientWidth+"px",be.style.height=B.clientHeight+"px",Me.style.position="absolute",Me.style.left=0,Me.style.top=0,Me.style.width=B.clientWidth+"px",Me.style.height=B.clientHeight+"px",D.setSize(B.clientWidth,B.clientHeight),O.setSize(B.clientWidth,B.clientHeight)}_pixels3DToImage(D){const O=D.length,z=D[0].length,B=new Uint8ClampedArray(O*z*4);for(let J=0;J<O;J++)for(let V=0;V<z;V++){const Z=J*z+V;B[4*Z+0]=D[J][V][0],B[4*Z+1]=D[J][V][1],B[4*Z+2]=D[J][V][2],B[4*Z+3]=255}const W=new ImageData(B,z,O),G=document.createElement("canvas");G.height=O,G.width=z;const K=G.getContext("2d");return K.clearRect(0,0,G.width,G.height),K.putImageData(W,0,0),G.toDataURL("image/png")}},window.MINDAR.IMAGE.THREE=g,window.MINDAR.IMAGE.tf=v})()})();/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const IN="132",vG=0,ak=1,bG=2,CN=1,wG=2,fv=3,wv=0,zs=1,a0=2,kN=1,Yp=0,yv=1,ok=2,lk=3,uk=4,_G=5,Qy=100,SG=101,MG=102,ck=103,hk=104,TG=200,EG=201,AG=202,IG=203,NN=204,RN=205,CG=206,kG=207,NG=208,RG=209,LG=210,DG=0,PG=1,FG=2,uE=3,OG=4,zG=5,BG=6,$G=7,Y1=0,UG=1,VG=2,Vm=0,WG=1,GG=2,HG=3,jG=4,qG=5,LN=300,K1=301,Z1=302,cE=303,hE=304,J1=306,wE=307,dE=1e3,fl=1001,pE=1002,la=1003,dk=1004,pk=1005,zl=1006,XG=1007,Q1=1008,o0=1009,YG=1010,KG=1011,V1=1012,ZG=1013,U1=1014,Um=1015,r0=1016,JG=1017,QG=1018,eH=1019,xv=1020,tH=1021,Kp=1022,ml=1023,nH=1024,rH=1025,iH=ml,i0=1026,_v=1027,sH=1028,aH=1029,oH=1030,lH=1031,uH=1032,cH=1033,fk=33776,mk=33777,gk=33778,yk=33779,xk=35840,vk=35841,bk=35842,wk=35843,hH=36196,_k=37492,Sk=37496,dH=37808,pH=37809,fH=37810,mH=37811,gH=37812,yH=37813,xH=37814,vH=37815,bH=37816,wH=37817,_H=37818,SH=37819,MH=37820,TH=37821,EH=36492,AH=37840,IH=37841,CH=37842,kH=37843,NH=37844,RH=37845,LH=37846,DH=37847,PH=37848,FH=37849,OH=37850,zH=37851,BH=37852,$H=37853,UH=2200,VH=2201,WH=2202,W1=2300,G1=2301,TT=2302,e0=2400,t0=2401,H1=2402,_E=2500,DN=2501,GH=0,Po=3e3,e_=3001,SE=3007,ME=3002,HH=3003,PN=3004,FN=3005,ON=3006,jH=3200,qH=3201,c0=0,XH=1,ET=7680,YH=519,Sv=35044,j1=35048,Mk="300 es";class Gm{addEventListener(i,u){this._listeners===void 0&&(this._listeners={});const g=this._listeners;g[i]===void 0&&(g[i]=[]),g[i].indexOf(u)===-1&&g[i].push(u)}hasEventListener(i,u){if(this._listeners===void 0)return!1;const g=this._listeners;return g[i]!==void 0&&g[i].indexOf(u)!==-1}removeEventListener(i,u){if(this._listeners===void 0)return;const v=this._listeners[i];if(v!==void 0){const b=v.indexOf(u);b!==-1&&v.splice(b,1)}}dispatchEvent(i){if(this._listeners===void 0)return;const g=this._listeners[i.type];if(g!==void 0){i.target=this;const v=g.slice(0);for(let b=0,M=v.length;b<M;b++)v[b].call(this,i);i.target=null}}}const Sa=[];for(let E=0;E<256;E++)Sa[E]=(E<16?"0":"")+E.toString(16);const AT=Math.PI/180,fE=180/Math.PI;function Ic(){const E=Math.random()*4294967295|0,i=Math.random()*4294967295|0,u=Math.random()*4294967295|0,g=Math.random()*4294967295|0;return(Sa[E&255]+Sa[E>>8&255]+Sa[E>>16&255]+Sa[E>>24&255]+"-"+Sa[i&255]+Sa[i>>8&255]+"-"+Sa[i>>16&15|64]+Sa[i>>24&255]+"-"+Sa[u&63|128]+Sa[u>>8&255]+"-"+Sa[u>>16&255]+Sa[u>>24&255]+Sa[g&255]+Sa[g>>8&255]+Sa[g>>16&255]+Sa[g>>24&255]).toUpperCase()}function pl(E,i,u){return Math.max(i,Math.min(u,E))}function KH(E,i){return(E%i+i)%i}function IT(E,i,u){return(1-u)*E+u*i}function Tk(E){return(E&E-1)===0&&E!==0}function ZH(E){return Math.pow(2,Math.floor(Math.log(E)/Math.LN2))}class xn{constructor(i=0,u=0){this.x=i,this.y=u}get width(){return this.x}set width(i){this.x=i}get height(){return this.y}set height(i){this.y=i}set(i,u){return this.x=i,this.y=u,this}setScalar(i){return this.x=i,this.y=i,this}setX(i){return this.x=i,this}setY(i){return this.y=i,this}setComponent(i,u){switch(i){case 0:this.x=u;break;case 1:this.y=u;break;default:throw new Error("index is out of range: "+i)}return this}getComponent(i){switch(i){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+i)}}clone(){return new this.constructor(this.x,this.y)}copy(i){return this.x=i.x,this.y=i.y,this}add(i,u){return u!==void 0?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(i,u)):(this.x+=i.x,this.y+=i.y,this)}addScalar(i){return this.x+=i,this.y+=i,this}addVectors(i,u){return this.x=i.x+u.x,this.y=i.y+u.y,this}addScaledVector(i,u){return this.x+=i.x*u,this.y+=i.y*u,this}sub(i,u){return u!==void 0?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(i,u)):(this.x-=i.x,this.y-=i.y,this)}subScalar(i){return this.x-=i,this.y-=i,this}subVectors(i,u){return this.x=i.x-u.x,this.y=i.y-u.y,this}multiply(i){return this.x*=i.x,this.y*=i.y,this}multiplyScalar(i){return this.x*=i,this.y*=i,this}divide(i){return this.x/=i.x,this.y/=i.y,this}divideScalar(i){return this.multiplyScalar(1/i)}applyMatrix3(i){const u=this.x,g=this.y,v=i.elements;return this.x=v[0]*u+v[3]*g+v[6],this.y=v[1]*u+v[4]*g+v[7],this}min(i){return this.x=Math.min(this.x,i.x),this.y=Math.min(this.y,i.y),this}max(i){return this.x=Math.max(this.x,i.x),this.y=Math.max(this.y,i.y),this}clamp(i,u){return this.x=Math.max(i.x,Math.min(u.x,this.x)),this.y=Math.max(i.y,Math.min(u.y,this.y)),this}clampScalar(i,u){return this.x=Math.max(i,Math.min(u,this.x)),this.y=Math.max(i,Math.min(u,this.y)),this}clampLength(i,u){const g=this.length();return this.divideScalar(g||1).multiplyScalar(Math.max(i,Math.min(u,g)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(i){return this.x*i.x+this.y*i.y}cross(i){return this.x*i.y-this.y*i.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(i){return Math.sqrt(this.distanceToSquared(i))}distanceToSquared(i){const u=this.x-i.x,g=this.y-i.y;return u*u+g*g}manhattanDistanceTo(i){return Math.abs(this.x-i.x)+Math.abs(this.y-i.y)}setLength(i){return this.normalize().multiplyScalar(i)}lerp(i,u){return this.x+=(i.x-this.x)*u,this.y+=(i.y-this.y)*u,this}lerpVectors(i,u,g){return this.x=i.x+(u.x-i.x)*g,this.y=i.y+(u.y-i.y)*g,this}equals(i){return i.x===this.x&&i.y===this.y}fromArray(i,u=0){return this.x=i[u],this.y=i[u+1],this}toArray(i=[],u=0){return i[u]=this.x,i[u+1]=this.y,i}fromBufferAttribute(i,u,g){return g!==void 0&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=i.getX(u),this.y=i.getY(u),this}rotateAround(i,u){const g=Math.cos(u),v=Math.sin(u),b=this.x-i.x,M=this.y-i.y;return this.x=b*g-M*v+i.x,this.y=b*v+M*g+i.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}xn.prototype.isVector2=!0;class Ma{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(i,u,g,v,b,M,N,F,D){const O=this.elements;return O[0]=i,O[1]=v,O[2]=N,O[3]=u,O[4]=b,O[5]=F,O[6]=g,O[7]=M,O[8]=D,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(i){const u=this.elements,g=i.elements;return u[0]=g[0],u[1]=g[1],u[2]=g[2],u[3]=g[3],u[4]=g[4],u[5]=g[5],u[6]=g[6],u[7]=g[7],u[8]=g[8],this}extractBasis(i,u,g){return i.setFromMatrix3Column(this,0),u.setFromMatrix3Column(this,1),g.setFromMatrix3Column(this,2),this}setFromMatrix4(i){const u=i.elements;return this.set(u[0],u[4],u[8],u[1],u[5],u[9],u[2],u[6],u[10]),this}multiply(i){return this.multiplyMatrices(this,i)}premultiply(i){return this.multiplyMatrices(i,this)}multiplyMatrices(i,u){const g=i.elements,v=u.elements,b=this.elements,M=g[0],N=g[3],F=g[6],D=g[1],O=g[4],z=g[7],B=g[2],W=g[5],G=g[8],K=v[0],J=v[3],V=v[6],Z=v[1],le=v[4],fe=v[7],be=v[2],Me=v[5],ce=v[8];return b[0]=M*K+N*Z+F*be,b[3]=M*J+N*le+F*Me,b[6]=M*V+N*fe+F*ce,b[1]=D*K+O*Z+z*be,b[4]=D*J+O*le+z*Me,b[7]=D*V+O*fe+z*ce,b[2]=B*K+W*Z+G*be,b[5]=B*J+W*le+G*Me,b[8]=B*V+W*fe+G*ce,this}multiplyScalar(i){const u=this.elements;return u[0]*=i,u[3]*=i,u[6]*=i,u[1]*=i,u[4]*=i,u[7]*=i,u[2]*=i,u[5]*=i,u[8]*=i,this}determinant(){const i=this.elements,u=i[0],g=i[1],v=i[2],b=i[3],M=i[4],N=i[5],F=i[6],D=i[7],O=i[8];return u*M*O-u*N*D-g*b*O+g*N*F+v*b*D-v*M*F}invert(){const i=this.elements,u=i[0],g=i[1],v=i[2],b=i[3],M=i[4],N=i[5],F=i[6],D=i[7],O=i[8],z=O*M-N*D,B=N*F-O*b,W=D*b-M*F,G=u*z+g*B+v*W;if(G===0)return this.set(0,0,0,0,0,0,0,0,0);const K=1/G;return i[0]=z*K,i[1]=(v*D-O*g)*K,i[2]=(N*g-v*M)*K,i[3]=B*K,i[4]=(O*u-v*F)*K,i[5]=(v*b-N*u)*K,i[6]=W*K,i[7]=(g*F-D*u)*K,i[8]=(M*u-g*b)*K,this}transpose(){let i;const u=this.elements;return i=u[1],u[1]=u[3],u[3]=i,i=u[2],u[2]=u[6],u[6]=i,i=u[5],u[5]=u[7],u[7]=i,this}getNormalMatrix(i){return this.setFromMatrix4(i).invert().transpose()}transposeIntoArray(i){const u=this.elements;return i[0]=u[0],i[1]=u[3],i[2]=u[6],i[3]=u[1],i[4]=u[4],i[5]=u[7],i[6]=u[2],i[7]=u[5],i[8]=u[8],this}setUvTransform(i,u,g,v,b,M,N){const F=Math.cos(b),D=Math.sin(b);return this.set(g*F,g*D,-g*(F*M+D*N)+M+i,-v*D,v*F,-v*(-D*M+F*N)+N+u,0,0,1),this}scale(i,u){const g=this.elements;return g[0]*=i,g[3]*=i,g[6]*=i,g[1]*=u,g[4]*=u,g[7]*=u,this}rotate(i){const u=Math.cos(i),g=Math.sin(i),v=this.elements,b=v[0],M=v[3],N=v[6],F=v[1],D=v[4],O=v[7];return v[0]=u*b+g*F,v[3]=u*M+g*D,v[6]=u*N+g*O,v[1]=-g*b+u*F,v[4]=-g*M+u*D,v[7]=-g*N+u*O,this}translate(i,u){const g=this.elements;return g[0]+=i*g[2],g[3]+=i*g[5],g[6]+=i*g[8],g[1]+=u*g[2],g[4]+=u*g[5],g[7]+=u*g[8],this}equals(i){const u=this.elements,g=i.elements;for(let v=0;v<9;v++)if(u[v]!==g[v])return!1;return!0}fromArray(i,u=0){for(let g=0;g<9;g++)this.elements[g]=i[g+u];return this}toArray(i=[],u=0){const g=this.elements;return i[u]=g[0],i[u+1]=g[1],i[u+2]=g[2],i[u+3]=g[3],i[u+4]=g[4],i[u+5]=g[5],i[u+6]=g[6],i[u+7]=g[7],i[u+8]=g[8],i}clone(){return new this.constructor().fromArray(this.elements)}}Ma.prototype.isMatrix3=!0;let Ly;class h0{static getDataURL(i){if(/^data:/i.test(i.src)||typeof HTMLCanvasElement=="undefined")return i.src;let u;if(i instanceof HTMLCanvasElement)u=i;else{Ly===void 0&&(Ly=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),Ly.width=i.width,Ly.height=i.height;const g=Ly.getContext("2d");i instanceof ImageData?g.putImageData(i,0,0):g.drawImage(i,0,0,i.width,i.height),u=Ly}return u.width>2048||u.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",i),u.toDataURL("image/jpeg",.6)):u.toDataURL("image/png")}}let JH=0;class Ta extends Gm{constructor(i=Ta.DEFAULT_IMAGE,u=Ta.DEFAULT_MAPPING,g=fl,v=fl,b=zl,M=Q1,N=ml,F=o0,D=1,O=Po){super(),Object.defineProperty(this,"id",{value:JH++}),this.uuid=Ic(),this.name="",this.image=i,this.mipmaps=[],this.mapping=u,this.wrapS=g,this.wrapT=v,this.magFilter=b,this.minFilter=M,this.anisotropy=D,this.format=N,this.internalFormat=null,this.type=F,this.offset=new xn(0,0),this.repeat=new xn(1,1),this.center=new xn(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ma,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=O,this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(i){return this.name=i.name,this.image=i.image,this.mipmaps=i.mipmaps.slice(0),this.mapping=i.mapping,this.wrapS=i.wrapS,this.wrapT=i.wrapT,this.magFilter=i.magFilter,this.minFilter=i.minFilter,this.anisotropy=i.anisotropy,this.format=i.format,this.internalFormat=i.internalFormat,this.type=i.type,this.offset.copy(i.offset),this.repeat.copy(i.repeat),this.center.copy(i.center),this.rotation=i.rotation,this.matrixAutoUpdate=i.matrixAutoUpdate,this.matrix.copy(i.matrix),this.generateMipmaps=i.generateMipmaps,this.premultiplyAlpha=i.premultiplyAlpha,this.flipY=i.flipY,this.unpackAlignment=i.unpackAlignment,this.encoding=i.encoding,this}toJSON(i){const u=i===void 0||typeof i=="string";if(!u&&i.textures[this.uuid]!==void 0)return i.textures[this.uuid];const g={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==void 0){const v=this.image;if(v.uuid===void 0&&(v.uuid=Ic()),!u&&i.images[v.uuid]===void 0){let b;if(Array.isArray(v)){b=[];for(let M=0,N=v.length;M<N;M++)v[M].isDataTexture?b.push(CT(v[M].image)):b.push(CT(v[M]))}else b=CT(v);i.images[v.uuid]={uuid:v.uuid,url:b}}g.image=v.uuid}return u||(i.textures[this.uuid]=g),g}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(i){if(this.mapping!==LN)return i;if(i.applyMatrix3(this.matrix),i.x<0||i.x>1)switch(this.wrapS){case dE:i.x=i.x-Math.floor(i.x);break;case fl:i.x=i.x<0?0:1;break;case pE:Math.abs(Math.floor(i.x)%2)===1?i.x=Math.ceil(i.x)-i.x:i.x=i.x-Math.floor(i.x);break}if(i.y<0||i.y>1)switch(this.wrapT){case dE:i.y=i.y-Math.floor(i.y);break;case fl:i.y=i.y<0?0:1;break;case pE:Math.abs(Math.floor(i.y)%2)===1?i.y=Math.ceil(i.y)-i.y:i.y=i.y-Math.floor(i.y);break}return this.flipY&&(i.y=1-i.y),i}set needsUpdate(i){i===!0&&this.version++}}Ta.DEFAULT_IMAGE=void 0;Ta.DEFAULT_MAPPING=LN;Ta.prototype.isTexture=!0;function CT(E){return typeof HTMLImageElement!="undefined"&&E instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&E instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&E instanceof ImageBitmap?h0.getDataURL(E):E.data?{data:Array.prototype.slice.call(E.data),width:E.width,height:E.height,type:E.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}class Si{constructor(i=0,u=0,g=0,v=1){this.x=i,this.y=u,this.z=g,this.w=v}get width(){return this.z}set width(i){this.z=i}get height(){return this.w}set height(i){this.w=i}set(i,u,g,v){return this.x=i,this.y=u,this.z=g,this.w=v,this}setScalar(i){return this.x=i,this.y=i,this.z=i,this.w=i,this}setX(i){return this.x=i,this}setY(i){return this.y=i,this}setZ(i){return this.z=i,this}setW(i){return this.w=i,this}setComponent(i,u){switch(i){case 0:this.x=u;break;case 1:this.y=u;break;case 2:this.z=u;break;case 3:this.w=u;break;default:throw new Error("index is out of range: "+i)}return this}getComponent(i){switch(i){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+i)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(i){return this.x=i.x,this.y=i.y,this.z=i.z,this.w=i.w!==void 0?i.w:1,this}add(i,u){return u!==void 0?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(i,u)):(this.x+=i.x,this.y+=i.y,this.z+=i.z,this.w+=i.w,this)}addScalar(i){return this.x+=i,this.y+=i,this.z+=i,this.w+=i,this}addVectors(i,u){return this.x=i.x+u.x,this.y=i.y+u.y,this.z=i.z+u.z,this.w=i.w+u.w,this}addScaledVector(i,u){return this.x+=i.x*u,this.y+=i.y*u,this.z+=i.z*u,this.w+=i.w*u,this}sub(i,u){return u!==void 0?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(i,u)):(this.x-=i.x,this.y-=i.y,this.z-=i.z,this.w-=i.w,this)}subScalar(i){return this.x-=i,this.y-=i,this.z-=i,this.w-=i,this}subVectors(i,u){return this.x=i.x-u.x,this.y=i.y-u.y,this.z=i.z-u.z,this.w=i.w-u.w,this}multiply(i){return this.x*=i.x,this.y*=i.y,this.z*=i.z,this.w*=i.w,this}multiplyScalar(i){return this.x*=i,this.y*=i,this.z*=i,this.w*=i,this}applyMatrix4(i){const u=this.x,g=this.y,v=this.z,b=this.w,M=i.elements;return this.x=M[0]*u+M[4]*g+M[8]*v+M[12]*b,this.y=M[1]*u+M[5]*g+M[9]*v+M[13]*b,this.z=M[2]*u+M[6]*g+M[10]*v+M[14]*b,this.w=M[3]*u+M[7]*g+M[11]*v+M[15]*b,this}divideScalar(i){return this.multiplyScalar(1/i)}setAxisAngleFromQuaternion(i){this.w=2*Math.acos(i.w);const u=Math.sqrt(1-i.w*i.w);return u<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=i.x/u,this.y=i.y/u,this.z=i.z/u),this}setAxisAngleFromRotationMatrix(i){let u,g,v,b;const F=i.elements,D=F[0],O=F[4],z=F[8],B=F[1],W=F[5],G=F[9],K=F[2],J=F[6],V=F[10];if(Math.abs(O-B)<.01&&Math.abs(z-K)<.01&&Math.abs(G-J)<.01){if(Math.abs(O+B)<.1&&Math.abs(z+K)<.1&&Math.abs(G+J)<.1&&Math.abs(D+W+V-3)<.1)return this.set(1,0,0,0),this;u=Math.PI;const le=(D+1)/2,fe=(W+1)/2,be=(V+1)/2,Me=(O+B)/4,ce=(z+K)/4,We=(G+J)/4;return le>fe&&le>be?le<.01?(g=0,v=.707106781,b=.707106781):(g=Math.sqrt(le),v=Me/g,b=ce/g):fe>be?fe<.01?(g=.707106781,v=0,b=.707106781):(v=Math.sqrt(fe),g=Me/v,b=We/v):be<.01?(g=.707106781,v=.707106781,b=0):(b=Math.sqrt(be),g=ce/b,v=We/b),this.set(g,v,b,u),this}let Z=Math.sqrt((J-G)*(J-G)+(z-K)*(z-K)+(B-O)*(B-O));return Math.abs(Z)<.001&&(Z=1),this.x=(J-G)/Z,this.y=(z-K)/Z,this.z=(B-O)/Z,this.w=Math.acos((D+W+V-1)/2),this}min(i){return this.x=Math.min(this.x,i.x),this.y=Math.min(this.y,i.y),this.z=Math.min(this.z,i.z),this.w=Math.min(this.w,i.w),this}max(i){return this.x=Math.max(this.x,i.x),this.y=Math.max(this.y,i.y),this.z=Math.max(this.z,i.z),this.w=Math.max(this.w,i.w),this}clamp(i,u){return this.x=Math.max(i.x,Math.min(u.x,this.x)),this.y=Math.max(i.y,Math.min(u.y,this.y)),this.z=Math.max(i.z,Math.min(u.z,this.z)),this.w=Math.max(i.w,Math.min(u.w,this.w)),this}clampScalar(i,u){return this.x=Math.max(i,Math.min(u,this.x)),this.y=Math.max(i,Math.min(u,this.y)),this.z=Math.max(i,Math.min(u,this.z)),this.w=Math.max(i,Math.min(u,this.w)),this}clampLength(i,u){const g=this.length();return this.divideScalar(g||1).multiplyScalar(Math.max(i,Math.min(u,g)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(i){return this.x*i.x+this.y*i.y+this.z*i.z+this.w*i.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(i){return this.normalize().multiplyScalar(i)}lerp(i,u){return this.x+=(i.x-this.x)*u,this.y+=(i.y-this.y)*u,this.z+=(i.z-this.z)*u,this.w+=(i.w-this.w)*u,this}lerpVectors(i,u,g){return this.x=i.x+(u.x-i.x)*g,this.y=i.y+(u.y-i.y)*g,this.z=i.z+(u.z-i.z)*g,this.w=i.w+(u.w-i.w)*g,this}equals(i){return i.x===this.x&&i.y===this.y&&i.z===this.z&&i.w===this.w}fromArray(i,u=0){return this.x=i[u],this.y=i[u+1],this.z=i[u+2],this.w=i[u+3],this}toArray(i=[],u=0){return i[u]=this.x,i[u+1]=this.y,i[u+2]=this.z,i[u+3]=this.w,i}fromBufferAttribute(i,u,g){return g!==void 0&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=i.getX(u),this.y=i.getY(u),this.z=i.getZ(u),this.w=i.getW(u),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}Si.prototype.isVector4=!0;class Cc extends Gm{constructor(i,u,g={}){super(),this.width=i,this.height=u,this.depth=1,this.scissor=new Si(0,0,i,u),this.scissorTest=!1,this.viewport=new Si(0,0,i,u),this.texture=new Ta(void 0,g.mapping,g.wrapS,g.wrapT,g.magFilter,g.minFilter,g.format,g.type,g.anisotropy,g.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:i,height:u,depth:1},this.texture.generateMipmaps=g.generateMipmaps!==void 0?g.generateMipmaps:!1,this.texture.internalFormat=g.internalFormat!==void 0?g.internalFormat:null,this.texture.minFilter=g.minFilter!==void 0?g.minFilter:zl,this.depthBuffer=g.depthBuffer!==void 0?g.depthBuffer:!0,this.stencilBuffer=g.stencilBuffer!==void 0?g.stencilBuffer:!1,this.depthTexture=g.depthTexture!==void 0?g.depthTexture:null}setTexture(i){i.image={width:this.width,height:this.height,depth:this.depth},this.texture=i}setSize(i,u,g=1){(this.width!==i||this.height!==u||this.depth!==g)&&(this.width=i,this.height=u,this.depth=g,this.texture.image.width=i,this.texture.image.height=u,this.texture.image.depth=g,this.dispose()),this.viewport.set(0,0,i,u),this.scissor.set(0,0,i,u)}clone(){return new this.constructor().copy(this)}copy(i){return this.width=i.width,this.height=i.height,this.depth=i.depth,this.viewport.copy(i.viewport),this.texture=i.texture.clone(),this.texture.image=MT({},this.texture.image),this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.depthTexture=i.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}Cc.prototype.isWebGLRenderTarget=!0;class QH extends Cc{constructor(i,u,g){super(i,u);const v=this.texture;this.texture=[];for(let b=0;b<g;b++)this.texture[b]=v.clone()}setSize(i,u,g=1){if(this.width!==i||this.height!==u||this.depth!==g){this.width=i,this.height=u,this.depth=g;for(let v=0,b=this.texture.length;v<b;v++)this.texture[v].image.width=i,this.texture[v].image.height=u,this.texture[v].image.depth=g;this.dispose()}return this.viewport.set(0,0,i,u),this.scissor.set(0,0,i,u),this}copy(i){this.dispose(),this.width=i.width,this.height=i.height,this.depth=i.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.depthTexture=i.depthTexture,this.texture.length=0;for(let u=0,g=i.texture.length;u<g;u++)this.texture[u]=i.texture[u].clone();return this}}QH.prototype.isWebGLMultipleRenderTargets=!0;class zN extends Cc{constructor(i,u,g){super(i,u,g),this.samples=4}copy(i){return super.copy.call(this,i),this.samples=i.samples,this}}zN.prototype.isWebGLMultisampleRenderTarget=!0;class oo{constructor(i=0,u=0,g=0,v=1){this._x=i,this._y=u,this._z=g,this._w=v}static slerp(i,u,g,v){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),g.slerpQuaternions(i,u,v)}static slerpFlat(i,u,g,v,b,M,N){let F=g[v+0],D=g[v+1],O=g[v+2],z=g[v+3];const B=b[M+0],W=b[M+1],G=b[M+2],K=b[M+3];if(N===0){i[u+0]=F,i[u+1]=D,i[u+2]=O,i[u+3]=z;return}if(N===1){i[u+0]=B,i[u+1]=W,i[u+2]=G,i[u+3]=K;return}if(z!==K||F!==B||D!==W||O!==G){let J=1-N;const V=F*B+D*W+O*G+z*K,Z=V>=0?1:-1,le=1-V*V;if(le>Number.EPSILON){const be=Math.sqrt(le),Me=Math.atan2(be,V*Z);J=Math.sin(J*Me)/be,N=Math.sin(N*Me)/be}const fe=N*Z;if(F=F*J+B*fe,D=D*J+W*fe,O=O*J+G*fe,z=z*J+K*fe,J===1-N){const be=1/Math.sqrt(F*F+D*D+O*O+z*z);F*=be,D*=be,O*=be,z*=be}}i[u]=F,i[u+1]=D,i[u+2]=O,i[u+3]=z}static multiplyQuaternionsFlat(i,u,g,v,b,M){const N=g[v],F=g[v+1],D=g[v+2],O=g[v+3],z=b[M],B=b[M+1],W=b[M+2],G=b[M+3];return i[u]=N*G+O*z+F*W-D*B,i[u+1]=F*G+O*B+D*z-N*W,i[u+2]=D*G+O*W+N*B-F*z,i[u+3]=O*G-N*z-F*B-D*W,i}get x(){return this._x}set x(i){this._x=i,this._onChangeCallback()}get y(){return this._y}set y(i){this._y=i,this._onChangeCallback()}get z(){return this._z}set z(i){this._z=i,this._onChangeCallback()}get w(){return this._w}set w(i){this._w=i,this._onChangeCallback()}set(i,u,g,v){return this._x=i,this._y=u,this._z=g,this._w=v,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(i){return this._x=i.x,this._y=i.y,this._z=i.z,this._w=i.w,this._onChangeCallback(),this}setFromEuler(i,u){if(!(i&&i.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const g=i._x,v=i._y,b=i._z,M=i._order,N=Math.cos,F=Math.sin,D=N(g/2),O=N(v/2),z=N(b/2),B=F(g/2),W=F(v/2),G=F(b/2);switch(M){case"XYZ":this._x=B*O*z+D*W*G,this._y=D*W*z-B*O*G,this._z=D*O*G+B*W*z,this._w=D*O*z-B*W*G;break;case"YXZ":this._x=B*O*z+D*W*G,this._y=D*W*z-B*O*G,this._z=D*O*G-B*W*z,this._w=D*O*z+B*W*G;break;case"ZXY":this._x=B*O*z-D*W*G,this._y=D*W*z+B*O*G,this._z=D*O*G+B*W*z,this._w=D*O*z-B*W*G;break;case"ZYX":this._x=B*O*z-D*W*G,this._y=D*W*z+B*O*G,this._z=D*O*G-B*W*z,this._w=D*O*z+B*W*G;break;case"YZX":this._x=B*O*z+D*W*G,this._y=D*W*z+B*O*G,this._z=D*O*G-B*W*z,this._w=D*O*z-B*W*G;break;case"XZY":this._x=B*O*z-D*W*G,this._y=D*W*z-B*O*G,this._z=D*O*G+B*W*z,this._w=D*O*z+B*W*G;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+M)}return u!==!1&&this._onChangeCallback(),this}setFromAxisAngle(i,u){const g=u/2,v=Math.sin(g);return this._x=i.x*v,this._y=i.y*v,this._z=i.z*v,this._w=Math.cos(g),this._onChangeCallback(),this}setFromRotationMatrix(i){const u=i.elements,g=u[0],v=u[4],b=u[8],M=u[1],N=u[5],F=u[9],D=u[2],O=u[6],z=u[10],B=g+N+z;if(B>0){const W=.5/Math.sqrt(B+1);this._w=.25/W,this._x=(O-F)*W,this._y=(b-D)*W,this._z=(M-v)*W}else if(g>N&&g>z){const W=2*Math.sqrt(1+g-N-z);this._w=(O-F)/W,this._x=.25*W,this._y=(v+M)/W,this._z=(b+D)/W}else if(N>z){const W=2*Math.sqrt(1+N-g-z);this._w=(b-D)/W,this._x=(v+M)/W,this._y=.25*W,this._z=(F+O)/W}else{const W=2*Math.sqrt(1+z-g-N);this._w=(M-v)/W,this._x=(b+D)/W,this._y=(F+O)/W,this._z=.25*W}return this._onChangeCallback(),this}setFromUnitVectors(i,u){let g=i.dot(u)+1;return g<Number.EPSILON?(g=0,Math.abs(i.x)>Math.abs(i.z)?(this._x=-i.y,this._y=i.x,this._z=0,this._w=g):(this._x=0,this._y=-i.z,this._z=i.y,this._w=g)):(this._x=i.y*u.z-i.z*u.y,this._y=i.z*u.x-i.x*u.z,this._z=i.x*u.y-i.y*u.x,this._w=g),this.normalize()}angleTo(i){return 2*Math.acos(Math.abs(pl(this.dot(i),-1,1)))}rotateTowards(i,u){const g=this.angleTo(i);if(g===0)return this;const v=Math.min(1,u/g);return this.slerp(i,v),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(i){return this._x*i._x+this._y*i._y+this._z*i._z+this._w*i._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let i=this.length();return i===0?(this._x=0,this._y=0,this._z=0,this._w=1):(i=1/i,this._x=this._x*i,this._y=this._y*i,this._z=this._z*i,this._w=this._w*i),this._onChangeCallback(),this}multiply(i,u){return u!==void 0?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(i,u)):this.multiplyQuaternions(this,i)}premultiply(i){return this.multiplyQuaternions(i,this)}multiplyQuaternions(i,u){const g=i._x,v=i._y,b=i._z,M=i._w,N=u._x,F=u._y,D=u._z,O=u._w;return this._x=g*O+M*N+v*D-b*F,this._y=v*O+M*F+b*N-g*D,this._z=b*O+M*D+g*F-v*N,this._w=M*O-g*N-v*F-b*D,this._onChangeCallback(),this}slerp(i,u){if(u===0)return this;if(u===1)return this.copy(i);const g=this._x,v=this._y,b=this._z,M=this._w;let N=M*i._w+g*i._x+v*i._y+b*i._z;if(N<0?(this._w=-i._w,this._x=-i._x,this._y=-i._y,this._z=-i._z,N=-N):this.copy(i),N>=1)return this._w=M,this._x=g,this._y=v,this._z=b,this;const F=1-N*N;if(F<=Number.EPSILON){const W=1-u;return this._w=W*M+u*this._w,this._x=W*g+u*this._x,this._y=W*v+u*this._y,this._z=W*b+u*this._z,this.normalize(),this._onChangeCallback(),this}const D=Math.sqrt(F),O=Math.atan2(D,N),z=Math.sin((1-u)*O)/D,B=Math.sin(u*O)/D;return this._w=M*z+this._w*B,this._x=g*z+this._x*B,this._y=v*z+this._y*B,this._z=b*z+this._z*B,this._onChangeCallback(),this}slerpQuaternions(i,u,g){this.copy(i).slerp(u,g)}equals(i){return i._x===this._x&&i._y===this._y&&i._z===this._z&&i._w===this._w}fromArray(i,u=0){return this._x=i[u],this._y=i[u+1],this._z=i[u+2],this._w=i[u+3],this._onChangeCallback(),this}toArray(i=[],u=0){return i[u]=this._x,i[u+1]=this._y,i[u+2]=this._z,i[u+3]=this._w,i}fromBufferAttribute(i,u){return this._x=i.getX(u),this._y=i.getY(u),this._z=i.getZ(u),this._w=i.getW(u),this}_onChange(i){return this._onChangeCallback=i,this}_onChangeCallback(){}}oo.prototype.isQuaternion=!0;class He{constructor(i=0,u=0,g=0){this.x=i,this.y=u,this.z=g}set(i,u,g){return g===void 0&&(g=this.z),this.x=i,this.y=u,this.z=g,this}setScalar(i){return this.x=i,this.y=i,this.z=i,this}setX(i){return this.x=i,this}setY(i){return this.y=i,this}setZ(i){return this.z=i,this}setComponent(i,u){switch(i){case 0:this.x=u;break;case 1:this.y=u;break;case 2:this.z=u;break;default:throw new Error("index is out of range: "+i)}return this}getComponent(i){switch(i){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+i)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(i){return this.x=i.x,this.y=i.y,this.z=i.z,this}add(i,u){return u!==void 0?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(i,u)):(this.x+=i.x,this.y+=i.y,this.z+=i.z,this)}addScalar(i){return this.x+=i,this.y+=i,this.z+=i,this}addVectors(i,u){return this.x=i.x+u.x,this.y=i.y+u.y,this.z=i.z+u.z,this}addScaledVector(i,u){return this.x+=i.x*u,this.y+=i.y*u,this.z+=i.z*u,this}sub(i,u){return u!==void 0?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(i,u)):(this.x-=i.x,this.y-=i.y,this.z-=i.z,this)}subScalar(i){return this.x-=i,this.y-=i,this.z-=i,this}subVectors(i,u){return this.x=i.x-u.x,this.y=i.y-u.y,this.z=i.z-u.z,this}multiply(i,u){return u!==void 0?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(i,u)):(this.x*=i.x,this.y*=i.y,this.z*=i.z,this)}multiplyScalar(i){return this.x*=i,this.y*=i,this.z*=i,this}multiplyVectors(i,u){return this.x=i.x*u.x,this.y=i.y*u.y,this.z=i.z*u.z,this}applyEuler(i){return i&&i.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Ek.setFromEuler(i))}applyAxisAngle(i,u){return this.applyQuaternion(Ek.setFromAxisAngle(i,u))}applyMatrix3(i){const u=this.x,g=this.y,v=this.z,b=i.elements;return this.x=b[0]*u+b[3]*g+b[6]*v,this.y=b[1]*u+b[4]*g+b[7]*v,this.z=b[2]*u+b[5]*g+b[8]*v,this}applyNormalMatrix(i){return this.applyMatrix3(i).normalize()}applyMatrix4(i){const u=this.x,g=this.y,v=this.z,b=i.elements,M=1/(b[3]*u+b[7]*g+b[11]*v+b[15]);return this.x=(b[0]*u+b[4]*g+b[8]*v+b[12])*M,this.y=(b[1]*u+b[5]*g+b[9]*v+b[13])*M,this.z=(b[2]*u+b[6]*g+b[10]*v+b[14])*M,this}applyQuaternion(i){const u=this.x,g=this.y,v=this.z,b=i.x,M=i.y,N=i.z,F=i.w,D=F*u+M*v-N*g,O=F*g+N*u-b*v,z=F*v+b*g-M*u,B=-b*u-M*g-N*v;return this.x=D*F+B*-b+O*-N-z*-M,this.y=O*F+B*-M+z*-b-D*-N,this.z=z*F+B*-N+D*-M-O*-b,this}project(i){return this.applyMatrix4(i.matrixWorldInverse).applyMatrix4(i.projectionMatrix)}unproject(i){return this.applyMatrix4(i.projectionMatrixInverse).applyMatrix4(i.matrixWorld)}transformDirection(i){const u=this.x,g=this.y,v=this.z,b=i.elements;return this.x=b[0]*u+b[4]*g+b[8]*v,this.y=b[1]*u+b[5]*g+b[9]*v,this.z=b[2]*u+b[6]*g+b[10]*v,this.normalize()}divide(i){return this.x/=i.x,this.y/=i.y,this.z/=i.z,this}divideScalar(i){return this.multiplyScalar(1/i)}min(i){return this.x=Math.min(this.x,i.x),this.y=Math.min(this.y,i.y),this.z=Math.min(this.z,i.z),this}max(i){return this.x=Math.max(this.x,i.x),this.y=Math.max(this.y,i.y),this.z=Math.max(this.z,i.z),this}clamp(i,u){return this.x=Math.max(i.x,Math.min(u.x,this.x)),this.y=Math.max(i.y,Math.min(u.y,this.y)),this.z=Math.max(i.z,Math.min(u.z,this.z)),this}clampScalar(i,u){return this.x=Math.max(i,Math.min(u,this.x)),this.y=Math.max(i,Math.min(u,this.y)),this.z=Math.max(i,Math.min(u,this.z)),this}clampLength(i,u){const g=this.length();return this.divideScalar(g||1).multiplyScalar(Math.max(i,Math.min(u,g)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(i){return this.x*i.x+this.y*i.y+this.z*i.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(i){return this.normalize().multiplyScalar(i)}lerp(i,u){return this.x+=(i.x-this.x)*u,this.y+=(i.y-this.y)*u,this.z+=(i.z-this.z)*u,this}lerpVectors(i,u,g){return this.x=i.x+(u.x-i.x)*g,this.y=i.y+(u.y-i.y)*g,this.z=i.z+(u.z-i.z)*g,this}cross(i,u){return u!==void 0?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(i,u)):this.crossVectors(this,i)}crossVectors(i,u){const g=i.x,v=i.y,b=i.z,M=u.x,N=u.y,F=u.z;return this.x=v*F-b*N,this.y=b*M-g*F,this.z=g*N-v*M,this}projectOnVector(i){const u=i.lengthSq();if(u===0)return this.set(0,0,0);const g=i.dot(this)/u;return this.copy(i).multiplyScalar(g)}projectOnPlane(i){return kT.copy(this).projectOnVector(i),this.sub(kT)}reflect(i){return this.sub(kT.copy(i).multiplyScalar(2*this.dot(i)))}angleTo(i){const u=Math.sqrt(this.lengthSq()*i.lengthSq());if(u===0)return Math.PI/2;const g=this.dot(i)/u;return Math.acos(pl(g,-1,1))}distanceTo(i){return Math.sqrt(this.distanceToSquared(i))}distanceToSquared(i){const u=this.x-i.x,g=this.y-i.y,v=this.z-i.z;return u*u+g*g+v*v}manhattanDistanceTo(i){return Math.abs(this.x-i.x)+Math.abs(this.y-i.y)+Math.abs(this.z-i.z)}setFromSpherical(i){return this.setFromSphericalCoords(i.radius,i.phi,i.theta)}setFromSphericalCoords(i,u,g){const v=Math.sin(u)*i;return this.x=v*Math.sin(g),this.y=Math.cos(u)*i,this.z=v*Math.cos(g),this}setFromCylindrical(i){return this.setFromCylindricalCoords(i.radius,i.theta,i.y)}setFromCylindricalCoords(i,u,g){return this.x=i*Math.sin(u),this.y=g,this.z=i*Math.cos(u),this}setFromMatrixPosition(i){const u=i.elements;return this.x=u[12],this.y=u[13],this.z=u[14],this}setFromMatrixScale(i){const u=this.setFromMatrixColumn(i,0).length(),g=this.setFromMatrixColumn(i,1).length(),v=this.setFromMatrixColumn(i,2).length();return this.x=u,this.y=g,this.z=v,this}setFromMatrixColumn(i,u){return this.fromArray(i.elements,u*4)}setFromMatrix3Column(i,u){return this.fromArray(i.elements,u*3)}equals(i){return i.x===this.x&&i.y===this.y&&i.z===this.z}fromArray(i,u=0){return this.x=i[u],this.y=i[u+1],this.z=i[u+2],this}toArray(i=[],u=0){return i[u]=this.x,i[u+1]=this.y,i[u+2]=this.z,i}fromBufferAttribute(i,u,g){return g!==void 0&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=i.getX(u),this.y=i.getY(u),this.z=i.getZ(u),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}He.prototype.isVector3=!0;const kT=new He,Ek=new oo;class Nu{constructor(i=new He(1/0,1/0,1/0),u=new He(-1/0,-1/0,-1/0)){this.min=i,this.max=u}set(i,u){return this.min.copy(i),this.max.copy(u),this}setFromArray(i){let u=1/0,g=1/0,v=1/0,b=-1/0,M=-1/0,N=-1/0;for(let F=0,D=i.length;F<D;F+=3){const O=i[F],z=i[F+1],B=i[F+2];O<u&&(u=O),z<g&&(g=z),B<v&&(v=B),O>b&&(b=O),z>M&&(M=z),B>N&&(N=B)}return this.min.set(u,g,v),this.max.set(b,M,N),this}setFromBufferAttribute(i){let u=1/0,g=1/0,v=1/0,b=-1/0,M=-1/0,N=-1/0;for(let F=0,D=i.count;F<D;F++){const O=i.getX(F),z=i.getY(F),B=i.getZ(F);O<u&&(u=O),z<g&&(g=z),B<v&&(v=B),O>b&&(b=O),z>M&&(M=z),B>N&&(N=B)}return this.min.set(u,g,v),this.max.set(b,M,N),this}setFromPoints(i){this.makeEmpty();for(let u=0,g=i.length;u<g;u++)this.expandByPoint(i[u]);return this}setFromCenterAndSize(i,u){const g=iv.copy(u).multiplyScalar(.5);return this.min.copy(i).sub(g),this.max.copy(i).add(g),this}setFromObject(i){return this.makeEmpty(),this.expandByObject(i)}clone(){return new this.constructor().copy(this)}copy(i){return this.min.copy(i.min),this.max.copy(i.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(i){return this.isEmpty()?i.set(0,0,0):i.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(i){return this.isEmpty()?i.set(0,0,0):i.subVectors(this.max,this.min)}expandByPoint(i){return this.min.min(i),this.max.max(i),this}expandByVector(i){return this.min.sub(i),this.max.add(i),this}expandByScalar(i){return this.min.addScalar(-i),this.max.addScalar(i),this}expandByObject(i){i.updateWorldMatrix(!1,!1);const u=i.geometry;u!==void 0&&(u.boundingBox===null&&u.computeBoundingBox(),NT.copy(u.boundingBox),NT.applyMatrix4(i.matrixWorld),this.union(NT));const g=i.children;for(let v=0,b=g.length;v<b;v++)this.expandByObject(g[v]);return this}containsPoint(i){return!(i.x<this.min.x||i.x>this.max.x||i.y<this.min.y||i.y>this.max.y||i.z<this.min.z||i.z>this.max.z)}containsBox(i){return this.min.x<=i.min.x&&i.max.x<=this.max.x&&this.min.y<=i.min.y&&i.max.y<=this.max.y&&this.min.z<=i.min.z&&i.max.z<=this.max.z}getParameter(i,u){return u.set((i.x-this.min.x)/(this.max.x-this.min.x),(i.y-this.min.y)/(this.max.y-this.min.y),(i.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(i){return!(i.max.x<this.min.x||i.min.x>this.max.x||i.max.y<this.min.y||i.min.y>this.max.y||i.max.z<this.min.z||i.min.z>this.max.z)}intersectsSphere(i){return this.clampPoint(i.center,iv),iv.distanceToSquared(i.center)<=i.radius*i.radius}intersectsPlane(i){let u,g;return i.normal.x>0?(u=i.normal.x*this.min.x,g=i.normal.x*this.max.x):(u=i.normal.x*this.max.x,g=i.normal.x*this.min.x),i.normal.y>0?(u+=i.normal.y*this.min.y,g+=i.normal.y*this.max.y):(u+=i.normal.y*this.max.y,g+=i.normal.y*this.min.y),i.normal.z>0?(u+=i.normal.z*this.min.z,g+=i.normal.z*this.max.z):(u+=i.normal.z*this.max.z,g+=i.normal.z*this.min.z),u<=-i.constant&&g>=-i.constant}intersectsTriangle(i){if(this.isEmpty())return!1;this.getCenter(sv),c1.subVectors(this.max,sv),Dy.subVectors(i.a,sv),Py.subVectors(i.b,sv),Fy.subVectors(i.c,sv),Up.subVectors(Py,Dy),Vp.subVectors(Fy,Py),zm.subVectors(Dy,Fy);let u=[0,-Up.z,Up.y,0,-Vp.z,Vp.y,0,-zm.z,zm.y,Up.z,0,-Up.x,Vp.z,0,-Vp.x,zm.z,0,-zm.x,-Up.y,Up.x,0,-Vp.y,Vp.x,0,-zm.y,zm.x,0];return!RT(u,Dy,Py,Fy,c1)||(u=[1,0,0,0,1,0,0,0,1],!RT(u,Dy,Py,Fy,c1))?!1:(h1.crossVectors(Up,Vp),u=[h1.x,h1.y,h1.z],RT(u,Dy,Py,Fy,c1))}clampPoint(i,u){return u.copy(i).clamp(this.min,this.max)}distanceToPoint(i){return iv.copy(i).clamp(this.min,this.max).sub(i).length()}getBoundingSphere(i){return this.getCenter(i.center),i.radius=this.getSize(iv).length()*.5,i}intersect(i){return this.min.max(i.min),this.max.min(i.max),this.isEmpty()&&this.makeEmpty(),this}union(i){return this.min.min(i.min),this.max.max(i.max),this}applyMatrix4(i){return this.isEmpty()?this:(Xh[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(i),Xh[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(i),Xh[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(i),Xh[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(i),Xh[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(i),Xh[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(i),Xh[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(i),Xh[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(i),this.setFromPoints(Xh),this)}translate(i){return this.min.add(i),this.max.add(i),this}equals(i){return i.min.equals(this.min)&&i.max.equals(this.max)}}Nu.prototype.isBox3=!0;const Xh=[new He,new He,new He,new He,new He,new He,new He,new He],iv=new He,NT=new Nu,Dy=new He,Py=new He,Fy=new He,Up=new He,Vp=new He,zm=new He,sv=new He,c1=new He,h1=new He,Bm=new He;function RT(E,i,u,g,v){for(let b=0,M=E.length-3;b<=M;b+=3){Bm.fromArray(E,b);const N=v.x*Math.abs(Bm.x)+v.y*Math.abs(Bm.y)+v.z*Math.abs(Bm.z),F=i.dot(Bm),D=u.dot(Bm),O=g.dot(Bm);if(Math.max(-Math.max(F,D,O),Math.min(F,D,O))>N)return!1}return!0}const e5=new Nu,Ak=new He,LT=new He,DT=new He;class d0{constructor(i=new He,u=-1){this.center=i,this.radius=u}set(i,u){return this.center.copy(i),this.radius=u,this}setFromPoints(i,u){const g=this.center;u!==void 0?g.copy(u):e5.setFromPoints(i).getCenter(g);let v=0;for(let b=0,M=i.length;b<M;b++)v=Math.max(v,g.distanceToSquared(i[b]));return this.radius=Math.sqrt(v),this}copy(i){return this.center.copy(i.center),this.radius=i.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(i){return i.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(i){return i.distanceTo(this.center)-this.radius}intersectsSphere(i){const u=this.radius+i.radius;return i.center.distanceToSquared(this.center)<=u*u}intersectsBox(i){return i.intersectsSphere(this)}intersectsPlane(i){return Math.abs(i.distanceToPoint(this.center))<=this.radius}clampPoint(i,u){const g=this.center.distanceToSquared(i);return u.copy(i),g>this.radius*this.radius&&(u.sub(this.center).normalize(),u.multiplyScalar(this.radius).add(this.center)),u}getBoundingBox(i){return this.isEmpty()?(i.makeEmpty(),i):(i.set(this.center,this.center),i.expandByScalar(this.radius),i)}applyMatrix4(i){return this.center.applyMatrix4(i),this.radius=this.radius*i.getMaxScaleOnAxis(),this}translate(i){return this.center.add(i),this}expandByPoint(i){DT.subVectors(i,this.center);const u=DT.lengthSq();if(u>this.radius*this.radius){const g=Math.sqrt(u),v=(g-this.radius)*.5;this.center.add(DT.multiplyScalar(v/g)),this.radius+=v}return this}union(i){return LT.subVectors(i.center,this.center).normalize().multiplyScalar(i.radius),this.expandByPoint(Ak.copy(i.center).add(LT)),this.expandByPoint(Ak.copy(i.center).sub(LT)),this}equals(i){return i.center.equals(this.center)&&i.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Yh=new He,PT=new He,d1=new He,Wp=new He,FT=new He,p1=new He,OT=new He;class p0{constructor(i=new He,u=new He(0,0,-1)){this.origin=i,this.direction=u}set(i,u){return this.origin.copy(i),this.direction.copy(u),this}copy(i){return this.origin.copy(i.origin),this.direction.copy(i.direction),this}at(i,u){return u.copy(this.direction).multiplyScalar(i).add(this.origin)}lookAt(i){return this.direction.copy(i).sub(this.origin).normalize(),this}recast(i){return this.origin.copy(this.at(i,Yh)),this}closestPointToPoint(i,u){u.subVectors(i,this.origin);const g=u.dot(this.direction);return g<0?u.copy(this.origin):u.copy(this.direction).multiplyScalar(g).add(this.origin)}distanceToPoint(i){return Math.sqrt(this.distanceSqToPoint(i))}distanceSqToPoint(i){const u=Yh.subVectors(i,this.origin).dot(this.direction);return u<0?this.origin.distanceToSquared(i):(Yh.copy(this.direction).multiplyScalar(u).add(this.origin),Yh.distanceToSquared(i))}distanceSqToSegment(i,u,g,v){PT.copy(i).add(u).multiplyScalar(.5),d1.copy(u).sub(i).normalize(),Wp.copy(this.origin).sub(PT);const b=i.distanceTo(u)*.5,M=-this.direction.dot(d1),N=Wp.dot(this.direction),F=-Wp.dot(d1),D=Wp.lengthSq(),O=Math.abs(1-M*M);let z,B,W,G;if(O>0)if(z=M*F-N,B=M*N-F,G=b*O,z>=0)if(B>=-G)if(B<=G){const K=1/O;z*=K,B*=K,W=z*(z+M*B+2*N)+B*(M*z+B+2*F)+D}else B=b,z=Math.max(0,-(M*B+N)),W=-z*z+B*(B+2*F)+D;else B=-b,z=Math.max(0,-(M*B+N)),W=-z*z+B*(B+2*F)+D;else B<=-G?(z=Math.max(0,-(-M*b+N)),B=z>0?-b:Math.min(Math.max(-b,-F),b),W=-z*z+B*(B+2*F)+D):B<=G?(z=0,B=Math.min(Math.max(-b,-F),b),W=B*(B+2*F)+D):(z=Math.max(0,-(M*b+N)),B=z>0?b:Math.min(Math.max(-b,-F),b),W=-z*z+B*(B+2*F)+D);else B=M>0?-b:b,z=Math.max(0,-(M*B+N)),W=-z*z+B*(B+2*F)+D;return g&&g.copy(this.direction).multiplyScalar(z).add(this.origin),v&&v.copy(d1).multiplyScalar(B).add(PT),W}intersectSphere(i,u){Yh.subVectors(i.center,this.origin);const g=Yh.dot(this.direction),v=Yh.dot(Yh)-g*g,b=i.radius*i.radius;if(v>b)return null;const M=Math.sqrt(b-v),N=g-M,F=g+M;return N<0&&F<0?null:N<0?this.at(F,u):this.at(N,u)}intersectsSphere(i){return this.distanceSqToPoint(i.center)<=i.radius*i.radius}distanceToPlane(i){const u=i.normal.dot(this.direction);if(u===0)return i.distanceToPoint(this.origin)===0?0:null;const g=-(this.origin.dot(i.normal)+i.constant)/u;return g>=0?g:null}intersectPlane(i,u){const g=this.distanceToPlane(i);return g===null?null:this.at(g,u)}intersectsPlane(i){const u=i.distanceToPoint(this.origin);return u===0||i.normal.dot(this.direction)*u<0}intersectBox(i,u){let g,v,b,M,N,F;const D=1/this.direction.x,O=1/this.direction.y,z=1/this.direction.z,B=this.origin;return D>=0?(g=(i.min.x-B.x)*D,v=(i.max.x-B.x)*D):(g=(i.max.x-B.x)*D,v=(i.min.x-B.x)*D),O>=0?(b=(i.min.y-B.y)*O,M=(i.max.y-B.y)*O):(b=(i.max.y-B.y)*O,M=(i.min.y-B.y)*O),g>M||b>v||((b>g||g!==g)&&(g=b),(M<v||v!==v)&&(v=M),z>=0?(N=(i.min.z-B.z)*z,F=(i.max.z-B.z)*z):(N=(i.max.z-B.z)*z,F=(i.min.z-B.z)*z),g>F||N>v)||((N>g||g!==g)&&(g=N),(F<v||v!==v)&&(v=F),v<0)?null:this.at(g>=0?g:v,u)}intersectsBox(i){return this.intersectBox(i,Yh)!==null}intersectTriangle(i,u,g,v,b){FT.subVectors(u,i),p1.subVectors(g,i),OT.crossVectors(FT,p1);let M=this.direction.dot(OT),N;if(M>0){if(v)return null;N=1}else if(M<0)N=-1,M=-M;else return null;Wp.subVectors(this.origin,i);const F=N*this.direction.dot(p1.crossVectors(Wp,p1));if(F<0)return null;const D=N*this.direction.dot(FT.cross(Wp));if(D<0||F+D>M)return null;const O=-N*Wp.dot(OT);return O<0?null:this.at(O/M,b)}applyMatrix4(i){return this.origin.applyMatrix4(i),this.direction.transformDirection(i),this}equals(i){return i.origin.equals(this.origin)&&i.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class cr{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(i,u,g,v,b,M,N,F,D,O,z,B,W,G,K,J){const V=this.elements;return V[0]=i,V[4]=u,V[8]=g,V[12]=v,V[1]=b,V[5]=M,V[9]=N,V[13]=F,V[2]=D,V[6]=O,V[10]=z,V[14]=B,V[3]=W,V[7]=G,V[11]=K,V[15]=J,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new cr().fromArray(this.elements)}copy(i){const u=this.elements,g=i.elements;return u[0]=g[0],u[1]=g[1],u[2]=g[2],u[3]=g[3],u[4]=g[4],u[5]=g[5],u[6]=g[6],u[7]=g[7],u[8]=g[8],u[9]=g[9],u[10]=g[10],u[11]=g[11],u[12]=g[12],u[13]=g[13],u[14]=g[14],u[15]=g[15],this}copyPosition(i){const u=this.elements,g=i.elements;return u[12]=g[12],u[13]=g[13],u[14]=g[14],this}setFromMatrix3(i){const u=i.elements;return this.set(u[0],u[3],u[6],0,u[1],u[4],u[7],0,u[2],u[5],u[8],0,0,0,0,1),this}extractBasis(i,u,g){return i.setFromMatrixColumn(this,0),u.setFromMatrixColumn(this,1),g.setFromMatrixColumn(this,2),this}makeBasis(i,u,g){return this.set(i.x,u.x,g.x,0,i.y,u.y,g.y,0,i.z,u.z,g.z,0,0,0,0,1),this}extractRotation(i){const u=this.elements,g=i.elements,v=1/Oy.setFromMatrixColumn(i,0).length(),b=1/Oy.setFromMatrixColumn(i,1).length(),M=1/Oy.setFromMatrixColumn(i,2).length();return u[0]=g[0]*v,u[1]=g[1]*v,u[2]=g[2]*v,u[3]=0,u[4]=g[4]*b,u[5]=g[5]*b,u[6]=g[6]*b,u[7]=0,u[8]=g[8]*M,u[9]=g[9]*M,u[10]=g[10]*M,u[11]=0,u[12]=0,u[13]=0,u[14]=0,u[15]=1,this}makeRotationFromEuler(i){i&&i.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const u=this.elements,g=i.x,v=i.y,b=i.z,M=Math.cos(g),N=Math.sin(g),F=Math.cos(v),D=Math.sin(v),O=Math.cos(b),z=Math.sin(b);if(i.order==="XYZ"){const B=M*O,W=M*z,G=N*O,K=N*z;u[0]=F*O,u[4]=-F*z,u[8]=D,u[1]=W+G*D,u[5]=B-K*D,u[9]=-N*F,u[2]=K-B*D,u[6]=G+W*D,u[10]=M*F}else if(i.order==="YXZ"){const B=F*O,W=F*z,G=D*O,K=D*z;u[0]=B+K*N,u[4]=G*N-W,u[8]=M*D,u[1]=M*z,u[5]=M*O,u[9]=-N,u[2]=W*N-G,u[6]=K+B*N,u[10]=M*F}else if(i.order==="ZXY"){const B=F*O,W=F*z,G=D*O,K=D*z;u[0]=B-K*N,u[4]=-M*z,u[8]=G+W*N,u[1]=W+G*N,u[5]=M*O,u[9]=K-B*N,u[2]=-M*D,u[6]=N,u[10]=M*F}else if(i.order==="ZYX"){const B=M*O,W=M*z,G=N*O,K=N*z;u[0]=F*O,u[4]=G*D-W,u[8]=B*D+K,u[1]=F*z,u[5]=K*D+B,u[9]=W*D-G,u[2]=-D,u[6]=N*F,u[10]=M*F}else if(i.order==="YZX"){const B=M*F,W=M*D,G=N*F,K=N*D;u[0]=F*O,u[4]=K-B*z,u[8]=G*z+W,u[1]=z,u[5]=M*O,u[9]=-N*O,u[2]=-D*O,u[6]=W*z+G,u[10]=B-K*z}else if(i.order==="XZY"){const B=M*F,W=M*D,G=N*F,K=N*D;u[0]=F*O,u[4]=-z,u[8]=D*O,u[1]=B*z+K,u[5]=M*O,u[9]=W*z-G,u[2]=G*z-W,u[6]=N*O,u[10]=K*z+B}return u[3]=0,u[7]=0,u[11]=0,u[12]=0,u[13]=0,u[14]=0,u[15]=1,this}makeRotationFromQuaternion(i){return this.compose(t5,i,n5)}lookAt(i,u,g){const v=this.elements;return hl.subVectors(i,u),hl.lengthSq()===0&&(hl.z=1),hl.normalize(),Gp.crossVectors(g,hl),Gp.lengthSq()===0&&(Math.abs(g.z)===1?hl.x+=1e-4:hl.z+=1e-4,hl.normalize(),Gp.crossVectors(g,hl)),Gp.normalize(),f1.crossVectors(hl,Gp),v[0]=Gp.x,v[4]=f1.x,v[8]=hl.x,v[1]=Gp.y,v[5]=f1.y,v[9]=hl.y,v[2]=Gp.z,v[6]=f1.z,v[10]=hl.z,this}multiply(i,u){return u!==void 0?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(i,u)):this.multiplyMatrices(this,i)}premultiply(i){return this.multiplyMatrices(i,this)}multiplyMatrices(i,u){const g=i.elements,v=u.elements,b=this.elements,M=g[0],N=g[4],F=g[8],D=g[12],O=g[1],z=g[5],B=g[9],W=g[13],G=g[2],K=g[6],J=g[10],V=g[14],Z=g[3],le=g[7],fe=g[11],be=g[15],Me=v[0],ce=v[4],We=v[8],Ke=v[12],Ye=v[1],xe=v[5],ue=v[9],Se=v[13],je=v[2],rt=v[6],et=v[10],ot=v[14],Et=v[3],tn=v[7],ln=v[11],Vt=v[15];return b[0]=M*Me+N*Ye+F*je+D*Et,b[4]=M*ce+N*xe+F*rt+D*tn,b[8]=M*We+N*ue+F*et+D*ln,b[12]=M*Ke+N*Se+F*ot+D*Vt,b[1]=O*Me+z*Ye+B*je+W*Et,b[5]=O*ce+z*xe+B*rt+W*tn,b[9]=O*We+z*ue+B*et+W*ln,b[13]=O*Ke+z*Se+B*ot+W*Vt,b[2]=G*Me+K*Ye+J*je+V*Et,b[6]=G*ce+K*xe+J*rt+V*tn,b[10]=G*We+K*ue+J*et+V*ln,b[14]=G*Ke+K*Se+J*ot+V*Vt,b[3]=Z*Me+le*Ye+fe*je+be*Et,b[7]=Z*ce+le*xe+fe*rt+be*tn,b[11]=Z*We+le*ue+fe*et+be*ln,b[15]=Z*Ke+le*Se+fe*ot+be*Vt,this}multiplyScalar(i){const u=this.elements;return u[0]*=i,u[4]*=i,u[8]*=i,u[12]*=i,u[1]*=i,u[5]*=i,u[9]*=i,u[13]*=i,u[2]*=i,u[6]*=i,u[10]*=i,u[14]*=i,u[3]*=i,u[7]*=i,u[11]*=i,u[15]*=i,this}determinant(){const i=this.elements,u=i[0],g=i[4],v=i[8],b=i[12],M=i[1],N=i[5],F=i[9],D=i[13],O=i[2],z=i[6],B=i[10],W=i[14],G=i[3],K=i[7],J=i[11],V=i[15];return G*(+b*F*z-v*D*z-b*N*B+g*D*B+v*N*W-g*F*W)+K*(+u*F*W-u*D*B+b*M*B-v*M*W+v*D*O-b*F*O)+J*(+u*D*z-u*N*W-b*M*z+g*M*W+b*N*O-g*D*O)+V*(-v*N*O-u*F*z+u*N*B+v*M*z-g*M*B+g*F*O)}transpose(){const i=this.elements;let u;return u=i[1],i[1]=i[4],i[4]=u,u=i[2],i[2]=i[8],i[8]=u,u=i[6],i[6]=i[9],i[9]=u,u=i[3],i[3]=i[12],i[12]=u,u=i[7],i[7]=i[13],i[13]=u,u=i[11],i[11]=i[14],i[14]=u,this}setPosition(i,u,g){const v=this.elements;return i.isVector3?(v[12]=i.x,v[13]=i.y,v[14]=i.z):(v[12]=i,v[13]=u,v[14]=g),this}invert(){const i=this.elements,u=i[0],g=i[1],v=i[2],b=i[3],M=i[4],N=i[5],F=i[6],D=i[7],O=i[8],z=i[9],B=i[10],W=i[11],G=i[12],K=i[13],J=i[14],V=i[15],Z=z*J*D-K*B*D+K*F*W-N*J*W-z*F*V+N*B*V,le=G*B*D-O*J*D-G*F*W+M*J*W+O*F*V-M*B*V,fe=O*K*D-G*z*D+G*N*W-M*K*W-O*N*V+M*z*V,be=G*z*F-O*K*F-G*N*B+M*K*B+O*N*J-M*z*J,Me=u*Z+g*le+v*fe+b*be;if(Me===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const ce=1/Me;return i[0]=Z*ce,i[1]=(K*B*b-z*J*b-K*v*W+g*J*W+z*v*V-g*B*V)*ce,i[2]=(N*J*b-K*F*b+K*v*D-g*J*D-N*v*V+g*F*V)*ce,i[3]=(z*F*b-N*B*b-z*v*D+g*B*D+N*v*W-g*F*W)*ce,i[4]=le*ce,i[5]=(O*J*b-G*B*b+G*v*W-u*J*W-O*v*V+u*B*V)*ce,i[6]=(G*F*b-M*J*b-G*v*D+u*J*D+M*v*V-u*F*V)*ce,i[7]=(M*B*b-O*F*b+O*v*D-u*B*D-M*v*W+u*F*W)*ce,i[8]=fe*ce,i[9]=(G*z*b-O*K*b-G*g*W+u*K*W+O*g*V-u*z*V)*ce,i[10]=(M*K*b-G*N*b+G*g*D-u*K*D-M*g*V+u*N*V)*ce,i[11]=(O*N*b-M*z*b-O*g*D+u*z*D+M*g*W-u*N*W)*ce,i[12]=be*ce,i[13]=(O*K*v-G*z*v+G*g*B-u*K*B-O*g*J+u*z*J)*ce,i[14]=(G*N*v-M*K*v-G*g*F+u*K*F+M*g*J-u*N*J)*ce,i[15]=(M*z*v-O*N*v+O*g*F-u*z*F-M*g*B+u*N*B)*ce,this}scale(i){const u=this.elements,g=i.x,v=i.y,b=i.z;return u[0]*=g,u[4]*=v,u[8]*=b,u[1]*=g,u[5]*=v,u[9]*=b,u[2]*=g,u[6]*=v,u[10]*=b,u[3]*=g,u[7]*=v,u[11]*=b,this}getMaxScaleOnAxis(){const i=this.elements,u=i[0]*i[0]+i[1]*i[1]+i[2]*i[2],g=i[4]*i[4]+i[5]*i[5]+i[6]*i[6],v=i[8]*i[8]+i[9]*i[9]+i[10]*i[10];return Math.sqrt(Math.max(u,g,v))}makeTranslation(i,u,g){return this.set(1,0,0,i,0,1,0,u,0,0,1,g,0,0,0,1),this}makeRotationX(i){const u=Math.cos(i),g=Math.sin(i);return this.set(1,0,0,0,0,u,-g,0,0,g,u,0,0,0,0,1),this}makeRotationY(i){const u=Math.cos(i),g=Math.sin(i);return this.set(u,0,g,0,0,1,0,0,-g,0,u,0,0,0,0,1),this}makeRotationZ(i){const u=Math.cos(i),g=Math.sin(i);return this.set(u,-g,0,0,g,u,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(i,u){const g=Math.cos(u),v=Math.sin(u),b=1-g,M=i.x,N=i.y,F=i.z,D=b*M,O=b*N;return this.set(D*M+g,D*N-v*F,D*F+v*N,0,D*N+v*F,O*N+g,O*F-v*M,0,D*F-v*N,O*F+v*M,b*F*F+g,0,0,0,0,1),this}makeScale(i,u,g){return this.set(i,0,0,0,0,u,0,0,0,0,g,0,0,0,0,1),this}makeShear(i,u,g,v,b,M){return this.set(1,g,b,0,i,1,M,0,u,v,1,0,0,0,0,1),this}compose(i,u,g){const v=this.elements,b=u._x,M=u._y,N=u._z,F=u._w,D=b+b,O=M+M,z=N+N,B=b*D,W=b*O,G=b*z,K=M*O,J=M*z,V=N*z,Z=F*D,le=F*O,fe=F*z,be=g.x,Me=g.y,ce=g.z;return v[0]=(1-(K+V))*be,v[1]=(W+fe)*be,v[2]=(G-le)*be,v[3]=0,v[4]=(W-fe)*Me,v[5]=(1-(B+V))*Me,v[6]=(J+Z)*Me,v[7]=0,v[8]=(G+le)*ce,v[9]=(J-Z)*ce,v[10]=(1-(B+K))*ce,v[11]=0,v[12]=i.x,v[13]=i.y,v[14]=i.z,v[15]=1,this}decompose(i,u,g){const v=this.elements;let b=Oy.set(v[0],v[1],v[2]).length();const M=Oy.set(v[4],v[5],v[6]).length(),N=Oy.set(v[8],v[9],v[10]).length();this.determinant()<0&&(b=-b),i.x=v[12],i.y=v[13],i.z=v[14],Au.copy(this);const D=1/b,O=1/M,z=1/N;return Au.elements[0]*=D,Au.elements[1]*=D,Au.elements[2]*=D,Au.elements[4]*=O,Au.elements[5]*=O,Au.elements[6]*=O,Au.elements[8]*=z,Au.elements[9]*=z,Au.elements[10]*=z,u.setFromRotationMatrix(Au),g.x=b,g.y=M,g.z=N,this}makePerspective(i,u,g,v,b,M){M===void 0&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const N=this.elements,F=2*b/(u-i),D=2*b/(g-v),O=(u+i)/(u-i),z=(g+v)/(g-v),B=-(M+b)/(M-b),W=-2*M*b/(M-b);return N[0]=F,N[4]=0,N[8]=O,N[12]=0,N[1]=0,N[5]=D,N[9]=z,N[13]=0,N[2]=0,N[6]=0,N[10]=B,N[14]=W,N[3]=0,N[7]=0,N[11]=-1,N[15]=0,this}makeOrthographic(i,u,g,v,b,M){const N=this.elements,F=1/(u-i),D=1/(g-v),O=1/(M-b),z=(u+i)*F,B=(g+v)*D,W=(M+b)*O;return N[0]=2*F,N[4]=0,N[8]=0,N[12]=-z,N[1]=0,N[5]=2*D,N[9]=0,N[13]=-B,N[2]=0,N[6]=0,N[10]=-2*O,N[14]=-W,N[3]=0,N[7]=0,N[11]=0,N[15]=1,this}equals(i){const u=this.elements,g=i.elements;for(let v=0;v<16;v++)if(u[v]!==g[v])return!1;return!0}fromArray(i,u=0){for(let g=0;g<16;g++)this.elements[g]=i[g+u];return this}toArray(i=[],u=0){const g=this.elements;return i[u]=g[0],i[u+1]=g[1],i[u+2]=g[2],i[u+3]=g[3],i[u+4]=g[4],i[u+5]=g[5],i[u+6]=g[6],i[u+7]=g[7],i[u+8]=g[8],i[u+9]=g[9],i[u+10]=g[10],i[u+11]=g[11],i[u+12]=g[12],i[u+13]=g[13],i[u+14]=g[14],i[u+15]=g[15],i}}cr.prototype.isMatrix4=!0;const Oy=new He,Au=new cr,t5=new He(0,0,0),n5=new He(1,1,1),Gp=new He,f1=new He,hl=new He,Ik=new cr,Ck=new oo;class f0{constructor(i=0,u=0,g=0,v=f0.DefaultOrder){this._x=i,this._y=u,this._z=g,this._order=v}get x(){return this._x}set x(i){this._x=i,this._onChangeCallback()}get y(){return this._y}set y(i){this._y=i,this._onChangeCallback()}get z(){return this._z}set z(i){this._z=i,this._onChangeCallback()}get order(){return this._order}set order(i){this._order=i,this._onChangeCallback()}set(i,u,g,v=this._order){return this._x=i,this._y=u,this._z=g,this._order=v,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(i){return this._x=i._x,this._y=i._y,this._z=i._z,this._order=i._order,this._onChangeCallback(),this}setFromRotationMatrix(i,u=this._order,g=!0){const v=i.elements,b=v[0],M=v[4],N=v[8],F=v[1],D=v[5],O=v[9],z=v[2],B=v[6],W=v[10];switch(u){case"XYZ":this._y=Math.asin(pl(N,-1,1)),Math.abs(N)<.9999999?(this._x=Math.atan2(-O,W),this._z=Math.atan2(-M,b)):(this._x=Math.atan2(B,D),this._z=0);break;case"YXZ":this._x=Math.asin(-pl(O,-1,1)),Math.abs(O)<.9999999?(this._y=Math.atan2(N,W),this._z=Math.atan2(F,D)):(this._y=Math.atan2(-z,b),this._z=0);break;case"ZXY":this._x=Math.asin(pl(B,-1,1)),Math.abs(B)<.9999999?(this._y=Math.atan2(-z,W),this._z=Math.atan2(-M,D)):(this._y=0,this._z=Math.atan2(F,b));break;case"ZYX":this._y=Math.asin(-pl(z,-1,1)),Math.abs(z)<.9999999?(this._x=Math.atan2(B,W),this._z=Math.atan2(F,b)):(this._x=0,this._z=Math.atan2(-M,D));break;case"YZX":this._z=Math.asin(pl(F,-1,1)),Math.abs(F)<.9999999?(this._x=Math.atan2(-O,D),this._y=Math.atan2(-z,b)):(this._x=0,this._y=Math.atan2(N,W));break;case"XZY":this._z=Math.asin(-pl(M,-1,1)),Math.abs(M)<.9999999?(this._x=Math.atan2(B,D),this._y=Math.atan2(N,b)):(this._x=Math.atan2(-O,W),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+u)}return this._order=u,g===!0&&this._onChangeCallback(),this}setFromQuaternion(i,u,g){return Ik.makeRotationFromQuaternion(i),this.setFromRotationMatrix(Ik,u,g)}setFromVector3(i,u=this._order){return this.set(i.x,i.y,i.z,u)}reorder(i){return Ck.setFromEuler(this),this.setFromQuaternion(Ck,i)}equals(i){return i._x===this._x&&i._y===this._y&&i._z===this._z&&i._order===this._order}fromArray(i){return this._x=i[0],this._y=i[1],this._z=i[2],i[3]!==void 0&&(this._order=i[3]),this._onChangeCallback(),this}toArray(i=[],u=0){return i[u]=this._x,i[u+1]=this._y,i[u+2]=this._z,i[u+3]=this._order,i}toVector3(i){return i?i.set(this._x,this._y,this._z):new He(this._x,this._y,this._z)}_onChange(i){return this._onChangeCallback=i,this}_onChangeCallback(){}}f0.prototype.isEuler=!0;f0.DefaultOrder="XYZ";f0.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class r5{constructor(){this.mask=1}set(i){this.mask=1<<i|0}enable(i){this.mask|=1<<i|0}enableAll(){this.mask=-1}toggle(i){this.mask^=1<<i|0}disable(i){this.mask&=~(1<<i|0)}disableAll(){this.mask=0}test(i){return(this.mask&i.mask)!==0}}let i5=0;const kk=new He,zy=new oo,Kh=new cr,m1=new He,av=new He,s5=new He,a5=new oo,Nk=new He(1,0,0),Rk=new He(0,1,0),Lk=new He(0,0,1),o5={type:"added"},Dk={type:"removed"};class ai extends Gm{constructor(){super(),Object.defineProperty(this,"id",{value:i5++}),this.uuid=Ic(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ai.DefaultUp.clone();const i=new He,u=new f0,g=new oo,v=new He(1,1,1);function b(){g.setFromEuler(u,!1)}function M(){u.setFromQuaternion(g,void 0,!1)}u._onChange(b),g._onChange(M),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:i},rotation:{configurable:!0,enumerable:!0,value:u},quaternion:{configurable:!0,enumerable:!0,value:g},scale:{configurable:!0,enumerable:!0,value:v},modelViewMatrix:{value:new cr},normalMatrix:{value:new Ma}}),this.matrix=new cr,this.matrixWorld=new cr,this.matrixAutoUpdate=ai.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new r5,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(i){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(i),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(i){return this.quaternion.premultiply(i),this}setRotationFromAxisAngle(i,u){this.quaternion.setFromAxisAngle(i,u)}setRotationFromEuler(i){this.quaternion.setFromEuler(i,!0)}setRotationFromMatrix(i){this.quaternion.setFromRotationMatrix(i)}setRotationFromQuaternion(i){this.quaternion.copy(i)}rotateOnAxis(i,u){return zy.setFromAxisAngle(i,u),this.quaternion.multiply(zy),this}rotateOnWorldAxis(i,u){return zy.setFromAxisAngle(i,u),this.quaternion.premultiply(zy),this}rotateX(i){return this.rotateOnAxis(Nk,i)}rotateY(i){return this.rotateOnAxis(Rk,i)}rotateZ(i){return this.rotateOnAxis(Lk,i)}translateOnAxis(i,u){return kk.copy(i).applyQuaternion(this.quaternion),this.position.add(kk.multiplyScalar(u)),this}translateX(i){return this.translateOnAxis(Nk,i)}translateY(i){return this.translateOnAxis(Rk,i)}translateZ(i){return this.translateOnAxis(Lk,i)}localToWorld(i){return i.applyMatrix4(this.matrixWorld)}worldToLocal(i){return i.applyMatrix4(Kh.copy(this.matrixWorld).invert())}lookAt(i,u,g){i.isVector3?m1.copy(i):m1.set(i,u,g);const v=this.parent;this.updateWorldMatrix(!0,!1),av.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Kh.lookAt(av,m1,this.up):Kh.lookAt(m1,av,this.up),this.quaternion.setFromRotationMatrix(Kh),v&&(Kh.extractRotation(v.matrixWorld),zy.setFromRotationMatrix(Kh),this.quaternion.premultiply(zy.invert()))}add(i){if(arguments.length>1){for(let u=0;u<arguments.length;u++)this.add(arguments[u]);return this}return i===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",i),this):(i&&i.isObject3D?(i.parent!==null&&i.parent.remove(i),i.parent=this,this.children.push(i),i.dispatchEvent(o5)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",i),this)}remove(i){if(arguments.length>1){for(let g=0;g<arguments.length;g++)this.remove(arguments[g]);return this}const u=this.children.indexOf(i);return u!==-1&&(i.parent=null,this.children.splice(u,1),i.dispatchEvent(Dk)),this}removeFromParent(){const i=this.parent;return i!==null&&i.remove(this),this}clear(){for(let i=0;i<this.children.length;i++){const u=this.children[i];u.parent=null,u.dispatchEvent(Dk)}return this.children.length=0,this}attach(i){return this.updateWorldMatrix(!0,!1),Kh.copy(this.matrixWorld).invert(),i.parent!==null&&(i.parent.updateWorldMatrix(!0,!1),Kh.multiply(i.parent.matrixWorld)),i.applyMatrix4(Kh),this.add(i),i.updateWorldMatrix(!1,!0),this}getObjectById(i){return this.getObjectByProperty("id",i)}getObjectByName(i){return this.getObjectByProperty("name",i)}getObjectByProperty(i,u){if(this[i]===u)return this;for(let g=0,v=this.children.length;g<v;g++){const M=this.children[g].getObjectByProperty(i,u);if(M!==void 0)return M}}getWorldPosition(i){return this.updateWorldMatrix(!0,!1),i.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(i){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(av,i,s5),i}getWorldScale(i){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(av,a5,i),i}getWorldDirection(i){this.updateWorldMatrix(!0,!1);const u=this.matrixWorld.elements;return i.set(u[8],u[9],u[10]).normalize()}raycast(){}traverse(i){i(this);const u=this.children;for(let g=0,v=u.length;g<v;g++)u[g].traverse(i)}traverseVisible(i){if(this.visible===!1)return;i(this);const u=this.children;for(let g=0,v=u.length;g<v;g++)u[g].traverseVisible(i)}traverseAncestors(i){const u=this.parent;u!==null&&(i(u),u.traverseAncestors(i))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(i){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||i)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,i=!0);const u=this.children;for(let g=0,v=u.length;g<v;g++)u[g].updateMatrixWorld(i)}updateWorldMatrix(i,u){const g=this.parent;if(i===!0&&g!==null&&g.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),u===!0){const v=this.children;for(let b=0,M=v.length;b<M;b++)v[b].updateWorldMatrix(!1,!0)}}toJSON(i){const u=i===void 0||typeof i=="string",g={};u&&(i={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},g.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const v={};v.uuid=this.uuid,v.type=this.type,this.name!==""&&(v.name=this.name),this.castShadow===!0&&(v.castShadow=!0),this.receiveShadow===!0&&(v.receiveShadow=!0),this.visible===!1&&(v.visible=!1),this.frustumCulled===!1&&(v.frustumCulled=!1),this.renderOrder!==0&&(v.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(v.userData=this.userData),v.layers=this.layers.mask,v.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(v.matrixAutoUpdate=!1),this.isInstancedMesh&&(v.type="InstancedMesh",v.count=this.count,v.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(v.instanceColor=this.instanceColor.toJSON()));function b(N,F){return N[F.uuid]===void 0&&(N[F.uuid]=F.toJSON(i)),F.uuid}if(this.isScene)this.background&&(this.background.isColor?v.background=this.background.toJSON():this.background.isTexture&&(v.background=this.background.toJSON(i).uuid)),this.environment&&this.environment.isTexture&&(v.environment=this.environment.toJSON(i).uuid);else if(this.isMesh||this.isLine||this.isPoints){v.geometry=b(i.geometries,this.geometry);const N=this.geometry.parameters;if(N!==void 0&&N.shapes!==void 0){const F=N.shapes;if(Array.isArray(F))for(let D=0,O=F.length;D<O;D++){const z=F[D];b(i.shapes,z)}else b(i.shapes,F)}}if(this.isSkinnedMesh&&(v.bindMode=this.bindMode,v.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(b(i.skeletons,this.skeleton),v.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const N=[];for(let F=0,D=this.material.length;F<D;F++)N.push(b(i.materials,this.material[F]));v.material=N}else v.material=b(i.materials,this.material);if(this.children.length>0){v.children=[];for(let N=0;N<this.children.length;N++)v.children.push(this.children[N].toJSON(i).object)}if(this.animations.length>0){v.animations=[];for(let N=0;N<this.animations.length;N++){const F=this.animations[N];v.animations.push(b(i.animations,F))}}if(u){const N=M(i.geometries),F=M(i.materials),D=M(i.textures),O=M(i.images),z=M(i.shapes),B=M(i.skeletons),W=M(i.animations);N.length>0&&(g.geometries=N),F.length>0&&(g.materials=F),D.length>0&&(g.textures=D),O.length>0&&(g.images=O),z.length>0&&(g.shapes=z),B.length>0&&(g.skeletons=B),W.length>0&&(g.animations=W)}return g.object=v,g;function M(N){const F=[];for(const D in N){const O=N[D];delete O.metadata,F.push(O)}return F}}clone(i){return new this.constructor().copy(this,i)}copy(i,u=!0){if(this.name=i.name,this.up.copy(i.up),this.position.copy(i.position),this.rotation.order=i.rotation.order,this.quaternion.copy(i.quaternion),this.scale.copy(i.scale),this.matrix.copy(i.matrix),this.matrixWorld.copy(i.matrixWorld),this.matrixAutoUpdate=i.matrixAutoUpdate,this.matrixWorldNeedsUpdate=i.matrixWorldNeedsUpdate,this.layers.mask=i.layers.mask,this.visible=i.visible,this.castShadow=i.castShadow,this.receiveShadow=i.receiveShadow,this.frustumCulled=i.frustumCulled,this.renderOrder=i.renderOrder,this.userData=JSON.parse(JSON.stringify(i.userData)),u===!0)for(let g=0;g<i.children.length;g++){const v=i.children[g];this.add(v.clone())}return this}}ai.DefaultUp=new He(0,1,0);ai.DefaultMatrixAutoUpdate=!0;ai.prototype.isObject3D=!0;const Iu=new He,Zh=new He,zT=new He,Jh=new He,By=new He,$y=new He,Pk=new He,BT=new He,$T=new He,UT=new He;class ks{constructor(i=new He,u=new He,g=new He){this.a=i,this.b=u,this.c=g}static getNormal(i,u,g,v){v.subVectors(g,u),Iu.subVectors(i,u),v.cross(Iu);const b=v.lengthSq();return b>0?v.multiplyScalar(1/Math.sqrt(b)):v.set(0,0,0)}static getBarycoord(i,u,g,v,b){Iu.subVectors(v,u),Zh.subVectors(g,u),zT.subVectors(i,u);const M=Iu.dot(Iu),N=Iu.dot(Zh),F=Iu.dot(zT),D=Zh.dot(Zh),O=Zh.dot(zT),z=M*D-N*N;if(z===0)return b.set(-2,-1,-1);const B=1/z,W=(D*F-N*O)*B,G=(M*O-N*F)*B;return b.set(1-W-G,G,W)}static containsPoint(i,u,g,v){return this.getBarycoord(i,u,g,v,Jh),Jh.x>=0&&Jh.y>=0&&Jh.x+Jh.y<=1}static getUV(i,u,g,v,b,M,N,F){return this.getBarycoord(i,u,g,v,Jh),F.set(0,0),F.addScaledVector(b,Jh.x),F.addScaledVector(M,Jh.y),F.addScaledVector(N,Jh.z),F}static isFrontFacing(i,u,g,v){return Iu.subVectors(g,u),Zh.subVectors(i,u),Iu.cross(Zh).dot(v)<0}set(i,u,g){return this.a.copy(i),this.b.copy(u),this.c.copy(g),this}setFromPointsAndIndices(i,u,g,v){return this.a.copy(i[u]),this.b.copy(i[g]),this.c.copy(i[v]),this}clone(){return new this.constructor().copy(this)}copy(i){return this.a.copy(i.a),this.b.copy(i.b),this.c.copy(i.c),this}getArea(){return Iu.subVectors(this.c,this.b),Zh.subVectors(this.a,this.b),Iu.cross(Zh).length()*.5}getMidpoint(i){return i.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(i){return ks.getNormal(this.a,this.b,this.c,i)}getPlane(i){return i.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(i,u){return ks.getBarycoord(i,this.a,this.b,this.c,u)}getUV(i,u,g,v,b){return ks.getUV(i,this.a,this.b,this.c,u,g,v,b)}containsPoint(i){return ks.containsPoint(i,this.a,this.b,this.c)}isFrontFacing(i){return ks.isFrontFacing(this.a,this.b,this.c,i)}intersectsBox(i){return i.intersectsTriangle(this)}closestPointToPoint(i,u){const g=this.a,v=this.b,b=this.c;let M,N;By.subVectors(v,g),$y.subVectors(b,g),BT.subVectors(i,g);const F=By.dot(BT),D=$y.dot(BT);if(F<=0&&D<=0)return u.copy(g);$T.subVectors(i,v);const O=By.dot($T),z=$y.dot($T);if(O>=0&&z<=O)return u.copy(v);const B=F*z-O*D;if(B<=0&&F>=0&&O<=0)return M=F/(F-O),u.copy(g).addScaledVector(By,M);UT.subVectors(i,b);const W=By.dot(UT),G=$y.dot(UT);if(G>=0&&W<=G)return u.copy(b);const K=W*D-F*G;if(K<=0&&D>=0&&G<=0)return N=D/(D-G),u.copy(g).addScaledVector($y,N);const J=O*G-W*z;if(J<=0&&z-O>=0&&W-G>=0)return Pk.subVectors(b,v),N=(z-O)/(z-O+(W-G)),u.copy(v).addScaledVector(Pk,N);const V=1/(J+K+B);return M=K*V,N=B*V,u.copy(g).addScaledVector(By,M).addScaledVector($y,N)}equals(i){return i.a.equals(this.a)&&i.b.equals(this.b)&&i.c.equals(this.c)}}let l5=0;class Va extends Gm{constructor(){super(),Object.defineProperty(this,"id",{value:l5++}),this.uuid=Ic(),this.name="",this.type="Material",this.fog=!0,this.blending=yv,this.side=wv,this.vertexColors=!1,this.opacity=1,this.format=ml,this.transparent=!1,this.blendSrc=NN,this.blendDst=RN,this.blendEquation=Qy,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=uE,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=YH,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ET,this.stencilZFail=ET,this.stencilZPass=ET,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(i){this._alphaTest>0!=i>0&&this.version++,this._alphaTest=i}onBuild(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(i){if(i!==void 0)for(const u in i){const g=i[u];if(g===void 0){console.warn("THREE.Material: '"+u+"' parameter is undefined.");continue}if(u==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=g===kN;continue}const v=this[u];if(v===void 0){console.warn("THREE."+this.type+": '"+u+"' is not a property of this material.");continue}v&&v.isColor?v.set(g):v&&v.isVector3&&g&&g.isVector3?v.copy(g):this[u]=g}}toJSON(i){const u=i===void 0||typeof i=="string";u&&(i={textures:{},images:{}});const g={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};g.uuid=this.uuid,g.type=this.type,this.name!==""&&(g.name=this.name),this.color&&this.color.isColor&&(g.color=this.color.getHex()),this.roughness!==void 0&&(g.roughness=this.roughness),this.metalness!==void 0&&(g.metalness=this.metalness),this.sheenTint&&this.sheenTint.isColor&&(g.sheenTint=this.sheenTint.getHex()),this.emissive&&this.emissive.isColor&&(g.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(g.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(g.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(g.specularIntensity=this.specularIntensity),this.specularTint&&this.specularTint.isColor&&(g.specularTint=this.specularTint.getHex()),this.shininess!==void 0&&(g.shininess=this.shininess),this.clearcoat!==void 0&&(g.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(g.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(g.clearcoatMap=this.clearcoatMap.toJSON(i).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(g.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(i).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(g.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(i).uuid,g.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(g.map=this.map.toJSON(i).uuid),this.matcap&&this.matcap.isTexture&&(g.matcap=this.matcap.toJSON(i).uuid),this.alphaMap&&this.alphaMap.isTexture&&(g.alphaMap=this.alphaMap.toJSON(i).uuid),this.lightMap&&this.lightMap.isTexture&&(g.lightMap=this.lightMap.toJSON(i).uuid,g.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(g.aoMap=this.aoMap.toJSON(i).uuid,g.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(g.bumpMap=this.bumpMap.toJSON(i).uuid,g.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(g.normalMap=this.normalMap.toJSON(i).uuid,g.normalMapType=this.normalMapType,g.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(g.displacementMap=this.displacementMap.toJSON(i).uuid,g.displacementScale=this.displacementScale,g.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(g.roughnessMap=this.roughnessMap.toJSON(i).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(g.metalnessMap=this.metalnessMap.toJSON(i).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(g.emissiveMap=this.emissiveMap.toJSON(i).uuid),this.specularMap&&this.specularMap.isTexture&&(g.specularMap=this.specularMap.toJSON(i).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(g.specularIntensityMap=this.specularIntensityMap.toJSON(i).uuid),this.specularTintMap&&this.specularTintMap.isTexture&&(g.specularTintMap=this.specularTintMap.toJSON(i).uuid),this.envMap&&this.envMap.isTexture&&(g.envMap=this.envMap.toJSON(i).uuid,this.combine!==void 0&&(g.combine=this.combine)),this.envMapIntensity!==void 0&&(g.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(g.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(g.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(g.gradientMap=this.gradientMap.toJSON(i).uuid),this.transmission!==void 0&&(g.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(g.transmissionMap=this.transmissionMap.toJSON(i).uuid),this.thickness!==void 0&&(g.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(g.thicknessMap=this.thicknessMap.toJSON(i).uuid),this.attenuationDistance!==void 0&&(g.attenuationDistance=this.attenuationDistance),this.attenuationTint!==void 0&&(g.attenuationTint=this.attenuationTint.getHex()),this.size!==void 0&&(g.size=this.size),this.shadowSide!==null&&(g.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(g.sizeAttenuation=this.sizeAttenuation),this.blending!==yv&&(g.blending=this.blending),this.side!==wv&&(g.side=this.side),this.vertexColors&&(g.vertexColors=!0),this.opacity<1&&(g.opacity=this.opacity),this.format!==ml&&(g.format=this.format),this.transparent===!0&&(g.transparent=this.transparent),g.depthFunc=this.depthFunc,g.depthTest=this.depthTest,g.depthWrite=this.depthWrite,g.colorWrite=this.colorWrite,g.stencilWrite=this.stencilWrite,g.stencilWriteMask=this.stencilWriteMask,g.stencilFunc=this.stencilFunc,g.stencilRef=this.stencilRef,g.stencilFuncMask=this.stencilFuncMask,g.stencilFail=this.stencilFail,g.stencilZFail=this.stencilZFail,g.stencilZPass=this.stencilZPass,this.rotation&&this.rotation!==0&&(g.rotation=this.rotation),this.polygonOffset===!0&&(g.polygonOffset=!0),this.polygonOffsetFactor!==0&&(g.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(g.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&this.linewidth!==1&&(g.linewidth=this.linewidth),this.dashSize!==void 0&&(g.dashSize=this.dashSize),this.gapSize!==void 0&&(g.gapSize=this.gapSize),this.scale!==void 0&&(g.scale=this.scale),this.dithering===!0&&(g.dithering=!0),this.alphaTest>0&&(g.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(g.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(g.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(g.wireframe=this.wireframe),this.wireframeLinewidth>1&&(g.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(g.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(g.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(g.flatShading=this.flatShading),this.visible===!1&&(g.visible=!1),this.toneMapped===!1&&(g.toneMapped=!1),JSON.stringify(this.userData)!=="{}"&&(g.userData=this.userData);function v(b){const M=[];for(const N in b){const F=b[N];delete F.metadata,M.push(F)}return M}if(u){const b=v(i.textures),M=v(i.images);b.length>0&&(g.textures=b),M.length>0&&(g.images=M)}return g}clone(){return new this.constructor().copy(this)}copy(i){this.name=i.name,this.fog=i.fog,this.blending=i.blending,this.side=i.side,this.vertexColors=i.vertexColors,this.opacity=i.opacity,this.format=i.format,this.transparent=i.transparent,this.blendSrc=i.blendSrc,this.blendDst=i.blendDst,this.blendEquation=i.blendEquation,this.blendSrcAlpha=i.blendSrcAlpha,this.blendDstAlpha=i.blendDstAlpha,this.blendEquationAlpha=i.blendEquationAlpha,this.depthFunc=i.depthFunc,this.depthTest=i.depthTest,this.depthWrite=i.depthWrite,this.stencilWriteMask=i.stencilWriteMask,this.stencilFunc=i.stencilFunc,this.stencilRef=i.stencilRef,this.stencilFuncMask=i.stencilFuncMask,this.stencilFail=i.stencilFail,this.stencilZFail=i.stencilZFail,this.stencilZPass=i.stencilZPass,this.stencilWrite=i.stencilWrite;const u=i.clippingPlanes;let g=null;if(u!==null){const v=u.length;g=new Array(v);for(let b=0;b!==v;++b)g[b]=u[b].clone()}return this.clippingPlanes=g,this.clipIntersection=i.clipIntersection,this.clipShadows=i.clipShadows,this.shadowSide=i.shadowSide,this.colorWrite=i.colorWrite,this.precision=i.precision,this.polygonOffset=i.polygonOffset,this.polygonOffsetFactor=i.polygonOffsetFactor,this.polygonOffsetUnits=i.polygonOffsetUnits,this.dithering=i.dithering,this.alphaTest=i.alphaTest,this.alphaToCoverage=i.alphaToCoverage,this.premultipliedAlpha=i.premultipliedAlpha,this.visible=i.visible,this.toneMapped=i.toneMapped,this.userData=JSON.parse(JSON.stringify(i.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(i){i===!0&&this.version++}}Va.prototype.isMaterial=!0;const BN={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Cu={h:0,s:0,l:0},g1={h:0,s:0,l:0};function VT(E,i,u){return u<0&&(u+=1),u>1&&(u-=1),u<1/6?E+(i-E)*6*u:u<1/2?i:u<2/3?E+(i-E)*6*(2/3-u):E}function WT(E){return E<.04045?E*.0773993808:Math.pow(E*.9478672986+.0521327014,2.4)}function GT(E){return E<.0031308?E*12.92:1.055*Math.pow(E,.41666)-.055}class rr{constructor(i,u,g){return u===void 0&&g===void 0?this.set(i):this.setRGB(i,u,g)}set(i){return i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i),this}setScalar(i){return this.r=i,this.g=i,this.b=i,this}setHex(i){return i=Math.floor(i),this.r=(i>>16&255)/255,this.g=(i>>8&255)/255,this.b=(i&255)/255,this}setRGB(i,u,g){return this.r=i,this.g=u,this.b=g,this}setHSL(i,u,g){if(i=KH(i,1),u=pl(u,0,1),g=pl(g,0,1),u===0)this.r=this.g=this.b=g;else{const v=g<=.5?g*(1+u):g+u-g*u,b=2*g-v;this.r=VT(b,v,i+1/3),this.g=VT(b,v,i),this.b=VT(b,v,i-1/3)}return this}setStyle(i){function u(v){v!==void 0&&parseFloat(v)<1&&console.warn("THREE.Color: Alpha component of "+i+" will be ignored.")}let g;if(g=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(i)){let v;const b=g[1],M=g[2];switch(b){case"rgb":case"rgba":if(v=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(M))return this.r=Math.min(255,parseInt(v[1],10))/255,this.g=Math.min(255,parseInt(v[2],10))/255,this.b=Math.min(255,parseInt(v[3],10))/255,u(v[4]),this;if(v=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(M))return this.r=Math.min(100,parseInt(v[1],10))/100,this.g=Math.min(100,parseInt(v[2],10))/100,this.b=Math.min(100,parseInt(v[3],10))/100,u(v[4]),this;break;case"hsl":case"hsla":if(v=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(M)){const N=parseFloat(v[1])/360,F=parseInt(v[2],10)/100,D=parseInt(v[3],10)/100;return u(v[4]),this.setHSL(N,F,D)}break}}else if(g=/^\#([A-Fa-f\d]+)$/.exec(i)){const v=g[1],b=v.length;if(b===3)return this.r=parseInt(v.charAt(0)+v.charAt(0),16)/255,this.g=parseInt(v.charAt(1)+v.charAt(1),16)/255,this.b=parseInt(v.charAt(2)+v.charAt(2),16)/255,this;if(b===6)return this.r=parseInt(v.charAt(0)+v.charAt(1),16)/255,this.g=parseInt(v.charAt(2)+v.charAt(3),16)/255,this.b=parseInt(v.charAt(4)+v.charAt(5),16)/255,this}return i&&i.length>0?this.setColorName(i):this}setColorName(i){const u=BN[i.toLowerCase()];return u!==void 0?this.setHex(u):console.warn("THREE.Color: Unknown color "+i),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(i){return this.r=i.r,this.g=i.g,this.b=i.b,this}copyGammaToLinear(i,u=2){return this.r=Math.pow(i.r,u),this.g=Math.pow(i.g,u),this.b=Math.pow(i.b,u),this}copyLinearToGamma(i,u=2){const g=u>0?1/u:1;return this.r=Math.pow(i.r,g),this.g=Math.pow(i.g,g),this.b=Math.pow(i.b,g),this}convertGammaToLinear(i){return this.copyGammaToLinear(this,i),this}convertLinearToGamma(i){return this.copyLinearToGamma(this,i),this}copySRGBToLinear(i){return this.r=WT(i.r),this.g=WT(i.g),this.b=WT(i.b),this}copyLinearToSRGB(i){return this.r=GT(i.r),this.g=GT(i.g),this.b=GT(i.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(i){const u=this.r,g=this.g,v=this.b,b=Math.max(u,g,v),M=Math.min(u,g,v);let N,F;const D=(M+b)/2;if(M===b)N=0,F=0;else{const O=b-M;switch(F=D<=.5?O/(b+M):O/(2-b-M),b){case u:N=(g-v)/O+(g<v?6:0);break;case g:N=(v-u)/O+2;break;case v:N=(u-g)/O+4;break}N/=6}return i.h=N,i.s=F,i.l=D,i}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(i,u,g){return this.getHSL(Cu),Cu.h+=i,Cu.s+=u,Cu.l+=g,this.setHSL(Cu.h,Cu.s,Cu.l),this}add(i){return this.r+=i.r,this.g+=i.g,this.b+=i.b,this}addColors(i,u){return this.r=i.r+u.r,this.g=i.g+u.g,this.b=i.b+u.b,this}addScalar(i){return this.r+=i,this.g+=i,this.b+=i,this}sub(i){return this.r=Math.max(0,this.r-i.r),this.g=Math.max(0,this.g-i.g),this.b=Math.max(0,this.b-i.b),this}multiply(i){return this.r*=i.r,this.g*=i.g,this.b*=i.b,this}multiplyScalar(i){return this.r*=i,this.g*=i,this.b*=i,this}lerp(i,u){return this.r+=(i.r-this.r)*u,this.g+=(i.g-this.g)*u,this.b+=(i.b-this.b)*u,this}lerpColors(i,u,g){return this.r=i.r+(u.r-i.r)*g,this.g=i.g+(u.g-i.g)*g,this.b=i.b+(u.b-i.b)*g,this}lerpHSL(i,u){this.getHSL(Cu),i.getHSL(g1);const g=IT(Cu.h,g1.h,u),v=IT(Cu.s,g1.s,u),b=IT(Cu.l,g1.l,u);return this.setHSL(g,v,b),this}equals(i){return i.r===this.r&&i.g===this.g&&i.b===this.b}fromArray(i,u=0){return this.r=i[u],this.g=i[u+1],this.b=i[u+2],this}toArray(i=[],u=0){return i[u]=this.r,i[u+1]=this.g,i[u+2]=this.b,i}fromBufferAttribute(i,u){return this.r=i.getX(u),this.g=i.getY(u),this.b=i.getZ(u),i.normalized===!0&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}rr.NAMES=BN;rr.prototype.isColor=!0;rr.prototype.r=1;rr.prototype.g=1;rr.prototype.b=1;class TE extends Va{constructor(i){super(),this.type="MeshBasicMaterial",this.color=new rr(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Y1,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(i)}copy(i){return super.copy(i),this.color.copy(i.color),this.map=i.map,this.lightMap=i.lightMap,this.lightMapIntensity=i.lightMapIntensity,this.aoMap=i.aoMap,this.aoMapIntensity=i.aoMapIntensity,this.specularMap=i.specularMap,this.alphaMap=i.alphaMap,this.envMap=i.envMap,this.combine=i.combine,this.reflectivity=i.reflectivity,this.refractionRatio=i.refractionRatio,this.wireframe=i.wireframe,this.wireframeLinewidth=i.wireframeLinewidth,this.wireframeLinecap=i.wireframeLinecap,this.wireframeLinejoin=i.wireframeLinejoin,this}}TE.prototype.isMeshBasicMaterial=!0;const ki=new He,y1=new xn;class Bs{constructor(i,u,g){if(Array.isArray(i))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=i,this.itemSize=u,this.count=i!==void 0?i.length/u:0,this.normalized=g===!0,this.usage=Sv,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(i){i===!0&&this.version++}setUsage(i){return this.usage=i,this}copy(i){return this.name=i.name,this.array=new i.array.constructor(i.array),this.itemSize=i.itemSize,this.count=i.count,this.normalized=i.normalized,this.usage=i.usage,this}copyAt(i,u,g){i*=this.itemSize,g*=u.itemSize;for(let v=0,b=this.itemSize;v<b;v++)this.array[i+v]=u.array[g+v];return this}copyArray(i){return this.array.set(i),this}copyColorsArray(i){const u=this.array;let g=0;for(let v=0,b=i.length;v<b;v++){let M=i[v];M===void 0&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",v),M=new rr),u[g++]=M.r,u[g++]=M.g,u[g++]=M.b}return this}copyVector2sArray(i){const u=this.array;let g=0;for(let v=0,b=i.length;v<b;v++){let M=i[v];M===void 0&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",v),M=new xn),u[g++]=M.x,u[g++]=M.y}return this}copyVector3sArray(i){const u=this.array;let g=0;for(let v=0,b=i.length;v<b;v++){let M=i[v];M===void 0&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",v),M=new He),u[g++]=M.x,u[g++]=M.y,u[g++]=M.z}return this}copyVector4sArray(i){const u=this.array;let g=0;for(let v=0,b=i.length;v<b;v++){let M=i[v];M===void 0&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",v),M=new Si),u[g++]=M.x,u[g++]=M.y,u[g++]=M.z,u[g++]=M.w}return this}applyMatrix3(i){if(this.itemSize===2)for(let u=0,g=this.count;u<g;u++)y1.fromBufferAttribute(this,u),y1.applyMatrix3(i),this.setXY(u,y1.x,y1.y);else if(this.itemSize===3)for(let u=0,g=this.count;u<g;u++)ki.fromBufferAttribute(this,u),ki.applyMatrix3(i),this.setXYZ(u,ki.x,ki.y,ki.z);return this}applyMatrix4(i){for(let u=0,g=this.count;u<g;u++)ki.x=this.getX(u),ki.y=this.getY(u),ki.z=this.getZ(u),ki.applyMatrix4(i),this.setXYZ(u,ki.x,ki.y,ki.z);return this}applyNormalMatrix(i){for(let u=0,g=this.count;u<g;u++)ki.x=this.getX(u),ki.y=this.getY(u),ki.z=this.getZ(u),ki.applyNormalMatrix(i),this.setXYZ(u,ki.x,ki.y,ki.z);return this}transformDirection(i){for(let u=0,g=this.count;u<g;u++)ki.x=this.getX(u),ki.y=this.getY(u),ki.z=this.getZ(u),ki.transformDirection(i),this.setXYZ(u,ki.x,ki.y,ki.z);return this}set(i,u=0){return this.array.set(i,u),this}getX(i){return this.array[i*this.itemSize]}setX(i,u){return this.array[i*this.itemSize]=u,this}getY(i){return this.array[i*this.itemSize+1]}setY(i,u){return this.array[i*this.itemSize+1]=u,this}getZ(i){return this.array[i*this.itemSize+2]}setZ(i,u){return this.array[i*this.itemSize+2]=u,this}getW(i){return this.array[i*this.itemSize+3]}setW(i,u){return this.array[i*this.itemSize+3]=u,this}setXY(i,u,g){return i*=this.itemSize,this.array[i+0]=u,this.array[i+1]=g,this}setXYZ(i,u,g,v){return i*=this.itemSize,this.array[i+0]=u,this.array[i+1]=g,this.array[i+2]=v,this}setXYZW(i,u,g,v,b){return i*=this.itemSize,this.array[i+0]=u,this.array[i+1]=g,this.array[i+2]=v,this.array[i+3]=b,this}onUpload(i){return this.onUploadCallback=i,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const i={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return this.name!==""&&(i.name=this.name),this.usage!==Sv&&(i.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(i.updateRange=this.updateRange),i}}Bs.prototype.isBufferAttribute=!0;class $N extends Bs{constructor(i,u,g){super(new Uint16Array(i),u,g)}}class UN extends Bs{constructor(i,u,g){super(new Uint32Array(i),u,g)}}class u5 extends Bs{constructor(i,u,g){super(new Uint16Array(i),u,g)}}u5.prototype.isFloat16BufferAttribute=!0;class ua extends Bs{constructor(i,u,g){super(new Float32Array(i),u,g)}}function VN(E){if(E.length===0)return-1/0;let i=E[0];for(let u=1,g=E.length;u<g;++u)E[u]>i&&(i=E[u]);return i}let c5=0;const Ol=new cr,HT=new ai,Uy=new He,dl=new Nu,ov=new Nu,oa=new He;class $i extends Gm{constructor(){super(),Object.defineProperty(this,"id",{value:c5++}),this.uuid=Ic(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(i){return Array.isArray(i)?this.index=new(VN(i)>65535?UN:$N)(i,1):this.index=i,this}getAttribute(i){return this.attributes[i]}setAttribute(i,u){return this.attributes[i]=u,this}deleteAttribute(i){return delete this.attributes[i],this}hasAttribute(i){return this.attributes[i]!==void 0}addGroup(i,u,g=0){this.groups.push({start:i,count:u,materialIndex:g})}clearGroups(){this.groups=[]}setDrawRange(i,u){this.drawRange.start=i,this.drawRange.count=u}applyMatrix4(i){const u=this.attributes.position;u!==void 0&&(u.applyMatrix4(i),u.needsUpdate=!0);const g=this.attributes.normal;if(g!==void 0){const b=new Ma().getNormalMatrix(i);g.applyNormalMatrix(b),g.needsUpdate=!0}const v=this.attributes.tangent;return v!==void 0&&(v.transformDirection(i),v.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(i){return Ol.makeRotationFromQuaternion(i),this.applyMatrix4(Ol),this}rotateX(i){return Ol.makeRotationX(i),this.applyMatrix4(Ol),this}rotateY(i){return Ol.makeRotationY(i),this.applyMatrix4(Ol),this}rotateZ(i){return Ol.makeRotationZ(i),this.applyMatrix4(Ol),this}translate(i,u,g){return Ol.makeTranslation(i,u,g),this.applyMatrix4(Ol),this}scale(i,u,g){return Ol.makeScale(i,u,g),this.applyMatrix4(Ol),this}lookAt(i){return HT.lookAt(i),HT.updateMatrix(),this.applyMatrix4(HT.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Uy).negate(),this.translate(Uy.x,Uy.y,Uy.z),this}setFromPoints(i){const u=[];for(let g=0,v=i.length;g<v;g++){const b=i[g];u.push(b.x,b.y,b.z||0)}return this.setAttribute("position",new ua(u,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Nu);const i=this.attributes.position,u=this.morphAttributes.position;if(i&&i.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new He(-1/0,-1/0,-1/0),new He(1/0,1/0,1/0));return}if(i!==void 0){if(this.boundingBox.setFromBufferAttribute(i),u)for(let g=0,v=u.length;g<v;g++){const b=u[g];dl.setFromBufferAttribute(b),this.morphTargetsRelative?(oa.addVectors(this.boundingBox.min,dl.min),this.boundingBox.expandByPoint(oa),oa.addVectors(this.boundingBox.max,dl.max),this.boundingBox.expandByPoint(oa)):(this.boundingBox.expandByPoint(dl.min),this.boundingBox.expandByPoint(dl.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new d0);const i=this.attributes.position,u=this.morphAttributes.position;if(i&&i.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new He,1/0);return}if(i){const g=this.boundingSphere.center;if(dl.setFromBufferAttribute(i),u)for(let b=0,M=u.length;b<M;b++){const N=u[b];ov.setFromBufferAttribute(N),this.morphTargetsRelative?(oa.addVectors(dl.min,ov.min),dl.expandByPoint(oa),oa.addVectors(dl.max,ov.max),dl.expandByPoint(oa)):(dl.expandByPoint(ov.min),dl.expandByPoint(ov.max))}dl.getCenter(g);let v=0;for(let b=0,M=i.count;b<M;b++)oa.fromBufferAttribute(i,b),v=Math.max(v,g.distanceToSquared(oa));if(u)for(let b=0,M=u.length;b<M;b++){const N=u[b],F=this.morphTargetsRelative;for(let D=0,O=N.count;D<O;D++)oa.fromBufferAttribute(N,D),F&&(Uy.fromBufferAttribute(i,D),oa.add(Uy)),v=Math.max(v,g.distanceToSquared(oa))}this.boundingSphere.radius=Math.sqrt(v),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const i=this.index,u=this.attributes;if(i===null||u.position===void 0||u.normal===void 0||u.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const g=i.array,v=u.position.array,b=u.normal.array,M=u.uv.array,N=v.length/3;u.tangent===void 0&&this.setAttribute("tangent",new Bs(new Float32Array(4*N),4));const F=u.tangent.array,D=[],O=[];for(let Ye=0;Ye<N;Ye++)D[Ye]=new He,O[Ye]=new He;const z=new He,B=new He,W=new He,G=new xn,K=new xn,J=new xn,V=new He,Z=new He;function le(Ye,xe,ue){z.fromArray(v,Ye*3),B.fromArray(v,xe*3),W.fromArray(v,ue*3),G.fromArray(M,Ye*2),K.fromArray(M,xe*2),J.fromArray(M,ue*2),B.sub(z),W.sub(z),K.sub(G),J.sub(G);const Se=1/(K.x*J.y-J.x*K.y);!isFinite(Se)||(V.copy(B).multiplyScalar(J.y).addScaledVector(W,-K.y).multiplyScalar(Se),Z.copy(W).multiplyScalar(K.x).addScaledVector(B,-J.x).multiplyScalar(Se),D[Ye].add(V),D[xe].add(V),D[ue].add(V),O[Ye].add(Z),O[xe].add(Z),O[ue].add(Z))}let fe=this.groups;fe.length===0&&(fe=[{start:0,count:g.length}]);for(let Ye=0,xe=fe.length;Ye<xe;++Ye){const ue=fe[Ye],Se=ue.start,je=ue.count;for(let rt=Se,et=Se+je;rt<et;rt+=3)le(g[rt+0],g[rt+1],g[rt+2])}const be=new He,Me=new He,ce=new He,We=new He;function Ke(Ye){ce.fromArray(b,Ye*3),We.copy(ce);const xe=D[Ye];be.copy(xe),be.sub(ce.multiplyScalar(ce.dot(xe))).normalize(),Me.crossVectors(We,xe);const Se=Me.dot(O[Ye])<0?-1:1;F[Ye*4]=be.x,F[Ye*4+1]=be.y,F[Ye*4+2]=be.z,F[Ye*4+3]=Se}for(let Ye=0,xe=fe.length;Ye<xe;++Ye){const ue=fe[Ye],Se=ue.start,je=ue.count;for(let rt=Se,et=Se+je;rt<et;rt+=3)Ke(g[rt+0]),Ke(g[rt+1]),Ke(g[rt+2])}}computeVertexNormals(){const i=this.index,u=this.getAttribute("position");if(u!==void 0){let g=this.getAttribute("normal");if(g===void 0)g=new Bs(new Float32Array(u.count*3),3),this.setAttribute("normal",g);else for(let B=0,W=g.count;B<W;B++)g.setXYZ(B,0,0,0);const v=new He,b=new He,M=new He,N=new He,F=new He,D=new He,O=new He,z=new He;if(i)for(let B=0,W=i.count;B<W;B+=3){const G=i.getX(B+0),K=i.getX(B+1),J=i.getX(B+2);v.fromBufferAttribute(u,G),b.fromBufferAttribute(u,K),M.fromBufferAttribute(u,J),O.subVectors(M,b),z.subVectors(v,b),O.cross(z),N.fromBufferAttribute(g,G),F.fromBufferAttribute(g,K),D.fromBufferAttribute(g,J),N.add(O),F.add(O),D.add(O),g.setXYZ(G,N.x,N.y,N.z),g.setXYZ(K,F.x,F.y,F.z),g.setXYZ(J,D.x,D.y,D.z)}else for(let B=0,W=u.count;B<W;B+=3)v.fromBufferAttribute(u,B+0),b.fromBufferAttribute(u,B+1),M.fromBufferAttribute(u,B+2),O.subVectors(M,b),z.subVectors(v,b),O.cross(z),g.setXYZ(B+0,O.x,O.y,O.z),g.setXYZ(B+1,O.x,O.y,O.z),g.setXYZ(B+2,O.x,O.y,O.z);this.normalizeNormals(),g.needsUpdate=!0}}merge(i,u){if(!(i&&i.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",i);return}u===void 0&&(u=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const g=this.attributes;for(const v in g){if(i.attributes[v]===void 0)continue;const M=g[v].array,N=i.attributes[v],F=N.array,D=N.itemSize*u,O=Math.min(F.length,M.length-D);for(let z=0,B=D;z<O;z++,B++)M[B]=F[z]}return this}normalizeNormals(){const i=this.attributes.normal;for(let u=0,g=i.count;u<g;u++)oa.fromBufferAttribute(i,u),oa.normalize(),i.setXYZ(u,oa.x,oa.y,oa.z)}toNonIndexed(){function i(N,F){const D=N.array,O=N.itemSize,z=N.normalized,B=new D.constructor(F.length*O);let W=0,G=0;for(let K=0,J=F.length;K<J;K++){N.isInterleavedBufferAttribute?W=F[K]*N.data.stride+N.offset:W=F[K]*O;for(let V=0;V<O;V++)B[G++]=D[W++]}return new Bs(B,O,z)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const u=new $i,g=this.index.array,v=this.attributes;for(const N in v){const F=v[N],D=i(F,g);u.setAttribute(N,D)}const b=this.morphAttributes;for(const N in b){const F=[],D=b[N];for(let O=0,z=D.length;O<z;O++){const B=D[O],W=i(B,g);F.push(W)}u.morphAttributes[N]=F}u.morphTargetsRelative=this.morphTargetsRelative;const M=this.groups;for(let N=0,F=M.length;N<F;N++){const D=M[N];u.addGroup(D.start,D.count,D.materialIndex)}return u}toJSON(){const i={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),Object.keys(this.userData).length>0&&(i.userData=this.userData),this.parameters!==void 0){const F=this.parameters;for(const D in F)F[D]!==void 0&&(i[D]=F[D]);return i}i.data={attributes:{}};const u=this.index;u!==null&&(i.data.index={type:u.array.constructor.name,array:Array.prototype.slice.call(u.array)});const g=this.attributes;for(const F in g){const D=g[F];i.data.attributes[F]=D.toJSON(i.data)}const v={};let b=!1;for(const F in this.morphAttributes){const D=this.morphAttributes[F],O=[];for(let z=0,B=D.length;z<B;z++){const W=D[z];O.push(W.toJSON(i.data))}O.length>0&&(v[F]=O,b=!0)}b&&(i.data.morphAttributes=v,i.data.morphTargetsRelative=this.morphTargetsRelative);const M=this.groups;M.length>0&&(i.data.groups=JSON.parse(JSON.stringify(M)));const N=this.boundingSphere;return N!==null&&(i.data.boundingSphere={center:N.center.toArray(),radius:N.radius}),i}clone(){return new $i().copy(this)}copy(i){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const u={};this.name=i.name;const g=i.index;g!==null&&this.setIndex(g.clone(u));const v=i.attributes;for(const D in v){const O=v[D];this.setAttribute(D,O.clone(u))}const b=i.morphAttributes;for(const D in b){const O=[],z=b[D];for(let B=0,W=z.length;B<W;B++)O.push(z[B].clone(u));this.morphAttributes[D]=O}this.morphTargetsRelative=i.morphTargetsRelative;const M=i.groups;for(let D=0,O=M.length;D<O;D++){const z=M[D];this.addGroup(z.start,z.count,z.materialIndex)}const N=i.boundingBox;N!==null&&(this.boundingBox=N.clone());const F=i.boundingSphere;return F!==null&&(this.boundingSphere=F.clone()),this.drawRange.start=i.drawRange.start,this.drawRange.count=i.drawRange.count,this.userData=i.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}$i.prototype.isBufferGeometry=!0;const Fk=new cr,Vy=new p0,jT=new d0,Hp=new He,jp=new He,qp=new He,qT=new He,XT=new He,YT=new He,x1=new He,v1=new He,b1=new He,w1=new xn,_1=new xn,S1=new xn,KT=new He,M1=new He;class Do extends ai{constructor(i=new $i,u=new TE){super(),this.type="Mesh",this.geometry=i,this.material=u,this.updateMorphTargets()}copy(i){return super.copy(i),i.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=i.morphTargetInfluences.slice()),i.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},i.morphTargetDictionary)),this.material=i.material,this.geometry=i.geometry,this}updateMorphTargets(){const i=this.geometry;if(i.isBufferGeometry){const u=i.morphAttributes,g=Object.keys(u);if(g.length>0){const v=u[g[0]];if(v!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let b=0,M=v.length;b<M;b++){const N=v[b].name||String(b);this.morphTargetInfluences.push(0),this.morphTargetDictionary[N]=b}}}}else{const u=i.morphTargets;u!==void 0&&u.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(i,u){const g=this.geometry,v=this.material,b=this.matrixWorld;if(v===void 0||(g.boundingSphere===null&&g.computeBoundingSphere(),jT.copy(g.boundingSphere),jT.applyMatrix4(b),i.ray.intersectsSphere(jT)===!1)||(Fk.copy(b).invert(),Vy.copy(i.ray).applyMatrix4(Fk),g.boundingBox!==null&&Vy.intersectsBox(g.boundingBox)===!1))return;let M;if(g.isBufferGeometry){const N=g.index,F=g.attributes.position,D=g.morphAttributes.position,O=g.morphTargetsRelative,z=g.attributes.uv,B=g.attributes.uv2,W=g.groups,G=g.drawRange;if(N!==null)if(Array.isArray(v))for(let K=0,J=W.length;K<J;K++){const V=W[K],Z=v[V.materialIndex],le=Math.max(V.start,G.start),fe=Math.min(V.start+V.count,G.start+G.count);for(let be=le,Me=fe;be<Me;be+=3){const ce=N.getX(be),We=N.getX(be+1),Ke=N.getX(be+2);M=T1(this,Z,i,Vy,F,D,O,z,B,ce,We,Ke),M&&(M.faceIndex=Math.floor(be/3),M.face.materialIndex=V.materialIndex,u.push(M))}}else{const K=Math.max(0,G.start),J=Math.min(N.count,G.start+G.count);for(let V=K,Z=J;V<Z;V+=3){const le=N.getX(V),fe=N.getX(V+1),be=N.getX(V+2);M=T1(this,v,i,Vy,F,D,O,z,B,le,fe,be),M&&(M.faceIndex=Math.floor(V/3),u.push(M))}}else if(F!==void 0)if(Array.isArray(v))for(let K=0,J=W.length;K<J;K++){const V=W[K],Z=v[V.materialIndex],le=Math.max(V.start,G.start),fe=Math.min(V.start+V.count,G.start+G.count);for(let be=le,Me=fe;be<Me;be+=3){const ce=be,We=be+1,Ke=be+2;M=T1(this,Z,i,Vy,F,D,O,z,B,ce,We,Ke),M&&(M.faceIndex=Math.floor(be/3),M.face.materialIndex=V.materialIndex,u.push(M))}}else{const K=Math.max(0,G.start),J=Math.min(F.count,G.start+G.count);for(let V=K,Z=J;V<Z;V+=3){const le=V,fe=V+1,be=V+2;M=T1(this,v,i,Vy,F,D,O,z,B,le,fe,be),M&&(M.faceIndex=Math.floor(V/3),u.push(M))}}}else g.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}Do.prototype.isMesh=!0;function h5(E,i,u,g,v,b,M,N){let F;if(i.side===zs?F=g.intersectTriangle(M,b,v,!0,N):F=g.intersectTriangle(v,b,M,i.side!==a0,N),F===null)return null;M1.copy(N),M1.applyMatrix4(E.matrixWorld);const D=u.ray.origin.distanceTo(M1);return D<u.near||D>u.far?null:{distance:D,point:M1.clone(),object:E}}function T1(E,i,u,g,v,b,M,N,F,D,O,z){Hp.fromBufferAttribute(v,D),jp.fromBufferAttribute(v,O),qp.fromBufferAttribute(v,z);const B=E.morphTargetInfluences;if(b&&B){x1.set(0,0,0),v1.set(0,0,0),b1.set(0,0,0);for(let G=0,K=b.length;G<K;G++){const J=B[G],V=b[G];J!==0&&(qT.fromBufferAttribute(V,D),XT.fromBufferAttribute(V,O),YT.fromBufferAttribute(V,z),M?(x1.addScaledVector(qT,J),v1.addScaledVector(XT,J),b1.addScaledVector(YT,J)):(x1.addScaledVector(qT.sub(Hp),J),v1.addScaledVector(XT.sub(jp),J),b1.addScaledVector(YT.sub(qp),J)))}Hp.add(x1),jp.add(v1),qp.add(b1)}E.isSkinnedMesh&&(E.boneTransform(D,Hp),E.boneTransform(O,jp),E.boneTransform(z,qp));const W=h5(E,i,u,g,Hp,jp,qp,KT);if(W){N&&(w1.fromBufferAttribute(N,D),_1.fromBufferAttribute(N,O),S1.fromBufferAttribute(N,z),W.uv=ks.getUV(KT,Hp,jp,qp,w1,_1,S1,new xn)),F&&(w1.fromBufferAttribute(F,D),_1.fromBufferAttribute(F,O),S1.fromBufferAttribute(F,z),W.uv2=ks.getUV(KT,Hp,jp,qp,w1,_1,S1,new xn));const G={a:D,b:O,c:z,normal:new He,materialIndex:0};ks.getNormal(Hp,jp,qp,G.normal),W.face=G}return W}class Cv extends $i{constructor(i=1,u=1,g=1,v=1,b=1,M=1){super(),this.type="BoxGeometry",this.parameters={width:i,height:u,depth:g,widthSegments:v,heightSegments:b,depthSegments:M};const N=this;v=Math.floor(v),b=Math.floor(b),M=Math.floor(M);const F=[],D=[],O=[],z=[];let B=0,W=0;G("z","y","x",-1,-1,g,u,i,M,b,0),G("z","y","x",1,-1,g,u,-i,M,b,1),G("x","z","y",1,1,i,g,u,v,M,2),G("x","z","y",1,-1,i,g,-u,v,M,3),G("x","y","z",1,-1,i,u,g,v,b,4),G("x","y","z",-1,-1,i,u,-g,v,b,5),this.setIndex(F),this.setAttribute("position",new ua(D,3)),this.setAttribute("normal",new ua(O,3)),this.setAttribute("uv",new ua(z,2));function G(K,J,V,Z,le,fe,be,Me,ce,We,Ke){const Ye=fe/ce,xe=be/We,ue=fe/2,Se=be/2,je=Me/2,rt=ce+1,et=We+1;let ot=0,Et=0;const tn=new He;for(let ln=0;ln<et;ln++){const Vt=ln*xe-Se;for(let En=0;En<rt;En++){const Bt=En*Ye-ue;tn[K]=Bt*Z,tn[J]=Vt*le,tn[V]=je,D.push(tn.x,tn.y,tn.z),tn[K]=0,tn[J]=0,tn[V]=Me>0?1:-1,O.push(tn.x,tn.y,tn.z),z.push(En/ce),z.push(1-ln/We),ot+=1}}for(let ln=0;ln<We;ln++)for(let Vt=0;Vt<ce;Vt++){const En=B+Vt+rt*ln,Bt=B+Vt+rt*(ln+1),sn=B+(Vt+1)+rt*(ln+1),Mn=B+(Vt+1)+rt*ln;F.push(En,Bt,Mn),F.push(Bt,sn,Mn),Et+=6}N.addGroup(W,Et,Ke),W+=Et,B+=ot}}static fromJSON(i){return new Cv(i.width,i.height,i.depth,i.widthSegments,i.heightSegments,i.depthSegments)}}function l0(E){const i={};for(const u in E){i[u]={};for(const g in E[u]){const v=E[u][g];v&&(v.isColor||v.isMatrix3||v.isMatrix4||v.isVector2||v.isVector3||v.isVector4||v.isTexture||v.isQuaternion)?i[u][g]=v.clone():Array.isArray(v)?i[u][g]=v.slice():i[u][g]=v}}return i}function $a(E){const i={};for(let u=0;u<E.length;u++){const g=l0(E[u]);for(const v in g)i[v]=g[v]}return i}const d5={clone:l0,merge:$a};var p5=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,f5=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Wm extends Va{constructor(i){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=p5,this.fragmentShader=f5,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,i!==void 0&&(i.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(i))}copy(i){return super.copy(i),this.fragmentShader=i.fragmentShader,this.vertexShader=i.vertexShader,this.uniforms=l0(i.uniforms),this.defines=Object.assign({},i.defines),this.wireframe=i.wireframe,this.wireframeLinewidth=i.wireframeLinewidth,this.lights=i.lights,this.clipping=i.clipping,this.extensions=Object.assign({},i.extensions),this.glslVersion=i.glslVersion,this}toJSON(i){const u=super.toJSON(i);u.glslVersion=this.glslVersion,u.uniforms={};for(const v in this.uniforms){const M=this.uniforms[v].value;M&&M.isTexture?u.uniforms[v]={type:"t",value:M.toJSON(i).uuid}:M&&M.isColor?u.uniforms[v]={type:"c",value:M.getHex()}:M&&M.isVector2?u.uniforms[v]={type:"v2",value:M.toArray()}:M&&M.isVector3?u.uniforms[v]={type:"v3",value:M.toArray()}:M&&M.isVector4?u.uniforms[v]={type:"v4",value:M.toArray()}:M&&M.isMatrix3?u.uniforms[v]={type:"m3",value:M.toArray()}:M&&M.isMatrix4?u.uniforms[v]={type:"m4",value:M.toArray()}:u.uniforms[v]={value:M}}Object.keys(this.defines).length>0&&(u.defines=this.defines),u.vertexShader=this.vertexShader,u.fragmentShader=this.fragmentShader;const g={};for(const v in this.extensions)this.extensions[v]===!0&&(g[v]=!0);return Object.keys(g).length>0&&(u.extensions=g),u}}Wm.prototype.isShaderMaterial=!0;class EE extends ai{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new cr,this.projectionMatrix=new cr,this.projectionMatrixInverse=new cr}copy(i,u){return super.copy(i,u),this.matrixWorldInverse.copy(i.matrixWorldInverse),this.projectionMatrix.copy(i.projectionMatrix),this.projectionMatrixInverse.copy(i.projectionMatrixInverse),this}getWorldDirection(i){this.updateWorldMatrix(!0,!1);const u=this.matrixWorld.elements;return i.set(-u[8],-u[9],-u[10]).normalize()}updateMatrixWorld(i){super.updateMatrixWorld(i),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(i,u){super.updateWorldMatrix(i,u),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}EE.prototype.isCamera=!0;class Lo extends EE{constructor(i=50,u=1,g=.1,v=2e3){super(),this.type="PerspectiveCamera",this.fov=i,this.zoom=1,this.near=g,this.far=v,this.focus=10,this.aspect=u,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(i,u){return super.copy(i,u),this.fov=i.fov,this.zoom=i.zoom,this.near=i.near,this.far=i.far,this.focus=i.focus,this.aspect=i.aspect,this.view=i.view===null?null:Object.assign({},i.view),this.filmGauge=i.filmGauge,this.filmOffset=i.filmOffset,this}setFocalLength(i){const u=.5*this.getFilmHeight()/i;this.fov=fE*2*Math.atan(u),this.updateProjectionMatrix()}getFocalLength(){const i=Math.tan(AT*.5*this.fov);return .5*this.getFilmHeight()/i}getEffectiveFOV(){return fE*2*Math.atan(Math.tan(AT*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(i,u,g,v,b,M){this.aspect=i/u,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=i,this.view.fullHeight=u,this.view.offsetX=g,this.view.offsetY=v,this.view.width=b,this.view.height=M,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const i=this.near;let u=i*Math.tan(AT*.5*this.fov)/this.zoom,g=2*u,v=this.aspect*g,b=-.5*v;const M=this.view;if(this.view!==null&&this.view.enabled){const F=M.fullWidth,D=M.fullHeight;b+=M.offsetX*v/F,u-=M.offsetY*g/D,v*=M.width/F,g*=M.height/D}const N=this.filmOffset;N!==0&&(b+=i*N/this.getFilmWidth()),this.projectionMatrix.makePerspective(b,b+v,u,u-g,i,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(i){const u=super.toJSON(i);return u.object.fov=this.fov,u.object.zoom=this.zoom,u.object.near=this.near,u.object.far=this.far,u.object.focus=this.focus,u.object.aspect=this.aspect,this.view!==null&&(u.object.view=Object.assign({},this.view)),u.object.filmGauge=this.filmGauge,u.object.filmOffset=this.filmOffset,u}}Lo.prototype.isPerspectiveCamera=!0;const Wy=90,Gy=1;class AE extends ai{constructor(i,u,g){if(super(),this.type="CubeCamera",g.isWebGLCubeRenderTarget!==!0){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=g;const v=new Lo(Wy,Gy,i,u);v.layers=this.layers,v.up.set(0,-1,0),v.lookAt(new He(1,0,0)),this.add(v);const b=new Lo(Wy,Gy,i,u);b.layers=this.layers,b.up.set(0,-1,0),b.lookAt(new He(-1,0,0)),this.add(b);const M=new Lo(Wy,Gy,i,u);M.layers=this.layers,M.up.set(0,0,1),M.lookAt(new He(0,1,0)),this.add(M);const N=new Lo(Wy,Gy,i,u);N.layers=this.layers,N.up.set(0,0,-1),N.lookAt(new He(0,-1,0)),this.add(N);const F=new Lo(Wy,Gy,i,u);F.layers=this.layers,F.up.set(0,-1,0),F.lookAt(new He(0,0,1)),this.add(F);const D=new Lo(Wy,Gy,i,u);D.layers=this.layers,D.up.set(0,-1,0),D.lookAt(new He(0,0,-1)),this.add(D)}update(i,u){this.parent===null&&this.updateMatrixWorld();const g=this.renderTarget,[v,b,M,N,F,D]=this.children,O=i.xr.enabled,z=i.getRenderTarget();i.xr.enabled=!1;const B=g.texture.generateMipmaps;g.texture.generateMipmaps=!1,i.setRenderTarget(g,0),i.render(u,v),i.setRenderTarget(g,1),i.render(u,b),i.setRenderTarget(g,2),i.render(u,M),i.setRenderTarget(g,3),i.render(u,N),i.setRenderTarget(g,4),i.render(u,F),g.texture.generateMipmaps=B,i.setRenderTarget(g,5),i.render(u,D),i.setRenderTarget(z),i.xr.enabled=O}}class t_ extends Ta{constructor(i,u,g,v,b,M,N,F,D,O){i=i!==void 0?i:[],u=u!==void 0?u:K1,N=N!==void 0?N:Kp,super(i,u,g,v,b,M,N,F,D,O),this.flipY=!1}get images(){return this.image}set images(i){this.image=i}}t_.prototype.isCubeTexture=!0;class WN extends Cc{constructor(i,u,g){Number.isInteger(u)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),u=g),super(i,i,u),u=u||{},this.texture=new t_(void 0,u.mapping,u.wrapS,u.wrapT,u.magFilter,u.minFilter,u.format,u.type,u.anisotropy,u.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=u.generateMipmaps!==void 0?u.generateMipmaps:!1,this.texture.minFilter=u.minFilter!==void 0?u.minFilter:zl,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(i,u){this.texture.type=u.type,this.texture.format=ml,this.texture.encoding=u.encoding,this.texture.generateMipmaps=u.generateMipmaps,this.texture.minFilter=u.minFilter,this.texture.magFilter=u.magFilter;const g={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},v=new Cv(5,5,5),b=new Wm({name:"CubemapFromEquirect",uniforms:l0(g.uniforms),vertexShader:g.vertexShader,fragmentShader:g.fragmentShader,side:zs,blending:Yp});b.uniforms.tEquirect.value=u;const M=new Do(v,b),N=u.minFilter;return u.minFilter===Q1&&(u.minFilter=zl),new AE(1,10,this).update(i,M),u.minFilter=N,M.geometry.dispose(),M.material.dispose(),this}clear(i,u,g,v){const b=i.getRenderTarget();for(let M=0;M<6;M++)i.setRenderTarget(this,M),i.clear(u,g,v);i.setRenderTarget(b)}}WN.prototype.isWebGLCubeRenderTarget=!0;const ZT=new He,m5=new He,g5=new Ma;class Qh{constructor(i=new He(1,0,0),u=0){this.normal=i,this.constant=u}set(i,u){return this.normal.copy(i),this.constant=u,this}setComponents(i,u,g,v){return this.normal.set(i,u,g),this.constant=v,this}setFromNormalAndCoplanarPoint(i,u){return this.normal.copy(i),this.constant=-u.dot(this.normal),this}setFromCoplanarPoints(i,u,g){const v=ZT.subVectors(g,u).cross(m5.subVectors(i,u)).normalize();return this.setFromNormalAndCoplanarPoint(v,i),this}copy(i){return this.normal.copy(i.normal),this.constant=i.constant,this}normalize(){const i=1/this.normal.length();return this.normal.multiplyScalar(i),this.constant*=i,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(i){return this.normal.dot(i)+this.constant}distanceToSphere(i){return this.distanceToPoint(i.center)-i.radius}projectPoint(i,u){return u.copy(this.normal).multiplyScalar(-this.distanceToPoint(i)).add(i)}intersectLine(i,u){const g=i.delta(ZT),v=this.normal.dot(g);if(v===0)return this.distanceToPoint(i.start)===0?u.copy(i.start):null;const b=-(i.start.dot(this.normal)+this.constant)/v;return b<0||b>1?null:u.copy(g).multiplyScalar(b).add(i.start)}intersectsLine(i){const u=this.distanceToPoint(i.start),g=this.distanceToPoint(i.end);return u<0&&g>0||g<0&&u>0}intersectsBox(i){return i.intersectsPlane(this)}intersectsSphere(i){return i.intersectsPlane(this)}coplanarPoint(i){return i.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(i,u){const g=u||g5.getNormalMatrix(i),v=this.coplanarPoint(ZT).applyMatrix4(i),b=this.normal.applyMatrix3(g).normalize();return this.constant=-v.dot(b),this}translate(i){return this.constant-=i.dot(this.normal),this}equals(i){return i.normal.equals(this.normal)&&i.constant===this.constant}clone(){return new this.constructor().copy(this)}}Qh.prototype.isPlane=!0;const Hy=new d0,E1=new He;class n_{constructor(i=new Qh,u=new Qh,g=new Qh,v=new Qh,b=new Qh,M=new Qh){this.planes=[i,u,g,v,b,M]}set(i,u,g,v,b,M){const N=this.planes;return N[0].copy(i),N[1].copy(u),N[2].copy(g),N[3].copy(v),N[4].copy(b),N[5].copy(M),this}copy(i){const u=this.planes;for(let g=0;g<6;g++)u[g].copy(i.planes[g]);return this}setFromProjectionMatrix(i){const u=this.planes,g=i.elements,v=g[0],b=g[1],M=g[2],N=g[3],F=g[4],D=g[5],O=g[6],z=g[7],B=g[8],W=g[9],G=g[10],K=g[11],J=g[12],V=g[13],Z=g[14],le=g[15];return u[0].setComponents(N-v,z-F,K-B,le-J).normalize(),u[1].setComponents(N+v,z+F,K+B,le+J).normalize(),u[2].setComponents(N+b,z+D,K+W,le+V).normalize(),u[3].setComponents(N-b,z-D,K-W,le-V).normalize(),u[4].setComponents(N-M,z-O,K-G,le-Z).normalize(),u[5].setComponents(N+M,z+O,K+G,le+Z).normalize(),this}intersectsObject(i){const u=i.geometry;return u.boundingSphere===null&&u.computeBoundingSphere(),Hy.copy(u.boundingSphere).applyMatrix4(i.matrixWorld),this.intersectsSphere(Hy)}intersectsSprite(i){return Hy.center.set(0,0,0),Hy.radius=.7071067811865476,Hy.applyMatrix4(i.matrixWorld),this.intersectsSphere(Hy)}intersectsSphere(i){const u=this.planes,g=i.center,v=-i.radius;for(let b=0;b<6;b++)if(u[b].distanceToPoint(g)<v)return!1;return!0}intersectsBox(i){const u=this.planes;for(let g=0;g<6;g++){const v=u[g];if(E1.x=v.normal.x>0?i.max.x:i.min.x,E1.y=v.normal.y>0?i.max.y:i.min.y,E1.z=v.normal.z>0?i.max.z:i.min.z,v.distanceToPoint(E1)<0)return!1}return!0}containsPoint(i){const u=this.planes;for(let g=0;g<6;g++)if(u[g].distanceToPoint(i)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function GN(){let E=null,i=!1,u=null,g=null;function v(b,M){u(b,M),g=E.requestAnimationFrame(v)}return{start:function(){i!==!0&&u!==null&&(g=E.requestAnimationFrame(v),i=!0)},stop:function(){E.cancelAnimationFrame(g),i=!1},setAnimationLoop:function(b){u=b},setContext:function(b){E=b}}}function y5(E,i){const u=i.isWebGL2,g=new WeakMap;function v(D,O){const z=D.array,B=D.usage,W=E.createBuffer();E.bindBuffer(O,W),E.bufferData(O,z,B),D.onUploadCallback();let G=5126;return z instanceof Float32Array?G=5126:z instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):z instanceof Uint16Array?D.isFloat16BufferAttribute?u?G=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):G=5123:z instanceof Int16Array?G=5122:z instanceof Uint32Array?G=5125:z instanceof Int32Array?G=5124:z instanceof Int8Array?G=5120:(z instanceof Uint8Array||z instanceof Uint8ClampedArray)&&(G=5121),{buffer:W,type:G,bytesPerElement:z.BYTES_PER_ELEMENT,version:D.version}}function b(D,O,z){const B=O.array,W=O.updateRange;E.bindBuffer(z,D),W.count===-1?E.bufferSubData(z,0,B):(u?E.bufferSubData(z,W.offset*B.BYTES_PER_ELEMENT,B,W.offset,W.count):E.bufferSubData(z,W.offset*B.BYTES_PER_ELEMENT,B.subarray(W.offset,W.offset+W.count)),W.count=-1)}function M(D){return D.isInterleavedBufferAttribute&&(D=D.data),g.get(D)}function N(D){D.isInterleavedBufferAttribute&&(D=D.data);const O=g.get(D);O&&(E.deleteBuffer(O.buffer),g.delete(D))}function F(D,O){if(D.isGLBufferAttribute){const B=g.get(D);(!B||B.version<D.version)&&g.set(D,{buffer:D.buffer,type:D.type,bytesPerElement:D.elementSize,version:D.version});return}D.isInterleavedBufferAttribute&&(D=D.data);const z=g.get(D);z===void 0?g.set(D,v(D,O)):z.version<D.version&&(b(z.buffer,D,O),z.version=D.version)}return{get:M,remove:N,update:F}}class IE extends $i{constructor(i=1,u=1,g=1,v=1){super(),this.type="PlaneGeometry",this.parameters={width:i,height:u,widthSegments:g,heightSegments:v};const b=i/2,M=u/2,N=Math.floor(g),F=Math.floor(v),D=N+1,O=F+1,z=i/N,B=u/F,W=[],G=[],K=[],J=[];for(let V=0;V<O;V++){const Z=V*B-M;for(let le=0;le<D;le++){const fe=le*z-b;G.push(fe,-Z,0),K.push(0,0,1),J.push(le/N),J.push(1-V/F)}}for(let V=0;V<F;V++)for(let Z=0;Z<N;Z++){const le=Z+D*V,fe=Z+D*(V+1),be=Z+1+D*(V+1),Me=Z+1+D*V;W.push(le,fe,Me),W.push(fe,be,Me)}this.setIndex(W),this.setAttribute("position",new ua(G,3)),this.setAttribute("normal",new ua(K,3)),this.setAttribute("uv",new ua(J,2))}static fromJSON(i){return new IE(i.width,i.height,i.widthSegments,i.heightSegments)}}var x5=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,v5=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,b5=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,w5=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,_5=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,S5=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,M5="vec3 transformed = vec3( position );",T5=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,E5=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( incidentLight.direction + viewDir );
	float dotNL = saturate( dot( normal, incidentLight.direction ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );
	float dotNH = saturate( dot( geometry.normal, halfDir ) );
	float dotVH = saturate( dot( geometry.viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float NoH ) {
	float invAlpha = 1.0 / roughness;
	float cos2h = NoH * NoH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float NoV, float NoL ) {
	return saturate( 1.0 / ( 4.0 * ( NoL + NoV - NoL * NoV ) ) );
}
vec3 BRDF_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {
	vec3 N = geometry.normal;
	vec3 V = geometry.viewDir;
	vec3 H = normalize( V + L );
	float dotNH = saturate( dot( N, H ) );
	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );
}
#endif`,A5=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,I5=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,C5=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,k5=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,N5=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,R5=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,L5=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,D5=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,P5=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,F5=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,O5=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_maxMipLevel 8.0
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_maxTileSize 256.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );
		vec2 f = fract( uv );
		uv += 0.5 - f;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		if ( mipInt < cubeUV_maxMipLevel ) {
			uv.y += 2.0 * cubeUV_maxTileSize;
		}
		uv.y += filterInt * 2.0 * cubeUV_minTileSize;
		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
		uv *= texelSize;
		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x += texelSize;
		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.y += texelSize;
		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x -= texelSize;
		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		vec3 tm = mix( tl, tr, f.x );
		vec3 bm = mix( bl, br, f.x );
		return mix( tm, bm, f.y );
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,z5=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,B5=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,$5=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,U5=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,V5=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,W5="gl_FragColor = linearToOutputTexel( gl_FragColor );",G5=`
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );
}
vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );
}
vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 RGBEToLinear( in vec4 value ) {
	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );
}
vec4 LinearToRGBE( in vec4 value ) {
	float maxComponent = max( max( value.r, value.g ), value.b );
	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );
	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );
}
vec4 RGBMToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * value.a * maxRange, 1.0 );
}
vec4 LinearToRGBM( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );
	M = ceil( M * 255.0 ) / 255.0;
	return vec4( value.rgb / ( M * maxRange ), M );
}
vec4 RGBDToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );
}
vec4 LinearToRGBD( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float D = max( maxRange / maxRGB, 1.0 );
	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );
	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );
}
const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );
vec4 LinearToLogLuv( in vec4 value ) {
	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;
	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );
	vec4 vResult;
	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;
	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;
	vResult.w = fract( Le );
	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;
	return vResult;
}
const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );
vec4 LogLuvToLinear( in vec4 value ) {
	float Le = value.z * 255.0 + value.w;
	vec3 Xp_Y_XYZp;
	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );
	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;
	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;
	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;
	return vec4( max( vRGB, 0.0 ), 1.0 );
}`,H5=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
		envColor = envMapTexelToLinear( envColor );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,j5=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform int maxMipLevel;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,q5=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,X5=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,Y5=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,K5=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,Z5=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,J5=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,Q5=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,e6=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return texture2D( gradientMap, coord ).rgb;
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`,t6=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		lightMapIrradiance *= PI;
	#endif
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,n6=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,r6=`vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointLightInfo( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotLightInfo( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );
		#endif
	}
	#pragma unroll_loop_end
#endif`,i6=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {
	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {
		float dotNL = dot( geometry.normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,s6=`#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getIBLIrradiance( const in GeometricContext geometry ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec;
			#ifdef ENVMAP_MODE_REFLECTION
				reflectVec = reflect( - viewDir, normal );
				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			#else
				reflectVec = refract( - viewDir, normal, refractionRatio );
			#endif
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,a6=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,o6=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,l6=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,u6=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,c6=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularTintFactor = specularTint;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARTINTMAP
			specularTintFactor *= specularTintMapTexelToLinear( texture2D( specularTintMap, vUv ) ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularTintFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularTintFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenTint = sheenTint;
#endif`,h6=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenTint;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		reflectedLight.directSpecular += irradiance * BRDF_Sheen( material.roughness, directLight.direction, geometry, material.sheenTint );
	#else
		reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,d6=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,p6=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,f6=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,m6=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,g6=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,y6=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,x6=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,v6=`#ifdef USE_MAP
	vec4 texelColor = texture2D( map, vUv );
	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;
#endif`,b6=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,w6=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,_6=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,S6=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,M6=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,T6=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
#endif`,E6=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifndef USE_MORPHNORMALS
		uniform float morphTargetInfluences[ 8 ];
	#else
		uniform float morphTargetInfluences[ 4 ];
	#endif
#endif`,A6=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	transformed += morphTarget0 * morphTargetInfluences[ 0 ];
	transformed += morphTarget1 * morphTargetInfluences[ 1 ];
	transformed += morphTarget2 * morphTargetInfluences[ 2 ];
	transformed += morphTarget3 * morphTargetInfluences[ 3 ];
	#ifndef USE_MORPHNORMALS
		transformed += morphTarget4 * morphTargetInfluences[ 4 ];
		transformed += morphTarget5 * morphTargetInfluences[ 5 ];
		transformed += morphTarget6 * morphTargetInfluences[ 6 ];
		transformed += morphTarget7 * morphTargetInfluences[ 7 ];
	#endif
#endif`,I6=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,C6=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,k6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,N6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,R6=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,L6=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,D6=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,P6=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,F6=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,O6=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,z6=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,B6=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,$6=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,U6=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,V6=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,W6=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,G6=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,H6=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,j6=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,q6=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,X6=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Y6=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,K6=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`,Z6=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,J6=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Q6=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,e8=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,t8=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,n8=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,r8=`#ifdef USE_TRANSMISSION
	float transmissionAlpha = 1.0;
	float transmissionFactor = transmission;
	float thicknessFactor = thickness;
	#ifdef USE_TRANSMISSIONMAP
		transmissionFactor *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		thicknessFactor *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,
		attenuationTint, attenuationDistance );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );
	transmissionAlpha = transmission.a;
#endif`,i8=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationTint;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( float roughness, float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef TEXTURE_LOD_EXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,
		vec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,
		vec3 attenuationColor, float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,s8=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,a8=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,o8=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,l8=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,u8=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,c8=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,h8=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`,d8=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,p8=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,f8=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,m8=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,g8=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,y8=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,x8=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,v8=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,b8=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	vec4 texColor = texture2D( tEquirect, sampleUV );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,w8=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,_8=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,S8=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,M8=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,T8=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,E8=`uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,A8=`#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,I8=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );
	#else
		vec4 matcapColor = vec4( 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,C8=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,k8=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
}`,N8=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,R8=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,L8=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,D8=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularTint;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARTINTMAP
		uniform sampler2D specularTintMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenTint;
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,P8=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,F8=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,O8=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,z8=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,B8=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,$8=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,U8=`#include <common>
#include <fog_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <begin_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,V8=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,W8=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`;const $r={alphamap_fragment:x5,alphamap_pars_fragment:v5,alphatest_fragment:b5,alphatest_pars_fragment:w5,aomap_fragment:_5,aomap_pars_fragment:S5,begin_vertex:M5,beginnormal_vertex:T5,bsdfs:E5,bumpmap_pars_fragment:A5,clipping_planes_fragment:I5,clipping_planes_pars_fragment:C5,clipping_planes_pars_vertex:k5,clipping_planes_vertex:N5,color_fragment:R5,color_pars_fragment:L5,color_pars_vertex:D5,color_vertex:P5,common:F5,cube_uv_reflection_fragment:O5,defaultnormal_vertex:z5,displacementmap_pars_vertex:B5,displacementmap_vertex:$5,emissivemap_fragment:U5,emissivemap_pars_fragment:V5,encodings_fragment:W5,encodings_pars_fragment:G5,envmap_fragment:H5,envmap_common_pars_fragment:j5,envmap_pars_fragment:q5,envmap_pars_vertex:X5,envmap_physical_pars_fragment:s6,envmap_vertex:Y5,fog_vertex:K5,fog_pars_vertex:Z5,fog_fragment:J5,fog_pars_fragment:Q5,gradientmap_pars_fragment:e6,lightmap_fragment:t6,lightmap_pars_fragment:n6,lights_lambert_vertex:r6,lights_pars_begin:i6,lights_toon_fragment:a6,lights_toon_pars_fragment:o6,lights_phong_fragment:l6,lights_phong_pars_fragment:u6,lights_physical_fragment:c6,lights_physical_pars_fragment:h6,lights_fragment_begin:d6,lights_fragment_maps:p6,lights_fragment_end:f6,logdepthbuf_fragment:m6,logdepthbuf_pars_fragment:g6,logdepthbuf_pars_vertex:y6,logdepthbuf_vertex:x6,map_fragment:v6,map_pars_fragment:b6,map_particle_fragment:w6,map_particle_pars_fragment:_6,metalnessmap_fragment:S6,metalnessmap_pars_fragment:M6,morphnormal_vertex:T6,morphtarget_pars_vertex:E6,morphtarget_vertex:A6,normal_fragment_begin:I6,normal_fragment_maps:C6,normal_pars_fragment:k6,normal_pars_vertex:N6,normal_vertex:R6,normalmap_pars_fragment:L6,clearcoat_normal_fragment_begin:D6,clearcoat_normal_fragment_maps:P6,clearcoat_pars_fragment:F6,output_fragment:O6,packing:z6,premultiplied_alpha_fragment:B6,project_vertex:$6,dithering_fragment:U6,dithering_pars_fragment:V6,roughnessmap_fragment:W6,roughnessmap_pars_fragment:G6,shadowmap_pars_fragment:H6,shadowmap_pars_vertex:j6,shadowmap_vertex:q6,shadowmask_pars_fragment:X6,skinbase_vertex:Y6,skinning_pars_vertex:K6,skinning_vertex:Z6,skinnormal_vertex:J6,specularmap_fragment:Q6,specularmap_pars_fragment:e8,tonemapping_fragment:t8,tonemapping_pars_fragment:n8,transmission_fragment:r8,transmission_pars_fragment:i8,uv_pars_fragment:s8,uv_pars_vertex:a8,uv_vertex:o8,uv2_pars_fragment:l8,uv2_pars_vertex:u8,uv2_vertex:c8,worldpos_vertex:h8,background_frag:d8,background_vert:p8,cube_frag:f8,cube_vert:m8,depth_frag:g8,depth_vert:y8,distanceRGBA_frag:x8,distanceRGBA_vert:v8,equirect_frag:b8,equirect_vert:w8,linedashed_frag:_8,linedashed_vert:S8,meshbasic_frag:M8,meshbasic_vert:T8,meshlambert_frag:E8,meshlambert_vert:A8,meshmatcap_frag:I8,meshmatcap_vert:C8,meshnormal_frag:k8,meshnormal_vert:N8,meshphong_frag:R8,meshphong_vert:L8,meshphysical_frag:D8,meshphysical_vert:P8,meshtoon_frag:F8,meshtoon_vert:O8,points_frag:z8,points_vert:B8,shadow_frag:$8,shadow_vert:U8,sprite_frag:V8,sprite_vert:W8},An={common:{diffuse:{value:new rr(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Ma},uv2Transform:{value:new Ma},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new xn(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new rr(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new rr(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Ma}},sprite:{diffuse:{value:new rr(16777215)},opacity:{value:1},center:{value:new xn(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Ma}}},Ec={basic:{uniforms:$a([An.common,An.specularmap,An.envmap,An.aomap,An.lightmap,An.fog]),vertexShader:$r.meshbasic_vert,fragmentShader:$r.meshbasic_frag},lambert:{uniforms:$a([An.common,An.specularmap,An.envmap,An.aomap,An.lightmap,An.emissivemap,An.fog,An.lights,{emissive:{value:new rr(0)}}]),vertexShader:$r.meshlambert_vert,fragmentShader:$r.meshlambert_frag},phong:{uniforms:$a([An.common,An.specularmap,An.envmap,An.aomap,An.lightmap,An.emissivemap,An.bumpmap,An.normalmap,An.displacementmap,An.fog,An.lights,{emissive:{value:new rr(0)},specular:{value:new rr(1118481)},shininess:{value:30}}]),vertexShader:$r.meshphong_vert,fragmentShader:$r.meshphong_frag},standard:{uniforms:$a([An.common,An.envmap,An.aomap,An.lightmap,An.emissivemap,An.bumpmap,An.normalmap,An.displacementmap,An.roughnessmap,An.metalnessmap,An.fog,An.lights,{emissive:{value:new rr(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:$r.meshphysical_vert,fragmentShader:$r.meshphysical_frag},toon:{uniforms:$a([An.common,An.aomap,An.lightmap,An.emissivemap,An.bumpmap,An.normalmap,An.displacementmap,An.gradientmap,An.fog,An.lights,{emissive:{value:new rr(0)}}]),vertexShader:$r.meshtoon_vert,fragmentShader:$r.meshtoon_frag},matcap:{uniforms:$a([An.common,An.bumpmap,An.normalmap,An.displacementmap,An.fog,{matcap:{value:null}}]),vertexShader:$r.meshmatcap_vert,fragmentShader:$r.meshmatcap_frag},points:{uniforms:$a([An.points,An.fog]),vertexShader:$r.points_vert,fragmentShader:$r.points_frag},dashed:{uniforms:$a([An.common,An.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:$r.linedashed_vert,fragmentShader:$r.linedashed_frag},depth:{uniforms:$a([An.common,An.displacementmap]),vertexShader:$r.depth_vert,fragmentShader:$r.depth_frag},normal:{uniforms:$a([An.common,An.bumpmap,An.normalmap,An.displacementmap,{opacity:{value:1}}]),vertexShader:$r.meshnormal_vert,fragmentShader:$r.meshnormal_frag},sprite:{uniforms:$a([An.sprite,An.fog]),vertexShader:$r.sprite_vert,fragmentShader:$r.sprite_frag},background:{uniforms:{uvTransform:{value:new Ma},t2D:{value:null}},vertexShader:$r.background_vert,fragmentShader:$r.background_frag},cube:{uniforms:$a([An.envmap,{opacity:{value:1}}]),vertexShader:$r.cube_vert,fragmentShader:$r.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:$r.equirect_vert,fragmentShader:$r.equirect_frag},distanceRGBA:{uniforms:$a([An.common,An.displacementmap,{referencePosition:{value:new He},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:$r.distanceRGBA_vert,fragmentShader:$r.distanceRGBA_frag},shadow:{uniforms:$a([An.lights,An.fog,{color:{value:new rr(0)},opacity:{value:1}}]),vertexShader:$r.shadow_vert,fragmentShader:$r.shadow_frag}};Ec.physical={uniforms:$a([Ec.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new xn(1,1)},clearcoatNormalMap:{value:null},sheenTint:{value:new rr(0)},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new xn},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationTint:{value:new rr(0)},specularIntensity:{value:0},specularIntensityMap:{value:null},specularTint:{value:new rr(1,1,1)},specularTintMap:{value:null}}]),vertexShader:$r.meshphysical_vert,fragmentShader:$r.meshphysical_frag};function G8(E,i,u,g,v){const b=new rr(0);let M=0,N,F,D=null,O=0,z=null;function B(G,K){let J=!1,V=K.isScene===!0?K.background:null;V&&V.isTexture&&(V=i.get(V));const Z=E.xr,le=Z.getSession&&Z.getSession();le&&le.environmentBlendMode==="additive"&&(V=null),V===null?W(b,M):V&&V.isColor&&(W(V,1),J=!0),(E.autoClear||J)&&E.clear(E.autoClearColor,E.autoClearDepth,E.autoClearStencil),V&&(V.isCubeTexture||V.mapping===J1)?(F===void 0&&(F=new Do(new Cv(1,1,1),new Wm({name:"BackgroundCubeMaterial",uniforms:l0(Ec.cube.uniforms),vertexShader:Ec.cube.vertexShader,fragmentShader:Ec.cube.fragmentShader,side:zs,depthTest:!1,depthWrite:!1,fog:!1})),F.geometry.deleteAttribute("normal"),F.geometry.deleteAttribute("uv"),F.onBeforeRender=function(fe,be,Me){this.matrixWorld.copyPosition(Me.matrixWorld)},Object.defineProperty(F.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),g.update(F)),F.material.uniforms.envMap.value=V,F.material.uniforms.flipEnvMap.value=V.isCubeTexture&&V.isRenderTargetTexture===!1?-1:1,(D!==V||O!==V.version||z!==E.toneMapping)&&(F.material.needsUpdate=!0,D=V,O=V.version,z=E.toneMapping),G.unshift(F,F.geometry,F.material,0,0,null)):V&&V.isTexture&&(N===void 0&&(N=new Do(new IE(2,2),new Wm({name:"BackgroundMaterial",uniforms:l0(Ec.background.uniforms),vertexShader:Ec.background.vertexShader,fragmentShader:Ec.background.fragmentShader,side:wv,depthTest:!1,depthWrite:!1,fog:!1})),N.geometry.deleteAttribute("normal"),Object.defineProperty(N.material,"map",{get:function(){return this.uniforms.t2D.value}}),g.update(N)),N.material.uniforms.t2D.value=V,V.matrixAutoUpdate===!0&&V.updateMatrix(),N.material.uniforms.uvTransform.value.copy(V.matrix),(D!==V||O!==V.version||z!==E.toneMapping)&&(N.material.needsUpdate=!0,D=V,O=V.version,z=E.toneMapping),G.unshift(N,N.geometry,N.material,0,0,null))}function W(G,K){u.buffers.color.setClear(G.r,G.g,G.b,K,v)}return{getClearColor:function(){return b},setClearColor:function(G,K=1){b.set(G),M=K,W(b,M)},getClearAlpha:function(){return M},setClearAlpha:function(G){M=G,W(b,M)},render:B}}function H8(E,i,u,g){const v=E.getParameter(34921),b=g.isWebGL2?null:i.get("OES_vertex_array_object"),M=g.isWebGL2||b!==null,N={},F=K(null);let D=F;function O(Se,je,rt,et,ot){let Et=!1;if(M){const tn=G(et,rt,je);D!==tn&&(D=tn,B(D.object)),Et=J(et,ot),Et&&V(et,ot)}else{const tn=je.wireframe===!0;(D.geometry!==et.id||D.program!==rt.id||D.wireframe!==tn)&&(D.geometry=et.id,D.program=rt.id,D.wireframe=tn,Et=!0)}Se.isInstancedMesh===!0&&(Et=!0),ot!==null&&u.update(ot,34963),Et&&(ce(Se,je,rt,et),ot!==null&&E.bindBuffer(34963,u.get(ot).buffer))}function z(){return g.isWebGL2?E.createVertexArray():b.createVertexArrayOES()}function B(Se){return g.isWebGL2?E.bindVertexArray(Se):b.bindVertexArrayOES(Se)}function W(Se){return g.isWebGL2?E.deleteVertexArray(Se):b.deleteVertexArrayOES(Se)}function G(Se,je,rt){const et=rt.wireframe===!0;let ot=N[Se.id];ot===void 0&&(ot={},N[Se.id]=ot);let Et=ot[je.id];Et===void 0&&(Et={},ot[je.id]=Et);let tn=Et[et];return tn===void 0&&(tn=K(z()),Et[et]=tn),tn}function K(Se){const je=[],rt=[],et=[];for(let ot=0;ot<v;ot++)je[ot]=0,rt[ot]=0,et[ot]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:je,enabledAttributes:rt,attributeDivisors:et,object:Se,attributes:{},index:null}}function J(Se,je){const rt=D.attributes,et=Se.attributes;let ot=0;for(const Et in et){const tn=rt[Et],ln=et[Et];if(tn===void 0||tn.attribute!==ln||tn.data!==ln.data)return!0;ot++}return D.attributesNum!==ot||D.index!==je}function V(Se,je){const rt={},et=Se.attributes;let ot=0;for(const Et in et){const tn=et[Et],ln={};ln.attribute=tn,tn.data&&(ln.data=tn.data),rt[Et]=ln,ot++}D.attributes=rt,D.attributesNum=ot,D.index=je}function Z(){const Se=D.newAttributes;for(let je=0,rt=Se.length;je<rt;je++)Se[je]=0}function le(Se){fe(Se,0)}function fe(Se,je){const rt=D.newAttributes,et=D.enabledAttributes,ot=D.attributeDivisors;rt[Se]=1,et[Se]===0&&(E.enableVertexAttribArray(Se),et[Se]=1),ot[Se]!==je&&((g.isWebGL2?E:i.get("ANGLE_instanced_arrays"))[g.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](Se,je),ot[Se]=je)}function be(){const Se=D.newAttributes,je=D.enabledAttributes;for(let rt=0,et=je.length;rt<et;rt++)je[rt]!==Se[rt]&&(E.disableVertexAttribArray(rt),je[rt]=0)}function Me(Se,je,rt,et,ot,Et){g.isWebGL2===!0&&(rt===5124||rt===5125)?E.vertexAttribIPointer(Se,je,rt,ot,Et):E.vertexAttribPointer(Se,je,rt,et,ot,Et)}function ce(Se,je,rt,et){if(g.isWebGL2===!1&&(Se.isInstancedMesh||et.isInstancedBufferGeometry)&&i.get("ANGLE_instanced_arrays")===null)return;Z();const ot=et.attributes,Et=rt.getAttributes(),tn=je.defaultAttributeValues;for(const ln in Et){const Vt=Et[ln];if(Vt.location>=0){let En=ot[ln];if(En===void 0&&(ln==="instanceMatrix"&&Se.instanceMatrix&&(En=Se.instanceMatrix),ln==="instanceColor"&&Se.instanceColor&&(En=Se.instanceColor)),En!==void 0){const Bt=En.normalized,sn=En.itemSize,Mn=u.get(En);if(Mn===void 0)continue;const St=Mn.buffer,zn=Mn.type,Bn=Mn.bytesPerElement;if(En.isInterleavedBufferAttribute){const wn=En.data,Nn=wn.stride,$n=En.offset;if(wn&&wn.isInstancedInterleavedBuffer){for(let Ft=0;Ft<Vt.locationSize;Ft++)fe(Vt.location+Ft,wn.meshPerAttribute);Se.isInstancedMesh!==!0&&et._maxInstanceCount===void 0&&(et._maxInstanceCount=wn.meshPerAttribute*wn.count)}else for(let Ft=0;Ft<Vt.locationSize;Ft++)le(Vt.location+Ft);E.bindBuffer(34962,St);for(let Ft=0;Ft<Vt.locationSize;Ft++)Me(Vt.location+Ft,sn/Vt.locationSize,zn,Bt,Nn*Bn,($n+sn/Vt.locationSize*Ft)*Bn)}else{if(En.isInstancedBufferAttribute){for(let wn=0;wn<Vt.locationSize;wn++)fe(Vt.location+wn,En.meshPerAttribute);Se.isInstancedMesh!==!0&&et._maxInstanceCount===void 0&&(et._maxInstanceCount=En.meshPerAttribute*En.count)}else for(let wn=0;wn<Vt.locationSize;wn++)le(Vt.location+wn);E.bindBuffer(34962,St);for(let wn=0;wn<Vt.locationSize;wn++)Me(Vt.location+wn,sn/Vt.locationSize,zn,Bt,sn*Bn,sn/Vt.locationSize*wn*Bn)}}else if(tn!==void 0){const Bt=tn[ln];if(Bt!==void 0)switch(Bt.length){case 2:E.vertexAttrib2fv(Vt.location,Bt);break;case 3:E.vertexAttrib3fv(Vt.location,Bt);break;case 4:E.vertexAttrib4fv(Vt.location,Bt);break;default:E.vertexAttrib1fv(Vt.location,Bt)}}}}be()}function We(){xe();for(const Se in N){const je=N[Se];for(const rt in je){const et=je[rt];for(const ot in et)W(et[ot].object),delete et[ot];delete je[rt]}delete N[Se]}}function Ke(Se){if(N[Se.id]===void 0)return;const je=N[Se.id];for(const rt in je){const et=je[rt];for(const ot in et)W(et[ot].object),delete et[ot];delete je[rt]}delete N[Se.id]}function Ye(Se){for(const je in N){const rt=N[je];if(rt[Se.id]===void 0)continue;const et=rt[Se.id];for(const ot in et)W(et[ot].object),delete et[ot];delete rt[Se.id]}}function xe(){ue(),D!==F&&(D=F,B(D.object))}function ue(){F.geometry=null,F.program=null,F.wireframe=!1}return{setup:O,reset:xe,resetDefaultState:ue,dispose:We,releaseStatesOfGeometry:Ke,releaseStatesOfProgram:Ye,initAttributes:Z,enableAttribute:le,disableUnusedAttributes:be}}function j8(E,i,u,g){const v=g.isWebGL2;let b;function M(D){b=D}function N(D,O){E.drawArrays(b,D,O),u.update(O,b,1)}function F(D,O,z){if(z===0)return;let B,W;if(v)B=E,W="drawArraysInstanced";else if(B=i.get("ANGLE_instanced_arrays"),W="drawArraysInstancedANGLE",B===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}B[W](b,D,O,z),u.update(O,b,z)}this.setMode=M,this.render=N,this.renderInstances=F}function q8(E,i,u){let g;function v(){if(g!==void 0)return g;if(i.has("EXT_texture_filter_anisotropic")===!0){const ce=i.get("EXT_texture_filter_anisotropic");g=E.getParameter(ce.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else g=0;return g}function b(ce){if(ce==="highp"){if(E.getShaderPrecisionFormat(35633,36338).precision>0&&E.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";ce="mediump"}return ce==="mediump"&&E.getShaderPrecisionFormat(35633,36337).precision>0&&E.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const M=typeof WebGL2RenderingContext!="undefined"&&E instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!="undefined"&&E instanceof WebGL2ComputeRenderingContext;let N=u.precision!==void 0?u.precision:"highp";const F=b(N);F!==N&&(console.warn("THREE.WebGLRenderer:",N,"not supported, using",F,"instead."),N=F);const D=M||i.has("WEBGL_draw_buffers"),O=u.logarithmicDepthBuffer===!0,z=E.getParameter(34930),B=E.getParameter(35660),W=E.getParameter(3379),G=E.getParameter(34076),K=E.getParameter(34921),J=E.getParameter(36347),V=E.getParameter(36348),Z=E.getParameter(36349),le=B>0,fe=M||i.has("OES_texture_float"),be=le&&fe,Me=M?E.getParameter(36183):0;return{isWebGL2:M,drawBuffers:D,getMaxAnisotropy:v,getMaxPrecision:b,precision:N,logarithmicDepthBuffer:O,maxTextures:z,maxVertexTextures:B,maxTextureSize:W,maxCubemapSize:G,maxAttributes:K,maxVertexUniforms:J,maxVaryings:V,maxFragmentUniforms:Z,vertexTextures:le,floatFragmentTextures:fe,floatVertexTextures:be,maxSamples:Me}}function X8(E){const i=this;let u=null,g=0,v=!1,b=!1;const M=new Qh,N=new Ma,F={value:null,needsUpdate:!1};this.uniform=F,this.numPlanes=0,this.numIntersection=0,this.init=function(z,B,W){const G=z.length!==0||B||g!==0||v;return v=B,u=O(z,W,0),g=z.length,G},this.beginShadows=function(){b=!0,O(null)},this.endShadows=function(){b=!1,D()},this.setState=function(z,B,W){const G=z.clippingPlanes,K=z.clipIntersection,J=z.clipShadows,V=E.get(z);if(!v||G===null||G.length===0||b&&!J)b?O(null):D();else{const Z=b?0:g,le=Z*4;let fe=V.clippingState||null;F.value=fe,fe=O(G,B,le,W);for(let be=0;be!==le;++be)fe[be]=u[be];V.clippingState=fe,this.numIntersection=K?this.numPlanes:0,this.numPlanes+=Z}};function D(){F.value!==u&&(F.value=u,F.needsUpdate=g>0),i.numPlanes=g,i.numIntersection=0}function O(z,B,W,G){const K=z!==null?z.length:0;let J=null;if(K!==0){if(J=F.value,G!==!0||J===null){const V=W+K*4,Z=B.matrixWorldInverse;N.getNormalMatrix(Z),(J===null||J.length<V)&&(J=new Float32Array(V));for(let le=0,fe=W;le!==K;++le,fe+=4)M.copy(z[le]).applyMatrix4(Z,N),M.normal.toArray(J,fe),J[fe+3]=M.constant}F.value=J,F.needsUpdate=!0}return i.numPlanes=K,i.numIntersection=0,J}}function Y8(E){let i=new WeakMap;function u(M,N){return N===cE?M.mapping=K1:N===hE&&(M.mapping=Z1),M}function g(M){if(M&&M.isTexture&&M.isRenderTargetTexture===!1){const N=M.mapping;if(N===cE||N===hE)if(i.has(M)){const F=i.get(M).texture;return u(F,M.mapping)}else{const F=M.image;if(F&&F.height>0){const D=E.getRenderTarget(),O=new WN(F.height/2);return O.fromEquirectangularTexture(E,M),i.set(M,O),E.setRenderTarget(D),M.addEventListener("dispose",v),u(O.texture,M.mapping)}else return null}}return M}function v(M){const N=M.target;N.removeEventListener("dispose",v);const F=i.get(N);F!==void 0&&(i.delete(N),F.dispose())}function b(){i=new WeakMap}return{get:g,dispose:b}}class CE extends EE{constructor(i=-1,u=1,g=1,v=-1,b=.1,M=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=i,this.right=u,this.top=g,this.bottom=v,this.near=b,this.far=M,this.updateProjectionMatrix()}copy(i,u){return super.copy(i,u),this.left=i.left,this.right=i.right,this.top=i.top,this.bottom=i.bottom,this.near=i.near,this.far=i.far,this.zoom=i.zoom,this.view=i.view===null?null:Object.assign({},i.view),this}setViewOffset(i,u,g,v,b,M){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=i,this.view.fullHeight=u,this.view.offsetX=g,this.view.offsetY=v,this.view.width=b,this.view.height=M,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const i=(this.right-this.left)/(2*this.zoom),u=(this.top-this.bottom)/(2*this.zoom),g=(this.right+this.left)/2,v=(this.top+this.bottom)/2;let b=g-i,M=g+i,N=v+u,F=v-u;if(this.view!==null&&this.view.enabled){const D=(this.right-this.left)/this.view.fullWidth/this.zoom,O=(this.top-this.bottom)/this.view.fullHeight/this.zoom;b+=D*this.view.offsetX,M=b+D*this.view.width,N-=O*this.view.offsetY,F=N-O*this.view.height}this.projectionMatrix.makeOrthographic(b,M,N,F,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(i){const u=super.toJSON(i);return u.object.zoom=this.zoom,u.object.left=this.left,u.object.right=this.right,u.object.top=this.top,u.object.bottom=this.bottom,u.object.near=this.near,u.object.far=this.far,this.view!==null&&(u.object.view=Object.assign({},this.view)),u}}CE.prototype.isOrthographicCamera=!0;class r_ extends Wm{constructor(i){super(i),this.type="RawShaderMaterial"}}r_.prototype.isRawShaderMaterial=!0;const s0=4,Zp=8,Tc=Math.pow(2,Zp),HN=[.125,.215,.35,.446,.526,.582],jN=Zp-s0+1+HN.length,jy=20,Ac={[Po]:0,[e_]:1,[ME]:2,[PN]:3,[FN]:4,[ON]:5,[SE]:6},JT=new CE,{_lodPlanes:lv,_sizeLods:Ok,_sigmas:A1}=J8(),zk=new rr;let QT=null;const $m=(1+Math.sqrt(5))/2,qy=1/$m,Bk=[new He(1,1,1),new He(-1,1,1),new He(1,1,-1),new He(-1,1,-1),new He(0,$m,qy),new He(0,$m,-qy),new He(qy,0,$m),new He(-qy,0,$m),new He($m,qy,0),new He(-$m,qy,0)];class K8{constructor(i){this._renderer=i,this._pingPongRenderTarget=null,this._blurMaterial=Q8(jy),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(i,u=0,g=.1,v=100){QT=this._renderer.getRenderTarget();const b=this._allocateTargets();return this._sceneToCubeUV(i,g,v,b),u>0&&this._blur(b,0,0,u),this._applyPMREM(b),this._cleanup(b),b}fromEquirectangular(i){return this._fromTexture(i)}fromCubemap(i){return this._fromTexture(i)}compileCubemapShader(){this._cubemapShader===null&&(this._cubemapShader=Vk(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){this._equirectShader===null&&(this._equirectShader=Uk(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),this._cubemapShader!==null&&this._cubemapShader.dispose(),this._equirectShader!==null&&this._equirectShader.dispose();for(let i=0;i<lv.length;i++)lv[i].dispose()}_cleanup(i){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(QT),i.scissorTest=!1,I1(i,0,0,i.width,i.height)}_fromTexture(i){QT=this._renderer.getRenderTarget();const u=this._allocateTargets(i);return this._textureToCubeUV(i,u),this._applyPMREM(u),this._cleanup(u),u}_allocateTargets(i){const u={magFilter:la,minFilter:la,generateMipmaps:!1,type:o0,format:iH,encoding:Z8(i)?i.encoding:ME,depthBuffer:!1},g=$k(u);return g.depthBuffer=!i,this._pingPongRenderTarget=$k(u),g}_compileMaterial(i){const u=new Do(lv[0],i);this._renderer.compile(u,JT)}_sceneToCubeUV(i,u,g,v){const N=new Lo(90,1,u,g),F=[1,-1,1,1,1,1],D=[1,1,1,-1,-1,-1],O=this._renderer,z=O.autoClear,B=O.outputEncoding,W=O.toneMapping;O.getClearColor(zk),O.toneMapping=Vm,O.outputEncoding=Po,O.autoClear=!1;const G=new TE({name:"PMREM.Background",side:zs,depthWrite:!1,depthTest:!1}),K=new Do(new Cv,G);let J=!1;const V=i.background;V?V.isColor&&(G.color.copy(V),i.background=null,J=!0):(G.color.copy(zk),J=!0);for(let Z=0;Z<6;Z++){const le=Z%3;le==0?(N.up.set(0,F[Z],0),N.lookAt(D[Z],0,0)):le==1?(N.up.set(0,0,F[Z]),N.lookAt(0,D[Z],0)):(N.up.set(0,F[Z],0),N.lookAt(0,0,D[Z])),I1(v,le*Tc,Z>2?Tc:0,Tc,Tc),O.setRenderTarget(v),J&&O.render(K,N),O.render(i,N)}K.geometry.dispose(),K.material.dispose(),O.toneMapping=W,O.outputEncoding=B,O.autoClear=z,i.background=V}_textureToCubeUV(i,u){const g=this._renderer;i.isCubeTexture?this._cubemapShader==null&&(this._cubemapShader=Vk()):this._equirectShader==null&&(this._equirectShader=Uk());const v=i.isCubeTexture?this._cubemapShader:this._equirectShader,b=new Do(lv[0],v),M=v.uniforms;M.envMap.value=i,i.isCubeTexture||M.texelSize.value.set(1/i.image.width,1/i.image.height),M.inputEncoding.value=Ac[i.encoding],M.outputEncoding.value=Ac[u.texture.encoding],I1(u,0,0,3*Tc,2*Tc),g.setRenderTarget(u),g.render(b,JT)}_applyPMREM(i){const u=this._renderer,g=u.autoClear;u.autoClear=!1;for(let v=1;v<jN;v++){const b=Math.sqrt(A1[v]*A1[v]-A1[v-1]*A1[v-1]),M=Bk[(v-1)%Bk.length];this._blur(i,v-1,v,b,M)}u.autoClear=g}_blur(i,u,g,v,b){const M=this._pingPongRenderTarget;this._halfBlur(i,M,u,g,v,"latitudinal",b),this._halfBlur(M,i,g,g,v,"longitudinal",b)}_halfBlur(i,u,g,v,b,M,N){const F=this._renderer,D=this._blurMaterial;M!=="latitudinal"&&M!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const O=3,z=new Do(lv[v],D),B=D.uniforms,W=Ok[g]-1,G=isFinite(b)?Math.PI/(2*W):2*Math.PI/(2*jy-1),K=b/G,J=isFinite(b)?1+Math.floor(O*K):jy;J>jy&&console.warn(`sigmaRadians, ${b}, is too large and will clip, as it requested ${J} samples when the maximum is set to ${jy}`);const V=[];let Z=0;for(let Me=0;Me<jy;++Me){const ce=Me/K,We=Math.exp(-ce*ce/2);V.push(We),Me==0?Z+=We:Me<J&&(Z+=2*We)}for(let Me=0;Me<V.length;Me++)V[Me]=V[Me]/Z;B.envMap.value=i.texture,B.samples.value=J,B.weights.value=V,B.latitudinal.value=M==="latitudinal",N&&(B.poleAxis.value=N),B.dTheta.value=G,B.mipInt.value=Zp-g,B.inputEncoding.value=Ac[i.texture.encoding],B.outputEncoding.value=Ac[i.texture.encoding];const le=Ok[v],fe=3*Math.max(0,Tc-2*le),be=(v===0?0:2*Tc)+2*le*(v>Zp-s0?v-Zp+s0:0);I1(u,fe,be,3*le,2*le),F.setRenderTarget(u),F.render(z,JT)}}function Z8(E){return E===void 0||E.type!==o0?!1:E.encoding===Po||E.encoding===e_||E.encoding===SE}function J8(){const E=[],i=[],u=[];let g=Zp;for(let v=0;v<jN;v++){const b=Math.pow(2,g);i.push(b);let M=1/b;v>Zp-s0?M=HN[v-Zp+s0-1]:v==0&&(M=0),u.push(M);const N=1/(b-1),F=-N/2,D=1+N/2,O=[F,F,D,F,D,D,F,F,D,D,F,D],z=6,B=6,W=3,G=2,K=1,J=new Float32Array(W*B*z),V=new Float32Array(G*B*z),Z=new Float32Array(K*B*z);for(let fe=0;fe<z;fe++){const be=fe%3*2/3-1,Me=fe>2?0:-1,ce=[be,Me,0,be+2/3,Me,0,be+2/3,Me+1,0,be,Me,0,be+2/3,Me+1,0,be,Me+1,0];J.set(ce,W*B*fe),V.set(O,G*B*fe);const We=[fe,fe,fe,fe,fe,fe];Z.set(We,K*B*fe)}const le=new $i;le.setAttribute("position",new Bs(J,W)),le.setAttribute("uv",new Bs(V,G)),le.setAttribute("faceIndex",new Bs(Z,K)),E.push(le),g>s0&&g--}return{_lodPlanes:E,_sizeLods:i,_sigmas:u}}function $k(E){const i=new Cc(3*Tc,3*Tc,E);return i.texture.mapping=J1,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function I1(E,i,u,g,v){E.viewport.set(i,u,g,v),E.scissor.set(i,u,g,v)}function Q8(E){const i=new Float32Array(E),u=new He(0,1,0);return new r_({name:"SphericalGaussianBlur",defines:{n:E},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:u},inputEncoding:{value:Ac[Po]},outputEncoding:{value:Ac[Po]}},vertexShader:kE(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${NE()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:Yp,depthTest:!1,depthWrite:!1})}function Uk(){const E=new xn(1,1);return new r_({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:E},inputEncoding:{value:Ac[Po]},outputEncoding:{value:Ac[Po]}},vertexShader:kE(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${NE()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:Yp,depthTest:!1,depthWrite:!1})}function Vk(){return new r_({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:Ac[Po]},outputEncoding:{value:Ac[Po]}},vertexShader:kE(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${NE()}

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:Yp,depthTest:!1,depthWrite:!1})}function kE(){return`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function NE(){return`

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`}function e7(E){let i=new WeakMap,u=null;function g(N){if(N&&N.isTexture&&N.isRenderTargetTexture===!1){const F=N.mapping,D=F===cE||F===hE,O=F===K1||F===Z1;if(D||O){if(i.has(N))return i.get(N).texture;{const z=N.image;if(D&&z&&z.height>0||O&&z&&v(z)){const B=E.getRenderTarget();u===null&&(u=new K8(E));const W=D?u.fromEquirectangular(N):u.fromCubemap(N);return i.set(N,W),E.setRenderTarget(B),N.addEventListener("dispose",b),W.texture}else return null}}}return N}function v(N){let F=0;const D=6;for(let O=0;O<D;O++)N[O]!==void 0&&F++;return F===D}function b(N){const F=N.target;F.removeEventListener("dispose",b);const D=i.get(F);D!==void 0&&(i.delete(F),D.dispose())}function M(){i=new WeakMap,u!==null&&(u.dispose(),u=null)}return{get:g,dispose:M}}function t7(E){const i={};function u(g){if(i[g]!==void 0)return i[g];let v;switch(g){case"WEBGL_depth_texture":v=E.getExtension("WEBGL_depth_texture")||E.getExtension("MOZ_WEBGL_depth_texture")||E.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":v=E.getExtension("EXT_texture_filter_anisotropic")||E.getExtension("MOZ_EXT_texture_filter_anisotropic")||E.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":v=E.getExtension("WEBGL_compressed_texture_s3tc")||E.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||E.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":v=E.getExtension("WEBGL_compressed_texture_pvrtc")||E.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:v=E.getExtension(g)}return i[g]=v,v}return{has:function(g){return u(g)!==null},init:function(g){g.isWebGL2?u("EXT_color_buffer_float"):(u("WEBGL_depth_texture"),u("OES_texture_float"),u("OES_texture_half_float"),u("OES_texture_half_float_linear"),u("OES_standard_derivatives"),u("OES_element_index_uint"),u("OES_vertex_array_object"),u("ANGLE_instanced_arrays")),u("OES_texture_float_linear"),u("EXT_color_buffer_half_float")},get:function(g){const v=u(g);return v===null&&console.warn("THREE.WebGLRenderer: "+g+" extension not supported."),v}}}function n7(E,i,u,g){const v={},b=new WeakMap;function M(z){const B=z.target;B.index!==null&&i.remove(B.index);for(const G in B.attributes)i.remove(B.attributes[G]);B.removeEventListener("dispose",M),delete v[B.id];const W=b.get(B);W&&(i.remove(W),b.delete(B)),g.releaseStatesOfGeometry(B),B.isInstancedBufferGeometry===!0&&delete B._maxInstanceCount,u.memory.geometries--}function N(z,B){return v[B.id]===!0||(B.addEventListener("dispose",M),v[B.id]=!0,u.memory.geometries++),B}function F(z){const B=z.attributes;for(const G in B)i.update(B[G],34962);const W=z.morphAttributes;for(const G in W){const K=W[G];for(let J=0,V=K.length;J<V;J++)i.update(K[J],34962)}}function D(z){const B=[],W=z.index,G=z.attributes.position;let K=0;if(W!==null){const Z=W.array;K=W.version;for(let le=0,fe=Z.length;le<fe;le+=3){const be=Z[le+0],Me=Z[le+1],ce=Z[le+2];B.push(be,Me,Me,ce,ce,be)}}else{const Z=G.array;K=G.version;for(let le=0,fe=Z.length/3-1;le<fe;le+=3){const be=le+0,Me=le+1,ce=le+2;B.push(be,Me,Me,ce,ce,be)}}const J=new(VN(B)>65535?UN:$N)(B,1);J.version=K;const V=b.get(z);V&&i.remove(V),b.set(z,J)}function O(z){const B=b.get(z);if(B){const W=z.index;W!==null&&B.version<W.version&&D(z)}else D(z);return b.get(z)}return{get:N,update:F,getWireframeAttribute:O}}function r7(E,i,u,g){const v=g.isWebGL2;let b;function M(B){b=B}let N,F;function D(B){N=B.type,F=B.bytesPerElement}function O(B,W){E.drawElements(b,W,N,B*F),u.update(W,b,1)}function z(B,W,G){if(G===0)return;let K,J;if(v)K=E,J="drawElementsInstanced";else if(K=i.get("ANGLE_instanced_arrays"),J="drawElementsInstancedANGLE",K===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}K[J](b,W,N,B*F,G),u.update(W,b,G)}this.setMode=M,this.setIndex=D,this.render=O,this.renderInstances=z}function i7(E){const i={geometries:0,textures:0},u={frame:0,calls:0,triangles:0,points:0,lines:0};function g(b,M,N){switch(u.calls++,M){case 4:u.triangles+=N*(b/3);break;case 1:u.lines+=N*(b/2);break;case 3:u.lines+=N*(b-1);break;case 2:u.lines+=N*b;break;case 0:u.points+=N*b;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",M);break}}function v(){u.frame++,u.calls=0,u.triangles=0,u.points=0,u.lines=0}return{memory:i,render:u,programs:null,autoReset:!0,reset:v,update:g}}function s7(E,i){return E[0]-i[0]}function a7(E,i){return Math.abs(i[1])-Math.abs(E[1])}function o7(E){const i={},u=new Float32Array(8),g=[];for(let b=0;b<8;b++)g[b]=[b,0];function v(b,M,N,F){const D=b.morphTargetInfluences,O=D===void 0?0:D.length;let z=i[M.id];if(z===void 0||z.length!==O){z=[];for(let J=0;J<O;J++)z[J]=[J,0];i[M.id]=z}for(let J=0;J<O;J++){const V=z[J];V[0]=J,V[1]=D[J]}z.sort(a7);for(let J=0;J<8;J++)J<O&&z[J][1]?(g[J][0]=z[J][0],g[J][1]=z[J][1]):(g[J][0]=Number.MAX_SAFE_INTEGER,g[J][1]=0);g.sort(s7);const B=M.morphAttributes.position,W=M.morphAttributes.normal;let G=0;for(let J=0;J<8;J++){const V=g[J],Z=V[0],le=V[1];Z!==Number.MAX_SAFE_INTEGER&&le?(B&&M.getAttribute("morphTarget"+J)!==B[Z]&&M.setAttribute("morphTarget"+J,B[Z]),W&&M.getAttribute("morphNormal"+J)!==W[Z]&&M.setAttribute("morphNormal"+J,W[Z]),u[J]=le,G+=le):(B&&M.hasAttribute("morphTarget"+J)===!0&&M.deleteAttribute("morphTarget"+J),W&&M.hasAttribute("morphNormal"+J)===!0&&M.deleteAttribute("morphNormal"+J),u[J]=0)}const K=M.morphTargetsRelative?1:1-G;F.getUniforms().setValue(E,"morphTargetBaseInfluence",K),F.getUniforms().setValue(E,"morphTargetInfluences",u)}return{update:v}}function l7(E,i,u,g){let v=new WeakMap;function b(F){const D=g.render.frame,O=F.geometry,z=i.get(F,O);return v.get(z)!==D&&(i.update(z),v.set(z,D)),F.isInstancedMesh&&(F.hasEventListener("dispose",N)===!1&&F.addEventListener("dispose",N),u.update(F.instanceMatrix,34962),F.instanceColor!==null&&u.update(F.instanceColor,34962)),z}function M(){v=new WeakMap}function N(F){const D=F.target;D.removeEventListener("dispose",N),u.remove(D.instanceMatrix),D.instanceColor!==null&&u.remove(D.instanceColor)}return{update:b,dispose:M}}class qN extends Ta{constructor(i=null,u=1,g=1,v=1){super(null),this.image={data:i,width:u,height:g,depth:v},this.magFilter=la,this.minFilter=la,this.wrapR=fl,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}qN.prototype.isDataTexture2DArray=!0;class XN extends Ta{constructor(i=null,u=1,g=1,v=1){super(null),this.image={data:i,width:u,height:g,depth:v},this.magFilter=la,this.minFilter=la,this.wrapR=fl,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}XN.prototype.isDataTexture3D=!0;const YN=new Ta,u7=new qN,c7=new XN,KN=new t_,Wk=[],Gk=[],Hk=new Float32Array(16),jk=new Float32Array(9),qk=new Float32Array(4);function m0(E,i,u){const g=E[0];if(g<=0||g>0)return E;const v=i*u;let b=Wk[v];if(b===void 0&&(b=new Float32Array(v),Wk[v]=b),i!==0){g.toArray(b,0);for(let M=1,N=0;M!==i;++M)N+=u,E[M].toArray(b,N)}return b}function lo(E,i){if(E.length!==i.length)return!1;for(let u=0,g=E.length;u<g;u++)if(E[u]!==i[u])return!1;return!0}function Ua(E,i){for(let u=0,g=i.length;u<g;u++)E[u]=i[u]}function ZN(E,i){let u=Gk[i];u===void 0&&(u=new Int32Array(i),Gk[i]=u);for(let g=0;g!==i;++g)u[g]=E.allocateTextureUnit();return u}function h7(E,i){const u=this.cache;u[0]!==i&&(E.uniform1f(this.addr,i),u[0]=i)}function d7(E,i){const u=this.cache;if(i.x!==void 0)(u[0]!==i.x||u[1]!==i.y)&&(E.uniform2f(this.addr,i.x,i.y),u[0]=i.x,u[1]=i.y);else{if(lo(u,i))return;E.uniform2fv(this.addr,i),Ua(u,i)}}function p7(E,i){const u=this.cache;if(i.x!==void 0)(u[0]!==i.x||u[1]!==i.y||u[2]!==i.z)&&(E.uniform3f(this.addr,i.x,i.y,i.z),u[0]=i.x,u[1]=i.y,u[2]=i.z);else if(i.r!==void 0)(u[0]!==i.r||u[1]!==i.g||u[2]!==i.b)&&(E.uniform3f(this.addr,i.r,i.g,i.b),u[0]=i.r,u[1]=i.g,u[2]=i.b);else{if(lo(u,i))return;E.uniform3fv(this.addr,i),Ua(u,i)}}function f7(E,i){const u=this.cache;if(i.x!==void 0)(u[0]!==i.x||u[1]!==i.y||u[2]!==i.z||u[3]!==i.w)&&(E.uniform4f(this.addr,i.x,i.y,i.z,i.w),u[0]=i.x,u[1]=i.y,u[2]=i.z,u[3]=i.w);else{if(lo(u,i))return;E.uniform4fv(this.addr,i),Ua(u,i)}}function m7(E,i){const u=this.cache,g=i.elements;if(g===void 0){if(lo(u,i))return;E.uniformMatrix2fv(this.addr,!1,i),Ua(u,i)}else{if(lo(u,g))return;qk.set(g),E.uniformMatrix2fv(this.addr,!1,qk),Ua(u,g)}}function g7(E,i){const u=this.cache,g=i.elements;if(g===void 0){if(lo(u,i))return;E.uniformMatrix3fv(this.addr,!1,i),Ua(u,i)}else{if(lo(u,g))return;jk.set(g),E.uniformMatrix3fv(this.addr,!1,jk),Ua(u,g)}}function y7(E,i){const u=this.cache,g=i.elements;if(g===void 0){if(lo(u,i))return;E.uniformMatrix4fv(this.addr,!1,i),Ua(u,i)}else{if(lo(u,g))return;Hk.set(g),E.uniformMatrix4fv(this.addr,!1,Hk),Ua(u,g)}}function x7(E,i){const u=this.cache;u[0]!==i&&(E.uniform1i(this.addr,i),u[0]=i)}function v7(E,i){const u=this.cache;lo(u,i)||(E.uniform2iv(this.addr,i),Ua(u,i))}function b7(E,i){const u=this.cache;lo(u,i)||(E.uniform3iv(this.addr,i),Ua(u,i))}function w7(E,i){const u=this.cache;lo(u,i)||(E.uniform4iv(this.addr,i),Ua(u,i))}function _7(E,i){const u=this.cache;u[0]!==i&&(E.uniform1ui(this.addr,i),u[0]=i)}function S7(E,i){const u=this.cache;lo(u,i)||(E.uniform2uiv(this.addr,i),Ua(u,i))}function M7(E,i){const u=this.cache;lo(u,i)||(E.uniform3uiv(this.addr,i),Ua(u,i))}function T7(E,i){const u=this.cache;lo(u,i)||(E.uniform4uiv(this.addr,i),Ua(u,i))}function E7(E,i,u){const g=this.cache,v=u.allocateTextureUnit();g[0]!==v&&(E.uniform1i(this.addr,v),g[0]=v),u.safeSetTexture2D(i||YN,v)}function A7(E,i,u){const g=this.cache,v=u.allocateTextureUnit();g[0]!==v&&(E.uniform1i(this.addr,v),g[0]=v),u.setTexture3D(i||c7,v)}function I7(E,i,u){const g=this.cache,v=u.allocateTextureUnit();g[0]!==v&&(E.uniform1i(this.addr,v),g[0]=v),u.safeSetTextureCube(i||KN,v)}function C7(E,i,u){const g=this.cache,v=u.allocateTextureUnit();g[0]!==v&&(E.uniform1i(this.addr,v),g[0]=v),u.setTexture2DArray(i||u7,v)}function k7(E){switch(E){case 5126:return h7;case 35664:return d7;case 35665:return p7;case 35666:return f7;case 35674:return m7;case 35675:return g7;case 35676:return y7;case 5124:case 35670:return x7;case 35667:case 35671:return v7;case 35668:case 35672:return b7;case 35669:case 35673:return w7;case 5125:return _7;case 36294:return S7;case 36295:return M7;case 36296:return T7;case 35678:case 36198:case 36298:case 36306:case 35682:return E7;case 35679:case 36299:case 36307:return A7;case 35680:case 36300:case 36308:case 36293:return I7;case 36289:case 36303:case 36311:case 36292:return C7}}function N7(E,i){E.uniform1fv(this.addr,i)}function R7(E,i){const u=m0(i,this.size,2);E.uniform2fv(this.addr,u)}function L7(E,i){const u=m0(i,this.size,3);E.uniform3fv(this.addr,u)}function D7(E,i){const u=m0(i,this.size,4);E.uniform4fv(this.addr,u)}function P7(E,i){const u=m0(i,this.size,4);E.uniformMatrix2fv(this.addr,!1,u)}function F7(E,i){const u=m0(i,this.size,9);E.uniformMatrix3fv(this.addr,!1,u)}function O7(E,i){const u=m0(i,this.size,16);E.uniformMatrix4fv(this.addr,!1,u)}function z7(E,i){E.uniform1iv(this.addr,i)}function B7(E,i){E.uniform2iv(this.addr,i)}function $7(E,i){E.uniform3iv(this.addr,i)}function U7(E,i){E.uniform4iv(this.addr,i)}function V7(E,i){E.uniform1uiv(this.addr,i)}function W7(E,i){E.uniform2uiv(this.addr,i)}function G7(E,i){E.uniform3uiv(this.addr,i)}function H7(E,i){E.uniform4uiv(this.addr,i)}function j7(E,i,u){const g=i.length,v=ZN(u,g);E.uniform1iv(this.addr,v);for(let b=0;b!==g;++b)u.safeSetTexture2D(i[b]||YN,v[b])}function q7(E,i,u){const g=i.length,v=ZN(u,g);E.uniform1iv(this.addr,v);for(let b=0;b!==g;++b)u.safeSetTextureCube(i[b]||KN,v[b])}function X7(E){switch(E){case 5126:return N7;case 35664:return R7;case 35665:return L7;case 35666:return D7;case 35674:return P7;case 35675:return F7;case 35676:return O7;case 5124:case 35670:return z7;case 35667:case 35671:return B7;case 35668:case 35672:return $7;case 35669:case 35673:return U7;case 5125:return V7;case 36294:return W7;case 36295:return G7;case 36296:return H7;case 35678:case 36198:case 36298:case 36306:case 35682:return j7;case 35680:case 36300:case 36308:case 36293:return q7}}function Y7(E,i,u){this.id=E,this.addr=u,this.cache=[],this.setValue=k7(i.type)}function JN(E,i,u){this.id=E,this.addr=u,this.cache=[],this.size=i.size,this.setValue=X7(i.type)}JN.prototype.updateCache=function(E){const i=this.cache;E instanceof Float32Array&&i.length!==E.length&&(this.cache=new Float32Array(E.length)),Ua(i,E)};function QN(E){this.id=E,this.seq=[],this.map={}}QN.prototype.setValue=function(E,i,u){const g=this.seq;for(let v=0,b=g.length;v!==b;++v){const M=g[v];M.setValue(E,i[M.id],u)}};const eE=/(\w+)(\])?(\[|\.)?/g;function Xk(E,i){E.seq.push(i),E.map[i.id]=i}function K7(E,i,u){const g=E.name,v=g.length;for(eE.lastIndex=0;;){const b=eE.exec(g),M=eE.lastIndex;let N=b[1];const F=b[2]==="]",D=b[3];if(F&&(N=N|0),D===void 0||D==="["&&M+2===v){Xk(u,D===void 0?new Y7(N,E,i):new JN(N,E,i));break}else{let z=u.map[N];z===void 0&&(z=new QN(N),Xk(u,z)),u=z}}}function Jp(E,i){this.seq=[],this.map={};const u=E.getProgramParameter(i,35718);for(let g=0;g<u;++g){const v=E.getActiveUniform(i,g),b=E.getUniformLocation(i,v.name);K7(v,b,this)}}Jp.prototype.setValue=function(E,i,u,g){const v=this.map[i];v!==void 0&&v.setValue(E,u,g)};Jp.prototype.setOptional=function(E,i,u){const g=i[u];g!==void 0&&this.setValue(E,u,g)};Jp.upload=function(E,i,u,g){for(let v=0,b=i.length;v!==b;++v){const M=i[v],N=u[M.id];N.needsUpdate!==!1&&M.setValue(E,N.value,g)}};Jp.seqWithValue=function(E,i){const u=[];for(let g=0,v=E.length;g!==v;++g){const b=E[g];b.id in i&&u.push(b)}return u};function Yk(E,i,u){const g=E.createShader(i);return E.shaderSource(g,u),E.compileShader(g),g}let Z7=0;function J7(E){const i=E.split(`
`);for(let u=0;u<i.length;u++)i[u]=u+1+": "+i[u];return i.join(`
`)}function eR(E){switch(E){case Po:return["Linear","( value )"];case e_:return["sRGB","( value )"];case ME:return["RGBE","( value )"];case PN:return["RGBM","( value, 7.0 )"];case FN:return["RGBM","( value, 16.0 )"];case ON:return["RGBD","( value, 256.0 )"];case SE:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case HH:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",E),["Linear","( value )"]}}function Kk(E,i,u){const g=E.getShaderParameter(i,35713),v=E.getShaderInfoLog(i).trim();return g&&v===""?"":u.toUpperCase()+`

`+v+`

`+J7(E.getShaderSource(i))}function Xy(E,i){const u=eR(i);return"vec4 "+E+"( vec4 value ) { return "+u[0]+"ToLinear"+u[1]+"; }"}function Q7(E,i){const u=eR(i);return"vec4 "+E+"( vec4 value ) { return LinearTo"+u[0]+u[1]+"; }"}function e9(E,i){let u;switch(i){case WG:u="Linear";break;case GG:u="Reinhard";break;case HG:u="OptimizedCineon";break;case jG:u="ACESFilmic";break;case qG:u="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",i),u="Linear"}return"vec3 "+E+"( vec3 color ) { return "+u+"ToneMapping( color ); }"}function t9(E){return[E.extensionDerivatives||E.envMapCubeUV||E.bumpMap||E.tangentSpaceNormalMap||E.clearcoatNormalMap||E.flatShading||E.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(E.extensionFragDepth||E.logarithmicDepthBuffer)&&E.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",E.extensionDrawBuffers&&E.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(E.extensionShaderTextureLOD||E.envMap||E.transmission)&&E.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(mv).join(`
`)}function n9(E){const i=[];for(const u in E){const g=E[u];g!==!1&&i.push("#define "+u+" "+g)}return i.join(`
`)}function r9(E,i){const u={},g=E.getProgramParameter(i,35721);for(let v=0;v<g;v++){const b=E.getActiveAttrib(i,v),M=b.name;let N=1;b.type===35674&&(N=2),b.type===35675&&(N=3),b.type===35676&&(N=4),u[M]={type:b.type,location:E.getAttribLocation(i,M),locationSize:N}}return u}function mv(E){return E!==""}function Zk(E,i){return E.replace(/NUM_DIR_LIGHTS/g,i.numDirLights).replace(/NUM_SPOT_LIGHTS/g,i.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,i.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,i.numPointLights).replace(/NUM_HEMI_LIGHTS/g,i.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,i.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,i.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,i.numPointLightShadows)}function Jk(E,i){return E.replace(/NUM_CLIPPING_PLANES/g,i.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,i.numClippingPlanes-i.numClipIntersection)}const i9=/^[ \t]*#include +<([\w\d./]+)>/gm;function mE(E){return E.replace(i9,s9)}function s9(E,i){const u=$r[i];if(u===void 0)throw new Error("Can not resolve #include <"+i+">");return mE(u)}const a9=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,o9=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Qk(E){return E.replace(o9,tR).replace(a9,l9)}function l9(E,i,u,g){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),tR(E,i,u,g)}function tR(E,i,u,g){let v="";for(let b=parseInt(i);b<parseInt(u);b++)v+=g.replace(/\[\s*i\s*\]/g,"[ "+b+" ]").replace(/UNROLLED_LOOP_INDEX/g,b);return v}function eN(E){let i="precision "+E.precision+` float;
precision `+E.precision+" int;";return E.precision==="highp"?i+=`
#define HIGH_PRECISION`:E.precision==="mediump"?i+=`
#define MEDIUM_PRECISION`:E.precision==="lowp"&&(i+=`
#define LOW_PRECISION`),i}function u9(E){let i="SHADOWMAP_TYPE_BASIC";return E.shadowMapType===CN?i="SHADOWMAP_TYPE_PCF":E.shadowMapType===wG?i="SHADOWMAP_TYPE_PCF_SOFT":E.shadowMapType===fv&&(i="SHADOWMAP_TYPE_VSM"),i}function c9(E){let i="ENVMAP_TYPE_CUBE";if(E.envMap)switch(E.envMapMode){case K1:case Z1:i="ENVMAP_TYPE_CUBE";break;case J1:case wE:i="ENVMAP_TYPE_CUBE_UV";break}return i}function h9(E){let i="ENVMAP_MODE_REFLECTION";if(E.envMap)switch(E.envMapMode){case Z1:case wE:i="ENVMAP_MODE_REFRACTION";break}return i}function d9(E){let i="ENVMAP_BLENDING_NONE";if(E.envMap)switch(E.combine){case Y1:i="ENVMAP_BLENDING_MULTIPLY";break;case UG:i="ENVMAP_BLENDING_MIX";break;case VG:i="ENVMAP_BLENDING_ADD";break}return i}function p9(E,i,u,g){const v=E.getContext(),b=u.defines;let M=u.vertexShader,N=u.fragmentShader;const F=u9(u),D=c9(u),O=h9(u),z=d9(u),B=E.gammaFactor>0?E.gammaFactor:1,W=u.isWebGL2?"":t9(u),G=n9(b),K=v.createProgram();let J,V,Z=u.glslVersion?"#version "+u.glslVersion+`
`:"";u.isRawShaderMaterial?(J=[G].filter(mv).join(`
`),J.length>0&&(J+=`
`),V=[W,G].filter(mv).join(`
`),V.length>0&&(V+=`
`)):(J=[eN(u),"#define SHADER_NAME "+u.shaderName,G,u.instancing?"#define USE_INSTANCING":"",u.instancingColor?"#define USE_INSTANCING_COLOR":"",u.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+B,"#define MAX_BONES "+u.maxBones,u.useFog&&u.fog?"#define USE_FOG":"",u.useFog&&u.fogExp2?"#define FOG_EXP2":"",u.map?"#define USE_MAP":"",u.envMap?"#define USE_ENVMAP":"",u.envMap?"#define "+O:"",u.lightMap?"#define USE_LIGHTMAP":"",u.aoMap?"#define USE_AOMAP":"",u.emissiveMap?"#define USE_EMISSIVEMAP":"",u.bumpMap?"#define USE_BUMPMAP":"",u.normalMap?"#define USE_NORMALMAP":"",u.normalMap&&u.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",u.normalMap&&u.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",u.clearcoatMap?"#define USE_CLEARCOATMAP":"",u.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",u.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",u.displacementMap&&u.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",u.specularMap?"#define USE_SPECULARMAP":"",u.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",u.specularTintMap?"#define USE_SPECULARTINTMAP":"",u.roughnessMap?"#define USE_ROUGHNESSMAP":"",u.metalnessMap?"#define USE_METALNESSMAP":"",u.alphaMap?"#define USE_ALPHAMAP":"",u.transmission?"#define USE_TRANSMISSION":"",u.transmissionMap?"#define USE_TRANSMISSIONMAP":"",u.thicknessMap?"#define USE_THICKNESSMAP":"",u.vertexTangents?"#define USE_TANGENT":"",u.vertexColors?"#define USE_COLOR":"",u.vertexAlphas?"#define USE_COLOR_ALPHA":"",u.vertexUvs?"#define USE_UV":"",u.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",u.flatShading?"#define FLAT_SHADED":"",u.skinning?"#define USE_SKINNING":"",u.useVertexTexture?"#define BONE_TEXTURE":"",u.morphTargets?"#define USE_MORPHTARGETS":"",u.morphNormals&&u.flatShading===!1?"#define USE_MORPHNORMALS":"",u.doubleSided?"#define DOUBLE_SIDED":"",u.flipSided?"#define FLIP_SIDED":"",u.shadowMapEnabled?"#define USE_SHADOWMAP":"",u.shadowMapEnabled?"#define "+F:"",u.sizeAttenuation?"#define USE_SIZEATTENUATION":"",u.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",u.logarithmicDepthBuffer&&u.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(mv).join(`
`),V=[W,eN(u),"#define SHADER_NAME "+u.shaderName,G,"#define GAMMA_FACTOR "+B,u.useFog&&u.fog?"#define USE_FOG":"",u.useFog&&u.fogExp2?"#define FOG_EXP2":"",u.map?"#define USE_MAP":"",u.matcap?"#define USE_MATCAP":"",u.envMap?"#define USE_ENVMAP":"",u.envMap?"#define "+D:"",u.envMap?"#define "+O:"",u.envMap?"#define "+z:"",u.lightMap?"#define USE_LIGHTMAP":"",u.aoMap?"#define USE_AOMAP":"",u.emissiveMap?"#define USE_EMISSIVEMAP":"",u.bumpMap?"#define USE_BUMPMAP":"",u.normalMap?"#define USE_NORMALMAP":"",u.normalMap&&u.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",u.normalMap&&u.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",u.clearcoat?"#define USE_CLEARCOAT":"",u.clearcoatMap?"#define USE_CLEARCOATMAP":"",u.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",u.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",u.specularMap?"#define USE_SPECULARMAP":"",u.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",u.specularTintMap?"#define USE_SPECULARTINTMAP":"",u.roughnessMap?"#define USE_ROUGHNESSMAP":"",u.metalnessMap?"#define USE_METALNESSMAP":"",u.alphaMap?"#define USE_ALPHAMAP":"",u.alphaTest?"#define USE_ALPHATEST":"",u.sheenTint?"#define USE_SHEEN":"",u.transmission?"#define USE_TRANSMISSION":"",u.transmissionMap?"#define USE_TRANSMISSIONMAP":"",u.thicknessMap?"#define USE_THICKNESSMAP":"",u.vertexTangents?"#define USE_TANGENT":"",u.vertexColors||u.instancingColor?"#define USE_COLOR":"",u.vertexAlphas?"#define USE_COLOR_ALPHA":"",u.vertexUvs?"#define USE_UV":"",u.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",u.gradientMap?"#define USE_GRADIENTMAP":"",u.flatShading?"#define FLAT_SHADED":"",u.doubleSided?"#define DOUBLE_SIDED":"",u.flipSided?"#define FLIP_SIDED":"",u.shadowMapEnabled?"#define USE_SHADOWMAP":"",u.shadowMapEnabled?"#define "+F:"",u.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",u.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",u.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",u.logarithmicDepthBuffer&&u.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(u.extensionShaderTextureLOD||u.envMap)&&u.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",u.toneMapping!==Vm?"#define TONE_MAPPING":"",u.toneMapping!==Vm?$r.tonemapping_pars_fragment:"",u.toneMapping!==Vm?e9("toneMapping",u.toneMapping):"",u.dithering?"#define DITHERING":"",u.format===Kp?"#define OPAQUE":"",$r.encodings_pars_fragment,u.map?Xy("mapTexelToLinear",u.mapEncoding):"",u.matcap?Xy("matcapTexelToLinear",u.matcapEncoding):"",u.envMap?Xy("envMapTexelToLinear",u.envMapEncoding):"",u.emissiveMap?Xy("emissiveMapTexelToLinear",u.emissiveMapEncoding):"",u.specularTintMap?Xy("specularTintMapTexelToLinear",u.specularTintMapEncoding):"",u.lightMap?Xy("lightMapTexelToLinear",u.lightMapEncoding):"",Q7("linearToOutputTexel",u.outputEncoding),u.depthPacking?"#define DEPTH_PACKING "+u.depthPacking:"",`
`].filter(mv).join(`
`)),M=mE(M),M=Zk(M,u),M=Jk(M,u),N=mE(N),N=Zk(N,u),N=Jk(N,u),M=Qk(M),N=Qk(N),u.isWebGL2&&u.isRawShaderMaterial!==!0&&(Z=`#version 300 es
`,J=["#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+J,V=["#define varying in",u.glslVersion===Mk?"":"out highp vec4 pc_fragColor;",u.glslVersion===Mk?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+V);const le=Z+J+M,fe=Z+V+N,be=Yk(v,35633,le),Me=Yk(v,35632,fe);if(v.attachShader(K,be),v.attachShader(K,Me),u.index0AttributeName!==void 0?v.bindAttribLocation(K,0,u.index0AttributeName):u.morphTargets===!0&&v.bindAttribLocation(K,0,"position"),v.linkProgram(K),E.debug.checkShaderErrors){const Ke=v.getProgramInfoLog(K).trim(),Ye=v.getShaderInfoLog(be).trim(),xe=v.getShaderInfoLog(Me).trim();let ue=!0,Se=!0;if(v.getProgramParameter(K,35714)===!1){ue=!1;const je=Kk(v,be,"vertex"),rt=Kk(v,Me,"fragment");console.error("THREE.WebGLProgram: Shader Error "+v.getError()+" - VALIDATE_STATUS "+v.getProgramParameter(K,35715)+`

Program Info Log: `+Ke+`
`+je+`
`+rt)}else Ke!==""?console.warn("THREE.WebGLProgram: Program Info Log:",Ke):(Ye===""||xe==="")&&(Se=!1);Se&&(this.diagnostics={runnable:ue,programLog:Ke,vertexShader:{log:Ye,prefix:J},fragmentShader:{log:xe,prefix:V}})}v.deleteShader(be),v.deleteShader(Me);let ce;this.getUniforms=function(){return ce===void 0&&(ce=new Jp(v,K)),ce};let We;return this.getAttributes=function(){return We===void 0&&(We=r9(v,K)),We},this.destroy=function(){g.releaseStatesOfProgram(this),v.deleteProgram(K),this.program=void 0},this.name=u.shaderName,this.id=Z7++,this.cacheKey=i,this.usedTimes=1,this.program=K,this.vertexShader=be,this.fragmentShader=Me,this}function f9(E,i,u,g,v,b,M){const N=[],F=v.isWebGL2,D=v.logarithmicDepthBuffer,O=v.floatVertexTextures,z=v.maxVertexUniforms,B=v.vertexTextures;let W=v.precision;const G={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},K=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoat","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","specularIntensityMap","specularTintMap","specularTintMapEncoding","roughnessMap","metalnessMap","gradientMap","alphaMap","alphaTest","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","format","sheenTint","transmission","transmissionMap","thicknessMap"];function J(ce){const Ke=ce.skeleton.bones;if(O)return 1024;{const xe=Math.floor((z-20)/4),ue=Math.min(xe,Ke.length);return ue<Ke.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+Ke.length+" bones. This GPU supports "+ue+"."),0):ue}}function V(ce){let We;return ce&&ce.isTexture?We=ce.encoding:ce&&ce.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),We=ce.texture.encoding):We=Po,We}function Z(ce,We,Ke,Ye,xe){const ue=Ye.fog,Se=ce.isMeshStandardMaterial?Ye.environment:null,je=(ce.isMeshStandardMaterial?u:i).get(ce.envMap||Se),rt=G[ce.type],et=xe.isSkinnedMesh?J(xe):0;ce.precision!==null&&(W=v.getMaxPrecision(ce.precision),W!==ce.precision&&console.warn("THREE.WebGLProgram.getParameters:",ce.precision,"not supported, using",W,"instead."));let ot,Et;if(rt){const Bt=Ec[rt];ot=Bt.vertexShader,Et=Bt.fragmentShader}else ot=ce.vertexShader,Et=ce.fragmentShader;const tn=E.getRenderTarget(),ln=ce.alphaTest>0,Vt=ce.clearcoat>0;return{isWebGL2:F,shaderID:rt,shaderName:ce.type,vertexShader:ot,fragmentShader:Et,defines:ce.defines,isRawShaderMaterial:ce.isRawShaderMaterial===!0,glslVersion:ce.glslVersion,precision:W,instancing:xe.isInstancedMesh===!0,instancingColor:xe.isInstancedMesh===!0&&xe.instanceColor!==null,supportsVertexTextures:B,outputEncoding:tn!==null?V(tn.texture):E.outputEncoding,map:!!ce.map,mapEncoding:V(ce.map),matcap:!!ce.matcap,matcapEncoding:V(ce.matcap),envMap:!!je,envMapMode:je&&je.mapping,envMapEncoding:V(je),envMapCubeUV:!!je&&(je.mapping===J1||je.mapping===wE),lightMap:!!ce.lightMap,lightMapEncoding:V(ce.lightMap),aoMap:!!ce.aoMap,emissiveMap:!!ce.emissiveMap,emissiveMapEncoding:V(ce.emissiveMap),bumpMap:!!ce.bumpMap,normalMap:!!ce.normalMap,objectSpaceNormalMap:ce.normalMapType===XH,tangentSpaceNormalMap:ce.normalMapType===c0,clearcoat:Vt,clearcoatMap:Vt&&!!ce.clearcoatMap,clearcoatRoughnessMap:Vt&&!!ce.clearcoatRoughnessMap,clearcoatNormalMap:Vt&&!!ce.clearcoatNormalMap,displacementMap:!!ce.displacementMap,roughnessMap:!!ce.roughnessMap,metalnessMap:!!ce.metalnessMap,specularMap:!!ce.specularMap,specularIntensityMap:!!ce.specularIntensityMap,specularTintMap:!!ce.specularTintMap,specularTintMapEncoding:V(ce.specularTintMap),alphaMap:!!ce.alphaMap,alphaTest:ln,gradientMap:!!ce.gradientMap,sheenTint:!!ce.sheenTint&&(ce.sheenTint.r>0||ce.sheenTint.g>0||ce.sheenTint.b>0),transmission:ce.transmission>0,transmissionMap:!!ce.transmissionMap,thicknessMap:!!ce.thicknessMap,combine:ce.combine,vertexTangents:!!ce.normalMap&&!!xe.geometry&&!!xe.geometry.attributes.tangent,vertexColors:ce.vertexColors,vertexAlphas:ce.vertexColors===!0&&!!xe.geometry&&!!xe.geometry.attributes.color&&xe.geometry.attributes.color.itemSize===4,vertexUvs:!!ce.map||!!ce.bumpMap||!!ce.normalMap||!!ce.specularMap||!!ce.alphaMap||!!ce.emissiveMap||!!ce.roughnessMap||!!ce.metalnessMap||!!ce.clearcoatMap||!!ce.clearcoatRoughnessMap||!!ce.clearcoatNormalMap||!!ce.displacementMap||!!ce.transmissionMap||!!ce.thicknessMap||!!ce.specularIntensityMap||!!ce.specularTintMap,uvsVertexOnly:!(!!ce.map||!!ce.bumpMap||!!ce.normalMap||!!ce.specularMap||!!ce.alphaMap||!!ce.emissiveMap||!!ce.roughnessMap||!!ce.metalnessMap||!!ce.clearcoatNormalMap||ce.transmission>0||!!ce.transmissionMap||!!ce.thicknessMap||!!ce.specularIntensityMap||!!ce.specularTintMap)&&!!ce.displacementMap,fog:!!ue,useFog:ce.fog,fogExp2:ue&&ue.isFogExp2,flatShading:!!ce.flatShading,sizeAttenuation:ce.sizeAttenuation,logarithmicDepthBuffer:D,skinning:xe.isSkinnedMesh===!0&&et>0,maxBones:et,useVertexTexture:O,morphTargets:!!xe.geometry&&!!xe.geometry.morphAttributes.position,morphNormals:!!xe.geometry&&!!xe.geometry.morphAttributes.normal,numDirLights:We.directional.length,numPointLights:We.point.length,numSpotLights:We.spot.length,numRectAreaLights:We.rectArea.length,numHemiLights:We.hemi.length,numDirLightShadows:We.directionalShadowMap.length,numPointLightShadows:We.pointShadowMap.length,numSpotLightShadows:We.spotShadowMap.length,numClippingPlanes:M.numPlanes,numClipIntersection:M.numIntersection,format:ce.format,dithering:ce.dithering,shadowMapEnabled:E.shadowMap.enabled&&Ke.length>0,shadowMapType:E.shadowMap.type,toneMapping:ce.toneMapped?E.toneMapping:Vm,physicallyCorrectLights:E.physicallyCorrectLights,premultipliedAlpha:ce.premultipliedAlpha,doubleSided:ce.side===a0,flipSided:ce.side===zs,depthPacking:ce.depthPacking!==void 0?ce.depthPacking:!1,index0AttributeName:ce.index0AttributeName,extensionDerivatives:ce.extensions&&ce.extensions.derivatives,extensionFragDepth:ce.extensions&&ce.extensions.fragDepth,extensionDrawBuffers:ce.extensions&&ce.extensions.drawBuffers,extensionShaderTextureLOD:ce.extensions&&ce.extensions.shaderTextureLOD,rendererExtensionFragDepth:F||g.has("EXT_frag_depth"),rendererExtensionDrawBuffers:F||g.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:F||g.has("EXT_shader_texture_lod"),customProgramCacheKey:ce.customProgramCacheKey()}}function le(ce){const We=[];if(ce.shaderID?We.push(ce.shaderID):(We.push(ce.fragmentShader),We.push(ce.vertexShader)),ce.defines!==void 0)for(const Ke in ce.defines)We.push(Ke),We.push(ce.defines[Ke]);if(ce.isRawShaderMaterial===!1){for(let Ke=0;Ke<K.length;Ke++)We.push(ce[K[Ke]]);We.push(E.outputEncoding),We.push(E.gammaFactor)}return We.push(ce.customProgramCacheKey),We.join()}function fe(ce){const We=G[ce.type];let Ke;if(We){const Ye=Ec[We];Ke=d5.clone(Ye.uniforms)}else Ke=ce.uniforms;return Ke}function be(ce,We){let Ke;for(let Ye=0,xe=N.length;Ye<xe;Ye++){const ue=N[Ye];if(ue.cacheKey===We){Ke=ue,++Ke.usedTimes;break}}return Ke===void 0&&(Ke=new p9(E,We,ce,b),N.push(Ke)),Ke}function Me(ce){if(--ce.usedTimes===0){const We=N.indexOf(ce);N[We]=N[N.length-1],N.pop(),ce.destroy()}}return{getParameters:Z,getProgramCacheKey:le,getUniforms:fe,acquireProgram:be,releaseProgram:Me,programs:N}}function m9(){let E=new WeakMap;function i(b){let M=E.get(b);return M===void 0&&(M={},E.set(b,M)),M}function u(b){E.delete(b)}function g(b,M,N){E.get(b)[M]=N}function v(){E=new WeakMap}return{get:i,remove:u,update:g,dispose:v}}function g9(E,i){return E.groupOrder!==i.groupOrder?E.groupOrder-i.groupOrder:E.renderOrder!==i.renderOrder?E.renderOrder-i.renderOrder:E.program!==i.program?E.program.id-i.program.id:E.material.id!==i.material.id?E.material.id-i.material.id:E.z!==i.z?E.z-i.z:E.id-i.id}function tN(E,i){return E.groupOrder!==i.groupOrder?E.groupOrder-i.groupOrder:E.renderOrder!==i.renderOrder?E.renderOrder-i.renderOrder:E.z!==i.z?i.z-E.z:E.id-i.id}function nN(E){const i=[];let u=0;const g=[],v=[],b=[],M={id:-1};function N(){u=0,g.length=0,v.length=0,b.length=0}function F(W,G,K,J,V,Z){let le=i[u];const fe=E.get(K);return le===void 0?(le={id:W.id,object:W,geometry:G,material:K,program:fe.program||M,groupOrder:J,renderOrder:W.renderOrder,z:V,group:Z},i[u]=le):(le.id=W.id,le.object=W,le.geometry=G,le.material=K,le.program=fe.program||M,le.groupOrder=J,le.renderOrder=W.renderOrder,le.z=V,le.group=Z),u++,le}function D(W,G,K,J,V,Z){const le=F(W,G,K,J,V,Z);K.transmission>0?v.push(le):K.transparent===!0?b.push(le):g.push(le)}function O(W,G,K,J,V,Z){const le=F(W,G,K,J,V,Z);K.transmission>0?v.unshift(le):K.transparent===!0?b.unshift(le):g.unshift(le)}function z(W,G){g.length>1&&g.sort(W||g9),v.length>1&&v.sort(G||tN),b.length>1&&b.sort(G||tN)}function B(){for(let W=u,G=i.length;W<G;W++){const K=i[W];if(K.id===null)break;K.id=null,K.object=null,K.geometry=null,K.material=null,K.program=null,K.group=null}}return{opaque:g,transmissive:v,transparent:b,init:N,push:D,unshift:O,finish:B,sort:z}}function y9(E){let i=new WeakMap;function u(v,b){let M;return i.has(v)===!1?(M=new nN(E),i.set(v,[M])):b>=i.get(v).length?(M=new nN(E),i.get(v).push(M)):M=i.get(v)[b],M}function g(){i=new WeakMap}return{get:u,dispose:g}}function x9(){const E={};return{get:function(i){if(E[i.id]!==void 0)return E[i.id];let u;switch(i.type){case"DirectionalLight":u={direction:new He,color:new rr};break;case"SpotLight":u={position:new He,direction:new He,color:new rr,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":u={position:new He,color:new rr,distance:0,decay:0};break;case"HemisphereLight":u={direction:new He,skyColor:new rr,groundColor:new rr};break;case"RectAreaLight":u={color:new rr,position:new He,halfWidth:new He,halfHeight:new He};break}return E[i.id]=u,u}}}function v9(){const E={};return{get:function(i){if(E[i.id]!==void 0)return E[i.id];let u;switch(i.type){case"DirectionalLight":u={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new xn};break;case"SpotLight":u={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new xn};break;case"PointLight":u={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new xn,shadowCameraNear:1,shadowCameraFar:1e3};break}return E[i.id]=u,u}}}let b9=0;function w9(E,i){return(i.castShadow?1:0)-(E.castShadow?1:0)}function _9(E,i){const u=new x9,g=v9(),v={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let O=0;O<9;O++)v.probe.push(new He);const b=new He,M=new cr,N=new cr;function F(O,z){let B=0,W=0,G=0;for(let Ke=0;Ke<9;Ke++)v.probe[Ke].set(0,0,0);let K=0,J=0,V=0,Z=0,le=0,fe=0,be=0,Me=0;O.sort(w9);const ce=z!==!0?Math.PI:1;for(let Ke=0,Ye=O.length;Ke<Ye;Ke++){const xe=O[Ke],ue=xe.color,Se=xe.intensity,je=xe.distance,rt=xe.shadow&&xe.shadow.map?xe.shadow.map.texture:null;if(xe.isAmbientLight)B+=ue.r*Se*ce,W+=ue.g*Se*ce,G+=ue.b*Se*ce;else if(xe.isLightProbe)for(let et=0;et<9;et++)v.probe[et].addScaledVector(xe.sh.coefficients[et],Se);else if(xe.isDirectionalLight){const et=u.get(xe);if(et.color.copy(xe.color).multiplyScalar(xe.intensity*ce),xe.castShadow){const ot=xe.shadow,Et=g.get(xe);Et.shadowBias=ot.bias,Et.shadowNormalBias=ot.normalBias,Et.shadowRadius=ot.radius,Et.shadowMapSize=ot.mapSize,v.directionalShadow[K]=Et,v.directionalShadowMap[K]=rt,v.directionalShadowMatrix[K]=xe.shadow.matrix,fe++}v.directional[K]=et,K++}else if(xe.isSpotLight){const et=u.get(xe);if(et.position.setFromMatrixPosition(xe.matrixWorld),et.color.copy(ue).multiplyScalar(Se*ce),et.distance=je,et.coneCos=Math.cos(xe.angle),et.penumbraCos=Math.cos(xe.angle*(1-xe.penumbra)),et.decay=xe.decay,xe.castShadow){const ot=xe.shadow,Et=g.get(xe);Et.shadowBias=ot.bias,Et.shadowNormalBias=ot.normalBias,Et.shadowRadius=ot.radius,Et.shadowMapSize=ot.mapSize,v.spotShadow[V]=Et,v.spotShadowMap[V]=rt,v.spotShadowMatrix[V]=xe.shadow.matrix,Me++}v.spot[V]=et,V++}else if(xe.isRectAreaLight){const et=u.get(xe);et.color.copy(ue).multiplyScalar(Se),et.halfWidth.set(xe.width*.5,0,0),et.halfHeight.set(0,xe.height*.5,0),v.rectArea[Z]=et,Z++}else if(xe.isPointLight){const et=u.get(xe);if(et.color.copy(xe.color).multiplyScalar(xe.intensity*ce),et.distance=xe.distance,et.decay=xe.decay,xe.castShadow){const ot=xe.shadow,Et=g.get(xe);Et.shadowBias=ot.bias,Et.shadowNormalBias=ot.normalBias,Et.shadowRadius=ot.radius,Et.shadowMapSize=ot.mapSize,Et.shadowCameraNear=ot.camera.near,Et.shadowCameraFar=ot.camera.far,v.pointShadow[J]=Et,v.pointShadowMap[J]=rt,v.pointShadowMatrix[J]=xe.shadow.matrix,be++}v.point[J]=et,J++}else if(xe.isHemisphereLight){const et=u.get(xe);et.skyColor.copy(xe.color).multiplyScalar(Se*ce),et.groundColor.copy(xe.groundColor).multiplyScalar(Se*ce),v.hemi[le]=et,le++}}Z>0&&(i.isWebGL2||E.has("OES_texture_float_linear")===!0?(v.rectAreaLTC1=An.LTC_FLOAT_1,v.rectAreaLTC2=An.LTC_FLOAT_2):E.has("OES_texture_half_float_linear")===!0?(v.rectAreaLTC1=An.LTC_HALF_1,v.rectAreaLTC2=An.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),v.ambient[0]=B,v.ambient[1]=W,v.ambient[2]=G;const We=v.hash;(We.directionalLength!==K||We.pointLength!==J||We.spotLength!==V||We.rectAreaLength!==Z||We.hemiLength!==le||We.numDirectionalShadows!==fe||We.numPointShadows!==be||We.numSpotShadows!==Me)&&(v.directional.length=K,v.spot.length=V,v.rectArea.length=Z,v.point.length=J,v.hemi.length=le,v.directionalShadow.length=fe,v.directionalShadowMap.length=fe,v.pointShadow.length=be,v.pointShadowMap.length=be,v.spotShadow.length=Me,v.spotShadowMap.length=Me,v.directionalShadowMatrix.length=fe,v.pointShadowMatrix.length=be,v.spotShadowMatrix.length=Me,We.directionalLength=K,We.pointLength=J,We.spotLength=V,We.rectAreaLength=Z,We.hemiLength=le,We.numDirectionalShadows=fe,We.numPointShadows=be,We.numSpotShadows=Me,v.version=b9++)}function D(O,z){let B=0,W=0,G=0,K=0,J=0;const V=z.matrixWorldInverse;for(let Z=0,le=O.length;Z<le;Z++){const fe=O[Z];if(fe.isDirectionalLight){const be=v.directional[B];be.direction.setFromMatrixPosition(fe.matrixWorld),b.setFromMatrixPosition(fe.target.matrixWorld),be.direction.sub(b),be.direction.transformDirection(V),B++}else if(fe.isSpotLight){const be=v.spot[G];be.position.setFromMatrixPosition(fe.matrixWorld),be.position.applyMatrix4(V),be.direction.setFromMatrixPosition(fe.matrixWorld),b.setFromMatrixPosition(fe.target.matrixWorld),be.direction.sub(b),be.direction.transformDirection(V),G++}else if(fe.isRectAreaLight){const be=v.rectArea[K];be.position.setFromMatrixPosition(fe.matrixWorld),be.position.applyMatrix4(V),N.identity(),M.copy(fe.matrixWorld),M.premultiply(V),N.extractRotation(M),be.halfWidth.set(fe.width*.5,0,0),be.halfHeight.set(0,fe.height*.5,0),be.halfWidth.applyMatrix4(N),be.halfHeight.applyMatrix4(N),K++}else if(fe.isPointLight){const be=v.point[W];be.position.setFromMatrixPosition(fe.matrixWorld),be.position.applyMatrix4(V),W++}else if(fe.isHemisphereLight){const be=v.hemi[J];be.direction.setFromMatrixPosition(fe.matrixWorld),be.direction.transformDirection(V),be.direction.normalize(),J++}}}return{setup:F,setupView:D,state:v}}function rN(E,i){const u=new _9(E,i),g=[],v=[];function b(){g.length=0,v.length=0}function M(z){g.push(z)}function N(z){v.push(z)}function F(z){u.setup(g,z)}function D(z){u.setupView(g,z)}return{init:b,state:{lightsArray:g,shadowsArray:v,lights:u},setupLights:F,setupLightsView:D,pushLight:M,pushShadow:N}}function S9(E,i){let u=new WeakMap;function g(b,M=0){let N;return u.has(b)===!1?(N=new rN(E,i),u.set(b,[N])):M>=u.get(b).length?(N=new rN(E,i),u.get(b).push(N)):N=u.get(b)[M],N}function v(){u=new WeakMap}return{get:g,dispose:v}}class nR extends Va{constructor(i){super(),this.type="MeshDepthMaterial",this.depthPacking=jH,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(i)}copy(i){return super.copy(i),this.depthPacking=i.depthPacking,this.map=i.map,this.alphaMap=i.alphaMap,this.displacementMap=i.displacementMap,this.displacementScale=i.displacementScale,this.displacementBias=i.displacementBias,this.wireframe=i.wireframe,this.wireframeLinewidth=i.wireframeLinewidth,this}}nR.prototype.isMeshDepthMaterial=!0;class rR extends Va{constructor(i){super(),this.type="MeshDistanceMaterial",this.referencePosition=new He,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(i)}copy(i){return super.copy(i),this.referencePosition.copy(i.referencePosition),this.nearDistance=i.nearDistance,this.farDistance=i.farDistance,this.map=i.map,this.alphaMap=i.alphaMap,this.displacementMap=i.displacementMap,this.displacementScale=i.displacementScale,this.displacementBias=i.displacementBias,this}}rR.prototype.isMeshDistanceMaterial=!0;var M9=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
uniform float samples;
#include <packing>
void main() {
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`,T9=`void main() {
	gl_Position = vec4( position, 1.0 );
}`;function iR(E,i,u){let g=new n_;const v=new xn,b=new xn,M=new Si,N=new nR({depthPacking:qH}),F=new rR,D={},O=u.maxTextureSize,z={0:zs,1:wv,2:a0},B=new Wm({uniforms:{shadow_pass:{value:null},resolution:{value:new xn},radius:{value:4},samples:{value:8}},vertexShader:T9,fragmentShader:M9}),W=B.clone();W.defines.HORIZONTAL_PASS=1;const G=new $i;G.setAttribute("position",new Bs(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const K=new Do(G,B),J=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=CN,this.render=function(fe,be,Me){if(J.enabled===!1||J.autoUpdate===!1&&J.needsUpdate===!1||fe.length===0)return;const ce=E.getRenderTarget(),We=E.getActiveCubeFace(),Ke=E.getActiveMipmapLevel(),Ye=E.state;Ye.setBlending(Yp),Ye.buffers.color.setClear(1,1,1,1),Ye.buffers.depth.setTest(!0),Ye.setScissorTest(!1);for(let xe=0,ue=fe.length;xe<ue;xe++){const Se=fe[xe],je=Se.shadow;if(je===void 0){console.warn("THREE.WebGLShadowMap:",Se,"has no shadow.");continue}if(je.autoUpdate===!1&&je.needsUpdate===!1)continue;v.copy(je.mapSize);const rt=je.getFrameExtents();if(v.multiply(rt),b.copy(je.mapSize),(v.x>O||v.y>O)&&(v.x>O&&(b.x=Math.floor(O/rt.x),v.x=b.x*rt.x,je.mapSize.x=b.x),v.y>O&&(b.y=Math.floor(O/rt.y),v.y=b.y*rt.y,je.mapSize.y=b.y)),je.map===null&&!je.isPointLightShadow&&this.type===fv){const ot={minFilter:zl,magFilter:zl,format:ml};je.map=new Cc(v.x,v.y,ot),je.map.texture.name=Se.name+".shadowMap",je.mapPass=new Cc(v.x,v.y,ot),je.camera.updateProjectionMatrix()}if(je.map===null){const ot={minFilter:la,magFilter:la,format:ml};je.map=new Cc(v.x,v.y,ot),je.map.texture.name=Se.name+".shadowMap",je.camera.updateProjectionMatrix()}E.setRenderTarget(je.map),E.clear();const et=je.getViewportCount();for(let ot=0;ot<et;ot++){const Et=je.getViewport(ot);M.set(b.x*Et.x,b.y*Et.y,b.x*Et.z,b.y*Et.w),Ye.viewport(M),je.updateMatrices(Se,ot),g=je.getFrustum(),le(be,Me,je.camera,Se,this.type)}!je.isPointLightShadow&&this.type===fv&&V(je,Me),je.needsUpdate=!1}J.needsUpdate=!1,E.setRenderTarget(ce,We,Ke)};function V(fe,be){const Me=i.update(K);B.uniforms.shadow_pass.value=fe.map.texture,B.uniforms.resolution.value=fe.mapSize,B.uniforms.radius.value=fe.radius,B.uniforms.samples.value=fe.blurSamples,E.setRenderTarget(fe.mapPass),E.clear(),E.renderBufferDirect(be,null,Me,B,K,null),W.uniforms.shadow_pass.value=fe.mapPass.texture,W.uniforms.resolution.value=fe.mapSize,W.uniforms.radius.value=fe.radius,W.uniforms.samples.value=fe.blurSamples,E.setRenderTarget(fe.map),E.clear(),E.renderBufferDirect(be,null,Me,W,K,null)}function Z(fe,be,Me,ce,We,Ke,Ye){let xe=null;const ue=ce.isPointLight===!0?fe.customDistanceMaterial:fe.customDepthMaterial;if(ue!==void 0?xe=ue:xe=ce.isPointLight===!0?F:N,E.localClippingEnabled&&Me.clipShadows===!0&&Me.clippingPlanes.length!==0||Me.displacementMap&&Me.displacementScale!==0||Me.alphaMap&&Me.alphaTest>0){const Se=xe.uuid,je=Me.uuid;let rt=D[Se];rt===void 0&&(rt={},D[Se]=rt);let et=rt[je];et===void 0&&(et=xe.clone(),rt[je]=et),xe=et}return xe.visible=Me.visible,xe.wireframe=Me.wireframe,Ye===fv?xe.side=Me.shadowSide!==null?Me.shadowSide:Me.side:xe.side=Me.shadowSide!==null?Me.shadowSide:z[Me.side],xe.alphaMap=Me.alphaMap,xe.alphaTest=Me.alphaTest,xe.clipShadows=Me.clipShadows,xe.clippingPlanes=Me.clippingPlanes,xe.clipIntersection=Me.clipIntersection,xe.displacementMap=Me.displacementMap,xe.displacementScale=Me.displacementScale,xe.displacementBias=Me.displacementBias,xe.wireframeLinewidth=Me.wireframeLinewidth,xe.linewidth=Me.linewidth,ce.isPointLight===!0&&xe.isMeshDistanceMaterial===!0&&(xe.referencePosition.setFromMatrixPosition(ce.matrixWorld),xe.nearDistance=We,xe.farDistance=Ke),xe}function le(fe,be,Me,ce,We){if(fe.visible===!1)return;if(fe.layers.test(be.layers)&&(fe.isMesh||fe.isLine||fe.isPoints)&&(fe.castShadow||fe.receiveShadow&&We===fv)&&(!fe.frustumCulled||g.intersectsObject(fe))){fe.modelViewMatrix.multiplyMatrices(Me.matrixWorldInverse,fe.matrixWorld);const xe=i.update(fe),ue=fe.material;if(Array.isArray(ue)){const Se=xe.groups;for(let je=0,rt=Se.length;je<rt;je++){const et=Se[je],ot=ue[et.materialIndex];if(ot&&ot.visible){const Et=Z(fe,xe,ot,ce,Me.near,Me.far,We);E.renderBufferDirect(Me,null,xe,Et,fe,et)}}}else if(ue.visible){const Se=Z(fe,xe,ue,ce,Me.near,Me.far,We);E.renderBufferDirect(Me,null,xe,Se,fe,null)}}const Ye=fe.children;for(let xe=0,ue=Ye.length;xe<ue;xe++)le(Ye[xe],be,Me,ce,We)}}function E9(E,i,u){const g=u.isWebGL2;function v(){let he=!1;const It=new Si;let Le=null;const _t=new Si(0,0,0,0);return{setMask:function(Wt){Le!==Wt&&!he&&(E.colorMask(Wt,Wt,Wt,Wt),Le=Wt)},setLocked:function(Wt){he=Wt},setClear:function(Wt,on,qn,Ir,Sr){Sr===!0&&(Wt*=Ir,on*=Ir,qn*=Ir),It.set(Wt,on,qn,Ir),_t.equals(It)===!1&&(E.clearColor(Wt,on,qn,Ir),_t.copy(It))},reset:function(){he=!1,Le=null,_t.set(-1,0,0,0)}}}function b(){let he=!1,It=null,Le=null,_t=null;return{setTest:function(Wt){Wt?sn(2929):Mn(2929)},setMask:function(Wt){It!==Wt&&!he&&(E.depthMask(Wt),It=Wt)},setFunc:function(Wt){if(Le!==Wt){if(Wt)switch(Wt){case DG:E.depthFunc(512);break;case PG:E.depthFunc(519);break;case FG:E.depthFunc(513);break;case uE:E.depthFunc(515);break;case OG:E.depthFunc(514);break;case zG:E.depthFunc(518);break;case BG:E.depthFunc(516);break;case $G:E.depthFunc(517);break;default:E.depthFunc(515)}else E.depthFunc(515);Le=Wt}},setLocked:function(Wt){he=Wt},setClear:function(Wt){_t!==Wt&&(E.clearDepth(Wt),_t=Wt)},reset:function(){he=!1,It=null,Le=null,_t=null}}}function M(){let he=!1,It=null,Le=null,_t=null,Wt=null,on=null,qn=null,Ir=null,Sr=null;return{setTest:function(Kr){he||(Kr?sn(2960):Mn(2960))},setMask:function(Kr){It!==Kr&&!he&&(E.stencilMask(Kr),It=Kr)},setFunc:function(Kr,ir,Ui){(Le!==Kr||_t!==ir||Wt!==Ui)&&(E.stencilFunc(Kr,ir,Ui),Le=Kr,_t=ir,Wt=Ui)},setOp:function(Kr,ir,Ui){(on!==Kr||qn!==ir||Ir!==Ui)&&(E.stencilOp(Kr,ir,Ui),on=Kr,qn=ir,Ir=Ui)},setLocked:function(Kr){he=Kr},setClear:function(Kr){Sr!==Kr&&(E.clearStencil(Kr),Sr=Kr)},reset:function(){he=!1,It=null,Le=null,_t=null,Wt=null,on=null,qn=null,Ir=null,Sr=null}}}const N=new v,F=new b,D=new M;let O={},z=null,B={},W=null,G=!1,K=null,J=null,V=null,Z=null,le=null,fe=null,be=null,Me=!1,ce=null,We=null,Ke=null,Ye=null,xe=null;const ue=E.getParameter(35661);let Se=!1,je=0;const rt=E.getParameter(7938);rt.indexOf("WebGL")!==-1?(je=parseFloat(/^WebGL (\d)/.exec(rt)[1]),Se=je>=1):rt.indexOf("OpenGL ES")!==-1&&(je=parseFloat(/^OpenGL ES (\d)/.exec(rt)[1]),Se=je>=2);let et=null,ot={};const Et=E.getParameter(3088),tn=E.getParameter(2978),ln=new Si().fromArray(Et),Vt=new Si().fromArray(tn);function En(he,It,Le){const _t=new Uint8Array(4),Wt=E.createTexture();E.bindTexture(he,Wt),E.texParameteri(he,10241,9728),E.texParameteri(he,10240,9728);for(let on=0;on<Le;on++)E.texImage2D(It+on,0,6408,1,1,0,6408,5121,_t);return Wt}const Bt={};Bt[3553]=En(3553,3553,1),Bt[34067]=En(34067,34069,6),N.setClear(0,0,0,1),F.setClear(1),D.setClear(0),sn(2929),F.setFunc(uE),Jt(!1),nn(ak),sn(2884),$n(Yp);function sn(he){O[he]!==!0&&(E.enable(he),O[he]=!0)}function Mn(he){O[he]!==!1&&(E.disable(he),O[he]=!1)}function St(he){he!==z&&(E.bindFramebuffer(36160,he),z=he)}function zn(he,It){return It===null&&z!==null&&(It=z),B[he]!==It?(E.bindFramebuffer(he,It),B[he]=It,g&&(he===36009&&(B[36160]=It),he===36160&&(B[36009]=It)),!0):!1}function Bn(he){return W!==he?(E.useProgram(he),W=he,!0):!1}const wn={[Qy]:32774,[SG]:32778,[MG]:32779};if(g)wn[ck]=32775,wn[hk]=32776;else{const he=i.get("EXT_blend_minmax");he!==null&&(wn[ck]=he.MIN_EXT,wn[hk]=he.MAX_EXT)}const Nn={[TG]:0,[EG]:1,[AG]:768,[NN]:770,[LG]:776,[NG]:774,[CG]:772,[IG]:769,[RN]:771,[RG]:775,[kG]:773};function $n(he,It,Le,_t,Wt,on,qn,Ir){if(he===Yp){G===!0&&(Mn(3042),G=!1);return}if(G===!1&&(sn(3042),G=!0),he!==_G){if(he!==K||Ir!==Me){if((J!==Qy||le!==Qy)&&(E.blendEquation(32774),J=Qy,le=Qy),Ir)switch(he){case yv:E.blendFuncSeparate(1,771,1,771);break;case ok:E.blendFunc(1,1);break;case lk:E.blendFuncSeparate(0,0,769,771);break;case uk:E.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",he);break}else switch(he){case yv:E.blendFuncSeparate(770,771,1,771);break;case ok:E.blendFunc(770,1);break;case lk:E.blendFunc(0,769);break;case uk:E.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",he);break}V=null,Z=null,fe=null,be=null,K=he,Me=Ir}return}Wt=Wt||It,on=on||Le,qn=qn||_t,(It!==J||Wt!==le)&&(E.blendEquationSeparate(wn[It],wn[Wt]),J=It,le=Wt),(Le!==V||_t!==Z||on!==fe||qn!==be)&&(E.blendFuncSeparate(Nn[Le],Nn[_t],Nn[on],Nn[qn]),V=Le,Z=_t,fe=on,be=qn),K=he,Me=null}function Ft(he,It){he.side===a0?Mn(2884):sn(2884);let Le=he.side===zs;It&&(Le=!Le),Jt(Le),he.blending===yv&&he.transparent===!1?$n(Yp):$n(he.blending,he.blendEquation,he.blendSrc,he.blendDst,he.blendEquationAlpha,he.blendSrcAlpha,he.blendDstAlpha,he.premultipliedAlpha),F.setFunc(he.depthFunc),F.setTest(he.depthTest),F.setMask(he.depthWrite),N.setMask(he.colorWrite);const _t=he.stencilWrite;D.setTest(_t),_t&&(D.setMask(he.stencilWriteMask),D.setFunc(he.stencilFunc,he.stencilRef,he.stencilFuncMask),D.setOp(he.stencilFail,he.stencilZFail,he.stencilZPass)),vn(he.polygonOffset,he.polygonOffsetFactor,he.polygonOffsetUnits),he.alphaToCoverage===!0?sn(32926):Mn(32926)}function Jt(he){ce!==he&&(he?E.frontFace(2304):E.frontFace(2305),ce=he)}function nn(he){he!==vG?(sn(2884),he!==We&&(he===ak?E.cullFace(1029):he===bG?E.cullFace(1028):E.cullFace(1032))):Mn(2884),We=he}function Dn(he){he!==Ke&&(Se&&E.lineWidth(he),Ke=he)}function vn(he,It,Le){he?(sn(32823),(Ye!==It||xe!==Le)&&(E.polygonOffset(It,Le),Ye=It,xe=Le)):Mn(32823)}function Re(he){he?sn(3089):Mn(3089)}function Ce(he){he===void 0&&(he=33984+ue-1),et!==he&&(E.activeTexture(he),et=he)}function ye(he,It){et===null&&Ce();let Le=ot[et];Le===void 0&&(Le={type:void 0,texture:void 0},ot[et]=Le),(Le.type!==he||Le.texture!==It)&&(E.bindTexture(he,It||Bt[he]),Le.type=he,Le.texture=It)}function se(){const he=ot[et];he!==void 0&&he.type!==void 0&&(E.bindTexture(he.type,null),he.type=void 0,he.texture=void 0)}function we(){try{E.compressedTexImage2D.apply(E,arguments)}catch(he){console.error("THREE.WebGLState:",he)}}function Fe(){try{E.texImage2D.apply(E,arguments)}catch(he){console.error("THREE.WebGLState:",he)}}function Q(){try{E.texImage3D.apply(E,arguments)}catch(he){console.error("THREE.WebGLState:",he)}}function Ze(he){ln.equals(he)===!1&&(E.scissor(he.x,he.y,he.z,he.w),ln.copy(he))}function Je(he){Vt.equals(he)===!1&&(E.viewport(he.x,he.y,he.z,he.w),Vt.copy(he))}function at(){E.disable(3042),E.disable(2884),E.disable(2929),E.disable(32823),E.disable(3089),E.disable(2960),E.disable(32926),E.blendEquation(32774),E.blendFunc(1,0),E.blendFuncSeparate(1,0,1,0),E.colorMask(!0,!0,!0,!0),E.clearColor(0,0,0,0),E.depthMask(!0),E.depthFunc(513),E.clearDepth(1),E.stencilMask(4294967295),E.stencilFunc(519,0,4294967295),E.stencilOp(7680,7680,7680),E.clearStencil(0),E.cullFace(1029),E.frontFace(2305),E.polygonOffset(0,0),E.activeTexture(33984),E.bindFramebuffer(36160,null),g===!0&&(E.bindFramebuffer(36009,null),E.bindFramebuffer(36008,null)),E.useProgram(null),E.lineWidth(1),E.scissor(0,0,E.canvas.width,E.canvas.height),E.viewport(0,0,E.canvas.width,E.canvas.height),O={},et=null,ot={},z=null,B={},W=null,G=!1,K=null,J=null,V=null,Z=null,le=null,fe=null,be=null,Me=!1,ce=null,We=null,Ke=null,Ye=null,xe=null,ln.set(0,0,E.canvas.width,E.canvas.height),Vt.set(0,0,E.canvas.width,E.canvas.height),N.reset(),F.reset(),D.reset()}return{buffers:{color:N,depth:F,stencil:D},enable:sn,disable:Mn,bindFramebuffer:zn,bindXRFramebuffer:St,useProgram:Bn,setBlending:$n,setMaterial:Ft,setFlipSided:Jt,setCullFace:nn,setLineWidth:Dn,setPolygonOffset:vn,setScissorTest:Re,activeTexture:Ce,bindTexture:ye,unbindTexture:se,compressedTexImage2D:we,texImage2D:Fe,texImage3D:Q,scissor:Ze,viewport:Je,reset:at}}function A9(E,i,u,g,v,b,M){const N=v.isWebGL2,F=v.maxTextures,D=v.maxCubemapSize,O=v.maxTextureSize,z=v.maxSamples,B=new WeakMap;let W,G=!1;try{G=typeof OffscreenCanvas!="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function K(Re,Ce){return G?new OffscreenCanvas(Re,Ce):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function J(Re,Ce,ye,se){let we=1;if((Re.width>se||Re.height>se)&&(we=se/Math.max(Re.width,Re.height)),we<1||Ce===!0)if(typeof HTMLImageElement!="undefined"&&Re instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&Re instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&Re instanceof ImageBitmap){const Fe=Ce?ZH:Math.floor,Q=Fe(we*Re.width),Ze=Fe(we*Re.height);W===void 0&&(W=K(Q,Ze));const Je=ye?K(Q,Ze):W;return Je.width=Q,Je.height=Ze,Je.getContext("2d").drawImage(Re,0,0,Q,Ze),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Re.width+"x"+Re.height+") to ("+Q+"x"+Ze+")."),Je}else return"data"in Re&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Re.width+"x"+Re.height+")."),Re;return Re}function V(Re){return Tk(Re.width)&&Tk(Re.height)}function Z(Re){return N?!1:Re.wrapS!==fl||Re.wrapT!==fl||Re.minFilter!==la&&Re.minFilter!==zl}function le(Re,Ce){return Re.generateMipmaps&&Ce&&Re.minFilter!==la&&Re.minFilter!==zl}function fe(Re,Ce,ye,se,we=1){E.generateMipmap(Re);const Fe=g.get(Ce);Fe.__maxMipLevel=Math.log2(Math.max(ye,se,we))}function be(Re,Ce,ye){if(N===!1)return Ce;if(Re!==null){if(E[Re]!==void 0)return E[Re];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+Re+"'")}let se=Ce;return Ce===6403&&(ye===5126&&(se=33326),ye===5131&&(se=33325),ye===5121&&(se=33321)),Ce===6407&&(ye===5126&&(se=34837),ye===5131&&(se=34843),ye===5121&&(se=32849)),Ce===6408&&(ye===5126&&(se=34836),ye===5131&&(se=34842),ye===5121&&(se=32856)),(se===33325||se===33326||se===34842||se===34836)&&i.get("EXT_color_buffer_float"),se}function Me(Re){return Re===la||Re===dk||Re===pk?9728:9729}function ce(Re){const Ce=Re.target;Ce.removeEventListener("dispose",ce),Ke(Ce),Ce.isVideoTexture&&B.delete(Ce),M.memory.textures--}function We(Re){const Ce=Re.target;Ce.removeEventListener("dispose",We),Ye(Ce)}function Ke(Re){const Ce=g.get(Re);Ce.__webglInit!==void 0&&(E.deleteTexture(Ce.__webglTexture),g.remove(Re))}function Ye(Re){const Ce=Re.texture,ye=g.get(Re),se=g.get(Ce);if(!!Re){if(se.__webglTexture!==void 0&&(E.deleteTexture(se.__webglTexture),M.memory.textures--),Re.depthTexture&&Re.depthTexture.dispose(),Re.isWebGLCubeRenderTarget)for(let we=0;we<6;we++)E.deleteFramebuffer(ye.__webglFramebuffer[we]),ye.__webglDepthbuffer&&E.deleteRenderbuffer(ye.__webglDepthbuffer[we]);else E.deleteFramebuffer(ye.__webglFramebuffer),ye.__webglDepthbuffer&&E.deleteRenderbuffer(ye.__webglDepthbuffer),ye.__webglMultisampledFramebuffer&&E.deleteFramebuffer(ye.__webglMultisampledFramebuffer),ye.__webglColorRenderbuffer&&E.deleteRenderbuffer(ye.__webglColorRenderbuffer),ye.__webglDepthRenderbuffer&&E.deleteRenderbuffer(ye.__webglDepthRenderbuffer);if(Re.isWebGLMultipleRenderTargets)for(let we=0,Fe=Ce.length;we<Fe;we++){const Q=g.get(Ce[we]);Q.__webglTexture&&(E.deleteTexture(Q.__webglTexture),M.memory.textures--),g.remove(Ce[we])}g.remove(Ce),g.remove(Re)}}let xe=0;function ue(){xe=0}function Se(){const Re=xe;return Re>=F&&console.warn("THREE.WebGLTextures: Trying to use "+Re+" texture units while this GPU supports only "+F),xe+=1,Re}function je(Re,Ce){const ye=g.get(Re);if(Re.isVideoTexture&&Ft(Re),Re.version>0&&ye.__version!==Re.version){const se=Re.image;if(se===void 0)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(se.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{En(ye,Re,Ce);return}}u.activeTexture(33984+Ce),u.bindTexture(3553,ye.__webglTexture)}function rt(Re,Ce){const ye=g.get(Re);if(Re.version>0&&ye.__version!==Re.version){En(ye,Re,Ce);return}u.activeTexture(33984+Ce),u.bindTexture(35866,ye.__webglTexture)}function et(Re,Ce){const ye=g.get(Re);if(Re.version>0&&ye.__version!==Re.version){En(ye,Re,Ce);return}u.activeTexture(33984+Ce),u.bindTexture(32879,ye.__webglTexture)}function ot(Re,Ce){const ye=g.get(Re);if(Re.version>0&&ye.__version!==Re.version){Bt(ye,Re,Ce);return}u.activeTexture(33984+Ce),u.bindTexture(34067,ye.__webglTexture)}const Et={[dE]:10497,[fl]:33071,[pE]:33648},tn={[la]:9728,[dk]:9984,[pk]:9986,[zl]:9729,[XG]:9985,[Q1]:9987};function ln(Re,Ce,ye){if(ye?(E.texParameteri(Re,10242,Et[Ce.wrapS]),E.texParameteri(Re,10243,Et[Ce.wrapT]),(Re===32879||Re===35866)&&E.texParameteri(Re,32882,Et[Ce.wrapR]),E.texParameteri(Re,10240,tn[Ce.magFilter]),E.texParameteri(Re,10241,tn[Ce.minFilter])):(E.texParameteri(Re,10242,33071),E.texParameteri(Re,10243,33071),(Re===32879||Re===35866)&&E.texParameteri(Re,32882,33071),(Ce.wrapS!==fl||Ce.wrapT!==fl)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),E.texParameteri(Re,10240,Me(Ce.magFilter)),E.texParameteri(Re,10241,Me(Ce.minFilter)),Ce.minFilter!==la&&Ce.minFilter!==zl&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),i.has("EXT_texture_filter_anisotropic")===!0){const se=i.get("EXT_texture_filter_anisotropic");if(Ce.type===Um&&i.has("OES_texture_float_linear")===!1||N===!1&&Ce.type===r0&&i.has("OES_texture_half_float_linear")===!1)return;(Ce.anisotropy>1||g.get(Ce).__currentAnisotropy)&&(E.texParameterf(Re,se.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(Ce.anisotropy,v.getMaxAnisotropy())),g.get(Ce).__currentAnisotropy=Ce.anisotropy)}}function Vt(Re,Ce){Re.__webglInit===void 0&&(Re.__webglInit=!0,Ce.addEventListener("dispose",ce),Re.__webglTexture=E.createTexture(),M.memory.textures++)}function En(Re,Ce,ye){let se=3553;Ce.isDataTexture2DArray&&(se=35866),Ce.isDataTexture3D&&(se=32879),Vt(Re,Ce),u.activeTexture(33984+ye),u.bindTexture(se,Re.__webglTexture),E.pixelStorei(37440,Ce.flipY),E.pixelStorei(37441,Ce.premultiplyAlpha),E.pixelStorei(3317,Ce.unpackAlignment),E.pixelStorei(37443,0);const we=Z(Ce)&&V(Ce.image)===!1,Fe=J(Ce.image,we,!1,O),Q=V(Fe)||N,Ze=b.convert(Ce.format);let Je=b.convert(Ce.type),at=be(Ce.internalFormat,Ze,Je);ln(se,Ce,Q);let he;const It=Ce.mipmaps;if(Ce.isDepthTexture)at=6402,N?Ce.type===Um?at=36012:Ce.type===U1?at=33190:Ce.type===xv?at=35056:at=33189:Ce.type===Um&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),Ce.format===i0&&at===6402&&Ce.type!==V1&&Ce.type!==U1&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),Ce.type=V1,Je=b.convert(Ce.type)),Ce.format===_v&&at===6402&&(at=34041,Ce.type!==xv&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),Ce.type=xv,Je=b.convert(Ce.type))),u.texImage2D(3553,0,at,Fe.width,Fe.height,0,Ze,Je,null);else if(Ce.isDataTexture)if(It.length>0&&Q){for(let Le=0,_t=It.length;Le<_t;Le++)he=It[Le],u.texImage2D(3553,Le,at,he.width,he.height,0,Ze,Je,he.data);Ce.generateMipmaps=!1,Re.__maxMipLevel=It.length-1}else u.texImage2D(3553,0,at,Fe.width,Fe.height,0,Ze,Je,Fe.data),Re.__maxMipLevel=0;else if(Ce.isCompressedTexture){for(let Le=0,_t=It.length;Le<_t;Le++)he=It[Le],Ce.format!==ml&&Ce.format!==Kp?Ze!==null?u.compressedTexImage2D(3553,Le,at,he.width,he.height,0,he.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):u.texImage2D(3553,Le,at,he.width,he.height,0,Ze,Je,he.data);Re.__maxMipLevel=It.length-1}else if(Ce.isDataTexture2DArray)u.texImage3D(35866,0,at,Fe.width,Fe.height,Fe.depth,0,Ze,Je,Fe.data),Re.__maxMipLevel=0;else if(Ce.isDataTexture3D)u.texImage3D(32879,0,at,Fe.width,Fe.height,Fe.depth,0,Ze,Je,Fe.data),Re.__maxMipLevel=0;else if(It.length>0&&Q){for(let Le=0,_t=It.length;Le<_t;Le++)he=It[Le],u.texImage2D(3553,Le,at,Ze,Je,he);Ce.generateMipmaps=!1,Re.__maxMipLevel=It.length-1}else u.texImage2D(3553,0,at,Ze,Je,Fe),Re.__maxMipLevel=0;le(Ce,Q)&&fe(se,Ce,Fe.width,Fe.height),Re.__version=Ce.version,Ce.onUpdate&&Ce.onUpdate(Ce)}function Bt(Re,Ce,ye){if(Ce.image.length!==6)return;Vt(Re,Ce),u.activeTexture(33984+ye),u.bindTexture(34067,Re.__webglTexture),E.pixelStorei(37440,Ce.flipY),E.pixelStorei(37441,Ce.premultiplyAlpha),E.pixelStorei(3317,Ce.unpackAlignment),E.pixelStorei(37443,0);const se=Ce&&(Ce.isCompressedTexture||Ce.image[0].isCompressedTexture),we=Ce.image[0]&&Ce.image[0].isDataTexture,Fe=[];for(let Le=0;Le<6;Le++)!se&&!we?Fe[Le]=J(Ce.image[Le],!1,!0,D):Fe[Le]=we?Ce.image[Le].image:Ce.image[Le];const Q=Fe[0],Ze=V(Q)||N,Je=b.convert(Ce.format),at=b.convert(Ce.type),he=be(Ce.internalFormat,Je,at);ln(34067,Ce,Ze);let It;if(se){for(let Le=0;Le<6;Le++){It=Fe[Le].mipmaps;for(let _t=0;_t<It.length;_t++){const Wt=It[_t];Ce.format!==ml&&Ce.format!==Kp?Je!==null?u.compressedTexImage2D(34069+Le,_t,he,Wt.width,Wt.height,0,Wt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):u.texImage2D(34069+Le,_t,he,Wt.width,Wt.height,0,Je,at,Wt.data)}}Re.__maxMipLevel=It.length-1}else{It=Ce.mipmaps;for(let Le=0;Le<6;Le++)if(we){u.texImage2D(34069+Le,0,he,Fe[Le].width,Fe[Le].height,0,Je,at,Fe[Le].data);for(let _t=0;_t<It.length;_t++){const on=It[_t].image[Le].image;u.texImage2D(34069+Le,_t+1,he,on.width,on.height,0,Je,at,on.data)}}else{u.texImage2D(34069+Le,0,he,Je,at,Fe[Le]);for(let _t=0;_t<It.length;_t++){const Wt=It[_t];u.texImage2D(34069+Le,_t+1,he,Je,at,Wt.image[Le])}}Re.__maxMipLevel=It.length}le(Ce,Ze)&&fe(34067,Ce,Q.width,Q.height),Re.__version=Ce.version,Ce.onUpdate&&Ce.onUpdate(Ce)}function sn(Re,Ce,ye,se,we){const Fe=b.convert(ye.format),Q=b.convert(ye.type),Ze=be(ye.internalFormat,Fe,Q);we===32879||we===35866?u.texImage3D(we,0,Ze,Ce.width,Ce.height,Ce.depth,0,Fe,Q,null):u.texImage2D(we,0,Ze,Ce.width,Ce.height,0,Fe,Q,null),u.bindFramebuffer(36160,Re),E.framebufferTexture2D(36160,se,we,g.get(ye).__webglTexture,0),u.bindFramebuffer(36160,null)}function Mn(Re,Ce,ye){if(E.bindRenderbuffer(36161,Re),Ce.depthBuffer&&!Ce.stencilBuffer){let se=33189;if(ye){const we=Ce.depthTexture;we&&we.isDepthTexture&&(we.type===Um?se=36012:we.type===U1&&(se=33190));const Fe=$n(Ce);E.renderbufferStorageMultisample(36161,Fe,se,Ce.width,Ce.height)}else E.renderbufferStorage(36161,se,Ce.width,Ce.height);E.framebufferRenderbuffer(36160,36096,36161,Re)}else if(Ce.depthBuffer&&Ce.stencilBuffer){if(ye){const se=$n(Ce);E.renderbufferStorageMultisample(36161,se,35056,Ce.width,Ce.height)}else E.renderbufferStorage(36161,34041,Ce.width,Ce.height);E.framebufferRenderbuffer(36160,33306,36161,Re)}else{const se=Ce.isWebGLMultipleRenderTargets===!0?Ce.texture[0]:Ce.texture,we=b.convert(se.format),Fe=b.convert(se.type),Q=be(se.internalFormat,we,Fe);if(ye){const Ze=$n(Ce);E.renderbufferStorageMultisample(36161,Ze,Q,Ce.width,Ce.height)}else E.renderbufferStorage(36161,Q,Ce.width,Ce.height)}E.bindRenderbuffer(36161,null)}function St(Re,Ce){if(Ce&&Ce.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(u.bindFramebuffer(36160,Re),!(Ce.depthTexture&&Ce.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!g.get(Ce.depthTexture).__webglTexture||Ce.depthTexture.image.width!==Ce.width||Ce.depthTexture.image.height!==Ce.height)&&(Ce.depthTexture.image.width=Ce.width,Ce.depthTexture.image.height=Ce.height,Ce.depthTexture.needsUpdate=!0),je(Ce.depthTexture,0);const se=g.get(Ce.depthTexture).__webglTexture;if(Ce.depthTexture.format===i0)E.framebufferTexture2D(36160,36096,3553,se,0);else if(Ce.depthTexture.format===_v)E.framebufferTexture2D(36160,33306,3553,se,0);else throw new Error("Unknown depthTexture format")}function zn(Re){const Ce=g.get(Re),ye=Re.isWebGLCubeRenderTarget===!0;if(Re.depthTexture){if(ye)throw new Error("target.depthTexture not supported in Cube render targets");St(Ce.__webglFramebuffer,Re)}else if(ye){Ce.__webglDepthbuffer=[];for(let se=0;se<6;se++)u.bindFramebuffer(36160,Ce.__webglFramebuffer[se]),Ce.__webglDepthbuffer[se]=E.createRenderbuffer(),Mn(Ce.__webglDepthbuffer[se],Re,!1)}else u.bindFramebuffer(36160,Ce.__webglFramebuffer),Ce.__webglDepthbuffer=E.createRenderbuffer(),Mn(Ce.__webglDepthbuffer,Re,!1);u.bindFramebuffer(36160,null)}function Bn(Re){const Ce=Re.texture,ye=g.get(Re),se=g.get(Ce);Re.addEventListener("dispose",We),Re.isWebGLMultipleRenderTargets!==!0&&(se.__webglTexture=E.createTexture(),se.__version=Ce.version,M.memory.textures++);const we=Re.isWebGLCubeRenderTarget===!0,Fe=Re.isWebGLMultipleRenderTargets===!0,Q=Re.isWebGLMultisampleRenderTarget===!0,Ze=Ce.isDataTexture3D||Ce.isDataTexture2DArray,Je=V(Re)||N;if(N&&Ce.format===Kp&&(Ce.type===Um||Ce.type===r0)&&(Ce.format=ml,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),we){ye.__webglFramebuffer=[];for(let at=0;at<6;at++)ye.__webglFramebuffer[at]=E.createFramebuffer()}else if(ye.__webglFramebuffer=E.createFramebuffer(),Fe)if(v.drawBuffers){const at=Re.texture;for(let he=0,It=at.length;he<It;he++){const Le=g.get(at[he]);Le.__webglTexture===void 0&&(Le.__webglTexture=E.createTexture(),M.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(Q)if(N){ye.__webglMultisampledFramebuffer=E.createFramebuffer(),ye.__webglColorRenderbuffer=E.createRenderbuffer(),E.bindRenderbuffer(36161,ye.__webglColorRenderbuffer);const at=b.convert(Ce.format),he=b.convert(Ce.type),It=be(Ce.internalFormat,at,he),Le=$n(Re);E.renderbufferStorageMultisample(36161,Le,It,Re.width,Re.height),u.bindFramebuffer(36160,ye.__webglMultisampledFramebuffer),E.framebufferRenderbuffer(36160,36064,36161,ye.__webglColorRenderbuffer),E.bindRenderbuffer(36161,null),Re.depthBuffer&&(ye.__webglDepthRenderbuffer=E.createRenderbuffer(),Mn(ye.__webglDepthRenderbuffer,Re,!0)),u.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(we){u.bindTexture(34067,se.__webglTexture),ln(34067,Ce,Je);for(let at=0;at<6;at++)sn(ye.__webglFramebuffer[at],Re,Ce,36064,34069+at);le(Ce,Je)&&fe(34067,Ce,Re.width,Re.height),u.unbindTexture()}else if(Fe){const at=Re.texture;for(let he=0,It=at.length;he<It;he++){const Le=at[he],_t=g.get(Le);u.bindTexture(3553,_t.__webglTexture),ln(3553,Le,Je),sn(ye.__webglFramebuffer,Re,Le,36064+he,3553),le(Le,Je)&&fe(3553,Le,Re.width,Re.height)}u.unbindTexture()}else{let at=3553;Ze&&(N?at=Ce.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),u.bindTexture(at,se.__webglTexture),ln(at,Ce,Je),sn(ye.__webglFramebuffer,Re,Ce,36064,at),le(Ce,Je)&&fe(at,Ce,Re.width,Re.height,Re.depth),u.unbindTexture()}Re.depthBuffer&&zn(Re)}function wn(Re){const Ce=V(Re)||N,ye=Re.isWebGLMultipleRenderTargets===!0?Re.texture:[Re.texture];for(let se=0,we=ye.length;se<we;se++){const Fe=ye[se];if(le(Fe,Ce)){const Q=Re.isWebGLCubeRenderTarget?34067:3553,Ze=g.get(Fe).__webglTexture;u.bindTexture(Q,Ze),fe(Q,Fe,Re.width,Re.height),u.unbindTexture()}}}function Nn(Re){if(Re.isWebGLMultisampleRenderTarget)if(N){const Ce=Re.width,ye=Re.height;let se=16384;Re.depthBuffer&&(se|=256),Re.stencilBuffer&&(se|=1024);const we=g.get(Re);u.bindFramebuffer(36008,we.__webglMultisampledFramebuffer),u.bindFramebuffer(36009,we.__webglFramebuffer),E.blitFramebuffer(0,0,Ce,ye,0,0,Ce,ye,se,9728),u.bindFramebuffer(36008,null),u.bindFramebuffer(36009,we.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}function $n(Re){return N&&Re.isWebGLMultisampleRenderTarget?Math.min(z,Re.samples):0}function Ft(Re){const Ce=M.render.frame;B.get(Re)!==Ce&&(B.set(Re,Ce),Re.update())}let Jt=!1,nn=!1;function Dn(Re,Ce){Re&&Re.isWebGLRenderTarget&&(Jt===!1&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),Jt=!0),Re=Re.texture),je(Re,Ce)}function vn(Re,Ce){Re&&Re.isWebGLCubeRenderTarget&&(nn===!1&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),nn=!0),Re=Re.texture),ot(Re,Ce)}this.allocateTextureUnit=Se,this.resetTextureUnits=ue,this.setTexture2D=je,this.setTexture2DArray=rt,this.setTexture3D=et,this.setTextureCube=ot,this.setupRenderTarget=Bn,this.updateRenderTargetMipmap=wn,this.updateMultisampleRenderTarget=Nn,this.safeSetTexture2D=Dn,this.safeSetTextureCube=vn}function I9(E,i,u){const g=u.isWebGL2;function v(b){let M;if(b===o0)return 5121;if(b===JG)return 32819;if(b===QG)return 32820;if(b===eH)return 33635;if(b===YG)return 5120;if(b===KG)return 5122;if(b===V1)return 5123;if(b===ZG)return 5124;if(b===U1)return 5125;if(b===Um)return 5126;if(b===r0)return g?5131:(M=i.get("OES_texture_half_float"),M!==null?M.HALF_FLOAT_OES:null);if(b===tH)return 6406;if(b===Kp)return 6407;if(b===ml)return 6408;if(b===nH)return 6409;if(b===rH)return 6410;if(b===i0)return 6402;if(b===_v)return 34041;if(b===sH)return 6403;if(b===aH)return 36244;if(b===oH)return 33319;if(b===lH)return 33320;if(b===uH)return 36248;if(b===cH)return 36249;if(b===fk||b===mk||b===gk||b===yk)if(M=i.get("WEBGL_compressed_texture_s3tc"),M!==null){if(b===fk)return M.COMPRESSED_RGB_S3TC_DXT1_EXT;if(b===mk)return M.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(b===gk)return M.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(b===yk)return M.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(b===xk||b===vk||b===bk||b===wk)if(M=i.get("WEBGL_compressed_texture_pvrtc"),M!==null){if(b===xk)return M.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(b===vk)return M.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(b===bk)return M.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(b===wk)return M.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(b===hH)return M=i.get("WEBGL_compressed_texture_etc1"),M!==null?M.COMPRESSED_RGB_ETC1_WEBGL:null;if((b===_k||b===Sk)&&(M=i.get("WEBGL_compressed_texture_etc"),M!==null)){if(b===_k)return M.COMPRESSED_RGB8_ETC2;if(b===Sk)return M.COMPRESSED_RGBA8_ETC2_EAC}if(b===dH||b===pH||b===fH||b===mH||b===gH||b===yH||b===xH||b===vH||b===bH||b===wH||b===_H||b===SH||b===MH||b===TH||b===AH||b===IH||b===CH||b===kH||b===NH||b===RH||b===LH||b===DH||b===PH||b===FH||b===OH||b===zH||b===BH||b===$H)return M=i.get("WEBGL_compressed_texture_astc"),M!==null?b:null;if(b===EH)return M=i.get("EXT_texture_compression_bptc"),M!==null?b:null;if(b===xv)return g?34042:(M=i.get("WEBGL_depth_texture"),M!==null?M.UNSIGNED_INT_24_8_WEBGL:null)}return{convert:v}}class sR extends Lo{constructor(i=[]){super(),this.cameras=i}}sR.prototype.isArrayCamera=!0;class gv extends ai{constructor(){super(),this.type="Group"}}gv.prototype.isGroup=!0;const C9={type:"move"};class tE{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new gv,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new gv,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new He,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new He),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new gv,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new He,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new He),this._grip}dispatchEvent(i){return this._targetRay!==null&&this._targetRay.dispatchEvent(i),this._grip!==null&&this._grip.dispatchEvent(i),this._hand!==null&&this._hand.dispatchEvent(i),this}disconnect(i){return this.dispatchEvent({type:"disconnected",data:i}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(i,u,g){let v=null,b=null,M=null;const N=this._targetRay,F=this._grip,D=this._hand;if(i&&u.session.visibilityState!=="visible-blurred")if(N!==null&&(v=u.getPose(i.targetRaySpace,g),v!==null&&(N.matrix.fromArray(v.transform.matrix),N.matrix.decompose(N.position,N.rotation,N.scale),v.linearVelocity?(N.hasLinearVelocity=!0,N.linearVelocity.copy(v.linearVelocity)):N.hasLinearVelocity=!1,v.angularVelocity?(N.hasAngularVelocity=!0,N.angularVelocity.copy(v.angularVelocity)):N.hasAngularVelocity=!1,this.dispatchEvent(C9))),D&&i.hand){M=!0;for(const K of i.hand.values()){const J=u.getJointPose(K,g);if(D.joints[K.jointName]===void 0){const Z=new gv;Z.matrixAutoUpdate=!1,Z.visible=!1,D.joints[K.jointName]=Z,D.add(Z)}const V=D.joints[K.jointName];J!==null&&(V.matrix.fromArray(J.transform.matrix),V.matrix.decompose(V.position,V.rotation,V.scale),V.jointRadius=J.radius),V.visible=J!==null}const O=D.joints["index-finger-tip"],z=D.joints["thumb-tip"],B=O.position.distanceTo(z.position),W=.02,G=.005;D.inputState.pinching&&B>W+G?(D.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:i.handedness,target:this})):!D.inputState.pinching&&B<=W-G&&(D.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:i.handedness,target:this}))}else F!==null&&i.gripSpace&&(b=u.getPose(i.gripSpace,g),b!==null&&(F.matrix.fromArray(b.transform.matrix),F.matrix.decompose(F.position,F.rotation,F.scale),b.linearVelocity?(F.hasLinearVelocity=!0,F.linearVelocity.copy(b.linearVelocity)):F.hasLinearVelocity=!1,b.angularVelocity?(F.hasAngularVelocity=!0,F.angularVelocity.copy(b.angularVelocity)):F.hasAngularVelocity=!1));return N!==null&&(N.visible=v!==null),F!==null&&(F.visible=b!==null),D!==null&&(D.visible=M!==null),this}}class k9 extends Gm{constructor(i,u){super();const g=this,v=i.state;let b=null,M=1,N=null,F="local-floor",D=null,O=null,z=null,B=null,W=null,G=!1,K=null,J=null,V=null,Z=null,le=null,fe=null;const be=[],Me=new Map,ce=new Lo;ce.layers.enable(1),ce.viewport=new Si;const We=new Lo;We.layers.enable(2),We.viewport=new Si;const Ke=[ce,We],Ye=new sR;Ye.layers.enable(1),Ye.layers.enable(2);let xe=null,ue=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(Bt){let sn=be[Bt];return sn===void 0&&(sn=new tE,be[Bt]=sn),sn.getTargetRaySpace()},this.getControllerGrip=function(Bt){let sn=be[Bt];return sn===void 0&&(sn=new tE,be[Bt]=sn),sn.getGripSpace()},this.getHand=function(Bt){let sn=be[Bt];return sn===void 0&&(sn=new tE,be[Bt]=sn),sn.getHandSpace()};function Se(Bt){const sn=Me.get(Bt.inputSource);sn&&sn.dispatchEvent({type:Bt.type,data:Bt.inputSource})}function je(){Me.forEach(function(Bt,sn){Bt.disconnect(sn)}),Me.clear(),xe=null,ue=null,v.bindXRFramebuffer(null),i.setRenderTarget(i.getRenderTarget()),z&&u.deleteFramebuffer(z),K&&u.deleteFramebuffer(K),J&&u.deleteRenderbuffer(J),V&&u.deleteRenderbuffer(V),z=null,K=null,J=null,V=null,W=null,B=null,O=null,b=null,En.stop(),g.isPresenting=!1,g.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(Bt){M=Bt,g.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(Bt){F=Bt,g.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return N},this.getBaseLayer=function(){return B!==null?B:W},this.getBinding=function(){return O},this.getFrame=function(){return Z},this.getSession=function(){return b},this.setSession=async function(Bt){if(b=Bt,b!==null){b.addEventListener("select",Se),b.addEventListener("selectstart",Se),b.addEventListener("selectend",Se),b.addEventListener("squeeze",Se),b.addEventListener("squeezestart",Se),b.addEventListener("squeezeend",Se),b.addEventListener("end",je),b.addEventListener("inputsourceschange",rt);const sn=u.getContextAttributes();if(sn.xrCompatible!==!0&&await u.makeXRCompatible(),b.renderState.layers===void 0){const Mn={antialias:sn.antialias,alpha:sn.alpha,depth:sn.depth,stencil:sn.stencil,framebufferScaleFactor:M};W=new XRWebGLLayer(b,u,Mn),b.updateRenderState({baseLayer:W})}else if(u instanceof WebGLRenderingContext){const Mn={antialias:!0,alpha:sn.alpha,depth:sn.depth,stencil:sn.stencil,framebufferScaleFactor:M};W=new XRWebGLLayer(b,u,Mn),b.updateRenderState({layers:[W]})}else{G=sn.antialias;let Mn=null;sn.depth&&(fe=256,sn.stencil&&(fe|=1024),le=sn.stencil?33306:36096,Mn=sn.stencil?35056:33190);const St={colorFormat:sn.alpha?32856:32849,depthFormat:Mn,scaleFactor:M};O=new XRWebGLBinding(b,u),B=O.createProjectionLayer(St),z=u.createFramebuffer(),b.updateRenderState({layers:[B]}),G&&(K=u.createFramebuffer(),J=u.createRenderbuffer(),u.bindRenderbuffer(36161,J),u.renderbufferStorageMultisample(36161,4,32856,B.textureWidth,B.textureHeight),v.bindFramebuffer(36160,K),u.framebufferRenderbuffer(36160,36064,36161,J),u.bindRenderbuffer(36161,null),Mn!==null&&(V=u.createRenderbuffer(),u.bindRenderbuffer(36161,V),u.renderbufferStorageMultisample(36161,4,Mn,B.textureWidth,B.textureHeight),u.framebufferRenderbuffer(36160,le,36161,V),u.bindRenderbuffer(36161,null)),v.bindFramebuffer(36160,null))}N=await b.requestReferenceSpace(F),En.setContext(b),En.start(),g.isPresenting=!0,g.dispatchEvent({type:"sessionstart"})}};function rt(Bt){const sn=b.inputSources;for(let Mn=0;Mn<be.length;Mn++)Me.set(sn[Mn],be[Mn]);for(let Mn=0;Mn<Bt.removed.length;Mn++){const St=Bt.removed[Mn],zn=Me.get(St);zn&&(zn.dispatchEvent({type:"disconnected",data:St}),Me.delete(St))}for(let Mn=0;Mn<Bt.added.length;Mn++){const St=Bt.added[Mn],zn=Me.get(St);zn&&zn.dispatchEvent({type:"connected",data:St})}}const et=new He,ot=new He;function Et(Bt,sn,Mn){et.setFromMatrixPosition(sn.matrixWorld),ot.setFromMatrixPosition(Mn.matrixWorld);const St=et.distanceTo(ot),zn=sn.projectionMatrix.elements,Bn=Mn.projectionMatrix.elements,wn=zn[14]/(zn[10]-1),Nn=zn[14]/(zn[10]+1),$n=(zn[9]+1)/zn[5],Ft=(zn[9]-1)/zn[5],Jt=(zn[8]-1)/zn[0],nn=(Bn[8]+1)/Bn[0],Dn=wn*Jt,vn=wn*nn,Re=St/(-Jt+nn),Ce=Re*-Jt;sn.matrixWorld.decompose(Bt.position,Bt.quaternion,Bt.scale),Bt.translateX(Ce),Bt.translateZ(Re),Bt.matrixWorld.compose(Bt.position,Bt.quaternion,Bt.scale),Bt.matrixWorldInverse.copy(Bt.matrixWorld).invert();const ye=wn+Re,se=Nn+Re,we=Dn-Ce,Fe=vn+(St-Ce),Q=$n*Nn/se*ye,Ze=Ft*Nn/se*ye;Bt.projectionMatrix.makePerspective(we,Fe,Q,Ze,ye,se)}function tn(Bt,sn){sn===null?Bt.matrixWorld.copy(Bt.matrix):Bt.matrixWorld.multiplyMatrices(sn.matrixWorld,Bt.matrix),Bt.matrixWorldInverse.copy(Bt.matrixWorld).invert()}this.updateCamera=function(Bt){if(b===null)return;Ye.near=We.near=ce.near=Bt.near,Ye.far=We.far=ce.far=Bt.far,(xe!==Ye.near||ue!==Ye.far)&&(b.updateRenderState({depthNear:Ye.near,depthFar:Ye.far}),xe=Ye.near,ue=Ye.far);const sn=Bt.parent,Mn=Ye.cameras;tn(Ye,sn);for(let zn=0;zn<Mn.length;zn++)tn(Mn[zn],sn);Ye.matrixWorld.decompose(Ye.position,Ye.quaternion,Ye.scale),Bt.position.copy(Ye.position),Bt.quaternion.copy(Ye.quaternion),Bt.scale.copy(Ye.scale),Bt.matrix.copy(Ye.matrix),Bt.matrixWorld.copy(Ye.matrixWorld);const St=Bt.children;for(let zn=0,Bn=St.length;zn<Bn;zn++)St[zn].updateMatrixWorld(!0);Mn.length===2?Et(Ye,ce,We):Ye.projectionMatrix.copy(ce.projectionMatrix)},this.getCamera=function(){return Ye},this.getFoveation=function(){if(B!==null)return B.fixedFoveation;if(W!==null)return W.fixedFoveation},this.setFoveation=function(Bt){B!==null&&(B.fixedFoveation=Bt),W!==null&&W.fixedFoveation!==void 0&&(W.fixedFoveation=Bt)};let ln=null;function Vt(Bt,sn){if(D=sn.getViewerPose(N),Z=sn,D!==null){const St=D.views;W!==null&&v.bindXRFramebuffer(W.framebuffer);let zn=!1;St.length!==Ye.cameras.length&&(Ye.cameras.length=0,zn=!0);for(let Bn=0;Bn<St.length;Bn++){const wn=St[Bn];let Nn=null;if(W!==null)Nn=W.getViewport(wn);else{const Ft=O.getViewSubImage(B,wn);v.bindXRFramebuffer(z),Ft.depthStencilTexture!==void 0&&u.framebufferTexture2D(36160,le,3553,Ft.depthStencilTexture,0),u.framebufferTexture2D(36160,36064,3553,Ft.colorTexture,0),Nn=Ft.viewport}const $n=Ke[Bn];$n.matrix.fromArray(wn.transform.matrix),$n.projectionMatrix.fromArray(wn.projectionMatrix),$n.viewport.set(Nn.x,Nn.y,Nn.width,Nn.height),Bn===0&&Ye.matrix.copy($n.matrix),zn===!0&&Ye.cameras.push($n)}G&&(v.bindXRFramebuffer(K),fe!==null&&u.clear(fe))}const Mn=b.inputSources;for(let St=0;St<be.length;St++){const zn=be[St],Bn=Mn[St];zn.update(Bn,sn,N)}if(ln&&ln(Bt,sn),G){const St=B.textureWidth,zn=B.textureHeight;v.bindFramebuffer(36008,K),v.bindFramebuffer(36009,z),u.invalidateFramebuffer(36008,[le]),u.invalidateFramebuffer(36009,[le]),u.blitFramebuffer(0,0,St,zn,0,0,St,zn,16384,9728),u.invalidateFramebuffer(36008,[36064]),v.bindFramebuffer(36008,null),v.bindFramebuffer(36009,null),v.bindFramebuffer(36160,K)}Z=null}const En=new GN;En.setAnimationLoop(Vt),this.setAnimationLoop=function(Bt){ln=Bt},this.dispose=function(){}}}function N9(E){function i(V,Z){V.fogColor.value.copy(Z.color),Z.isFog?(V.fogNear.value=Z.near,V.fogFar.value=Z.far):Z.isFogExp2&&(V.fogDensity.value=Z.density)}function u(V,Z,le,fe,be){Z.isMeshBasicMaterial?g(V,Z):Z.isMeshLambertMaterial?(g(V,Z),F(V,Z)):Z.isMeshToonMaterial?(g(V,Z),O(V,Z)):Z.isMeshPhongMaterial?(g(V,Z),D(V,Z)):Z.isMeshStandardMaterial?(g(V,Z),Z.isMeshPhysicalMaterial?B(V,Z,be):z(V,Z)):Z.isMeshMatcapMaterial?(g(V,Z),W(V,Z)):Z.isMeshDepthMaterial?(g(V,Z),G(V,Z)):Z.isMeshDistanceMaterial?(g(V,Z),K(V,Z)):Z.isMeshNormalMaterial?(g(V,Z),J(V,Z)):Z.isLineBasicMaterial?(v(V,Z),Z.isLineDashedMaterial&&b(V,Z)):Z.isPointsMaterial?M(V,Z,le,fe):Z.isSpriteMaterial?N(V,Z):Z.isShadowMaterial?(V.color.value.copy(Z.color),V.opacity.value=Z.opacity):Z.isShaderMaterial&&(Z.uniformsNeedUpdate=!1)}function g(V,Z){V.opacity.value=Z.opacity,Z.color&&V.diffuse.value.copy(Z.color),Z.emissive&&V.emissive.value.copy(Z.emissive).multiplyScalar(Z.emissiveIntensity),Z.map&&(V.map.value=Z.map),Z.alphaMap&&(V.alphaMap.value=Z.alphaMap),Z.specularMap&&(V.specularMap.value=Z.specularMap),Z.alphaTest>0&&(V.alphaTest.value=Z.alphaTest);const le=E.get(Z).envMap;if(le){V.envMap.value=le,V.flipEnvMap.value=le.isCubeTexture&&le.isRenderTargetTexture===!1?-1:1,V.reflectivity.value=Z.reflectivity,V.ior.value=Z.ior,V.refractionRatio.value=Z.refractionRatio;const Me=E.get(le).__maxMipLevel;Me!==void 0&&(V.maxMipLevel.value=Me)}Z.lightMap&&(V.lightMap.value=Z.lightMap,V.lightMapIntensity.value=Z.lightMapIntensity),Z.aoMap&&(V.aoMap.value=Z.aoMap,V.aoMapIntensity.value=Z.aoMapIntensity);let fe;Z.map?fe=Z.map:Z.specularMap?fe=Z.specularMap:Z.displacementMap?fe=Z.displacementMap:Z.normalMap?fe=Z.normalMap:Z.bumpMap?fe=Z.bumpMap:Z.roughnessMap?fe=Z.roughnessMap:Z.metalnessMap?fe=Z.metalnessMap:Z.alphaMap?fe=Z.alphaMap:Z.emissiveMap?fe=Z.emissiveMap:Z.clearcoatMap?fe=Z.clearcoatMap:Z.clearcoatNormalMap?fe=Z.clearcoatNormalMap:Z.clearcoatRoughnessMap?fe=Z.clearcoatRoughnessMap:Z.specularIntensityMap?fe=Z.specularIntensityMap:Z.specularTintMap?fe=Z.specularTintMap:Z.transmissionMap?fe=Z.transmissionMap:Z.thicknessMap&&(fe=Z.thicknessMap),fe!==void 0&&(fe.isWebGLRenderTarget&&(fe=fe.texture),fe.matrixAutoUpdate===!0&&fe.updateMatrix(),V.uvTransform.value.copy(fe.matrix));let be;Z.aoMap?be=Z.aoMap:Z.lightMap&&(be=Z.lightMap),be!==void 0&&(be.isWebGLRenderTarget&&(be=be.texture),be.matrixAutoUpdate===!0&&be.updateMatrix(),V.uv2Transform.value.copy(be.matrix))}function v(V,Z){V.diffuse.value.copy(Z.color),V.opacity.value=Z.opacity}function b(V,Z){V.dashSize.value=Z.dashSize,V.totalSize.value=Z.dashSize+Z.gapSize,V.scale.value=Z.scale}function M(V,Z,le,fe){V.diffuse.value.copy(Z.color),V.opacity.value=Z.opacity,V.size.value=Z.size*le,V.scale.value=fe*.5,Z.map&&(V.map.value=Z.map),Z.alphaMap&&(V.alphaMap.value=Z.alphaMap),Z.alphaTest>0&&(V.alphaTest.value=Z.alphaTest);let be;Z.map?be=Z.map:Z.alphaMap&&(be=Z.alphaMap),be!==void 0&&(be.matrixAutoUpdate===!0&&be.updateMatrix(),V.uvTransform.value.copy(be.matrix))}function N(V,Z){V.diffuse.value.copy(Z.color),V.opacity.value=Z.opacity,V.rotation.value=Z.rotation,Z.map&&(V.map.value=Z.map),Z.alphaMap&&(V.alphaMap.value=Z.alphaMap),Z.alphaTest>0&&(V.alphaTest.value=Z.alphaTest);let le;Z.map?le=Z.map:Z.alphaMap&&(le=Z.alphaMap),le!==void 0&&(le.matrixAutoUpdate===!0&&le.updateMatrix(),V.uvTransform.value.copy(le.matrix))}function F(V,Z){Z.emissiveMap&&(V.emissiveMap.value=Z.emissiveMap)}function D(V,Z){V.specular.value.copy(Z.specular),V.shininess.value=Math.max(Z.shininess,1e-4),Z.emissiveMap&&(V.emissiveMap.value=Z.emissiveMap),Z.bumpMap&&(V.bumpMap.value=Z.bumpMap,V.bumpScale.value=Z.bumpScale,Z.side===zs&&(V.bumpScale.value*=-1)),Z.normalMap&&(V.normalMap.value=Z.normalMap,V.normalScale.value.copy(Z.normalScale),Z.side===zs&&V.normalScale.value.negate()),Z.displacementMap&&(V.displacementMap.value=Z.displacementMap,V.displacementScale.value=Z.displacementScale,V.displacementBias.value=Z.displacementBias)}function O(V,Z){Z.gradientMap&&(V.gradientMap.value=Z.gradientMap),Z.emissiveMap&&(V.emissiveMap.value=Z.emissiveMap),Z.bumpMap&&(V.bumpMap.value=Z.bumpMap,V.bumpScale.value=Z.bumpScale,Z.side===zs&&(V.bumpScale.value*=-1)),Z.normalMap&&(V.normalMap.value=Z.normalMap,V.normalScale.value.copy(Z.normalScale),Z.side===zs&&V.normalScale.value.negate()),Z.displacementMap&&(V.displacementMap.value=Z.displacementMap,V.displacementScale.value=Z.displacementScale,V.displacementBias.value=Z.displacementBias)}function z(V,Z){V.roughness.value=Z.roughness,V.metalness.value=Z.metalness,Z.roughnessMap&&(V.roughnessMap.value=Z.roughnessMap),Z.metalnessMap&&(V.metalnessMap.value=Z.metalnessMap),Z.emissiveMap&&(V.emissiveMap.value=Z.emissiveMap),Z.bumpMap&&(V.bumpMap.value=Z.bumpMap,V.bumpScale.value=Z.bumpScale,Z.side===zs&&(V.bumpScale.value*=-1)),Z.normalMap&&(V.normalMap.value=Z.normalMap,V.normalScale.value.copy(Z.normalScale),Z.side===zs&&V.normalScale.value.negate()),Z.displacementMap&&(V.displacementMap.value=Z.displacementMap,V.displacementScale.value=Z.displacementScale,V.displacementBias.value=Z.displacementBias),E.get(Z).envMap&&(V.envMapIntensity.value=Z.envMapIntensity)}function B(V,Z,le){z(V,Z),V.ior.value=Z.ior,Z.sheenTint&&V.sheenTint.value.copy(Z.sheenTint),Z.clearcoat>0&&(V.clearcoat.value=Z.clearcoat,V.clearcoatRoughness.value=Z.clearcoatRoughness,Z.clearcoatMap&&(V.clearcoatMap.value=Z.clearcoatMap),Z.clearcoatRoughnessMap&&(V.clearcoatRoughnessMap.value=Z.clearcoatRoughnessMap),Z.clearcoatNormalMap&&(V.clearcoatNormalScale.value.copy(Z.clearcoatNormalScale),V.clearcoatNormalMap.value=Z.clearcoatNormalMap,Z.side===zs&&V.clearcoatNormalScale.value.negate())),Z.transmission>0&&(V.transmission.value=Z.transmission,V.transmissionSamplerMap.value=le.texture,V.transmissionSamplerSize.value.set(le.width,le.height),Z.transmissionMap&&(V.transmissionMap.value=Z.transmissionMap),V.thickness.value=Z.thickness,Z.thicknessMap&&(V.thicknessMap.value=Z.thicknessMap),V.attenuationDistance.value=Z.attenuationDistance,V.attenuationTint.value.copy(Z.attenuationTint)),V.specularIntensity.value=Z.specularIntensity,V.specularTint.value.copy(Z.specularTint),Z.specularIntensityMap&&(V.specularIntensityMap.value=Z.specularIntensityMap),Z.specularTintMap&&(V.specularTintMap.value=Z.specularTintMap)}function W(V,Z){Z.matcap&&(V.matcap.value=Z.matcap),Z.bumpMap&&(V.bumpMap.value=Z.bumpMap,V.bumpScale.value=Z.bumpScale,Z.side===zs&&(V.bumpScale.value*=-1)),Z.normalMap&&(V.normalMap.value=Z.normalMap,V.normalScale.value.copy(Z.normalScale),Z.side===zs&&V.normalScale.value.negate()),Z.displacementMap&&(V.displacementMap.value=Z.displacementMap,V.displacementScale.value=Z.displacementScale,V.displacementBias.value=Z.displacementBias)}function G(V,Z){Z.displacementMap&&(V.displacementMap.value=Z.displacementMap,V.displacementScale.value=Z.displacementScale,V.displacementBias.value=Z.displacementBias)}function K(V,Z){Z.displacementMap&&(V.displacementMap.value=Z.displacementMap,V.displacementScale.value=Z.displacementScale,V.displacementBias.value=Z.displacementBias),V.referencePosition.value.copy(Z.referencePosition),V.nearDistance.value=Z.nearDistance,V.farDistance.value=Z.farDistance}function J(V,Z){Z.bumpMap&&(V.bumpMap.value=Z.bumpMap,V.bumpScale.value=Z.bumpScale,Z.side===zs&&(V.bumpScale.value*=-1)),Z.normalMap&&(V.normalMap.value=Z.normalMap,V.normalScale.value.copy(Z.normalScale),Z.side===zs&&V.normalScale.value.negate()),Z.displacementMap&&(V.displacementMap.value=Z.displacementMap,V.displacementScale.value=Z.displacementScale,V.displacementBias.value=Z.displacementBias)}return{refreshFogUniforms:i,refreshMaterialUniforms:u}}function R9(){const E=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return E.style.display="block",E}function Mi(E={}){const i=E.canvas!==void 0?E.canvas:R9(),u=E.context!==void 0?E.context:null,g=E.alpha!==void 0?E.alpha:!1,v=E.depth!==void 0?E.depth:!0,b=E.stencil!==void 0?E.stencil:!0,M=E.antialias!==void 0?E.antialias:!1,N=E.premultipliedAlpha!==void 0?E.premultipliedAlpha:!0,F=E.preserveDrawingBuffer!==void 0?E.preserveDrawingBuffer:!1,D=E.powerPreference!==void 0?E.powerPreference:"default",O=E.failIfMajorPerformanceCaveat!==void 0?E.failIfMajorPerformanceCaveat:!1;let z=null,B=null;const W=[],G=[];this.domElement=i,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=Po,this.physicallyCorrectLights=!1,this.toneMapping=Vm,this.toneMappingExposure=1;const K=this;let J=!1,V=0,Z=0,le=null,fe=-1,be=null;const Me=new Si,ce=new Si;let We=null,Ke=i.width,Ye=i.height,xe=1,ue=null,Se=null;const je=new Si(0,0,Ke,Ye),rt=new Si(0,0,Ke,Ye);let et=!1;const ot=[],Et=new n_;let tn=!1,ln=!1,Vt=null;const En=new cr,Bt=new He,sn={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function Mn(){return le===null?xe:1}let St=u;function zn(Ee,ht){for(let lt=0;lt<Ee.length;lt++){const xt=Ee[lt],Xt=i.getContext(xt,ht);if(Xt!==null)return Xt}return null}try{const Ee={alpha:g,depth:v,stencil:b,antialias:M,premultipliedAlpha:N,preserveDrawingBuffer:F,powerPreference:D,failIfMajorPerformanceCaveat:O};if(i.addEventListener("webglcontextlost",qn,!1),i.addEventListener("webglcontextrestored",Ir,!1),St===null){const ht=["webgl2","webgl","experimental-webgl"];if(K.isWebGL1Renderer===!0&&ht.shift(),St=zn(ht,Ee),St===null)throw zn(ht)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}St.getShaderPrecisionFormat===void 0&&(St.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(Ee){throw console.error("THREE.WebGLRenderer: "+Ee.message),Ee}let Bn,wn,Nn,$n,Ft,Jt,nn,Dn,vn,Re,Ce,ye,se,we,Fe,Q,Ze,Je,at,he,It,Le,_t;function Wt(){Bn=new t7(St),wn=new q8(St,Bn,E),Bn.init(wn),Le=new I9(St,Bn,wn),Nn=new E9(St,Bn,wn),ot[0]=1029,$n=new i7(St),Ft=new m9,Jt=new A9(St,Bn,Nn,Ft,wn,Le,$n),nn=new Y8(K),Dn=new e7(K),vn=new y5(St,wn),_t=new H8(St,Bn,vn,wn),Re=new n7(St,vn,$n,_t),Ce=new l7(St,Re,vn,$n),at=new o7(St),Q=new X8(Ft),ye=new f9(K,nn,Dn,Bn,wn,_t,Q),se=new N9(Ft),we=new y9(Ft),Fe=new S9(Bn,wn),Je=new G8(K,nn,Nn,Ce,N),Ze=new iR(K,Ce,wn),he=new j8(St,Bn,$n,wn),It=new r7(St,Bn,$n,wn),$n.programs=ye.programs,K.capabilities=wn,K.extensions=Bn,K.properties=Ft,K.renderLists=we,K.shadowMap=Ze,K.state=Nn,K.info=$n}Wt();const on=new k9(K,St);this.xr=on,this.getContext=function(){return St},this.getContextAttributes=function(){return St.getContextAttributes()},this.forceContextLoss=function(){const Ee=Bn.get("WEBGL_lose_context");Ee&&Ee.loseContext()},this.forceContextRestore=function(){const Ee=Bn.get("WEBGL_lose_context");Ee&&Ee.restoreContext()},this.getPixelRatio=function(){return xe},this.setPixelRatio=function(Ee){Ee!==void 0&&(xe=Ee,this.setSize(Ke,Ye,!1))},this.getSize=function(Ee){return Ee.set(Ke,Ye)},this.setSize=function(Ee,ht,lt){if(on.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}Ke=Ee,Ye=ht,i.width=Math.floor(Ee*xe),i.height=Math.floor(ht*xe),lt!==!1&&(i.style.width=Ee+"px",i.style.height=ht+"px"),this.setViewport(0,0,Ee,ht)},this.getDrawingBufferSize=function(Ee){return Ee.set(Ke*xe,Ye*xe).floor()},this.setDrawingBufferSize=function(Ee,ht,lt){Ke=Ee,Ye=ht,xe=lt,i.width=Math.floor(Ee*lt),i.height=Math.floor(ht*lt),this.setViewport(0,0,Ee,ht)},this.getCurrentViewport=function(Ee){return Ee.copy(Me)},this.getViewport=function(Ee){return Ee.copy(je)},this.setViewport=function(Ee,ht,lt,xt){Ee.isVector4?je.set(Ee.x,Ee.y,Ee.z,Ee.w):je.set(Ee,ht,lt,xt),Nn.viewport(Me.copy(je).multiplyScalar(xe).floor())},this.getScissor=function(Ee){return Ee.copy(rt)},this.setScissor=function(Ee,ht,lt,xt){Ee.isVector4?rt.set(Ee.x,Ee.y,Ee.z,Ee.w):rt.set(Ee,ht,lt,xt),Nn.scissor(ce.copy(rt).multiplyScalar(xe).floor())},this.getScissorTest=function(){return et},this.setScissorTest=function(Ee){Nn.setScissorTest(et=Ee)},this.setOpaqueSort=function(Ee){ue=Ee},this.setTransparentSort=function(Ee){Se=Ee},this.getClearColor=function(Ee){return Ee.copy(Je.getClearColor())},this.setClearColor=function(){Je.setClearColor.apply(Je,arguments)},this.getClearAlpha=function(){return Je.getClearAlpha()},this.setClearAlpha=function(){Je.setClearAlpha.apply(Je,arguments)},this.clear=function(Ee,ht,lt){let xt=0;(Ee===void 0||Ee)&&(xt|=16384),(ht===void 0||ht)&&(xt|=256),(lt===void 0||lt)&&(xt|=1024),St.clear(xt)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){i.removeEventListener("webglcontextlost",qn,!1),i.removeEventListener("webglcontextrestored",Ir,!1),we.dispose(),Fe.dispose(),Ft.dispose(),nn.dispose(),Dn.dispose(),Ce.dispose(),_t.dispose(),on.dispose(),on.removeEventListener("sessionstart",Rc),on.removeEventListener("sessionend",nf),Vt&&(Vt.dispose(),Vt=null),Ns.stop()};function qn(Ee){Ee.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),J=!0}function Ir(){console.log("THREE.WebGLRenderer: Context Restored."),J=!1;const Ee=$n.autoReset,ht=Ze.enabled,lt=Ze.autoUpdate,xt=Ze.needsUpdate,Xt=Ze.type;Wt(),$n.autoReset=Ee,Ze.enabled=ht,Ze.autoUpdate=lt,Ze.needsUpdate=xt,Ze.type=Xt}function Sr(Ee){const ht=Ee.target;ht.removeEventListener("dispose",Sr),Kr(ht)}function Kr(Ee){ir(Ee),Ft.remove(Ee)}function ir(Ee){const ht=Ft.get(Ee).programs;ht!==void 0&&ht.forEach(function(lt){ye.releaseProgram(lt)})}function Ui(Ee,ht){Ee.render(function(lt){K.renderBufferImmediate(lt,ht)})}this.renderBufferImmediate=function(Ee,ht){_t.initAttributes();const lt=Ft.get(Ee);Ee.hasPositions&&!lt.position&&(lt.position=St.createBuffer()),Ee.hasNormals&&!lt.normal&&(lt.normal=St.createBuffer()),Ee.hasUvs&&!lt.uv&&(lt.uv=St.createBuffer()),Ee.hasColors&&!lt.color&&(lt.color=St.createBuffer());const xt=ht.getAttributes();Ee.hasPositions&&(St.bindBuffer(34962,lt.position),St.bufferData(34962,Ee.positionArray,35048),_t.enableAttribute(xt.position.location),St.vertexAttribPointer(xt.position.location,3,5126,!1,0,0)),Ee.hasNormals&&(St.bindBuffer(34962,lt.normal),St.bufferData(34962,Ee.normalArray,35048),_t.enableAttribute(xt.normal.location),St.vertexAttribPointer(xt.normal.location,3,5126,!1,0,0)),Ee.hasUvs&&(St.bindBuffer(34962,lt.uv),St.bufferData(34962,Ee.uvArray,35048),_t.enableAttribute(xt.uv.location),St.vertexAttribPointer(xt.uv.location,2,5126,!1,0,0)),Ee.hasColors&&(St.bindBuffer(34962,lt.color),St.bufferData(34962,Ee.colorArray,35048),_t.enableAttribute(xt.color.location),St.vertexAttribPointer(xt.color.location,3,5126,!1,0,0)),_t.disableUnusedAttributes(),St.drawArrays(4,0,Ee.count),Ee.count=0},this.renderBufferDirect=function(Ee,ht,lt,xt,Xt,Xn){ht===null&&(ht=sn);const Wn=Xt.isMesh&&Xt.matrixWorld.determinant()<0,Zn=hs(Ee,ht,xt,Xt);Nn.setMaterial(xt,Wn);let dr=lt.index;const sr=lt.attributes.position;if(dr===null){if(sr===void 0||sr.count===0)return}else if(dr.count===0)return;let br=1;xt.wireframe===!0&&(dr=Re.getWireframeAttribute(lt),br=2),(lt.morphAttributes.position!==void 0||lt.morphAttributes.normal!==void 0)&&at.update(Xt,lt,xt,Zn),_t.setup(Xt,xt,Zn,lt,dr);let zr,or=he;dr!==null&&(zr=vn.get(dr),or=It,or.setIndex(zr));const At=dr!==null?dr.count:sr.count,yi=lt.drawRange.start*br,Ha=lt.drawRange.count*br,ca=Xn!==null?Xn.start*br:0,ja=Xn!==null?Xn.count*br:1/0,Us=Math.max(yi,ca),oi=Math.min(At,yi+Ha,ca+ja)-1,ds=Math.max(0,oi-Us+1);if(ds!==0){if(Xt.isMesh)xt.wireframe===!0?(Nn.setLineWidth(xt.wireframeLinewidth*Mn()),or.setMode(1)):or.setMode(4);else if(Xt.isLine){let li=xt.linewidth;li===void 0&&(li=1),Nn.setLineWidth(li*Mn()),Xt.isLineSegments?or.setMode(1):Xt.isLineLoop?or.setMode(2):or.setMode(3)}else Xt.isPoints?or.setMode(0):Xt.isSprite&&or.setMode(4);if(Xt.isInstancedMesh)or.renderInstances(Us,ds,Xt.count);else if(lt.isInstancedBufferGeometry){const li=Math.min(lt.instanceCount,lt._maxInstanceCount);or.renderInstances(Us,ds,li)}else or.render(Us,ds)}},this.compile=function(Ee,ht){B=Fe.get(Ee),B.init(),G.push(B),Ee.traverseVisible(function(lt){lt.isLight&&lt.layers.test(ht.layers)&&(B.pushLight(lt),lt.castShadow&&B.pushShadow(lt))}),B.setupLights(K.physicallyCorrectLights),Ee.traverse(function(lt){const xt=lt.material;if(xt)if(Array.isArray(xt))for(let Xt=0;Xt<xt.length;Xt++){const Xn=xt[Xt];$l(Xn,Ee,lt)}else $l(xt,Ee,lt)}),G.pop(),B=null};let Ti=null;function Or(Ee){Ti&&Ti(Ee)}function Rc(){Ns.stop()}function nf(){Ns.start()}const Ns=new GN;Ns.setAnimationLoop(Or),typeof window!="undefined"&&Ns.setContext(window),this.setAnimationLoop=function(Ee){Ti=Ee,on.setAnimationLoop(Ee),Ee===null?Ns.stop():Ns.start()},on.addEventListener("sessionstart",Rc),on.addEventListener("sessionend",nf),this.render=function(Ee,ht){if(ht!==void 0&&ht.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(J===!0)return;Ee.autoUpdate===!0&&Ee.updateMatrixWorld(),ht.parent===null&&ht.updateMatrixWorld(),on.enabled===!0&&on.isPresenting===!0&&(on.cameraAutoUpdate===!0&&on.updateCamera(ht),ht=on.getCamera()),Ee.isScene===!0&&Ee.onBeforeRender(K,Ee,ht,le),B=Fe.get(Ee,G.length),B.init(),G.push(B),En.multiplyMatrices(ht.projectionMatrix,ht.matrixWorldInverse),Et.setFromProjectionMatrix(En),ln=this.localClippingEnabled,tn=Q.init(this.clippingPlanes,ln,ht),z=we.get(Ee,W.length),z.init(),W.push(z),Yi(Ee,ht,0,K.sortObjects),z.finish(),K.sortObjects===!0&&z.sort(ue,Se),tn===!0&&Q.beginShadows();const lt=B.state.shadowsArray;if(Ze.render(lt,Ee,ht),tn===!0&&Q.endShadows(),this.info.autoReset===!0&&this.info.reset(),Je.render(z,Ee),B.setupLights(K.physicallyCorrectLights),ht.isArrayCamera){const xt=ht.cameras;for(let Xt=0,Xn=xt.length;Xt<Xn;Xt++){const Wn=xt[Xt];Wa(z,Ee,Wn,Wn.viewport)}}else Wa(z,Ee,ht);le!==null&&(Jt.updateMultisampleRenderTarget(le),Jt.updateRenderTargetMipmap(le)),Ee.isScene===!0&&Ee.onAfterRender(K,Ee,ht),Nn.buffers.depth.setTest(!0),Nn.buffers.depth.setMask(!0),Nn.buffers.color.setMask(!0),Nn.setPolygonOffset(!1),_t.resetDefaultState(),fe=-1,be=null,G.pop(),G.length>0?B=G[G.length-1]:B=null,W.pop(),W.length>0?z=W[W.length-1]:z=null};function Yi(Ee,ht,lt,xt){if(Ee.visible===!1)return;if(Ee.layers.test(ht.layers)){if(Ee.isGroup)lt=Ee.renderOrder;else if(Ee.isLOD)Ee.autoUpdate===!0&&Ee.update(ht);else if(Ee.isLight)B.pushLight(Ee),Ee.castShadow&&B.pushShadow(Ee);else if(Ee.isSprite){if(!Ee.frustumCulled||Et.intersectsSprite(Ee)){xt&&Bt.setFromMatrixPosition(Ee.matrixWorld).applyMatrix4(En);const Wn=Ce.update(Ee),Zn=Ee.material;Zn.visible&&z.push(Ee,Wn,Zn,lt,Bt.z,null)}}else if(Ee.isImmediateRenderObject)xt&&Bt.setFromMatrixPosition(Ee.matrixWorld).applyMatrix4(En),z.push(Ee,null,Ee.material,lt,Bt.z,null);else if((Ee.isMesh||Ee.isLine||Ee.isPoints)&&(Ee.isSkinnedMesh&&Ee.skeleton.frame!==$n.render.frame&&(Ee.skeleton.update(),Ee.skeleton.frame=$n.render.frame),!Ee.frustumCulled||Et.intersectsObject(Ee))){xt&&Bt.setFromMatrixPosition(Ee.matrixWorld).applyMatrix4(En);const Wn=Ce.update(Ee),Zn=Ee.material;if(Array.isArray(Zn)){const dr=Wn.groups;for(let sr=0,br=dr.length;sr<br;sr++){const zr=dr[sr],or=Zn[zr.materialIndex];or&&or.visible&&z.push(Ee,Wn,or,lt,Bt.z,zr)}}else Zn.visible&&z.push(Ee,Wn,Zn,lt,Bt.z,null)}}const Xn=Ee.children;for(let Wn=0,Zn=Xn.length;Wn<Zn;Wn++)Yi(Xn[Wn],ht,lt,xt)}function Wa(Ee,ht,lt,xt){const Xt=Ee.opaque,Xn=Ee.transmissive,Wn=Ee.transparent;B.setupLightsView(lt),Xn.length>0&&rf(Xt,ht,lt),xt&&Nn.viewport(Me.copy(xt)),Xt.length>0&&$s(Xt,ht,lt),Xn.length>0&&$s(Xn,ht,lt),Wn.length>0&&$s(Wn,ht,lt)}function rf(Ee,ht,lt){if(Vt===null){const Wn=M===!0&&wn.isWebGL2===!0?zN:Cc;Vt=new Wn(1024,1024,{generateMipmaps:!0,type:Le.convert(r0)!==null?r0:o0,minFilter:Q1,magFilter:la,wrapS:fl,wrapT:fl})}const xt=K.getRenderTarget();K.setRenderTarget(Vt),K.clear();const Xt=K.toneMapping;K.toneMapping=Vm,$s(Ee,ht,lt),K.toneMapping=Xt,Jt.updateMultisampleRenderTarget(Vt),Jt.updateRenderTargetMipmap(Vt),K.setRenderTarget(xt)}function $s(Ee,ht,lt){const xt=ht.isScene===!0?ht.overrideMaterial:null;for(let Xt=0,Xn=Ee.length;Xt<Xn;Xt++){const Wn=Ee[Xt],Zn=Wn.object,dr=Wn.geometry,sr=xt===null?Wn.material:xt,br=Wn.group;Zn.layers.test(lt.layers)&&Ru(Zn,ht,lt,dr,sr,br)}}function Ru(Ee,ht,lt,xt,Xt,Xn){if(Ee.onBeforeRender(K,ht,lt,xt,Xt,Xn),Ee.modelViewMatrix.multiplyMatrices(lt.matrixWorldInverse,Ee.matrixWorld),Ee.normalMatrix.getNormalMatrix(Ee.modelViewMatrix),Ee.isImmediateRenderObject){const Wn=hs(lt,ht,Xt,Ee);Nn.setMaterial(Xt),_t.reset(),Ui(Ee,Wn)}else Xt.transparent===!0&&Xt.side===a0?(Xt.side=zs,Xt.needsUpdate=!0,K.renderBufferDirect(lt,ht,xt,Xt,Ee,Xn),Xt.side=wv,Xt.needsUpdate=!0,K.renderBufferDirect(lt,ht,xt,Xt,Ee,Xn),Xt.side=a0):K.renderBufferDirect(lt,ht,xt,Xt,Ee,Xn);Ee.onAfterRender(K,ht,lt,xt,Xt,Xn)}function $l(Ee,ht,lt){ht.isScene!==!0&&(ht=sn);const xt=Ft.get(Ee),Xt=B.state.lights,Xn=B.state.shadowsArray,Wn=Xt.state.version,Zn=ye.getParameters(Ee,Xt.state,Xn,ht,lt),dr=ye.getProgramCacheKey(Zn);let sr=xt.programs;xt.environment=Ee.isMeshStandardMaterial?ht.environment:null,xt.fog=ht.fog,xt.envMap=(Ee.isMeshStandardMaterial?Dn:nn).get(Ee.envMap||xt.environment),sr===void 0&&(Ee.addEventListener("dispose",Sr),sr=new Map,xt.programs=sr);let br=sr.get(dr);if(br!==void 0){if(xt.currentProgram===br&&xt.lightsStateVersion===Wn)return Ga(Ee,Zn),br}else Zn.uniforms=ye.getUniforms(Ee),Ee.onBuild(Zn,K),Ee.onBeforeCompile(Zn,K),br=ye.acquireProgram(Zn,dr),sr.set(dr,br),xt.uniforms=Zn.uniforms;const zr=xt.uniforms;(!Ee.isShaderMaterial&&!Ee.isRawShaderMaterial||Ee.clipping===!0)&&(zr.clippingPlanes=Q.uniform),Ga(Ee,Zn),xt.needsLights=Hn(Ee),xt.lightsStateVersion=Wn,xt.needsLights&&(zr.ambientLightColor.value=Xt.state.ambient,zr.lightProbe.value=Xt.state.probe,zr.directionalLights.value=Xt.state.directional,zr.directionalLightShadows.value=Xt.state.directionalShadow,zr.spotLights.value=Xt.state.spot,zr.spotLightShadows.value=Xt.state.spotShadow,zr.rectAreaLights.value=Xt.state.rectArea,zr.ltc_1.value=Xt.state.rectAreaLTC1,zr.ltc_2.value=Xt.state.rectAreaLTC2,zr.pointLights.value=Xt.state.point,zr.pointLightShadows.value=Xt.state.pointShadow,zr.hemisphereLights.value=Xt.state.hemi,zr.directionalShadowMap.value=Xt.state.directionalShadowMap,zr.directionalShadowMatrix.value=Xt.state.directionalShadowMatrix,zr.spotShadowMap.value=Xt.state.spotShadowMap,zr.spotShadowMatrix.value=Xt.state.spotShadowMatrix,zr.pointShadowMap.value=Xt.state.pointShadowMap,zr.pointShadowMatrix.value=Xt.state.pointShadowMatrix);const or=br.getUniforms(),At=Jp.seqWithValue(or.seq,zr);return xt.currentProgram=br,xt.uniformsList=At,br}function Ga(Ee,ht){const lt=Ft.get(Ee);lt.outputEncoding=ht.outputEncoding,lt.instancing=ht.instancing,lt.skinning=ht.skinning,lt.morphTargets=ht.morphTargets,lt.morphNormals=ht.morphNormals,lt.numClippingPlanes=ht.numClippingPlanes,lt.numIntersection=ht.numClipIntersection,lt.vertexAlphas=ht.vertexAlphas,lt.vertexTangents=ht.vertexTangents}function hs(Ee,ht,lt,xt){ht.isScene!==!0&&(ht=sn),Jt.resetTextureUnits();const Xt=ht.fog,Xn=lt.isMeshStandardMaterial?ht.environment:null,Wn=le===null?K.outputEncoding:le.texture.encoding,Zn=(lt.isMeshStandardMaterial?Dn:nn).get(lt.envMap||Xn),dr=lt.vertexColors===!0&&!!xt.geometry&&!!xt.geometry.attributes.color&&xt.geometry.attributes.color.itemSize===4,sr=!!xt.geometry&&!!xt.geometry.attributes.tangent,br=!!xt.geometry&&!!xt.geometry.morphAttributes.position,zr=!!xt.geometry&&!!xt.geometry.morphAttributes.normal,or=Ft.get(lt),At=B.state.lights;if(tn===!0&&(ln===!0||Ee!==be)){const li=Ee===be&&lt.id===fe;Q.setState(lt,Ee,li)}let yi=!1;lt.version===or.__version?(or.needsLights&&or.lightsStateVersion!==At.state.version||or.outputEncoding!==Wn||xt.isInstancedMesh&&or.instancing===!1||!xt.isInstancedMesh&&or.instancing===!0||xt.isSkinnedMesh&&or.skinning===!1||!xt.isSkinnedMesh&&or.skinning===!0||or.envMap!==Zn||lt.fog&&or.fog!==Xt||or.numClippingPlanes!==void 0&&(or.numClippingPlanes!==Q.numPlanes||or.numIntersection!==Q.numIntersection)||or.vertexAlphas!==dr||or.vertexTangents!==sr||or.morphTargets!==br||or.morphNormals!==zr)&&(yi=!0):(yi=!0,or.__version=lt.version);let Ha=or.currentProgram;yi===!0&&(Ha=$l(lt,ht,xt));let ca=!1,ja=!1,Us=!1;const oi=Ha.getUniforms(),ds=or.uniforms;if(Nn.useProgram(Ha.program)&&(ca=!0,ja=!0,Us=!0),lt.id!==fe&&(fe=lt.id,ja=!0),ca||be!==Ee){if(oi.setValue(St,"projectionMatrix",Ee.projectionMatrix),wn.logarithmicDepthBuffer&&oi.setValue(St,"logDepthBufFC",2/(Math.log(Ee.far+1)/Math.LN2)),be!==Ee&&(be=Ee,ja=!0,Us=!0),lt.isShaderMaterial||lt.isMeshPhongMaterial||lt.isMeshToonMaterial||lt.isMeshStandardMaterial||lt.envMap){const li=oi.map.cameraPosition;li!==void 0&&li.setValue(St,Bt.setFromMatrixPosition(Ee.matrixWorld))}(lt.isMeshPhongMaterial||lt.isMeshToonMaterial||lt.isMeshLambertMaterial||lt.isMeshBasicMaterial||lt.isMeshStandardMaterial||lt.isShaderMaterial)&&oi.setValue(St,"isOrthographic",Ee.isOrthographicCamera===!0),(lt.isMeshPhongMaterial||lt.isMeshToonMaterial||lt.isMeshLambertMaterial||lt.isMeshBasicMaterial||lt.isMeshStandardMaterial||lt.isShaderMaterial||lt.isShadowMaterial||xt.isSkinnedMesh)&&oi.setValue(St,"viewMatrix",Ee.matrixWorldInverse)}if(xt.isSkinnedMesh){oi.setOptional(St,xt,"bindMatrix"),oi.setOptional(St,xt,"bindMatrixInverse");const li=xt.skeleton;li&&(wn.floatVertexTextures?(li.boneTexture===null&&li.computeBoneTexture(),oi.setValue(St,"boneTexture",li.boneTexture,Jt),oi.setValue(St,"boneTextureSize",li.boneTextureSize)):oi.setOptional(St,li,"boneMatrices"))}return(ja||or.receiveShadow!==xt.receiveShadow)&&(or.receiveShadow=xt.receiveShadow,oi.setValue(St,"receiveShadow",xt.receiveShadow)),ja&&(oi.setValue(St,"toneMappingExposure",K.toneMappingExposure),or.needsLights&&uo(ds,Us),Xt&&lt.fog&&se.refreshFogUniforms(ds,Xt),se.refreshMaterialUniforms(ds,lt,xe,Ye,Vt),Jp.upload(St,or.uniformsList,ds,Jt)),lt.isShaderMaterial&&lt.uniformsNeedUpdate===!0&&(Jp.upload(St,or.uniformsList,ds,Jt),lt.uniformsNeedUpdate=!1),lt.isSpriteMaterial&&oi.setValue(St,"center",xt.center),oi.setValue(St,"modelViewMatrix",xt.modelViewMatrix),oi.setValue(St,"normalMatrix",xt.normalMatrix),oi.setValue(St,"modelMatrix",xt.matrixWorld),Ha}function uo(Ee,ht){Ee.ambientLightColor.needsUpdate=ht,Ee.lightProbe.needsUpdate=ht,Ee.directionalLights.needsUpdate=ht,Ee.directionalLightShadows.needsUpdate=ht,Ee.pointLights.needsUpdate=ht,Ee.pointLightShadows.needsUpdate=ht,Ee.spotLights.needsUpdate=ht,Ee.spotLightShadows.needsUpdate=ht,Ee.rectAreaLights.needsUpdate=ht,Ee.hemisphereLights.needsUpdate=ht}function Hn(Ee){return Ee.isMeshLambertMaterial||Ee.isMeshToonMaterial||Ee.isMeshPhongMaterial||Ee.isMeshStandardMaterial||Ee.isShadowMaterial||Ee.isShaderMaterial&&Ee.lights===!0}this.getActiveCubeFace=function(){return V},this.getActiveMipmapLevel=function(){return Z},this.getRenderTarget=function(){return le},this.setRenderTarget=function(Ee,ht=0,lt=0){le=Ee,V=ht,Z=lt,Ee&&Ft.get(Ee).__webglFramebuffer===void 0&&Jt.setupRenderTarget(Ee);let xt=null,Xt=!1,Xn=!1;if(Ee){const Zn=Ee.texture;(Zn.isDataTexture3D||Zn.isDataTexture2DArray)&&(Xn=!0);const dr=Ft.get(Ee).__webglFramebuffer;Ee.isWebGLCubeRenderTarget?(xt=dr[ht],Xt=!0):Ee.isWebGLMultisampleRenderTarget?xt=Ft.get(Ee).__webglMultisampledFramebuffer:xt=dr,Me.copy(Ee.viewport),ce.copy(Ee.scissor),We=Ee.scissorTest}else Me.copy(je).multiplyScalar(xe).floor(),ce.copy(rt).multiplyScalar(xe).floor(),We=et;if(Nn.bindFramebuffer(36160,xt)&&wn.drawBuffers){let Zn=!1;if(Ee)if(Ee.isWebGLMultipleRenderTargets){const dr=Ee.texture;if(ot.length!==dr.length||ot[0]!==36064){for(let sr=0,br=dr.length;sr<br;sr++)ot[sr]=36064+sr;ot.length=dr.length,Zn=!0}}else(ot.length!==1||ot[0]!==36064)&&(ot[0]=36064,ot.length=1,Zn=!0);else(ot.length!==1||ot[0]!==1029)&&(ot[0]=1029,ot.length=1,Zn=!0);Zn&&(wn.isWebGL2?St.drawBuffers(ot):Bn.get("WEBGL_draw_buffers").drawBuffersWEBGL(ot))}if(Nn.viewport(Me),Nn.scissor(ce),Nn.setScissorTest(We),Xt){const Zn=Ft.get(Ee.texture);St.framebufferTexture2D(36160,36064,34069+ht,Zn.__webglTexture,lt)}else if(Xn){const Zn=Ft.get(Ee.texture),dr=ht||0;St.framebufferTextureLayer(36160,36064,Zn.__webglTexture,lt||0,dr)}fe=-1},this.readRenderTargetPixels=function(Ee,ht,lt,xt,Xt,Xn,Wn){if(!(Ee&&Ee.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Zn=Ft.get(Ee).__webglFramebuffer;if(Ee.isWebGLCubeRenderTarget&&Wn!==void 0&&(Zn=Zn[Wn]),Zn){Nn.bindFramebuffer(36160,Zn);try{const dr=Ee.texture,sr=dr.format,br=dr.type;if(sr!==ml&&Le.convert(sr)!==St.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const zr=br===r0&&(Bn.has("EXT_color_buffer_half_float")||wn.isWebGL2&&Bn.has("EXT_color_buffer_float"));if(br!==o0&&Le.convert(br)!==St.getParameter(35738)&&!(br===Um&&(wn.isWebGL2||Bn.has("OES_texture_float")||Bn.has("WEBGL_color_buffer_float")))&&!zr){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}St.checkFramebufferStatus(36160)===36053?ht>=0&&ht<=Ee.width-xt&&lt>=0&&lt<=Ee.height-Xt&&St.readPixels(ht,lt,xt,Xt,Le.convert(sr),Le.convert(br),Xn):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const dr=le!==null?Ft.get(le).__webglFramebuffer:null;Nn.bindFramebuffer(36160,dr)}}},this.copyFramebufferToTexture=function(Ee,ht,lt=0){const xt=Math.pow(2,-lt),Xt=Math.floor(ht.image.width*xt),Xn=Math.floor(ht.image.height*xt);let Wn=Le.convert(ht.format);wn.isWebGL2&&(Wn===6407&&(Wn=32849),Wn===6408&&(Wn=32856)),Jt.setTexture2D(ht,0),St.copyTexImage2D(3553,lt,Wn,Ee.x,Ee.y,Xt,Xn,0),Nn.unbindTexture()},this.copyTextureToTexture=function(Ee,ht,lt,xt=0){const Xt=ht.image.width,Xn=ht.image.height,Wn=Le.convert(lt.format),Zn=Le.convert(lt.type);Jt.setTexture2D(lt,0),St.pixelStorei(37440,lt.flipY),St.pixelStorei(37441,lt.premultiplyAlpha),St.pixelStorei(3317,lt.unpackAlignment),ht.isDataTexture?St.texSubImage2D(3553,xt,Ee.x,Ee.y,Xt,Xn,Wn,Zn,ht.image.data):ht.isCompressedTexture?St.compressedTexSubImage2D(3553,xt,Ee.x,Ee.y,ht.mipmaps[0].width,ht.mipmaps[0].height,Wn,ht.mipmaps[0].data):St.texSubImage2D(3553,xt,Ee.x,Ee.y,Wn,Zn,ht.image),xt===0&&lt.generateMipmaps&&St.generateMipmap(3553),Nn.unbindTexture()},this.copyTextureToTexture3D=function(Ee,ht,lt,xt,Xt=0){if(K.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const Xn=Ee.max.x-Ee.min.x+1,Wn=Ee.max.y-Ee.min.y+1,Zn=Ee.max.z-Ee.min.z+1,dr=Le.convert(xt.format),sr=Le.convert(xt.type);let br;if(xt.isDataTexture3D)Jt.setTexture3D(xt,0),br=32879;else if(xt.isDataTexture2DArray)Jt.setTexture2DArray(xt,0),br=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}St.pixelStorei(37440,xt.flipY),St.pixelStorei(37441,xt.premultiplyAlpha),St.pixelStorei(3317,xt.unpackAlignment);const zr=St.getParameter(3314),or=St.getParameter(32878),At=St.getParameter(3316),yi=St.getParameter(3315),Ha=St.getParameter(32877),ca=lt.isCompressedTexture?lt.mipmaps[0]:lt.image;St.pixelStorei(3314,ca.width),St.pixelStorei(32878,ca.height),St.pixelStorei(3316,Ee.min.x),St.pixelStorei(3315,Ee.min.y),St.pixelStorei(32877,Ee.min.z),lt.isDataTexture||lt.isDataTexture3D?St.texSubImage3D(br,Xt,ht.x,ht.y,ht.z,Xn,Wn,Zn,dr,sr,ca.data):lt.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),St.compressedTexSubImage3D(br,Xt,ht.x,ht.y,ht.z,Xn,Wn,Zn,dr,ca.data)):St.texSubImage3D(br,Xt,ht.x,ht.y,ht.z,Xn,Wn,Zn,dr,sr,ca),St.pixelStorei(3314,zr),St.pixelStorei(32878,or),St.pixelStorei(3316,At),St.pixelStorei(3315,yi),St.pixelStorei(32877,Ha),Xt===0&&xt.generateMipmaps&&St.generateMipmap(br),Nn.unbindTexture()},this.initTexture=function(Ee){Jt.setTexture2D(Ee,0),Nn.unbindTexture()},this.resetState=function(){V=0,Z=0,le=null,Nn.reset(),_t.reset()},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class L9 extends Mi{}L9.prototype.isWebGL1Renderer=!0;class aR extends ai{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(i,u){return super.copy(i,u),i.background!==null&&(this.background=i.background.clone()),i.environment!==null&&(this.environment=i.environment.clone()),i.fog!==null&&(this.fog=i.fog.clone()),i.overrideMaterial!==null&&(this.overrideMaterial=i.overrideMaterial.clone()),this.autoUpdate=i.autoUpdate,this.matrixAutoUpdate=i.matrixAutoUpdate,this}toJSON(i){const u=super.toJSON(i);return this.fog!==null&&(u.object.fog=this.fog.toJSON()),u}}aR.prototype.isScene=!0;class kv{constructor(i,u){this.array=i,this.stride=u,this.count=i!==void 0?i.length/u:0,this.usage=Sv,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Ic()}onUploadCallback(){}set needsUpdate(i){i===!0&&this.version++}setUsage(i){return this.usage=i,this}copy(i){return this.array=new i.array.constructor(i.array),this.count=i.count,this.stride=i.stride,this.usage=i.usage,this}copyAt(i,u,g){i*=this.stride,g*=u.stride;for(let v=0,b=this.stride;v<b;v++)this.array[i+v]=u.array[g+v];return this}set(i,u=0){return this.array.set(i,u),this}clone(i){i.arrayBuffers===void 0&&(i.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Ic()),i.arrayBuffers[this.array.buffer._uuid]===void 0&&(i.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const u=new this.array.constructor(i.arrayBuffers[this.array.buffer._uuid]),g=new this.constructor(u,this.stride);return g.setUsage(this.usage),g}onUpload(i){return this.onUploadCallback=i,this}toJSON(i){return i.arrayBuffers===void 0&&(i.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Ic()),i.arrayBuffers[this.array.buffer._uuid]===void 0&&(i.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}kv.prototype.isInterleavedBuffer=!0;const _s=new He;class Mv{constructor(i,u,g,v=!1){this.name="",this.data=i,this.itemSize=u,this.offset=g,this.normalized=v===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(i){this.data.needsUpdate=i}applyMatrix4(i){for(let u=0,g=this.data.count;u<g;u++)_s.x=this.getX(u),_s.y=this.getY(u),_s.z=this.getZ(u),_s.applyMatrix4(i),this.setXYZ(u,_s.x,_s.y,_s.z);return this}applyNormalMatrix(i){for(let u=0,g=this.count;u<g;u++)_s.x=this.getX(u),_s.y=this.getY(u),_s.z=this.getZ(u),_s.applyNormalMatrix(i),this.setXYZ(u,_s.x,_s.y,_s.z);return this}transformDirection(i){for(let u=0,g=this.count;u<g;u++)_s.x=this.getX(u),_s.y=this.getY(u),_s.z=this.getZ(u),_s.transformDirection(i),this.setXYZ(u,_s.x,_s.y,_s.z);return this}setX(i,u){return this.data.array[i*this.data.stride+this.offset]=u,this}setY(i,u){return this.data.array[i*this.data.stride+this.offset+1]=u,this}setZ(i,u){return this.data.array[i*this.data.stride+this.offset+2]=u,this}setW(i,u){return this.data.array[i*this.data.stride+this.offset+3]=u,this}getX(i){return this.data.array[i*this.data.stride+this.offset]}getY(i){return this.data.array[i*this.data.stride+this.offset+1]}getZ(i){return this.data.array[i*this.data.stride+this.offset+2]}getW(i){return this.data.array[i*this.data.stride+this.offset+3]}setXY(i,u,g){return i=i*this.data.stride+this.offset,this.data.array[i+0]=u,this.data.array[i+1]=g,this}setXYZ(i,u,g,v){return i=i*this.data.stride+this.offset,this.data.array[i+0]=u,this.data.array[i+1]=g,this.data.array[i+2]=v,this}setXYZW(i,u,g,v,b){return i=i*this.data.stride+this.offset,this.data.array[i+0]=u,this.data.array[i+1]=g,this.data.array[i+2]=v,this.data.array[i+3]=b,this}clone(i){if(i===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const u=[];for(let g=0;g<this.count;g++){const v=g*this.data.stride+this.offset;for(let b=0;b<this.itemSize;b++)u.push(this.data.array[v+b])}return new Bs(new this.array.constructor(u),this.itemSize,this.normalized)}else return i.interleavedBuffers===void 0&&(i.interleavedBuffers={}),i.interleavedBuffers[this.data.uuid]===void 0&&(i.interleavedBuffers[this.data.uuid]=this.data.clone(i)),new Mv(i.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(i){if(i===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const u=[];for(let g=0;g<this.count;g++){const v=g*this.data.stride+this.offset;for(let b=0;b<this.itemSize;b++)u.push(this.data.array[v+b])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:u,normalized:this.normalized}}else return i.interleavedBuffers===void 0&&(i.interleavedBuffers={}),i.interleavedBuffers[this.data.uuid]===void 0&&(i.interleavedBuffers[this.data.uuid]=this.data.toJSON(i)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Mv.prototype.isInterleavedBufferAttribute=!0;class oR extends Va{constructor(i){super(),this.type="SpriteMaterial",this.color=new rr(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(i)}copy(i){return super.copy(i),this.color.copy(i.color),this.map=i.map,this.alphaMap=i.alphaMap,this.rotation=i.rotation,this.sizeAttenuation=i.sizeAttenuation,this}}oR.prototype.isSpriteMaterial=!0;let Yy;const uv=new He,Ky=new He,Zy=new He,Jy=new xn,cv=new xn,lR=new cr,C1=new He,hv=new He,k1=new He,iN=new xn,nE=new xn,sN=new xn;class D9 extends ai{constructor(i){if(super(),this.type="Sprite",Yy===void 0){Yy=new $i;const u=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),g=new kv(u,5);Yy.setIndex([0,1,2,0,2,3]),Yy.setAttribute("position",new Mv(g,3,0,!1)),Yy.setAttribute("uv",new Mv(g,2,3,!1))}this.geometry=Yy,this.material=i!==void 0?i:new oR,this.center=new xn(.5,.5)}raycast(i,u){i.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Ky.setFromMatrixScale(this.matrixWorld),lR.copy(i.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(i.camera.matrixWorldInverse,this.matrixWorld),Zy.setFromMatrixPosition(this.modelViewMatrix),i.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&Ky.multiplyScalar(-Zy.z);const g=this.material.rotation;let v,b;g!==0&&(b=Math.cos(g),v=Math.sin(g));const M=this.center;N1(C1.set(-.5,-.5,0),Zy,M,Ky,v,b),N1(hv.set(.5,-.5,0),Zy,M,Ky,v,b),N1(k1.set(.5,.5,0),Zy,M,Ky,v,b),iN.set(0,0),nE.set(1,0),sN.set(1,1);let N=i.ray.intersectTriangle(C1,hv,k1,!1,uv);if(N===null&&(N1(hv.set(-.5,.5,0),Zy,M,Ky,v,b),nE.set(0,1),N=i.ray.intersectTriangle(C1,k1,hv,!1,uv),N===null))return;const F=i.ray.origin.distanceTo(uv);F<i.near||F>i.far||u.push({distance:F,point:uv.clone(),uv:ks.getUV(uv,C1,hv,k1,iN,nE,sN,new xn),face:null,object:this})}copy(i){return super.copy(i),i.center!==void 0&&this.center.copy(i.center),this.material=i.material,this}}D9.prototype.isSprite=!0;function N1(E,i,u,g,v,b){Jy.subVectors(E,u).addScalar(.5).multiply(g),v!==void 0?(cv.x=b*Jy.x-v*Jy.y,cv.y=v*Jy.x+b*Jy.y):cv.copy(Jy),E.copy(i),E.x+=cv.x,E.y+=cv.y,E.applyMatrix4(lR)}const aN=new He,oN=new Si,lN=new Si,P9=new He,uN=new cr;class uR extends Do{constructor(i,u){super(i,u),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new cr,this.bindMatrixInverse=new cr}copy(i){return super.copy(i),this.bindMode=i.bindMode,this.bindMatrix.copy(i.bindMatrix),this.bindMatrixInverse.copy(i.bindMatrixInverse),this.skeleton=i.skeleton,this}bind(i,u){this.skeleton=i,u===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),u=this.matrixWorld),this.bindMatrix.copy(u),this.bindMatrixInverse.copy(u).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const i=new Si,u=this.geometry.attributes.skinWeight;for(let g=0,v=u.count;g<v;g++){i.x=u.getX(g),i.y=u.getY(g),i.z=u.getZ(g),i.w=u.getW(g);const b=1/i.manhattanLength();b!==1/0?i.multiplyScalar(b):i.set(1,0,0,0),u.setXYZW(g,i.x,i.y,i.z,i.w)}}updateMatrixWorld(i){super.updateMatrixWorld(i),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(i,u){const g=this.skeleton,v=this.geometry;oN.fromBufferAttribute(v.attributes.skinIndex,i),lN.fromBufferAttribute(v.attributes.skinWeight,i),aN.fromBufferAttribute(v.attributes.position,i).applyMatrix4(this.bindMatrix),u.set(0,0,0);for(let b=0;b<4;b++){const M=lN.getComponent(b);if(M!==0){const N=oN.getComponent(b);uN.multiplyMatrices(g.bones[N].matrixWorld,g.boneInverses[N]),u.addScaledVector(P9.copy(aN).applyMatrix4(uN),M)}}return u.applyMatrix4(this.bindMatrixInverse)}}uR.prototype.isSkinnedMesh=!0;class F9 extends ai{constructor(){super(),this.type="Bone"}}F9.prototype.isBone=!0;class O9 extends Ta{constructor(i=null,u=1,g=1,v,b,M,N,F,D=la,O=la,z,B){super(null,M,N,F,D,O,v,b,z,B),this.image={data:i,width:u,height:g},this.magFilter=D,this.minFilter=O,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}O9.prototype.isDataTexture=!0;class gE extends Bs{constructor(i,u,g,v=1){typeof g=="number"&&(v=g,g=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(i,u,g),this.meshPerAttribute=v}copy(i){return super.copy(i),this.meshPerAttribute=i.meshPerAttribute,this}toJSON(){const i=super.toJSON();return i.meshPerAttribute=this.meshPerAttribute,i.isInstancedBufferAttribute=!0,i}}gE.prototype.isInstancedBufferAttribute=!0;const cN=new cr,hN=new cr,R1=[],dv=new Do;class z9 extends Do{constructor(i,u,g){super(i,u),this.instanceMatrix=new gE(new Float32Array(g*16),16),this.instanceColor=null,this.count=g,this.frustumCulled=!1}copy(i){return super.copy(i),this.instanceMatrix.copy(i.instanceMatrix),i.instanceColor!==null&&(this.instanceColor=i.instanceColor.clone()),this.count=i.count,this}getColorAt(i,u){u.fromArray(this.instanceColor.array,i*3)}getMatrixAt(i,u){u.fromArray(this.instanceMatrix.array,i*16)}raycast(i,u){const g=this.matrixWorld,v=this.count;if(dv.geometry=this.geometry,dv.material=this.material,dv.material!==void 0)for(let b=0;b<v;b++){this.getMatrixAt(b,cN),hN.multiplyMatrices(g,cN),dv.matrixWorld=hN,dv.raycast(i,R1);for(let M=0,N=R1.length;M<N;M++){const F=R1[M];F.instanceId=b,F.object=this,u.push(F)}R1.length=0}}setColorAt(i,u){this.instanceColor===null&&(this.instanceColor=new gE(new Float32Array(this.instanceMatrix.count*3),3)),u.toArray(this.instanceColor.array,i*3)}setMatrixAt(i,u){u.toArray(this.instanceMatrix.array,i*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}z9.prototype.isInstancedMesh=!0;class Nv extends Va{constructor(i){super(),this.type="LineBasicMaterial",this.color=new rr(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(i)}copy(i){return super.copy(i),this.color.copy(i.color),this.linewidth=i.linewidth,this.linecap=i.linecap,this.linejoin=i.linejoin,this}}Nv.prototype.isLineBasicMaterial=!0;const dN=new He,pN=new He,fN=new cr,rE=new p0,L1=new d0;class RE extends ai{constructor(i=new $i,u=new Nv){super(),this.type="Line",this.geometry=i,this.material=u,this.updateMorphTargets()}copy(i){return super.copy(i),this.material=i.material,this.geometry=i.geometry,this}computeLineDistances(){const i=this.geometry;if(i.isBufferGeometry)if(i.index===null){const u=i.attributes.position,g=[0];for(let v=1,b=u.count;v<b;v++)dN.fromBufferAttribute(u,v-1),pN.fromBufferAttribute(u,v),g[v]=g[v-1],g[v]+=dN.distanceTo(pN);i.setAttribute("lineDistance",new ua(g,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else i.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(i,u){const g=this.geometry,v=this.matrixWorld,b=i.params.Line.threshold,M=g.drawRange;if(g.boundingSphere===null&&g.computeBoundingSphere(),L1.copy(g.boundingSphere),L1.applyMatrix4(v),L1.radius+=b,i.ray.intersectsSphere(L1)===!1)return;fN.copy(v).invert(),rE.copy(i.ray).applyMatrix4(fN);const N=b/((this.scale.x+this.scale.y+this.scale.z)/3),F=N*N,D=new He,O=new He,z=new He,B=new He,W=this.isLineSegments?2:1;if(g.isBufferGeometry){const G=g.index,J=g.attributes.position;if(G!==null){const V=Math.max(0,M.start),Z=Math.min(G.count,M.start+M.count);for(let le=V,fe=Z-1;le<fe;le+=W){const be=G.getX(le),Me=G.getX(le+1);if(D.fromBufferAttribute(J,be),O.fromBufferAttribute(J,Me),rE.distanceSqToSegment(D,O,B,z)>F)continue;B.applyMatrix4(this.matrixWorld);const We=i.ray.origin.distanceTo(B);We<i.near||We>i.far||u.push({distance:We,point:z.clone().applyMatrix4(this.matrixWorld),index:le,face:null,faceIndex:null,object:this})}}else{const V=Math.max(0,M.start),Z=Math.min(J.count,M.start+M.count);for(let le=V,fe=Z-1;le<fe;le+=W){if(D.fromBufferAttribute(J,le),O.fromBufferAttribute(J,le+1),rE.distanceSqToSegment(D,O,B,z)>F)continue;B.applyMatrix4(this.matrixWorld);const Me=i.ray.origin.distanceTo(B);Me<i.near||Me>i.far||u.push({distance:Me,point:z.clone().applyMatrix4(this.matrixWorld),index:le,face:null,faceIndex:null,object:this})}}}else g.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const i=this.geometry;if(i.isBufferGeometry){const u=i.morphAttributes,g=Object.keys(u);if(g.length>0){const v=u[g[0]];if(v!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let b=0,M=v.length;b<M;b++){const N=v[b].name||String(b);this.morphTargetInfluences.push(0),this.morphTargetDictionary[N]=b}}}}else{const u=i.morphTargets;u!==void 0&&u.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}RE.prototype.isLine=!0;const mN=new He,gN=new He;class LE extends RE{constructor(i,u){super(i,u),this.type="LineSegments"}computeLineDistances(){const i=this.geometry;if(i.isBufferGeometry)if(i.index===null){const u=i.attributes.position,g=[];for(let v=0,b=u.count;v<b;v+=2)mN.fromBufferAttribute(u,v),gN.fromBufferAttribute(u,v+1),g[v]=v===0?0:g[v-1],g[v+1]=g[v]+mN.distanceTo(gN);i.setAttribute("lineDistance",new ua(g,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else i.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}LE.prototype.isLineSegments=!0;class B9 extends RE{constructor(i,u){super(i,u),this.type="LineLoop"}}B9.prototype.isLineLoop=!0;class cR extends Va{constructor(i){super(),this.type="PointsMaterial",this.color=new rr(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(i)}copy(i){return super.copy(i),this.color.copy(i.color),this.map=i.map,this.alphaMap=i.alphaMap,this.size=i.size,this.sizeAttenuation=i.sizeAttenuation,this}}cR.prototype.isPointsMaterial=!0;const yN=new cr,yE=new p0,D1=new d0,P1=new He;class $9 extends ai{constructor(i=new $i,u=new cR){super(),this.type="Points",this.geometry=i,this.material=u,this.updateMorphTargets()}copy(i){return super.copy(i),this.material=i.material,this.geometry=i.geometry,this}raycast(i,u){const g=this.geometry,v=this.matrixWorld,b=i.params.Points.threshold,M=g.drawRange;if(g.boundingSphere===null&&g.computeBoundingSphere(),D1.copy(g.boundingSphere),D1.applyMatrix4(v),D1.radius+=b,i.ray.intersectsSphere(D1)===!1)return;yN.copy(v).invert(),yE.copy(i.ray).applyMatrix4(yN);const N=b/((this.scale.x+this.scale.y+this.scale.z)/3),F=N*N;if(g.isBufferGeometry){const D=g.index,z=g.attributes.position;if(D!==null){const B=Math.max(0,M.start),W=Math.min(D.count,M.start+M.count);for(let G=B,K=W;G<K;G++){const J=D.getX(G);P1.fromBufferAttribute(z,J),xN(P1,J,F,v,i,u,this)}}else{const B=Math.max(0,M.start),W=Math.min(z.count,M.start+M.count);for(let G=B,K=W;G<K;G++)P1.fromBufferAttribute(z,G),xN(P1,G,F,v,i,u,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const i=this.geometry;if(i.isBufferGeometry){const u=i.morphAttributes,g=Object.keys(u);if(g.length>0){const v=u[g[0]];if(v!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let b=0,M=v.length;b<M;b++){const N=v[b].name||String(b);this.morphTargetInfluences.push(0),this.morphTargetDictionary[N]=b}}}}else{const u=i.morphTargets;u!==void 0&&u.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}$9.prototype.isPoints=!0;function xN(E,i,u,g,v,b,M){const N=yE.distanceSqToPoint(E);if(N<u){const F=new He;yE.closestPointToPoint(E,F),F.applyMatrix4(g);const D=v.ray.origin.distanceTo(F);if(D<v.near||D>v.far)return;b.push({distance:D,distanceToRay:Math.sqrt(N),point:F,index:i,face:null,object:M})}}class U9 extends Ta{constructor(i,u,g,v,b,M,N,F,D){super(i,u,g,v,b,M,N,F,D),this.format=N!==void 0?N:Kp,this.minFilter=M!==void 0?M:zl,this.magFilter=b!==void 0?b:zl,this.generateMipmaps=!1;const O=this;function z(){O.needsUpdate=!0,i.requestVideoFrameCallback(z)}"requestVideoFrameCallback"in i&&i.requestVideoFrameCallback(z)}clone(){return new this.constructor(this.image).copy(this)}update(){const i=this.image;"requestVideoFrameCallback"in i===!1&&i.readyState>=i.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}U9.prototype.isVideoTexture=!0;class V9 extends Ta{constructor(i,u,g,v,b,M,N,F,D,O,z,B){super(null,M,N,F,D,O,v,b,z,B),this.image={width:u,height:g},this.mipmaps=i,this.flipY=!1,this.generateMipmaps=!1}}V9.prototype.isCompressedTexture=!0;class W9 extends Ta{constructor(i,u,g,v,b,M,N,F,D){super(i,u,g,v,b,M,N,F,D),this.needsUpdate=!0}}W9.prototype.isCanvasTexture=!0;class G9 extends Ta{constructor(i,u,g,v,b,M,N,F,D,O){if(O=O!==void 0?O:i0,O!==i0&&O!==_v)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");g===void 0&&O===i0&&(g=V1),g===void 0&&O===_v&&(g=xv),super(null,v,b,M,N,F,O,g,D),this.image={width:i,height:u},this.magFilter=N!==void 0?N:la,this.minFilter=F!==void 0?F:la,this.flipY=!1,this.generateMipmaps=!1}}G9.prototype.isDepthTexture=!0;new He;new He;new He;new ks;class Bl{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(i,u){const g=this.getUtoTmapping(i);return this.getPoint(g,u)}getPoints(i=5){const u=[];for(let g=0;g<=i;g++)u.push(this.getPoint(g/i));return u}getSpacedPoints(i=5){const u=[];for(let g=0;g<=i;g++)u.push(this.getPointAt(g/i));return u}getLength(){const i=this.getLengths();return i[i.length-1]}getLengths(i=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===i+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const u=[];let g,v=this.getPoint(0),b=0;u.push(0);for(let M=1;M<=i;M++)g=this.getPoint(M/i),b+=g.distanceTo(v),u.push(b),v=g;return this.cacheArcLengths=u,u}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(i,u){const g=this.getLengths();let v=0;const b=g.length;let M;u?M=u:M=i*g[b-1];let N=0,F=b-1,D;for(;N<=F;)if(v=Math.floor(N+(F-N)/2),D=g[v]-M,D<0)N=v+1;else if(D>0)F=v-1;else{F=v;break}if(v=F,g[v]===M)return v/(b-1);const O=g[v],B=g[v+1]-O,W=(M-O)/B;return(v+W)/(b-1)}getTangent(i,u){let v=i-1e-4,b=i+1e-4;v<0&&(v=0),b>1&&(b=1);const M=this.getPoint(v),N=this.getPoint(b),F=u||(M.isVector2?new xn:new He);return F.copy(N).sub(M).normalize(),F}getTangentAt(i,u){const g=this.getUtoTmapping(i);return this.getTangent(g,u)}computeFrenetFrames(i,u){const g=new He,v=[],b=[],M=[],N=new He,F=new cr;for(let W=0;W<=i;W++){const G=W/i;v[W]=this.getTangentAt(G,new He),v[W].normalize()}b[0]=new He,M[0]=new He;let D=Number.MAX_VALUE;const O=Math.abs(v[0].x),z=Math.abs(v[0].y),B=Math.abs(v[0].z);O<=D&&(D=O,g.set(1,0,0)),z<=D&&(D=z,g.set(0,1,0)),B<=D&&g.set(0,0,1),N.crossVectors(v[0],g).normalize(),b[0].crossVectors(v[0],N),M[0].crossVectors(v[0],b[0]);for(let W=1;W<=i;W++){if(b[W]=b[W-1].clone(),M[W]=M[W-1].clone(),N.crossVectors(v[W-1],v[W]),N.length()>Number.EPSILON){N.normalize();const G=Math.acos(pl(v[W-1].dot(v[W]),-1,1));b[W].applyMatrix4(F.makeRotationAxis(N,G))}M[W].crossVectors(v[W],b[W])}if(u===!0){let W=Math.acos(pl(b[0].dot(b[i]),-1,1));W/=i,v[0].dot(N.crossVectors(b[0],b[i]))>0&&(W=-W);for(let G=1;G<=i;G++)b[G].applyMatrix4(F.makeRotationAxis(v[G],W*G)),M[G].crossVectors(v[G],b[G])}return{tangents:v,normals:b,binormals:M}}clone(){return new this.constructor().copy(this)}copy(i){return this.arcLengthDivisions=i.arcLengthDivisions,this}toJSON(){const i={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return i.arcLengthDivisions=this.arcLengthDivisions,i.type=this.type,i}fromJSON(i){return this.arcLengthDivisions=i.arcLengthDivisions,this}}class i_ extends Bl{constructor(i=0,u=0,g=1,v=1,b=0,M=Math.PI*2,N=!1,F=0){super(),this.type="EllipseCurve",this.aX=i,this.aY=u,this.xRadius=g,this.yRadius=v,this.aStartAngle=b,this.aEndAngle=M,this.aClockwise=N,this.aRotation=F}getPoint(i,u){const g=u||new xn,v=Math.PI*2;let b=this.aEndAngle-this.aStartAngle;const M=Math.abs(b)<Number.EPSILON;for(;b<0;)b+=v;for(;b>v;)b-=v;b<Number.EPSILON&&(M?b=0:b=v),this.aClockwise===!0&&!M&&(b===v?b=-v:b=b-v);const N=this.aStartAngle+i*b;let F=this.aX+this.xRadius*Math.cos(N),D=this.aY+this.yRadius*Math.sin(N);if(this.aRotation!==0){const O=Math.cos(this.aRotation),z=Math.sin(this.aRotation),B=F-this.aX,W=D-this.aY;F=B*O-W*z+this.aX,D=B*z+W*O+this.aY}return g.set(F,D)}copy(i){return super.copy(i),this.aX=i.aX,this.aY=i.aY,this.xRadius=i.xRadius,this.yRadius=i.yRadius,this.aStartAngle=i.aStartAngle,this.aEndAngle=i.aEndAngle,this.aClockwise=i.aClockwise,this.aRotation=i.aRotation,this}toJSON(){const i=super.toJSON();return i.aX=this.aX,i.aY=this.aY,i.xRadius=this.xRadius,i.yRadius=this.yRadius,i.aStartAngle=this.aStartAngle,i.aEndAngle=this.aEndAngle,i.aClockwise=this.aClockwise,i.aRotation=this.aRotation,i}fromJSON(i){return super.fromJSON(i),this.aX=i.aX,this.aY=i.aY,this.xRadius=i.xRadius,this.yRadius=i.yRadius,this.aStartAngle=i.aStartAngle,this.aEndAngle=i.aEndAngle,this.aClockwise=i.aClockwise,this.aRotation=i.aRotation,this}}i_.prototype.isEllipseCurve=!0;class hR extends i_{constructor(i,u,g,v,b,M){super(i,u,g,g,v,b,M),this.type="ArcCurve"}}hR.prototype.isArcCurve=!0;function DE(){let E=0,i=0,u=0,g=0;function v(b,M,N,F){E=b,i=N,u=-3*b+3*M-2*N-F,g=2*b-2*M+N+F}return{initCatmullRom:function(b,M,N,F,D){v(M,N,D*(N-b),D*(F-M))},initNonuniformCatmullRom:function(b,M,N,F,D,O,z){let B=(M-b)/D-(N-b)/(D+O)+(N-M)/O,W=(N-M)/O-(F-M)/(O+z)+(F-N)/z;B*=O,W*=O,v(M,N,B,W)},calc:function(b){const M=b*b,N=M*b;return E+i*b+u*M+g*N}}}const F1=new He,iE=new DE,sE=new DE,aE=new DE;class dR extends Bl{constructor(i=[],u=!1,g="centripetal",v=.5){super(),this.type="CatmullRomCurve3",this.points=i,this.closed=u,this.curveType=g,this.tension=v}getPoint(i,u=new He){const g=u,v=this.points,b=v.length,M=(b-(this.closed?0:1))*i;let N=Math.floor(M),F=M-N;this.closed?N+=N>0?0:(Math.floor(Math.abs(N)/b)+1)*b:F===0&&N===b-1&&(N=b-2,F=1);let D,O;this.closed||N>0?D=v[(N-1)%b]:(F1.subVectors(v[0],v[1]).add(v[0]),D=F1);const z=v[N%b],B=v[(N+1)%b];if(this.closed||N+2<b?O=v[(N+2)%b]:(F1.subVectors(v[b-1],v[b-2]).add(v[b-1]),O=F1),this.curveType==="centripetal"||this.curveType==="chordal"){const W=this.curveType==="chordal"?.5:.25;let G=Math.pow(D.distanceToSquared(z),W),K=Math.pow(z.distanceToSquared(B),W),J=Math.pow(B.distanceToSquared(O),W);K<1e-4&&(K=1),G<1e-4&&(G=K),J<1e-4&&(J=K),iE.initNonuniformCatmullRom(D.x,z.x,B.x,O.x,G,K,J),sE.initNonuniformCatmullRom(D.y,z.y,B.y,O.y,G,K,J),aE.initNonuniformCatmullRom(D.z,z.z,B.z,O.z,G,K,J)}else this.curveType==="catmullrom"&&(iE.initCatmullRom(D.x,z.x,B.x,O.x,this.tension),sE.initCatmullRom(D.y,z.y,B.y,O.y,this.tension),aE.initCatmullRom(D.z,z.z,B.z,O.z,this.tension));return g.set(iE.calc(F),sE.calc(F),aE.calc(F)),g}copy(i){super.copy(i),this.points=[];for(let u=0,g=i.points.length;u<g;u++){const v=i.points[u];this.points.push(v.clone())}return this.closed=i.closed,this.curveType=i.curveType,this.tension=i.tension,this}toJSON(){const i=super.toJSON();i.points=[];for(let u=0,g=this.points.length;u<g;u++){const v=this.points[u];i.points.push(v.toArray())}return i.closed=this.closed,i.curveType=this.curveType,i.tension=this.tension,i}fromJSON(i){super.fromJSON(i),this.points=[];for(let u=0,g=i.points.length;u<g;u++){const v=i.points[u];this.points.push(new He().fromArray(v))}return this.closed=i.closed,this.curveType=i.curveType,this.tension=i.tension,this}}dR.prototype.isCatmullRomCurve3=!0;function vN(E,i,u,g,v){const b=(g-i)*.5,M=(v-u)*.5,N=E*E,F=E*N;return(2*u-2*g+b+M)*F+(-3*u+3*g-2*b-M)*N+b*E+u}function H9(E,i){const u=1-E;return u*u*i}function j9(E,i){return 2*(1-E)*E*i}function q9(E,i){return E*E*i}function vv(E,i,u,g){return H9(E,i)+j9(E,u)+q9(E,g)}function X9(E,i){const u=1-E;return u*u*u*i}function Y9(E,i){const u=1-E;return 3*u*u*E*i}function K9(E,i){return 3*(1-E)*E*E*i}function Z9(E,i){return E*E*E*i}function bv(E,i,u,g,v){return X9(E,i)+Y9(E,u)+K9(E,g)+Z9(E,v)}class PE extends Bl{constructor(i=new xn,u=new xn,g=new xn,v=new xn){super(),this.type="CubicBezierCurve",this.v0=i,this.v1=u,this.v2=g,this.v3=v}getPoint(i,u=new xn){const g=u,v=this.v0,b=this.v1,M=this.v2,N=this.v3;return g.set(bv(i,v.x,b.x,M.x,N.x),bv(i,v.y,b.y,M.y,N.y)),g}copy(i){return super.copy(i),this.v0.copy(i.v0),this.v1.copy(i.v1),this.v2.copy(i.v2),this.v3.copy(i.v3),this}toJSON(){const i=super.toJSON();return i.v0=this.v0.toArray(),i.v1=this.v1.toArray(),i.v2=this.v2.toArray(),i.v3=this.v3.toArray(),i}fromJSON(i){return super.fromJSON(i),this.v0.fromArray(i.v0),this.v1.fromArray(i.v1),this.v2.fromArray(i.v2),this.v3.fromArray(i.v3),this}}PE.prototype.isCubicBezierCurve=!0;class pR extends Bl{constructor(i=new He,u=new He,g=new He,v=new He){super(),this.type="CubicBezierCurve3",this.v0=i,this.v1=u,this.v2=g,this.v3=v}getPoint(i,u=new He){const g=u,v=this.v0,b=this.v1,M=this.v2,N=this.v3;return g.set(bv(i,v.x,b.x,M.x,N.x),bv(i,v.y,b.y,M.y,N.y),bv(i,v.z,b.z,M.z,N.z)),g}copy(i){return super.copy(i),this.v0.copy(i.v0),this.v1.copy(i.v1),this.v2.copy(i.v2),this.v3.copy(i.v3),this}toJSON(){const i=super.toJSON();return i.v0=this.v0.toArray(),i.v1=this.v1.toArray(),i.v2=this.v2.toArray(),i.v3=this.v3.toArray(),i}fromJSON(i){return super.fromJSON(i),this.v0.fromArray(i.v0),this.v1.fromArray(i.v1),this.v2.fromArray(i.v2),this.v3.fromArray(i.v3),this}}pR.prototype.isCubicBezierCurve3=!0;class s_ extends Bl{constructor(i=new xn,u=new xn){super(),this.type="LineCurve",this.v1=i,this.v2=u}getPoint(i,u=new xn){const g=u;return i===1?g.copy(this.v2):(g.copy(this.v2).sub(this.v1),g.multiplyScalar(i).add(this.v1)),g}getPointAt(i,u){return this.getPoint(i,u)}getTangent(i,u){const g=u||new xn;return g.copy(this.v2).sub(this.v1).normalize(),g}copy(i){return super.copy(i),this.v1.copy(i.v1),this.v2.copy(i.v2),this}toJSON(){const i=super.toJSON();return i.v1=this.v1.toArray(),i.v2=this.v2.toArray(),i}fromJSON(i){return super.fromJSON(i),this.v1.fromArray(i.v1),this.v2.fromArray(i.v2),this}}s_.prototype.isLineCurve=!0;class J9 extends Bl{constructor(i=new He,u=new He){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=i,this.v2=u}getPoint(i,u=new He){const g=u;return i===1?g.copy(this.v2):(g.copy(this.v2).sub(this.v1),g.multiplyScalar(i).add(this.v1)),g}getPointAt(i,u){return this.getPoint(i,u)}copy(i){return super.copy(i),this.v1.copy(i.v1),this.v2.copy(i.v2),this}toJSON(){const i=super.toJSON();return i.v1=this.v1.toArray(),i.v2=this.v2.toArray(),i}fromJSON(i){return super.fromJSON(i),this.v1.fromArray(i.v1),this.v2.fromArray(i.v2),this}}class FE extends Bl{constructor(i=new xn,u=new xn,g=new xn){super(),this.type="QuadraticBezierCurve",this.v0=i,this.v1=u,this.v2=g}getPoint(i,u=new xn){const g=u,v=this.v0,b=this.v1,M=this.v2;return g.set(vv(i,v.x,b.x,M.x),vv(i,v.y,b.y,M.y)),g}copy(i){return super.copy(i),this.v0.copy(i.v0),this.v1.copy(i.v1),this.v2.copy(i.v2),this}toJSON(){const i=super.toJSON();return i.v0=this.v0.toArray(),i.v1=this.v1.toArray(),i.v2=this.v2.toArray(),i}fromJSON(i){return super.fromJSON(i),this.v0.fromArray(i.v0),this.v1.fromArray(i.v1),this.v2.fromArray(i.v2),this}}FE.prototype.isQuadraticBezierCurve=!0;class fR extends Bl{constructor(i=new He,u=new He,g=new He){super(),this.type="QuadraticBezierCurve3",this.v0=i,this.v1=u,this.v2=g}getPoint(i,u=new He){const g=u,v=this.v0,b=this.v1,M=this.v2;return g.set(vv(i,v.x,b.x,M.x),vv(i,v.y,b.y,M.y),vv(i,v.z,b.z,M.z)),g}copy(i){return super.copy(i),this.v0.copy(i.v0),this.v1.copy(i.v1),this.v2.copy(i.v2),this}toJSON(){const i=super.toJSON();return i.v0=this.v0.toArray(),i.v1=this.v1.toArray(),i.v2=this.v2.toArray(),i}fromJSON(i){return super.fromJSON(i),this.v0.fromArray(i.v0),this.v1.fromArray(i.v1),this.v2.fromArray(i.v2),this}}fR.prototype.isQuadraticBezierCurve3=!0;class OE extends Bl{constructor(i=[]){super(),this.type="SplineCurve",this.points=i}getPoint(i,u=new xn){const g=u,v=this.points,b=(v.length-1)*i,M=Math.floor(b),N=b-M,F=v[M===0?M:M-1],D=v[M],O=v[M>v.length-2?v.length-1:M+1],z=v[M>v.length-3?v.length-1:M+2];return g.set(vN(N,F.x,D.x,O.x,z.x),vN(N,F.y,D.y,O.y,z.y)),g}copy(i){super.copy(i),this.points=[];for(let u=0,g=i.points.length;u<g;u++){const v=i.points[u];this.points.push(v.clone())}return this}toJSON(){const i=super.toJSON();i.points=[];for(let u=0,g=this.points.length;u<g;u++){const v=this.points[u];i.points.push(v.toArray())}return i}fromJSON(i){super.fromJSON(i),this.points=[];for(let u=0,g=i.points.length;u<g;u++){const v=i.points[u];this.points.push(new xn().fromArray(v))}return this}}OE.prototype.isSplineCurve=!0;var mR=Object.freeze({__proto__:null,ArcCurve:hR,CatmullRomCurve3:dR,CubicBezierCurve:PE,CubicBezierCurve3:pR,EllipseCurve:i_,LineCurve:s_,LineCurve3:J9,QuadraticBezierCurve:FE,QuadraticBezierCurve3:fR,SplineCurve:OE});const Q9={triangulate:function(E,i,u=2){const g=i&&i.length,v=g?i[0]*u:E.length;let b=gR(E,0,v,u,!0);const M=[];if(!b||b.next===b.prev)return M;let N,F,D,O,z,B,W;if(g&&(b=ij(E,i,b,u)),E.length>80*u){N=D=E[0],F=O=E[1];for(let G=u;G<v;G+=u)z=E[G],B=E[G+1],z<N&&(N=z),B<F&&(F=B),z>D&&(D=z),B>O&&(O=B);W=Math.max(D-N,O-F),W=W!==0?1/W:0}return Tv(b,M,u,N,F,W),M}};function gR(E,i,u,g,v){let b,M;if(v===mj(E,i,u,g)>0)for(b=i;b<u;b+=g)M=bN(b,E[b],E[b+1],M);else for(b=u-g;b>=i;b-=g)M=bN(b,E[b],E[b+1],M);return M&&a_(M,M.next)&&(Av(M),M=M.next),M}function ef(E,i){if(!E)return E;i||(i=E);let u=E,g;do if(g=!1,!u.steiner&&(a_(u,u.next)||is(u.prev,u,u.next)===0)){if(Av(u),u=i=u.prev,u===u.next)break;g=!0}else u=u.next;while(g||u!==i);return i}function Tv(E,i,u,g,v,b,M){if(!E)return;!M&&b&&uj(E,g,v,b);let N=E,F,D;for(;E.prev!==E.next;){if(F=E.prev,D=E.next,b?tj(E,g,v,b):ej(E)){i.push(F.i/u),i.push(E.i/u),i.push(D.i/u),Av(E),E=D.next,N=D.next;continue}if(E=D,E===N){M?M===1?(E=nj(ef(E),i,u),Tv(E,i,u,g,v,b,2)):M===2&&rj(E,i,u,g,v,b):Tv(ef(E),i,u,g,v,b,1);break}}}function ej(E){const i=E.prev,u=E,g=E.next;if(is(i,u,g)>=0)return!1;let v=E.next.next;for(;v!==E.prev;){if(n0(i.x,i.y,u.x,u.y,g.x,g.y,v.x,v.y)&&is(v.prev,v,v.next)>=0)return!1;v=v.next}return!0}function tj(E,i,u,g){const v=E.prev,b=E,M=E.next;if(is(v,b,M)>=0)return!1;const N=v.x<b.x?v.x<M.x?v.x:M.x:b.x<M.x?b.x:M.x,F=v.y<b.y?v.y<M.y?v.y:M.y:b.y<M.y?b.y:M.y,D=v.x>b.x?v.x>M.x?v.x:M.x:b.x>M.x?b.x:M.x,O=v.y>b.y?v.y>M.y?v.y:M.y:b.y>M.y?b.y:M.y,z=xE(N,F,i,u,g),B=xE(D,O,i,u,g);let W=E.prevZ,G=E.nextZ;for(;W&&W.z>=z&&G&&G.z<=B;){if(W!==E.prev&&W!==E.next&&n0(v.x,v.y,b.x,b.y,M.x,M.y,W.x,W.y)&&is(W.prev,W,W.next)>=0||(W=W.prevZ,G!==E.prev&&G!==E.next&&n0(v.x,v.y,b.x,b.y,M.x,M.y,G.x,G.y)&&is(G.prev,G,G.next)>=0))return!1;G=G.nextZ}for(;W&&W.z>=z;){if(W!==E.prev&&W!==E.next&&n0(v.x,v.y,b.x,b.y,M.x,M.y,W.x,W.y)&&is(W.prev,W,W.next)>=0)return!1;W=W.prevZ}for(;G&&G.z<=B;){if(G!==E.prev&&G!==E.next&&n0(v.x,v.y,b.x,b.y,M.x,M.y,G.x,G.y)&&is(G.prev,G,G.next)>=0)return!1;G=G.nextZ}return!0}function nj(E,i,u){let g=E;do{const v=g.prev,b=g.next.next;!a_(v,b)&&yR(v,g,g.next,b)&&Ev(v,b)&&Ev(b,v)&&(i.push(v.i/u),i.push(g.i/u),i.push(b.i/u),Av(g),Av(g.next),g=E=b),g=g.next}while(g!==E);return ef(g)}function rj(E,i,u,g,v,b){let M=E;do{let N=M.next.next;for(;N!==M.prev;){if(M.i!==N.i&&dj(M,N)){let F=xR(M,N);M=ef(M,M.next),F=ef(F,F.next),Tv(M,i,u,g,v,b),Tv(F,i,u,g,v,b);return}N=N.next}M=M.next}while(M!==E)}function ij(E,i,u,g){const v=[];let b,M,N,F,D;for(b=0,M=i.length;b<M;b++)N=i[b]*g,F=b<M-1?i[b+1]*g:E.length,D=gR(E,N,F,g,!1),D===D.next&&(D.steiner=!0),v.push(hj(D));for(v.sort(sj),b=0;b<v.length;b++)aj(v[b],u),u=ef(u,u.next);return u}function sj(E,i){return E.x-i.x}function aj(E,i){if(i=oj(E,i),i){const u=xR(i,E);ef(i,i.next),ef(u,u.next)}}function oj(E,i){let u=i;const g=E.x,v=E.y;let b=-1/0,M;do{if(v<=u.y&&v>=u.next.y&&u.next.y!==u.y){const B=u.x+(v-u.y)*(u.next.x-u.x)/(u.next.y-u.y);if(B<=g&&B>b){if(b=B,B===g){if(v===u.y)return u;if(v===u.next.y)return u.next}M=u.x<u.next.x?u:u.next}}u=u.next}while(u!==i);if(!M)return null;if(g===b)return M;const N=M,F=M.x,D=M.y;let O=1/0,z;u=M;do g>=u.x&&u.x>=F&&g!==u.x&&n0(v<D?g:b,v,F,D,v<D?b:g,v,u.x,u.y)&&(z=Math.abs(v-u.y)/(g-u.x),Ev(u,E)&&(z<O||z===O&&(u.x>M.x||u.x===M.x&&lj(M,u)))&&(M=u,O=z)),u=u.next;while(u!==N);return M}function lj(E,i){return is(E.prev,E,i.prev)<0&&is(i.next,E,E.next)<0}function uj(E,i,u,g){let v=E;do v.z===null&&(v.z=xE(v.x,v.y,i,u,g)),v.prevZ=v.prev,v.nextZ=v.next,v=v.next;while(v!==E);v.prevZ.nextZ=null,v.prevZ=null,cj(v)}function cj(E){let i,u,g,v,b,M,N,F,D=1;do{for(u=E,E=null,b=null,M=0;u;){for(M++,g=u,N=0,i=0;i<D&&(N++,g=g.nextZ,!!g);i++);for(F=D;N>0||F>0&&g;)N!==0&&(F===0||!g||u.z<=g.z)?(v=u,u=u.nextZ,N--):(v=g,g=g.nextZ,F--),b?b.nextZ=v:E=v,v.prevZ=b,b=v;u=g}b.nextZ=null,D*=2}while(M>1);return E}function xE(E,i,u,g,v){return E=32767*(E-u)*v,i=32767*(i-g)*v,E=(E|E<<8)&16711935,E=(E|E<<4)&252645135,E=(E|E<<2)&858993459,E=(E|E<<1)&1431655765,i=(i|i<<8)&16711935,i=(i|i<<4)&252645135,i=(i|i<<2)&858993459,i=(i|i<<1)&1431655765,E|i<<1}function hj(E){let i=E,u=E;do(i.x<u.x||i.x===u.x&&i.y<u.y)&&(u=i),i=i.next;while(i!==E);return u}function n0(E,i,u,g,v,b,M,N){return(v-M)*(i-N)-(E-M)*(b-N)>=0&&(E-M)*(g-N)-(u-M)*(i-N)>=0&&(u-M)*(b-N)-(v-M)*(g-N)>=0}function dj(E,i){return E.next.i!==i.i&&E.prev.i!==i.i&&!pj(E,i)&&(Ev(E,i)&&Ev(i,E)&&fj(E,i)&&(is(E.prev,E,i.prev)||is(E,i.prev,i))||a_(E,i)&&is(E.prev,E,E.next)>0&&is(i.prev,i,i.next)>0)}function is(E,i,u){return(i.y-E.y)*(u.x-i.x)-(i.x-E.x)*(u.y-i.y)}function a_(E,i){return E.x===i.x&&E.y===i.y}function yR(E,i,u,g){const v=z1(is(E,i,u)),b=z1(is(E,i,g)),M=z1(is(u,g,E)),N=z1(is(u,g,i));return!!(v!==b&&M!==N||v===0&&O1(E,u,i)||b===0&&O1(E,g,i)||M===0&&O1(u,E,g)||N===0&&O1(u,i,g))}function O1(E,i,u){return i.x<=Math.max(E.x,u.x)&&i.x>=Math.min(E.x,u.x)&&i.y<=Math.max(E.y,u.y)&&i.y>=Math.min(E.y,u.y)}function z1(E){return E>0?1:E<0?-1:0}function pj(E,i){let u=E;do{if(u.i!==E.i&&u.next.i!==E.i&&u.i!==i.i&&u.next.i!==i.i&&yR(u,u.next,E,i))return!0;u=u.next}while(u!==E);return!1}function Ev(E,i){return is(E.prev,E,E.next)<0?is(E,i,E.next)>=0&&is(E,E.prev,i)>=0:is(E,i,E.prev)<0||is(E,E.next,i)<0}function fj(E,i){let u=E,g=!1;const v=(E.x+i.x)/2,b=(E.y+i.y)/2;do u.y>b!=u.next.y>b&&u.next.y!==u.y&&v<(u.next.x-u.x)*(b-u.y)/(u.next.y-u.y)+u.x&&(g=!g),u=u.next;while(u!==E);return g}function xR(E,i){const u=new vE(E.i,E.x,E.y),g=new vE(i.i,i.x,i.y),v=E.next,b=i.prev;return E.next=i,i.prev=E,u.next=v,v.prev=u,g.next=u,u.prev=g,b.next=g,g.prev=b,g}function bN(E,i,u,g){const v=new vE(E,i,u);return g?(v.next=g.next,v.prev=g,g.next.prev=v,g.next=v):(v.prev=v,v.next=v),v}function Av(E){E.next.prev=E.prev,E.prev.next=E.next,E.prevZ&&(E.prevZ.nextZ=E.nextZ),E.nextZ&&(E.nextZ.prevZ=E.prevZ)}function vE(E,i,u){this.i=E,this.x=i,this.y=u,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function mj(E,i,u,g){let v=0;for(let b=i,M=u-g;b<u;b+=g)v+=(E[M]-E[b])*(E[b+1]+E[M+1]),M=b;return v}class Qp{static area(i){const u=i.length;let g=0;for(let v=u-1,b=0;b<u;v=b++)g+=i[v].x*i[b].y-i[b].x*i[v].y;return g*.5}static isClockWise(i){return Qp.area(i)<0}static triangulateShape(i,u){const g=[],v=[],b=[];wN(i),_N(g,i);let M=i.length;u.forEach(wN);for(let F=0;F<u.length;F++)v.push(M),M+=u[F].length,_N(g,u[F]);const N=Q9.triangulate(g,v);for(let F=0;F<N.length;F+=3)b.push(N.slice(F,F+3));return b}}function wN(E){const i=E.length;i>2&&E[i-1].equals(E[0])&&E.pop()}function _N(E,i){for(let u=0;u<i.length;u++)E.push(i[u].x),E.push(i[u].y)}class g0 extends $i{constructor(i,u){super(),this.type="ExtrudeGeometry",this.parameters={shapes:i,options:u},i=Array.isArray(i)?i:[i];const g=this,v=[],b=[];for(let N=0,F=i.length;N<F;N++){const D=i[N];M(D)}this.setAttribute("position",new ua(v,3)),this.setAttribute("uv",new ua(b,2)),this.computeVertexNormals();function M(N){const F=[],D=u.curveSegments!==void 0?u.curveSegments:12,O=u.steps!==void 0?u.steps:1;let z=u.depth!==void 0?u.depth:100,B=u.bevelEnabled!==void 0?u.bevelEnabled:!0,W=u.bevelThickness!==void 0?u.bevelThickness:6,G=u.bevelSize!==void 0?u.bevelSize:W-2,K=u.bevelOffset!==void 0?u.bevelOffset:0,J=u.bevelSegments!==void 0?u.bevelSegments:3;const V=u.extrudePath,Z=u.UVGenerator!==void 0?u.UVGenerator:gj;u.amount!==void 0&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),z=u.amount);let le,fe=!1,be,Me,ce,We;V&&(le=V.getSpacedPoints(O),fe=!0,B=!1,be=V.computeFrenetFrames(O,!1),Me=new He,ce=new He,We=new He),B||(J=0,W=0,G=0,K=0);const Ke=N.extractPoints(D);let Ye=Ke.shape;const xe=Ke.holes;if(!Qp.isClockWise(Ye)){Ye=Ye.reverse();for(let Ft=0,Jt=xe.length;Ft<Jt;Ft++){const nn=xe[Ft];Qp.isClockWise(nn)&&(xe[Ft]=nn.reverse())}}const Se=Qp.triangulateShape(Ye,xe),je=Ye;for(let Ft=0,Jt=xe.length;Ft<Jt;Ft++){const nn=xe[Ft];Ye=Ye.concat(nn)}function rt(Ft,Jt,nn){return Jt||console.error("THREE.ExtrudeGeometry: vec does not exist"),Jt.clone().multiplyScalar(nn).add(Ft)}const et=Ye.length,ot=Se.length;function Et(Ft,Jt,nn){let Dn,vn,Re;const Ce=Ft.x-Jt.x,ye=Ft.y-Jt.y,se=nn.x-Ft.x,we=nn.y-Ft.y,Fe=Ce*Ce+ye*ye,Q=Ce*we-ye*se;if(Math.abs(Q)>Number.EPSILON){const Ze=Math.sqrt(Fe),Je=Math.sqrt(se*se+we*we),at=Jt.x-ye/Ze,he=Jt.y+Ce/Ze,It=nn.x-we/Je,Le=nn.y+se/Je,_t=((It-at)*we-(Le-he)*se)/(Ce*we-ye*se);Dn=at+Ce*_t-Ft.x,vn=he+ye*_t-Ft.y;const Wt=Dn*Dn+vn*vn;if(Wt<=2)return new xn(Dn,vn);Re=Math.sqrt(Wt/2)}else{let Ze=!1;Ce>Number.EPSILON?se>Number.EPSILON&&(Ze=!0):Ce<-Number.EPSILON?se<-Number.EPSILON&&(Ze=!0):Math.sign(ye)===Math.sign(we)&&(Ze=!0),Ze?(Dn=-ye,vn=Ce,Re=Math.sqrt(Fe)):(Dn=Ce,vn=ye,Re=Math.sqrt(Fe/2))}return new xn(Dn/Re,vn/Re)}const tn=[];for(let Ft=0,Jt=je.length,nn=Jt-1,Dn=Ft+1;Ft<Jt;Ft++,nn++,Dn++)nn===Jt&&(nn=0),Dn===Jt&&(Dn=0),tn[Ft]=Et(je[Ft],je[nn],je[Dn]);const ln=[];let Vt,En=tn.concat();for(let Ft=0,Jt=xe.length;Ft<Jt;Ft++){const nn=xe[Ft];Vt=[];for(let Dn=0,vn=nn.length,Re=vn-1,Ce=Dn+1;Dn<vn;Dn++,Re++,Ce++)Re===vn&&(Re=0),Ce===vn&&(Ce=0),Vt[Dn]=Et(nn[Dn],nn[Re],nn[Ce]);ln.push(Vt),En=En.concat(Vt)}for(let Ft=0;Ft<J;Ft++){const Jt=Ft/J,nn=W*Math.cos(Jt*Math.PI/2),Dn=G*Math.sin(Jt*Math.PI/2)+K;for(let vn=0,Re=je.length;vn<Re;vn++){const Ce=rt(je[vn],tn[vn],Dn);zn(Ce.x,Ce.y,-nn)}for(let vn=0,Re=xe.length;vn<Re;vn++){const Ce=xe[vn];Vt=ln[vn];for(let ye=0,se=Ce.length;ye<se;ye++){const we=rt(Ce[ye],Vt[ye],Dn);zn(we.x,we.y,-nn)}}}const Bt=G+K;for(let Ft=0;Ft<et;Ft++){const Jt=B?rt(Ye[Ft],En[Ft],Bt):Ye[Ft];fe?(ce.copy(be.normals[0]).multiplyScalar(Jt.x),Me.copy(be.binormals[0]).multiplyScalar(Jt.y),We.copy(le[0]).add(ce).add(Me),zn(We.x,We.y,We.z)):zn(Jt.x,Jt.y,0)}for(let Ft=1;Ft<=O;Ft++)for(let Jt=0;Jt<et;Jt++){const nn=B?rt(Ye[Jt],En[Jt],Bt):Ye[Jt];fe?(ce.copy(be.normals[Ft]).multiplyScalar(nn.x),Me.copy(be.binormals[Ft]).multiplyScalar(nn.y),We.copy(le[Ft]).add(ce).add(Me),zn(We.x,We.y,We.z)):zn(nn.x,nn.y,z/O*Ft)}for(let Ft=J-1;Ft>=0;Ft--){const Jt=Ft/J,nn=W*Math.cos(Jt*Math.PI/2),Dn=G*Math.sin(Jt*Math.PI/2)+K;for(let vn=0,Re=je.length;vn<Re;vn++){const Ce=rt(je[vn],tn[vn],Dn);zn(Ce.x,Ce.y,z+nn)}for(let vn=0,Re=xe.length;vn<Re;vn++){const Ce=xe[vn];Vt=ln[vn];for(let ye=0,se=Ce.length;ye<se;ye++){const we=rt(Ce[ye],Vt[ye],Dn);fe?zn(we.x,we.y+le[O-1].y,le[O-1].x+nn):zn(we.x,we.y,z+nn)}}}sn(),Mn();function sn(){const Ft=v.length/3;if(B){let Jt=0,nn=et*Jt;for(let Dn=0;Dn<ot;Dn++){const vn=Se[Dn];Bn(vn[2]+nn,vn[1]+nn,vn[0]+nn)}Jt=O+J*2,nn=et*Jt;for(let Dn=0;Dn<ot;Dn++){const vn=Se[Dn];Bn(vn[0]+nn,vn[1]+nn,vn[2]+nn)}}else{for(let Jt=0;Jt<ot;Jt++){const nn=Se[Jt];Bn(nn[2],nn[1],nn[0])}for(let Jt=0;Jt<ot;Jt++){const nn=Se[Jt];Bn(nn[0]+et*O,nn[1]+et*O,nn[2]+et*O)}}g.addGroup(Ft,v.length/3-Ft,0)}function Mn(){const Ft=v.length/3;let Jt=0;St(je,Jt),Jt+=je.length;for(let nn=0,Dn=xe.length;nn<Dn;nn++){const vn=xe[nn];St(vn,Jt),Jt+=vn.length}g.addGroup(Ft,v.length/3-Ft,1)}function St(Ft,Jt){let nn=Ft.length;for(;--nn>=0;){const Dn=nn;let vn=nn-1;vn<0&&(vn=Ft.length-1);for(let Re=0,Ce=O+J*2;Re<Ce;Re++){const ye=et*Re,se=et*(Re+1),we=Jt+Dn+ye,Fe=Jt+vn+ye,Q=Jt+vn+se,Ze=Jt+Dn+se;wn(we,Fe,Q,Ze)}}}function zn(Ft,Jt,nn){F.push(Ft),F.push(Jt),F.push(nn)}function Bn(Ft,Jt,nn){Nn(Ft),Nn(Jt),Nn(nn);const Dn=v.length/3,vn=Z.generateTopUV(g,v,Dn-3,Dn-2,Dn-1);$n(vn[0]),$n(vn[1]),$n(vn[2])}function wn(Ft,Jt,nn,Dn){Nn(Ft),Nn(Jt),Nn(Dn),Nn(Jt),Nn(nn),Nn(Dn);const vn=v.length/3,Re=Z.generateSideWallUV(g,v,vn-6,vn-3,vn-2,vn-1);$n(Re[0]),$n(Re[1]),$n(Re[3]),$n(Re[1]),$n(Re[2]),$n(Re[3])}function Nn(Ft){v.push(F[Ft*3+0]),v.push(F[Ft*3+1]),v.push(F[Ft*3+2])}function $n(Ft){b.push(Ft.x),b.push(Ft.y)}}}toJSON(){const i=super.toJSON(),u=this.parameters.shapes,g=this.parameters.options;return yj(u,g,i)}static fromJSON(i,u){const g=[];for(let b=0,M=i.shapes.length;b<M;b++){const N=u[i.shapes[b]];g.push(N)}const v=i.options.extrudePath;return v!==void 0&&(i.options.extrudePath=new mR[v.type]().fromJSON(v)),new g0(g,i.options)}}const gj={generateTopUV:function(E,i,u,g,v){const b=i[u*3],M=i[u*3+1],N=i[g*3],F=i[g*3+1],D=i[v*3],O=i[v*3+1];return[new xn(b,M),new xn(N,F),new xn(D,O)]},generateSideWallUV:function(E,i,u,g,v,b){const M=i[u*3],N=i[u*3+1],F=i[u*3+2],D=i[g*3],O=i[g*3+1],z=i[g*3+2],B=i[v*3],W=i[v*3+1],G=i[v*3+2],K=i[b*3],J=i[b*3+1],V=i[b*3+2];return Math.abs(N-O)<Math.abs(M-D)?[new xn(M,1-F),new xn(D,1-z),new xn(B,1-G),new xn(K,1-V)]:[new xn(N,1-F),new xn(O,1-z),new xn(W,1-G),new xn(J,1-V)]}};function yj(E,i,u){if(u.shapes=[],Array.isArray(E))for(let g=0,v=E.length;g<v;g++){const b=E[g];u.shapes.push(b.uuid)}else u.shapes.push(E.uuid);return i.extrudePath!==void 0&&(u.options.extrudePath=i.extrudePath.toJSON()),u}class zE extends $i{constructor(i,u=12){super(),this.type="ShapeGeometry",this.parameters={shapes:i,curveSegments:u};const g=[],v=[],b=[],M=[];let N=0,F=0;if(Array.isArray(i)===!1)D(i);else for(let O=0;O<i.length;O++)D(i[O]),this.addGroup(N,F,O),N+=F,F=0;this.setIndex(g),this.setAttribute("position",new ua(v,3)),this.setAttribute("normal",new ua(b,3)),this.setAttribute("uv",new ua(M,2));function D(O){const z=v.length/3,B=O.extractPoints(u);let W=B.shape;const G=B.holes;Qp.isClockWise(W)===!1&&(W=W.reverse());for(let J=0,V=G.length;J<V;J++){const Z=G[J];Qp.isClockWise(Z)===!0&&(G[J]=Z.reverse())}const K=Qp.triangulateShape(W,G);for(let J=0,V=G.length;J<V;J++){const Z=G[J];W=W.concat(Z)}for(let J=0,V=W.length;J<V;J++){const Z=W[J];v.push(Z.x,Z.y,0),b.push(0,0,1),M.push(Z.x,Z.y)}for(let J=0,V=K.length;J<V;J++){const Z=K[J],le=Z[0]+z,fe=Z[1]+z,be=Z[2]+z;g.push(le,fe,be),F+=3}}}toJSON(){const i=super.toJSON(),u=this.parameters.shapes;return xj(u,i)}static fromJSON(i,u){const g=[];for(let v=0,b=i.shapes.length;v<b;v++){const M=u[i.shapes[v]];g.push(M)}return new zE(g,i.curveSegments)}}function xj(E,i){if(i.shapes=[],Array.isArray(E))for(let u=0,g=E.length;u<g;u++){const v=E[u];i.shapes.push(v.uuid)}else i.shapes.push(E.uuid);return i}class vj extends Va{constructor(i){super(),this.type="ShadowMaterial",this.color=new rr(0),this.transparent=!0,this.setValues(i)}copy(i){return super.copy(i),this.color.copy(i.color),this}}vj.prototype.isShadowMaterial=!0;class vR extends Va{constructor(i){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new rr(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new rr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=c0,this.normalScale=new xn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(i)}copy(i){return super.copy(i),this.defines={STANDARD:""},this.color.copy(i.color),this.roughness=i.roughness,this.metalness=i.metalness,this.map=i.map,this.lightMap=i.lightMap,this.lightMapIntensity=i.lightMapIntensity,this.aoMap=i.aoMap,this.aoMapIntensity=i.aoMapIntensity,this.emissive.copy(i.emissive),this.emissiveMap=i.emissiveMap,this.emissiveIntensity=i.emissiveIntensity,this.bumpMap=i.bumpMap,this.bumpScale=i.bumpScale,this.normalMap=i.normalMap,this.normalMapType=i.normalMapType,this.normalScale.copy(i.normalScale),this.displacementMap=i.displacementMap,this.displacementScale=i.displacementScale,this.displacementBias=i.displacementBias,this.roughnessMap=i.roughnessMap,this.metalnessMap=i.metalnessMap,this.alphaMap=i.alphaMap,this.envMap=i.envMap,this.envMapIntensity=i.envMapIntensity,this.refractionRatio=i.refractionRatio,this.wireframe=i.wireframe,this.wireframeLinewidth=i.wireframeLinewidth,this.wireframeLinecap=i.wireframeLinecap,this.wireframeLinejoin=i.wireframeLinejoin,this.flatShading=i.flatShading,this}}vR.prototype.isMeshStandardMaterial=!0;class bj extends vR{constructor(i){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new xn(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return pl(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(u){this.ior=(1+.4*u)/(1-.4*u)}}),this.sheenTint=new rr(0),this.transmission=0,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationTint=new rr(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularTint=new rr(1,1,1),this.specularTintMap=null,this._clearcoat=0,this._transmission=0,this.setValues(i)}get clearcoat(){return this._clearcoat}set clearcoat(i){this._clearcoat>0!=i>0&&this.version++,this._clearcoat=i}get transmission(){return this._transmission}set transmission(i){this._transmission>0!=i>0&&this.version++,this._transmission=i}copy(i){return super.copy(i),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=i.clearcoat,this.clearcoatMap=i.clearcoatMap,this.clearcoatRoughness=i.clearcoatRoughness,this.clearcoatRoughnessMap=i.clearcoatRoughnessMap,this.clearcoatNormalMap=i.clearcoatNormalMap,this.clearcoatNormalScale.copy(i.clearcoatNormalScale),this.ior=i.ior,this.sheenTint.copy(i.sheenTint),this.transmission=i.transmission,this.transmissionMap=i.transmissionMap,this.thickness=i.thickness,this.thicknessMap=i.thicknessMap,this.attenuationDistance=i.attenuationDistance,this.attenuationTint.copy(i.attenuationTint),this.specularIntensity=i.specularIntensity,this.specularIntensityMap=i.specularIntensityMap,this.specularTint.copy(i.specularTint),this.specularTintMap=i.specularTintMap,this}}bj.prototype.isMeshPhysicalMaterial=!0;class wj extends Va{constructor(i){super(),this.type="MeshPhongMaterial",this.color=new rr(16777215),this.specular=new rr(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new rr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=c0,this.normalScale=new xn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Y1,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(i)}copy(i){return super.copy(i),this.color.copy(i.color),this.specular.copy(i.specular),this.shininess=i.shininess,this.map=i.map,this.lightMap=i.lightMap,this.lightMapIntensity=i.lightMapIntensity,this.aoMap=i.aoMap,this.aoMapIntensity=i.aoMapIntensity,this.emissive.copy(i.emissive),this.emissiveMap=i.emissiveMap,this.emissiveIntensity=i.emissiveIntensity,this.bumpMap=i.bumpMap,this.bumpScale=i.bumpScale,this.normalMap=i.normalMap,this.normalMapType=i.normalMapType,this.normalScale.copy(i.normalScale),this.displacementMap=i.displacementMap,this.displacementScale=i.displacementScale,this.displacementBias=i.displacementBias,this.specularMap=i.specularMap,this.alphaMap=i.alphaMap,this.envMap=i.envMap,this.combine=i.combine,this.reflectivity=i.reflectivity,this.refractionRatio=i.refractionRatio,this.wireframe=i.wireframe,this.wireframeLinewidth=i.wireframeLinewidth,this.wireframeLinecap=i.wireframeLinecap,this.wireframeLinejoin=i.wireframeLinejoin,this.flatShading=i.flatShading,this}}wj.prototype.isMeshPhongMaterial=!0;class _j extends Va{constructor(i){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new rr(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new rr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=c0,this.normalScale=new xn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(i)}copy(i){return super.copy(i),this.color.copy(i.color),this.map=i.map,this.gradientMap=i.gradientMap,this.lightMap=i.lightMap,this.lightMapIntensity=i.lightMapIntensity,this.aoMap=i.aoMap,this.aoMapIntensity=i.aoMapIntensity,this.emissive.copy(i.emissive),this.emissiveMap=i.emissiveMap,this.emissiveIntensity=i.emissiveIntensity,this.bumpMap=i.bumpMap,this.bumpScale=i.bumpScale,this.normalMap=i.normalMap,this.normalMapType=i.normalMapType,this.normalScale.copy(i.normalScale),this.displacementMap=i.displacementMap,this.displacementScale=i.displacementScale,this.displacementBias=i.displacementBias,this.alphaMap=i.alphaMap,this.wireframe=i.wireframe,this.wireframeLinewidth=i.wireframeLinewidth,this.wireframeLinecap=i.wireframeLinecap,this.wireframeLinejoin=i.wireframeLinejoin,this}}_j.prototype.isMeshToonMaterial=!0;class Sj extends Va{constructor(i){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=c0,this.normalScale=new xn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(i)}copy(i){return super.copy(i),this.bumpMap=i.bumpMap,this.bumpScale=i.bumpScale,this.normalMap=i.normalMap,this.normalMapType=i.normalMapType,this.normalScale.copy(i.normalScale),this.displacementMap=i.displacementMap,this.displacementScale=i.displacementScale,this.displacementBias=i.displacementBias,this.wireframe=i.wireframe,this.wireframeLinewidth=i.wireframeLinewidth,this.flatShading=i.flatShading,this}}Sj.prototype.isMeshNormalMaterial=!0;class Mj extends Va{constructor(i){super(),this.type="MeshLambertMaterial",this.color=new rr(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new rr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Y1,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(i)}copy(i){return super.copy(i),this.color.copy(i.color),this.map=i.map,this.lightMap=i.lightMap,this.lightMapIntensity=i.lightMapIntensity,this.aoMap=i.aoMap,this.aoMapIntensity=i.aoMapIntensity,this.emissive.copy(i.emissive),this.emissiveMap=i.emissiveMap,this.emissiveIntensity=i.emissiveIntensity,this.specularMap=i.specularMap,this.alphaMap=i.alphaMap,this.envMap=i.envMap,this.combine=i.combine,this.reflectivity=i.reflectivity,this.refractionRatio=i.refractionRatio,this.wireframe=i.wireframe,this.wireframeLinewidth=i.wireframeLinewidth,this.wireframeLinecap=i.wireframeLinecap,this.wireframeLinejoin=i.wireframeLinejoin,this}}Mj.prototype.isMeshLambertMaterial=!0;class Tj extends Va{constructor(i){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new rr(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=c0,this.normalScale=new xn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(i)}copy(i){return super.copy(i),this.defines={MATCAP:""},this.color.copy(i.color),this.matcap=i.matcap,this.map=i.map,this.bumpMap=i.bumpMap,this.bumpScale=i.bumpScale,this.normalMap=i.normalMap,this.normalMapType=i.normalMapType,this.normalScale.copy(i.normalScale),this.displacementMap=i.displacementMap,this.displacementScale=i.displacementScale,this.displacementBias=i.displacementBias,this.alphaMap=i.alphaMap,this.flatShading=i.flatShading,this}}Tj.prototype.isMeshMatcapMaterial=!0;class Ej extends Nv{constructor(i){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(i)}copy(i){return super.copy(i),this.scale=i.scale,this.dashSize=i.dashSize,this.gapSize=i.gapSize,this}}Ej.prototype.isLineDashedMaterial=!0;const Xi={arraySlice:function(E,i,u){return Xi.isTypedArray(E)?new E.constructor(E.subarray(i,u!==void 0?u:E.length)):E.slice(i,u)},convertArray:function(E,i,u){return!E||!u&&E.constructor===i?E:typeof i.BYTES_PER_ELEMENT=="number"?new i(E):Array.prototype.slice.call(E)},isTypedArray:function(E){return ArrayBuffer.isView(E)&&!(E instanceof DataView)},getKeyframeOrder:function(E){function i(v,b){return E[v]-E[b]}const u=E.length,g=new Array(u);for(let v=0;v!==u;++v)g[v]=v;return g.sort(i),g},sortedArray:function(E,i,u){const g=E.length,v=new E.constructor(g);for(let b=0,M=0;M!==g;++b){const N=u[b]*i;for(let F=0;F!==i;++F)v[M++]=E[N+F]}return v},flattenJSON:function(E,i,u,g){let v=1,b=E[0];for(;b!==void 0&&b[g]===void 0;)b=E[v++];if(b===void 0)return;let M=b[g];if(M!==void 0)if(Array.isArray(M))do M=b[g],M!==void 0&&(i.push(b.time),u.push.apply(u,M)),b=E[v++];while(b!==void 0);else if(M.toArray!==void 0)do M=b[g],M!==void 0&&(i.push(b.time),M.toArray(u,u.length)),b=E[v++];while(b!==void 0);else do M=b[g],M!==void 0&&(i.push(b.time),u.push(M)),b=E[v++];while(b!==void 0)},subclip:function(E,i,u,g,v=30){const b=E.clone();b.name=i;const M=[];for(let F=0;F<b.tracks.length;++F){const D=b.tracks[F],O=D.getValueSize(),z=[],B=[];for(let W=0;W<D.times.length;++W){const G=D.times[W]*v;if(!(G<u||G>=g)){z.push(D.times[W]);for(let K=0;K<O;++K)B.push(D.values[W*O+K])}}z.length!==0&&(D.times=Xi.convertArray(z,D.times.constructor),D.values=Xi.convertArray(B,D.values.constructor),M.push(D))}b.tracks=M;let N=1/0;for(let F=0;F<b.tracks.length;++F)N>b.tracks[F].times[0]&&(N=b.tracks[F].times[0]);for(let F=0;F<b.tracks.length;++F)b.tracks[F].shift(-1*N);return b.resetDuration(),b},makeClipAdditive:function(E,i=0,u=E,g=30){g<=0&&(g=30);const v=u.tracks.length,b=i/g;for(let M=0;M<v;++M){const N=u.tracks[M],F=N.ValueTypeName;if(F==="bool"||F==="string")continue;const D=E.tracks.find(function(V){return V.name===N.name&&V.ValueTypeName===F});if(D===void 0)continue;let O=0;const z=N.getValueSize();N.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(O=z/3);let B=0;const W=D.getValueSize();D.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(B=W/3);const G=N.times.length-1;let K;if(b<=N.times[0]){const V=O,Z=z-O;K=Xi.arraySlice(N.values,V,Z)}else if(b>=N.times[G]){const V=G*z+O,Z=V+z-O;K=Xi.arraySlice(N.values,V,Z)}else{const V=N.createInterpolant(),Z=O,le=z-O;V.evaluate(b),K=Xi.arraySlice(V.resultBuffer,Z,le)}F==="quaternion"&&new oo().fromArray(K).normalize().conjugate().toArray(K);const J=D.times.length;for(let V=0;V<J;++V){const Z=V*W+B;if(F==="quaternion")oo.multiplyQuaternionsFlat(D.values,Z,K,0,D.values,Z);else{const le=W-B*2;for(let fe=0;fe<le;++fe)D.values[Z+fe]-=K[fe]}}}return E.blendMode=DN,E}};class ed{constructor(i,u,g,v){this.parameterPositions=i,this._cachedIndex=0,this.resultBuffer=v!==void 0?v:new u.constructor(g),this.sampleValues=u,this.valueSize=g,this.settings=null,this.DefaultSettings_={}}evaluate(i){const u=this.parameterPositions;let g=this._cachedIndex,v=u[g],b=u[g-1];e:{t:{let M;n:{r:if(!(i<v)){for(let N=g+2;;){if(v===void 0){if(i<b)break r;return g=u.length,this._cachedIndex=g,this.afterEnd_(g-1,i,b)}if(g===N)break;if(b=v,v=u[++g],i<v)break t}M=u.length;break n}if(!(i>=b)){const N=u[1];i<N&&(g=2,b=N);for(let F=g-2;;){if(b===void 0)return this._cachedIndex=0,this.beforeStart_(0,i,v);if(g===F)break;if(v=b,b=u[--g-1],i>=b)break t}M=g,g=0;break n}break e}for(;g<M;){const N=g+M>>>1;i<u[N]?M=N:g=N+1}if(v=u[g],b=u[g-1],b===void 0)return this._cachedIndex=0,this.beforeStart_(0,i,v);if(v===void 0)return g=u.length,this._cachedIndex=g,this.afterEnd_(g-1,b,i)}this._cachedIndex=g,this.intervalChanged_(g,b,v)}return this.interpolate_(g,b,i,v)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(i){const u=this.resultBuffer,g=this.sampleValues,v=this.valueSize,b=i*v;for(let M=0;M!==v;++M)u[M]=g[b+M];return u}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}ed.prototype.beforeStart_=ed.prototype.copySampleValue_;ed.prototype.afterEnd_=ed.prototype.copySampleValue_;class Aj extends ed{constructor(i,u,g,v){super(i,u,g,v),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:e0,endingEnd:e0}}intervalChanged_(i,u,g){const v=this.parameterPositions;let b=i-2,M=i+1,N=v[b],F=v[M];if(N===void 0)switch(this.getSettings_().endingStart){case t0:b=i,N=2*u-g;break;case H1:b=v.length-2,N=u+v[b]-v[b+1];break;default:b=i,N=g}if(F===void 0)switch(this.getSettings_().endingEnd){case t0:M=i,F=2*g-u;break;case H1:M=1,F=g+v[1]-v[0];break;default:M=i-1,F=u}const D=(g-u)*.5,O=this.valueSize;this._weightPrev=D/(u-N),this._weightNext=D/(F-g),this._offsetPrev=b*O,this._offsetNext=M*O}interpolate_(i,u,g,v){const b=this.resultBuffer,M=this.sampleValues,N=this.valueSize,F=i*N,D=F-N,O=this._offsetPrev,z=this._offsetNext,B=this._weightPrev,W=this._weightNext,G=(g-u)/(v-u),K=G*G,J=K*G,V=-B*J+2*B*K-B*G,Z=(1+B)*J+(-1.5-2*B)*K+(-.5+B)*G+1,le=(-1-W)*J+(1.5+W)*K+.5*G,fe=W*J-W*K;for(let be=0;be!==N;++be)b[be]=V*M[O+be]+Z*M[D+be]+le*M[F+be]+fe*M[z+be];return b}}class bR extends ed{constructor(i,u,g,v){super(i,u,g,v)}interpolate_(i,u,g,v){const b=this.resultBuffer,M=this.sampleValues,N=this.valueSize,F=i*N,D=F-N,O=(g-u)/(v-u),z=1-O;for(let B=0;B!==N;++B)b[B]=M[D+B]*z+M[F+B]*O;return b}}class Ij extends ed{constructor(i,u,g,v){super(i,u,g,v)}interpolate_(i){return this.copySampleValue_(i-1)}}class Nc{constructor(i,u,g,v){if(i===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(u===void 0||u.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+i);this.name=i,this.times=Xi.convertArray(u,this.TimeBufferType),this.values=Xi.convertArray(g,this.ValueBufferType),this.setInterpolation(v||this.DefaultInterpolation)}static toJSON(i){const u=i.constructor;let g;if(u.toJSON!==this.toJSON)g=u.toJSON(i);else{g={name:i.name,times:Xi.convertArray(i.times,Array),values:Xi.convertArray(i.values,Array)};const v=i.getInterpolation();v!==i.DefaultInterpolation&&(g.interpolation=v)}return g.type=i.ValueTypeName,g}InterpolantFactoryMethodDiscrete(i){return new Ij(this.times,this.values,this.getValueSize(),i)}InterpolantFactoryMethodLinear(i){return new bR(this.times,this.values,this.getValueSize(),i)}InterpolantFactoryMethodSmooth(i){return new Aj(this.times,this.values,this.getValueSize(),i)}setInterpolation(i){let u;switch(i){case W1:u=this.InterpolantFactoryMethodDiscrete;break;case G1:u=this.InterpolantFactoryMethodLinear;break;case TT:u=this.InterpolantFactoryMethodSmooth;break}if(u===void 0){const g="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(i!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(g);return console.warn("THREE.KeyframeTrack:",g),this}return this.createInterpolant=u,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return W1;case this.InterpolantFactoryMethodLinear:return G1;case this.InterpolantFactoryMethodSmooth:return TT}}getValueSize(){return this.values.length/this.times.length}shift(i){if(i!==0){const u=this.times;for(let g=0,v=u.length;g!==v;++g)u[g]+=i}return this}scale(i){if(i!==1){const u=this.times;for(let g=0,v=u.length;g!==v;++g)u[g]*=i}return this}trim(i,u){const g=this.times,v=g.length;let b=0,M=v-1;for(;b!==v&&g[b]<i;)++b;for(;M!==-1&&g[M]>u;)--M;if(++M,b!==0||M!==v){b>=M&&(M=Math.max(M,1),b=M-1);const N=this.getValueSize();this.times=Xi.arraySlice(g,b,M),this.values=Xi.arraySlice(this.values,b*N,M*N)}return this}validate(){let i=!0;const u=this.getValueSize();u-Math.floor(u)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),i=!1);const g=this.times,v=this.values,b=g.length;b===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),i=!1);let M=null;for(let N=0;N!==b;N++){const F=g[N];if(typeof F=="number"&&isNaN(F)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,N,F),i=!1;break}if(M!==null&&M>F){console.error("THREE.KeyframeTrack: Out of order keys.",this,N,F,M),i=!1;break}M=F}if(v!==void 0&&Xi.isTypedArray(v))for(let N=0,F=v.length;N!==F;++N){const D=v[N];if(isNaN(D)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,N,D),i=!1;break}}return i}optimize(){const i=Xi.arraySlice(this.times),u=Xi.arraySlice(this.values),g=this.getValueSize(),v=this.getInterpolation()===TT,b=i.length-1;let M=1;for(let N=1;N<b;++N){let F=!1;const D=i[N],O=i[N+1];if(D!==O&&(N!==1||D!==i[0]))if(v)F=!0;else{const z=N*g,B=z-g,W=z+g;for(let G=0;G!==g;++G){const K=u[z+G];if(K!==u[B+G]||K!==u[W+G]){F=!0;break}}}if(F){if(N!==M){i[M]=i[N];const z=N*g,B=M*g;for(let W=0;W!==g;++W)u[B+W]=u[z+W]}++M}}if(b>0){i[M]=i[b];for(let N=b*g,F=M*g,D=0;D!==g;++D)u[F+D]=u[N+D];++M}return M!==i.length?(this.times=Xi.arraySlice(i,0,M),this.values=Xi.arraySlice(u,0,M*g)):(this.times=i,this.values=u),this}clone(){const i=Xi.arraySlice(this.times,0),u=Xi.arraySlice(this.values,0),g=this.constructor,v=new g(this.name,i,u);return v.createInterpolant=this.createInterpolant,v}}Nc.prototype.TimeBufferType=Float32Array;Nc.prototype.ValueBufferType=Float32Array;Nc.prototype.DefaultInterpolation=G1;class y0 extends Nc{}y0.prototype.ValueTypeName="bool";y0.prototype.ValueBufferType=Array;y0.prototype.DefaultInterpolation=W1;y0.prototype.InterpolantFactoryMethodLinear=void 0;y0.prototype.InterpolantFactoryMethodSmooth=void 0;class wR extends Nc{}wR.prototype.ValueTypeName="color";class q1 extends Nc{}q1.prototype.ValueTypeName="number";class Cj extends ed{constructor(i,u,g,v){super(i,u,g,v)}interpolate_(i,u,g,v){const b=this.resultBuffer,M=this.sampleValues,N=this.valueSize,F=(g-u)/(v-u);let D=i*N;for(let O=D+N;D!==O;D+=4)oo.slerpFlat(b,0,M,D-N,M,D,F);return b}}class Rv extends Nc{InterpolantFactoryMethodLinear(i){return new Cj(this.times,this.values,this.getValueSize(),i)}}Rv.prototype.ValueTypeName="quaternion";Rv.prototype.DefaultInterpolation=G1;Rv.prototype.InterpolantFactoryMethodSmooth=void 0;class x0 extends Nc{}x0.prototype.ValueTypeName="string";x0.prototype.ValueBufferType=Array;x0.prototype.DefaultInterpolation=W1;x0.prototype.InterpolantFactoryMethodLinear=void 0;x0.prototype.InterpolantFactoryMethodSmooth=void 0;class X1 extends Nc{}X1.prototype.ValueTypeName="vector";class SN{constructor(i,u=-1,g,v=_E){this.name=i,this.tracks=g,this.duration=u,this.blendMode=v,this.uuid=Ic(),this.duration<0&&this.resetDuration()}static parse(i){const u=[],g=i.tracks,v=1/(i.fps||1);for(let M=0,N=g.length;M!==N;++M)u.push(Nj(g[M]).scale(v));const b=new this(i.name,i.duration,u,i.blendMode);return b.uuid=i.uuid,b}static toJSON(i){const u=[],g=i.tracks,v={name:i.name,duration:i.duration,tracks:u,uuid:i.uuid,blendMode:i.blendMode};for(let b=0,M=g.length;b!==M;++b)u.push(Nc.toJSON(g[b]));return v}static CreateFromMorphTargetSequence(i,u,g,v){const b=u.length,M=[];for(let N=0;N<b;N++){let F=[],D=[];F.push((N+b-1)%b,N,(N+1)%b),D.push(0,1,0);const O=Xi.getKeyframeOrder(F);F=Xi.sortedArray(F,1,O),D=Xi.sortedArray(D,1,O),!v&&F[0]===0&&(F.push(b),D.push(D[0])),M.push(new q1(".morphTargetInfluences["+u[N].name+"]",F,D).scale(1/g))}return new this(i,-1,M)}static findByName(i,u){let g=i;if(!Array.isArray(i)){const v=i;g=v.geometry&&v.geometry.animations||v.animations}for(let v=0;v<g.length;v++)if(g[v].name===u)return g[v];return null}static CreateClipsFromMorphTargetSequences(i,u,g){const v={},b=/^([\w-]*?)([\d]+)$/;for(let N=0,F=i.length;N<F;N++){const D=i[N],O=D.name.match(b);if(O&&O.length>1){const z=O[1];let B=v[z];B||(v[z]=B=[]),B.push(D)}}const M=[];for(const N in v)M.push(this.CreateFromMorphTargetSequence(N,v[N],u,g));return M}static parseAnimation(i,u){if(!i)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const g=function(z,B,W,G,K){if(W.length!==0){const J=[],V=[];Xi.flattenJSON(W,J,V,G),J.length!==0&&K.push(new z(B,J,V))}},v=[],b=i.name||"default",M=i.fps||30,N=i.blendMode;let F=i.length||-1;const D=i.hierarchy||[];for(let z=0;z<D.length;z++){const B=D[z].keys;if(!(!B||B.length===0))if(B[0].morphTargets){const W={};let G;for(G=0;G<B.length;G++)if(B[G].morphTargets)for(let K=0;K<B[G].morphTargets.length;K++)W[B[G].morphTargets[K]]=-1;for(const K in W){const J=[],V=[];for(let Z=0;Z!==B[G].morphTargets.length;++Z){const le=B[G];J.push(le.time),V.push(le.morphTarget===K?1:0)}v.push(new q1(".morphTargetInfluence["+K+"]",J,V))}F=W.length*(M||1)}else{const W=".bones["+u[z].name+"]";g(X1,W+".position",B,"pos",v),g(Rv,W+".quaternion",B,"rot",v),g(X1,W+".scale",B,"scl",v)}}return v.length===0?null:new this(b,F,v,N)}resetDuration(){const i=this.tracks;let u=0;for(let g=0,v=i.length;g!==v;++g){const b=this.tracks[g];u=Math.max(u,b.times[b.times.length-1])}return this.duration=u,this}trim(){for(let i=0;i<this.tracks.length;i++)this.tracks[i].trim(0,this.duration);return this}validate(){let i=!0;for(let u=0;u<this.tracks.length;u++)i=i&&this.tracks[u].validate();return i}optimize(){for(let i=0;i<this.tracks.length;i++)this.tracks[i].optimize();return this}clone(){const i=[];for(let u=0;u<this.tracks.length;u++)i.push(this.tracks[u].clone());return new this.constructor(this.name,this.duration,i,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function kj(E){switch(E.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return q1;case"vector":case"vector2":case"vector3":case"vector4":return X1;case"color":return wR;case"quaternion":return Rv;case"bool":case"boolean":return y0;case"string":return x0}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+E)}function Nj(E){if(E.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const i=kj(E.type);if(E.times===void 0){const u=[],g=[];Xi.flattenJSON(E.keys,u,g,"value"),E.times=u,E.values=g}return i.parse!==void 0?i.parse(E):new i(E.name,E.times,E.values,E.interpolation)}const u0={enabled:!1,files:{},add:function(E,i){this.enabled!==!1&&(this.files[E]=i)},get:function(E){if(this.enabled!==!1)return this.files[E]},remove:function(E){delete this.files[E]},clear:function(){this.files={}}};class Rj{constructor(i,u,g){const v=this;let b=!1,M=0,N=0,F;const D=[];this.onStart=void 0,this.onLoad=i,this.onProgress=u,this.onError=g,this.itemStart=function(O){N++,b===!1&&v.onStart!==void 0&&v.onStart(O,M,N),b=!0},this.itemEnd=function(O){M++,v.onProgress!==void 0&&v.onProgress(O,M,N),M===N&&(b=!1,v.onLoad!==void 0&&v.onLoad())},this.itemError=function(O){v.onError!==void 0&&v.onError(O)},this.resolveURL=function(O){return F?F(O):O},this.setURLModifier=function(O){return F=O,this},this.addHandler=function(O,z){return D.push(O,z),this},this.removeHandler=function(O){const z=D.indexOf(O);return z!==-1&&D.splice(z,2),this},this.getHandler=function(O){for(let z=0,B=D.length;z<B;z+=2){const W=D[z],G=D[z+1];if(W.global&&(W.lastIndex=0),W.test(O))return G}return null}}}const Lj=new Rj;class tf{constructor(i){this.manager=i!==void 0?i:Lj,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(i,u){const g=this;return new Promise(function(v,b){g.load(i,v,u,b)})}parse(){}setCrossOrigin(i){return this.crossOrigin=i,this}setWithCredentials(i){return this.withCredentials=i,this}setPath(i){return this.path=i,this}setResourcePath(i){return this.resourcePath=i,this}setRequestHeader(i){return this.requestHeader=i,this}}const ku={};class Dj extends tf{constructor(i){super(i)}load(i,u,g,v){i===void 0&&(i=""),this.path!==void 0&&(i=this.path+i),i=this.manager.resolveURL(i);const b=this,M=u0.get(i);if(M!==void 0)return b.manager.itemStart(i),setTimeout(function(){u&&u(M),b.manager.itemEnd(i)},0),M;if(ku[i]!==void 0){ku[i].push({onLoad:u,onProgress:g,onError:v});return}const N=/^data:(.*?)(;base64)?,(.*)$/,F=i.match(N);let D;if(F){const O=F[1],z=!!F[2];let B=F[3];B=decodeURIComponent(B),z&&(B=atob(B));try{let W;const G=(this.responseType||"").toLowerCase();switch(G){case"arraybuffer":case"blob":const K=new Uint8Array(B.length);for(let V=0;V<B.length;V++)K[V]=B.charCodeAt(V);G==="blob"?W=new Blob([K.buffer],{type:O}):W=K.buffer;break;case"document":W=new DOMParser().parseFromString(B,O);break;case"json":W=JSON.parse(B);break;default:W=B;break}setTimeout(function(){u&&u(W),b.manager.itemEnd(i)},0)}catch(W){setTimeout(function(){v&&v(W),b.manager.itemError(i),b.manager.itemEnd(i)},0)}}else{ku[i]=[],ku[i].push({onLoad:u,onProgress:g,onError:v}),D=new XMLHttpRequest,D.open("GET",i,!0),D.addEventListener("load",function(O){const z=this.response,B=ku[i];if(delete ku[i],this.status===200||this.status===0){this.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),u0.add(i,z);for(let W=0,G=B.length;W<G;W++){const K=B[W];K.onLoad&&K.onLoad(z)}b.manager.itemEnd(i)}else{for(let W=0,G=B.length;W<G;W++){const K=B[W];K.onError&&K.onError(O)}b.manager.itemError(i),b.manager.itemEnd(i)}},!1),D.addEventListener("progress",function(O){const z=ku[i];for(let B=0,W=z.length;B<W;B++){const G=z[B];G.onProgress&&G.onProgress(O)}},!1),D.addEventListener("error",function(O){const z=ku[i];delete ku[i];for(let B=0,W=z.length;B<W;B++){const G=z[B];G.onError&&G.onError(O)}b.manager.itemError(i),b.manager.itemEnd(i)},!1),D.addEventListener("abort",function(O){const z=ku[i];delete ku[i];for(let B=0,W=z.length;B<W;B++){const G=z[B];G.onError&&G.onError(O)}b.manager.itemError(i),b.manager.itemEnd(i)},!1),this.responseType!==void 0&&(D.responseType=this.responseType),this.withCredentials!==void 0&&(D.withCredentials=this.withCredentials),D.overrideMimeType&&D.overrideMimeType(this.mimeType!==void 0?this.mimeType:"text/plain");for(const O in this.requestHeader)D.setRequestHeader(O,this.requestHeader[O]);D.send(null)}return b.manager.itemStart(i),D}setResponseType(i){return this.responseType=i,this}setMimeType(i){return this.mimeType=i,this}}class _R extends tf{constructor(i){super(i)}load(i,u,g,v){this.path!==void 0&&(i=this.path+i),i=this.manager.resolveURL(i);const b=this,M=u0.get(i);if(M!==void 0)return b.manager.itemStart(i),setTimeout(function(){u&&u(M),b.manager.itemEnd(i)},0),M;const N=document.createElementNS("http://www.w3.org/1999/xhtml","img");function F(){N.removeEventListener("load",F,!1),N.removeEventListener("error",D,!1),u0.add(i,this),u&&u(this),b.manager.itemEnd(i)}function D(O){N.removeEventListener("load",F,!1),N.removeEventListener("error",D,!1),v&&v(O),b.manager.itemError(i),b.manager.itemEnd(i)}return N.addEventListener("load",F,!1),N.addEventListener("error",D,!1),i.substr(0,5)!=="data:"&&this.crossOrigin!==void 0&&(N.crossOrigin=this.crossOrigin),b.manager.itemStart(i),N.src=i,N}}class Pj extends tf{constructor(i){super(i)}load(i,u,g,v){const b=new t_,M=new _R(this.manager);M.setCrossOrigin(this.crossOrigin),M.setPath(this.path);let N=0;function F(D){M.load(i[D],function(O){b.images[D]=O,N++,N===6&&(b.needsUpdate=!0,u&&u(b))},void 0,v)}for(let D=0;D<i.length;++D)F(D);return b}}class SR extends tf{constructor(i){super(i)}load(i,u,g,v){const b=new Ta,M=new _R(this.manager);return M.setCrossOrigin(this.crossOrigin),M.setPath(this.path),M.load(i,function(N){b.image=N;const F=i.search(/\.jpe?g($|\?)/i)>0||i.search(/^data\:image\/jpeg/)===0;b.format=F?Kp:ml,b.needsUpdate=!0,u!==void 0&&u(b)},g,v),b}}class Fj extends Bl{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(i){this.curves.push(i)}closePath(){const i=this.curves[0].getPoint(0),u=this.curves[this.curves.length-1].getPoint(1);i.equals(u)||this.curves.push(new s_(u,i))}getPoint(i){const u=i*this.getLength(),g=this.getCurveLengths();let v=0;for(;v<g.length;){if(g[v]>=u){const b=g[v]-u,M=this.curves[v],N=M.getLength(),F=N===0?0:1-b/N;return M.getPointAt(F)}v++}return null}getLength(){const i=this.getCurveLengths();return i[i.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const i=[];let u=0;for(let g=0,v=this.curves.length;g<v;g++)u+=this.curves[g].getLength(),i.push(u);return this.cacheLengths=i,i}getSpacedPoints(i=40){const u=[];for(let g=0;g<=i;g++)u.push(this.getPoint(g/i));return this.autoClose&&u.push(u[0]),u}getPoints(i=12){const u=[];let g;for(let v=0,b=this.curves;v<b.length;v++){const M=b[v],N=M&&M.isEllipseCurve?i*2:M&&(M.isLineCurve||M.isLineCurve3)?1:M&&M.isSplineCurve?i*M.points.length:i,F=M.getPoints(N);for(let D=0;D<F.length;D++){const O=F[D];g&&g.equals(O)||(u.push(O),g=O)}}return this.autoClose&&u.length>1&&!u[u.length-1].equals(u[0])&&u.push(u[0]),u}copy(i){super.copy(i),this.curves=[];for(let u=0,g=i.curves.length;u<g;u++){const v=i.curves[u];this.curves.push(v.clone())}return this.autoClose=i.autoClose,this}toJSON(){const i=super.toJSON();i.autoClose=this.autoClose,i.curves=[];for(let u=0,g=this.curves.length;u<g;u++){const v=this.curves[u];i.curves.push(v.toJSON())}return i}fromJSON(i){super.fromJSON(i),this.autoClose=i.autoClose,this.curves=[];for(let u=0,g=i.curves.length;u<g;u++){const v=i.curves[u];this.curves.push(new mR[v.type]().fromJSON(v))}return this}}class bE extends Fj{constructor(i){super(),this.type="Path",this.currentPoint=new xn,i&&this.setFromPoints(i)}setFromPoints(i){this.moveTo(i[0].x,i[0].y);for(let u=1,g=i.length;u<g;u++)this.lineTo(i[u].x,i[u].y);return this}moveTo(i,u){return this.currentPoint.set(i,u),this}lineTo(i,u){const g=new s_(this.currentPoint.clone(),new xn(i,u));return this.curves.push(g),this.currentPoint.set(i,u),this}quadraticCurveTo(i,u,g,v){const b=new FE(this.currentPoint.clone(),new xn(i,u),new xn(g,v));return this.curves.push(b),this.currentPoint.set(g,v),this}bezierCurveTo(i,u,g,v,b,M){const N=new PE(this.currentPoint.clone(),new xn(i,u),new xn(g,v),new xn(b,M));return this.curves.push(N),this.currentPoint.set(b,M),this}splineThru(i){const u=[this.currentPoint.clone()].concat(i),g=new OE(u);return this.curves.push(g),this.currentPoint.copy(i[i.length-1]),this}arc(i,u,g,v,b,M){const N=this.currentPoint.x,F=this.currentPoint.y;return this.absarc(i+N,u+F,g,v,b,M),this}absarc(i,u,g,v,b,M){return this.absellipse(i,u,g,g,v,b,M),this}ellipse(i,u,g,v,b,M,N,F){const D=this.currentPoint.x,O=this.currentPoint.y;return this.absellipse(i+D,u+O,g,v,b,M,N,F),this}absellipse(i,u,g,v,b,M,N,F){const D=new i_(i,u,g,v,b,M,N,F);if(this.curves.length>0){const z=D.getPoint(0);z.equals(this.currentPoint)||this.lineTo(z.x,z.y)}this.curves.push(D);const O=D.getPoint(1);return this.currentPoint.copy(O),this}copy(i){return super.copy(i),this.currentPoint.copy(i.currentPoint),this}toJSON(){const i=super.toJSON();return i.currentPoint=this.currentPoint.toArray(),i}fromJSON(i){return super.fromJSON(i),this.currentPoint.fromArray(i.currentPoint),this}}class BE extends bE{constructor(i){super(i),this.uuid=Ic(),this.type="Shape",this.holes=[]}getPointsHoles(i){const u=[];for(let g=0,v=this.holes.length;g<v;g++)u[g]=this.holes[g].getPoints(i);return u}extractPoints(i){return{shape:this.getPoints(i),holes:this.getPointsHoles(i)}}copy(i){super.copy(i),this.holes=[];for(let u=0,g=i.holes.length;u<g;u++){const v=i.holes[u];this.holes.push(v.clone())}return this}toJSON(){const i=super.toJSON();i.uuid=this.uuid,i.holes=[];for(let u=0,g=this.holes.length;u<g;u++){const v=this.holes[u];i.holes.push(v.toJSON())}return i}fromJSON(i){super.fromJSON(i),this.uuid=i.uuid,this.holes=[];for(let u=0,g=i.holes.length;u<g;u++){const v=i.holes[u];this.holes.push(new bE().fromJSON(v))}return this}}class kc extends ai{constructor(i,u=1){super(),this.type="Light",this.color=new rr(i),this.intensity=u}dispose(){}copy(i){return super.copy(i),this.color.copy(i.color),this.intensity=i.intensity,this}toJSON(i){const u=super.toJSON(i);return u.object.color=this.color.getHex(),u.object.intensity=this.intensity,this.groundColor!==void 0&&(u.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(u.object.distance=this.distance),this.angle!==void 0&&(u.object.angle=this.angle),this.decay!==void 0&&(u.object.decay=this.decay),this.penumbra!==void 0&&(u.object.penumbra=this.penumbra),this.shadow!==void 0&&(u.object.shadow=this.shadow.toJSON()),u}}kc.prototype.isLight=!0;class Oj extends kc{constructor(i,u,g){super(i,g),this.type="HemisphereLight",this.position.copy(ai.DefaultUp),this.updateMatrix(),this.groundColor=new rr(u)}copy(i){return kc.prototype.copy.call(this,i),this.groundColor.copy(i.groundColor),this}}Oj.prototype.isHemisphereLight=!0;const MN=new cr,TN=new He,EN=new He;class $E{constructor(i){this.camera=i,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new xn(512,512),this.map=null,this.mapPass=null,this.matrix=new cr,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new n_,this._frameExtents=new xn(1,1),this._viewportCount=1,this._viewports=[new Si(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(i){const u=this.camera,g=this.matrix;TN.setFromMatrixPosition(i.matrixWorld),u.position.copy(TN),EN.setFromMatrixPosition(i.target.matrixWorld),u.lookAt(EN),u.updateMatrixWorld(),MN.multiplyMatrices(u.projectionMatrix,u.matrixWorldInverse),this._frustum.setFromProjectionMatrix(MN),g.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),g.multiply(u.projectionMatrix),g.multiply(u.matrixWorldInverse)}getViewport(i){return this._viewports[i]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(i){return this.camera=i.camera.clone(),this.bias=i.bias,this.radius=i.radius,this.mapSize.copy(i.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const i={};return this.bias!==0&&(i.bias=this.bias),this.normalBias!==0&&(i.normalBias=this.normalBias),this.radius!==1&&(i.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(i.mapSize=this.mapSize.toArray()),i.camera=this.camera.toJSON(!1).object,delete i.camera.matrix,i}}class MR extends $E{constructor(){super(new Lo(50,1,.5,500)),this.focus=1}updateMatrices(i){const u=this.camera,g=fE*2*i.angle*this.focus,v=this.mapSize.width/this.mapSize.height,b=i.distance||u.far;(g!==u.fov||v!==u.aspect||b!==u.far)&&(u.fov=g,u.aspect=v,u.far=b,u.updateProjectionMatrix()),super.updateMatrices(i)}copy(i){return super.copy(i),this.focus=i.focus,this}}MR.prototype.isSpotLightShadow=!0;class zj extends kc{constructor(i,u,g=0,v=Math.PI/3,b=0,M=1){super(i,u),this.type="SpotLight",this.position.copy(ai.DefaultUp),this.updateMatrix(),this.target=new ai,this.distance=g,this.angle=v,this.penumbra=b,this.decay=M,this.shadow=new MR}get power(){return this.intensity*Math.PI}set power(i){this.intensity=i/Math.PI}dispose(){this.shadow.dispose()}copy(i){return super.copy(i),this.distance=i.distance,this.angle=i.angle,this.penumbra=i.penumbra,this.decay=i.decay,this.target=i.target.clone(),this.shadow=i.shadow.clone(),this}}zj.prototype.isSpotLight=!0;const AN=new cr,pv=new He,oE=new He;class TR extends $E{constructor(){super(new Lo(90,1,.5,500)),this._frameExtents=new xn(4,2),this._viewportCount=6,this._viewports=[new Si(2,1,1,1),new Si(0,1,1,1),new Si(3,1,1,1),new Si(1,1,1,1),new Si(3,0,1,1),new Si(1,0,1,1)],this._cubeDirections=[new He(1,0,0),new He(-1,0,0),new He(0,0,1),new He(0,0,-1),new He(0,1,0),new He(0,-1,0)],this._cubeUps=[new He(0,1,0),new He(0,1,0),new He(0,1,0),new He(0,1,0),new He(0,0,1),new He(0,0,-1)]}updateMatrices(i,u=0){const g=this.camera,v=this.matrix,b=i.distance||g.far;b!==g.far&&(g.far=b,g.updateProjectionMatrix()),pv.setFromMatrixPosition(i.matrixWorld),g.position.copy(pv),oE.copy(g.position),oE.add(this._cubeDirections[u]),g.up.copy(this._cubeUps[u]),g.lookAt(oE),g.updateMatrixWorld(),v.makeTranslation(-pv.x,-pv.y,-pv.z),AN.multiplyMatrices(g.projectionMatrix,g.matrixWorldInverse),this._frustum.setFromProjectionMatrix(AN)}}TR.prototype.isPointLightShadow=!0;class Bj extends kc{constructor(i,u,g=0,v=1){super(i,u),this.type="PointLight",this.distance=g,this.decay=v,this.shadow=new TR}get power(){return this.intensity*4*Math.PI}set power(i){this.intensity=i/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(i){return super.copy(i),this.distance=i.distance,this.decay=i.decay,this.shadow=i.shadow.clone(),this}}Bj.prototype.isPointLight=!0;class ER extends $E{constructor(){super(new CE(-5,5,5,-5,.5,500))}}ER.prototype.isDirectionalLightShadow=!0;class $j extends kc{constructor(i,u){super(i,u),this.type="DirectionalLight",this.position.copy(ai.DefaultUp),this.updateMatrix(),this.target=new ai,this.shadow=new ER}dispose(){this.shadow.dispose()}copy(i){return super.copy(i),this.target=i.target.clone(),this.shadow=i.shadow.clone(),this}}$j.prototype.isDirectionalLight=!0;class Uj extends kc{constructor(i,u){super(i,u),this.type="AmbientLight"}}Uj.prototype.isAmbientLight=!0;class Vj extends kc{constructor(i,u,g=10,v=10){super(i,u),this.type="RectAreaLight",this.width=g,this.height=v}get power(){return this.intensity*this.width*this.height*Math.PI}set power(i){this.intensity=i/(this.width*this.height*Math.PI)}copy(i){return super.copy(i),this.width=i.width,this.height=i.height,this}toJSON(i){const u=super.toJSON(i);return u.object.width=this.width,u.object.height=this.height,u}}Vj.prototype.isRectAreaLight=!0;class AR{constructor(){this.coefficients=[];for(let i=0;i<9;i++)this.coefficients.push(new He)}set(i){for(let u=0;u<9;u++)this.coefficients[u].copy(i[u]);return this}zero(){for(let i=0;i<9;i++)this.coefficients[i].set(0,0,0);return this}getAt(i,u){const g=i.x,v=i.y,b=i.z,M=this.coefficients;return u.copy(M[0]).multiplyScalar(.282095),u.addScaledVector(M[1],.488603*v),u.addScaledVector(M[2],.488603*b),u.addScaledVector(M[3],.488603*g),u.addScaledVector(M[4],1.092548*(g*v)),u.addScaledVector(M[5],1.092548*(v*b)),u.addScaledVector(M[6],.315392*(3*b*b-1)),u.addScaledVector(M[7],1.092548*(g*b)),u.addScaledVector(M[8],.546274*(g*g-v*v)),u}getIrradianceAt(i,u){const g=i.x,v=i.y,b=i.z,M=this.coefficients;return u.copy(M[0]).multiplyScalar(.886227),u.addScaledVector(M[1],2*.511664*v),u.addScaledVector(M[2],2*.511664*b),u.addScaledVector(M[3],2*.511664*g),u.addScaledVector(M[4],2*.429043*g*v),u.addScaledVector(M[5],2*.429043*v*b),u.addScaledVector(M[6],.743125*b*b-.247708),u.addScaledVector(M[7],2*.429043*g*b),u.addScaledVector(M[8],.429043*(g*g-v*v)),u}add(i){for(let u=0;u<9;u++)this.coefficients[u].add(i.coefficients[u]);return this}addScaledSH(i,u){for(let g=0;g<9;g++)this.coefficients[g].addScaledVector(i.coefficients[g],u);return this}scale(i){for(let u=0;u<9;u++)this.coefficients[u].multiplyScalar(i);return this}lerp(i,u){for(let g=0;g<9;g++)this.coefficients[g].lerp(i.coefficients[g],u);return this}equals(i){for(let u=0;u<9;u++)if(!this.coefficients[u].equals(i.coefficients[u]))return!1;return!0}copy(i){return this.set(i.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(i,u=0){const g=this.coefficients;for(let v=0;v<9;v++)g[v].fromArray(i,u+v*3);return this}toArray(i=[],u=0){const g=this.coefficients;for(let v=0;v<9;v++)g[v].toArray(i,u+v*3);return i}static getBasisAt(i,u){const g=i.x,v=i.y,b=i.z;u[0]=.282095,u[1]=.488603*v,u[2]=.488603*b,u[3]=.488603*g,u[4]=1.092548*g*v,u[5]=1.092548*v*b,u[6]=.315392*(3*b*b-1),u[7]=1.092548*g*b,u[8]=.546274*(g*g-v*v)}}AR.prototype.isSphericalHarmonics3=!0;class UE extends kc{constructor(i=new AR,u=1){super(void 0,u),this.sh=i}copy(i){return super.copy(i),this.sh.copy(i.sh),this}fromJSON(i){return this.intensity=i.intensity,this.sh.fromArray(i.sh),this}toJSON(i){const u=super.toJSON(i);return u.object.sh=this.sh.toArray(),u}}UE.prototype.isLightProbe=!0;class Wj{static decodeText(i){if(typeof TextDecoder!="undefined")return new TextDecoder().decode(i);let u="";for(let g=0,v=i.length;g<v;g++)u+=String.fromCharCode(i[g]);try{return decodeURIComponent(escape(u))}catch{return u}}static extractUrlBase(i){const u=i.lastIndexOf("/");return u===-1?"./":i.substr(0,u+1)}}class Gj extends $i{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(i){return super.copy(i),this.instanceCount=i.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const i=super.toJSON(this);return i.instanceCount=this.instanceCount,i.isInstancedBufferGeometry=!0,i}}Gj.prototype.isInstancedBufferGeometry=!0;class Hj extends tf{constructor(i){super(i),typeof createImageBitmap=="undefined"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch=="undefined"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(i){return this.options=i,this}load(i,u,g,v){i===void 0&&(i=""),this.path!==void 0&&(i=this.path+i),i=this.manager.resolveURL(i);const b=this,M=u0.get(i);if(M!==void 0)return b.manager.itemStart(i),setTimeout(function(){u&&u(M),b.manager.itemEnd(i)},0),M;const N={};N.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",N.headers=this.requestHeader,fetch(i,N).then(function(F){return F.blob()}).then(function(F){return createImageBitmap(F,Object.assign(b.options,{colorSpaceConversion:"none"}))}).then(function(F){u0.add(i,F),u&&u(F),b.manager.itemEnd(i)}).catch(function(F){v&&v(F),b.manager.itemError(i),b.manager.itemEnd(i)}),b.manager.itemStart(i)}}Hj.prototype.isImageBitmapLoader=!0;let B1;const jj={getContext:function(){return B1===void 0&&(B1=new(window.AudioContext||window.webkitAudioContext)),B1},setContext:function(E){B1=E}};class qj extends tf{constructor(i){super(i)}load(i,u,g,v){const b=this,M=new Dj(this.manager);M.setResponseType("arraybuffer"),M.setPath(this.path),M.setRequestHeader(this.requestHeader),M.setWithCredentials(this.withCredentials),M.load(i,function(N){try{const F=N.slice(0);jj.getContext().decodeAudioData(F,function(O){u(O)})}catch(F){v?v(F):console.error(F),b.manager.itemError(i)}},g,v)}}class Xj extends UE{constructor(i,u,g=1){super(void 0,g);const v=new rr().set(i),b=new rr().set(u),M=new He(v.r,v.g,v.b),N=new He(b.r,b.g,b.b),F=Math.sqrt(Math.PI),D=F*Math.sqrt(.75);this.sh.coefficients[0].copy(M).add(N).multiplyScalar(F),this.sh.coefficients[1].copy(M).sub(N).multiplyScalar(D)}}Xj.prototype.isHemisphereLightProbe=!0;class Yj extends UE{constructor(i,u=1){super(void 0,u);const g=new rr().set(i);this.sh.coefficients[0].set(g.r,g.g,g.b).multiplyScalar(2*Math.sqrt(Math.PI))}}Yj.prototype.isAmbientLightProbe=!0;class Kj extends ai{constructor(i){super(),this.type="Audio",this.listener=i,this.context=i.context,this.gain=this.context.createGain(),this.gain.connect(i.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(i){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=i,this.connect(),this}setMediaElementSource(i){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(i),this.connect(),this}setMediaStreamSource(i){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(i),this.connect(),this}setBuffer(i){return this.buffer=i,this.sourceType="buffer",this.autoplay&&this.play(),this}play(i=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+i;const u=this.context.createBufferSource();return u.buffer=this.buffer,u.loop=this.loop,u.loopStart=this.loopStart,u.loopEnd=this.loopEnd,u.onended=this.onEnded.bind(this),u.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=u,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let i=1,u=this.filters.length;i<u;i++)this.filters[i-1].connect(this.filters[i]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let i=1,u=this.filters.length;i<u;i++)this.filters[i-1].disconnect(this.filters[i]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(i){return i||(i=[]),this._connected===!0?(this.disconnect(),this.filters=i.slice(),this.connect()):this.filters=i.slice(),this}setDetune(i){if(this.detune=i,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(i){return this.setFilters(i?[i]:[])}setPlaybackRate(i){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=i,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(i){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=i,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(i){return this.loopStart=i,this}setLoopEnd(i){return this.loopEnd=i,this}getVolume(){return this.gain.gain.value}setVolume(i){return this.gain.gain.setTargetAtTime(i,this.context.currentTime,.01),this}}class Zj{constructor(i,u,g){this.binding=i,this.valueSize=g;let v,b,M;switch(u){case"quaternion":v=this._slerp,b=this._slerpAdditive,M=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(g*6),this._workIndex=5;break;case"string":case"bool":v=this._select,b=this._select,M=this._setAdditiveIdentityOther,this.buffer=new Array(g*5);break;default:v=this._lerp,b=this._lerpAdditive,M=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(g*5)}this._mixBufferRegion=v,this._mixBufferRegionAdditive=b,this._setIdentity=M,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(i,u){const g=this.buffer,v=this.valueSize,b=i*v+v;let M=this.cumulativeWeight;if(M===0){for(let N=0;N!==v;++N)g[b+N]=g[N];M=u}else{M+=u;const N=u/M;this._mixBufferRegion(g,b,0,N,v)}this.cumulativeWeight=M}accumulateAdditive(i){const u=this.buffer,g=this.valueSize,v=g*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(u,v,0,i,g),this.cumulativeWeightAdditive+=i}apply(i){const u=this.valueSize,g=this.buffer,v=i*u+u,b=this.cumulativeWeight,M=this.cumulativeWeightAdditive,N=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,b<1){const F=u*this._origIndex;this._mixBufferRegion(g,v,F,1-b,u)}M>0&&this._mixBufferRegionAdditive(g,v,this._addIndex*u,1,u);for(let F=u,D=u+u;F!==D;++F)if(g[F]!==g[F+u]){N.setValue(g,v);break}}saveOriginalState(){const i=this.binding,u=this.buffer,g=this.valueSize,v=g*this._origIndex;i.getValue(u,v);for(let b=g,M=v;b!==M;++b)u[b]=u[v+b%g];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const i=this.valueSize*3;this.binding.setValue(this.buffer,i)}_setAdditiveIdentityNumeric(){const i=this._addIndex*this.valueSize,u=i+this.valueSize;for(let g=i;g<u;g++)this.buffer[g]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const i=this._origIndex*this.valueSize,u=this._addIndex*this.valueSize;for(let g=0;g<this.valueSize;g++)this.buffer[u+g]=this.buffer[i+g]}_select(i,u,g,v,b){if(v>=.5)for(let M=0;M!==b;++M)i[u+M]=i[g+M]}_slerp(i,u,g,v){oo.slerpFlat(i,u,i,u,i,g,v)}_slerpAdditive(i,u,g,v,b){const M=this._workIndex*b;oo.multiplyQuaternionsFlat(i,M,i,u,i,g),oo.slerpFlat(i,u,i,u,i,M,v)}_lerp(i,u,g,v,b){const M=1-v;for(let N=0;N!==b;++N){const F=u+N;i[F]=i[F]*M+i[g+N]*v}}_lerpAdditive(i,u,g,v,b){for(let M=0;M!==b;++M){const N=u+M;i[N]=i[N]+i[g+M]*v}}}const VE="\\[\\]\\.:\\/",Jj=new RegExp("["+VE+"]","g"),WE="[^"+VE+"]",Qj="[^"+VE.replace("\\.","")+"]",eq=/((?:WC+[\/:])*)/.source.replace("WC",WE),tq=/(WCOD+)?/.source.replace("WCOD",Qj),nq=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",WE),rq=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",WE),iq=new RegExp("^"+eq+tq+nq+rq+"$"),sq=["material","materials","bones"];class aq{constructor(i,u,g){const v=g||hi.parseTrackName(u);this._targetGroup=i,this._bindings=i.subscribe_(u,v)}getValue(i,u){this.bind();const g=this._targetGroup.nCachedObjects_,v=this._bindings[g];v!==void 0&&v.getValue(i,u)}setValue(i,u){const g=this._bindings;for(let v=this._targetGroup.nCachedObjects_,b=g.length;v!==b;++v)g[v].setValue(i,u)}bind(){const i=this._bindings;for(let u=this._targetGroup.nCachedObjects_,g=i.length;u!==g;++u)i[u].bind()}unbind(){const i=this._bindings;for(let u=this._targetGroup.nCachedObjects_,g=i.length;u!==g;++u)i[u].unbind()}}class hi{constructor(i,u,g){this.path=u,this.parsedPath=g||hi.parseTrackName(u),this.node=hi.findNode(i,this.parsedPath.nodeName)||i,this.rootNode=i,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(i,u,g){return i&&i.isAnimationObjectGroup?new hi.Composite(i,u,g):new hi(i,u,g)}static sanitizeNodeName(i){return i.replace(/\s/g,"_").replace(Jj,"")}static parseTrackName(i){const u=iq.exec(i);if(!u)throw new Error("PropertyBinding: Cannot parse trackName: "+i);const g={nodeName:u[2],objectName:u[3],objectIndex:u[4],propertyName:u[5],propertyIndex:u[6]},v=g.nodeName&&g.nodeName.lastIndexOf(".");if(v!==void 0&&v!==-1){const b=g.nodeName.substring(v+1);sq.indexOf(b)!==-1&&(g.nodeName=g.nodeName.substring(0,v),g.objectName=b)}if(g.propertyName===null||g.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+i);return g}static findNode(i,u){if(!u||u===""||u==="."||u===-1||u===i.name||u===i.uuid)return i;if(i.skeleton){const g=i.skeleton.getBoneByName(u);if(g!==void 0)return g}if(i.children){const g=function(b){for(let M=0;M<b.length;M++){const N=b[M];if(N.name===u||N.uuid===u)return N;const F=g(N.children);if(F)return F}return null},v=g(i.children);if(v)return v}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(i,u){i[u]=this.targetObject[this.propertyName]}_getValue_array(i,u){const g=this.resolvedProperty;for(let v=0,b=g.length;v!==b;++v)i[u++]=g[v]}_getValue_arrayElement(i,u){i[u]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(i,u){this.resolvedProperty.toArray(i,u)}_setValue_direct(i,u){this.targetObject[this.propertyName]=i[u]}_setValue_direct_setNeedsUpdate(i,u){this.targetObject[this.propertyName]=i[u],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(i,u){this.targetObject[this.propertyName]=i[u],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(i,u){const g=this.resolvedProperty;for(let v=0,b=g.length;v!==b;++v)g[v]=i[u++]}_setValue_array_setNeedsUpdate(i,u){const g=this.resolvedProperty;for(let v=0,b=g.length;v!==b;++v)g[v]=i[u++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(i,u){const g=this.resolvedProperty;for(let v=0,b=g.length;v!==b;++v)g[v]=i[u++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(i,u){this.resolvedProperty[this.propertyIndex]=i[u]}_setValue_arrayElement_setNeedsUpdate(i,u){this.resolvedProperty[this.propertyIndex]=i[u],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(i,u){this.resolvedProperty[this.propertyIndex]=i[u],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(i,u){this.resolvedProperty.fromArray(i,u)}_setValue_fromArray_setNeedsUpdate(i,u){this.resolvedProperty.fromArray(i,u),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(i,u){this.resolvedProperty.fromArray(i,u),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(i,u){this.bind(),this.getValue(i,u)}_setValue_unbound(i,u){this.bind(),this.setValue(i,u)}bind(){let i=this.node;const u=this.parsedPath,g=u.objectName,v=u.propertyName;let b=u.propertyIndex;if(i||(i=hi.findNode(this.rootNode,u.nodeName)||this.rootNode,this.node=i),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!i){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(g){let D=u.objectIndex;switch(g){case"materials":if(!i.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!i.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}i=i.material.materials;break;case"bones":if(!i.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}i=i.skeleton.bones;for(let O=0;O<i.length;O++)if(i[O].name===D){D=O;break}break;default:if(i[g]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}i=i[g]}if(D!==void 0){if(i[D]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,i);return}i=i[D]}}const M=i[v];if(M===void 0){const D=u.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+D+"."+v+" but it wasn't found.",i);return}let N=this.Versioning.None;this.targetObject=i,i.needsUpdate!==void 0?N=this.Versioning.NeedsUpdate:i.matrixWorldNeedsUpdate!==void 0&&(N=this.Versioning.MatrixWorldNeedsUpdate);let F=this.BindingType.Direct;if(b!==void 0){if(v==="morphTargetInfluences"){if(!i.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(i.geometry.isBufferGeometry){if(!i.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}i.morphTargetDictionary[b]!==void 0&&(b=i.morphTargetDictionary[b])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}F=this.BindingType.ArrayElement,this.resolvedProperty=M,this.propertyIndex=b}else M.fromArray!==void 0&&M.toArray!==void 0?(F=this.BindingType.HasFromToArray,this.resolvedProperty=M):Array.isArray(M)?(F=this.BindingType.EntireArray,this.resolvedProperty=M):this.propertyName=v;this.getValue=this.GetterByBindingType[F],this.setValue=this.SetterByBindingTypeAndVersioning[F][N]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}hi.Composite=aq;hi.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};hi.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};hi.prototype.GetterByBindingType=[hi.prototype._getValue_direct,hi.prototype._getValue_array,hi.prototype._getValue_arrayElement,hi.prototype._getValue_toArray];hi.prototype.SetterByBindingTypeAndVersioning=[[hi.prototype._setValue_direct,hi.prototype._setValue_direct_setNeedsUpdate,hi.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[hi.prototype._setValue_array,hi.prototype._setValue_array_setNeedsUpdate,hi.prototype._setValue_array_setMatrixWorldNeedsUpdate],[hi.prototype._setValue_arrayElement,hi.prototype._setValue_arrayElement_setNeedsUpdate,hi.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[hi.prototype._setValue_fromArray,hi.prototype._setValue_fromArray_setNeedsUpdate,hi.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class oq{constructor(i,u,g=null,v=u.blendMode){this._mixer=i,this._clip=u,this._localRoot=g,this.blendMode=v;const b=u.tracks,M=b.length,N=new Array(M),F={endingStart:e0,endingEnd:e0};for(let D=0;D!==M;++D){const O=b[D].createInterpolant(null);N[D]=O,O.settings=F}this._interpolantSettings=F,this._interpolants=N,this._propertyBindings=new Array(M),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=VH,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(i){return this._startTime=i,this}setLoop(i,u){return this.loop=i,this.repetitions=u,this}setEffectiveWeight(i){return this.weight=i,this._effectiveWeight=this.enabled?i:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(i){return this._scheduleFading(i,0,1)}fadeOut(i){return this._scheduleFading(i,1,0)}crossFadeFrom(i,u,g){if(i.fadeOut(u),this.fadeIn(u),g){const v=this._clip.duration,b=i._clip.duration,M=b/v,N=v/b;i.warp(1,M,u),this.warp(N,1,u)}return this}crossFadeTo(i,u,g){return i.crossFadeFrom(this,u,g)}stopFading(){const i=this._weightInterpolant;return i!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(i)),this}setEffectiveTimeScale(i){return this.timeScale=i,this._effectiveTimeScale=this.paused?0:i,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(i){return this.timeScale=this._clip.duration/i,this.stopWarping()}syncWith(i){return this.time=i.time,this.timeScale=i.timeScale,this.stopWarping()}halt(i){return this.warp(this._effectiveTimeScale,0,i)}warp(i,u,g){const v=this._mixer,b=v.time,M=this.timeScale;let N=this._timeScaleInterpolant;N===null&&(N=v._lendControlInterpolant(),this._timeScaleInterpolant=N);const F=N.parameterPositions,D=N.sampleValues;return F[0]=b,F[1]=b+g,D[0]=i/M,D[1]=u/M,this}stopWarping(){const i=this._timeScaleInterpolant;return i!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(i)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(i,u,g,v){if(!this.enabled){this._updateWeight(i);return}const b=this._startTime;if(b!==null){const F=(i-b)*g;if(F<0||g===0)return;this._startTime=null,u=g*F}u*=this._updateTimeScale(i);const M=this._updateTime(u),N=this._updateWeight(i);if(N>0){const F=this._interpolants,D=this._propertyBindings;switch(this.blendMode){case DN:for(let O=0,z=F.length;O!==z;++O)F[O].evaluate(M),D[O].accumulateAdditive(N);break;case _E:default:for(let O=0,z=F.length;O!==z;++O)F[O].evaluate(M),D[O].accumulate(v,N)}}}_updateWeight(i){let u=0;if(this.enabled){u=this.weight;const g=this._weightInterpolant;if(g!==null){const v=g.evaluate(i)[0];u*=v,i>g.parameterPositions[1]&&(this.stopFading(),v===0&&(this.enabled=!1))}}return this._effectiveWeight=u,u}_updateTimeScale(i){let u=0;if(!this.paused){u=this.timeScale;const g=this._timeScaleInterpolant;g!==null&&(u*=g.evaluate(i)[0],i>g.parameterPositions[1]&&(this.stopWarping(),u===0?this.paused=!0:this.timeScale=u))}return this._effectiveTimeScale=u,u}_updateTime(i){const u=this._clip.duration,g=this.loop;let v=this.time+i,b=this._loopCount;const M=g===WH;if(i===0)return b===-1?v:M&&(b&1)===1?u-v:v;if(g===UH){b===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(v>=u)v=u;else if(v<0)v=0;else{this.time=v;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=v,this._mixer.dispatchEvent({type:"finished",action:this,direction:i<0?-1:1})}}else{if(b===-1&&(i>=0?(b=0,this._setEndings(!0,this.repetitions===0,M)):this._setEndings(this.repetitions===0,!0,M)),v>=u||v<0){const N=Math.floor(v/u);v-=u*N,b+=Math.abs(N);const F=this.repetitions-b;if(F<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,v=i>0?u:0,this.time=v,this._mixer.dispatchEvent({type:"finished",action:this,direction:i>0?1:-1});else{if(F===1){const D=i<0;this._setEndings(D,!D,M)}else this._setEndings(!1,!1,M);this._loopCount=b,this.time=v,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:N})}}else this.time=v;if(M&&(b&1)===1)return u-v}return v}_setEndings(i,u,g){const v=this._interpolantSettings;g?(v.endingStart=t0,v.endingEnd=t0):(i?v.endingStart=this.zeroSlopeAtStart?t0:e0:v.endingStart=H1,u?v.endingEnd=this.zeroSlopeAtEnd?t0:e0:v.endingEnd=H1)}_scheduleFading(i,u,g){const v=this._mixer,b=v.time;let M=this._weightInterpolant;M===null&&(M=v._lendControlInterpolant(),this._weightInterpolant=M);const N=M.parameterPositions,F=M.sampleValues;return N[0]=b,F[0]=u,N[1]=b+i,F[1]=g,this}}class lq extends Gm{constructor(i){super(),this._root=i,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(i,u){const g=i._localRoot||this._root,v=i._clip.tracks,b=v.length,M=i._propertyBindings,N=i._interpolants,F=g.uuid,D=this._bindingsByRootAndName;let O=D[F];O===void 0&&(O={},D[F]=O);for(let z=0;z!==b;++z){const B=v[z],W=B.name;let G=O[W];if(G!==void 0)M[z]=G;else{if(G=M[z],G!==void 0){G._cacheIndex===null&&(++G.referenceCount,this._addInactiveBinding(G,F,W));continue}const K=u&&u._propertyBindings[z].binding.parsedPath;G=new Zj(hi.create(g,W,K),B.ValueTypeName,B.getValueSize()),++G.referenceCount,this._addInactiveBinding(G,F,W),M[z]=G}N[z].resultBuffer=G.buffer}}_activateAction(i){if(!this._isActiveAction(i)){if(i._cacheIndex===null){const g=(i._localRoot||this._root).uuid,v=i._clip.uuid,b=this._actionsByClip[v];this._bindAction(i,b&&b.knownActions[0]),this._addInactiveAction(i,v,g)}const u=i._propertyBindings;for(let g=0,v=u.length;g!==v;++g){const b=u[g];b.useCount++===0&&(this._lendBinding(b),b.saveOriginalState())}this._lendAction(i)}}_deactivateAction(i){if(this._isActiveAction(i)){const u=i._propertyBindings;for(let g=0,v=u.length;g!==v;++g){const b=u[g];--b.useCount===0&&(b.restoreOriginalState(),this._takeBackBinding(b))}this._takeBackAction(i)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const i=this;this.stats={actions:{get total(){return i._actions.length},get inUse(){return i._nActiveActions}},bindings:{get total(){return i._bindings.length},get inUse(){return i._nActiveBindings}},controlInterpolants:{get total(){return i._controlInterpolants.length},get inUse(){return i._nActiveControlInterpolants}}}}_isActiveAction(i){const u=i._cacheIndex;return u!==null&&u<this._nActiveActions}_addInactiveAction(i,u,g){const v=this._actions,b=this._actionsByClip;let M=b[u];if(M===void 0)M={knownActions:[i],actionByRoot:{}},i._byClipCacheIndex=0,b[u]=M;else{const N=M.knownActions;i._byClipCacheIndex=N.length,N.push(i)}i._cacheIndex=v.length,v.push(i),M.actionByRoot[g]=i}_removeInactiveAction(i){const u=this._actions,g=u[u.length-1],v=i._cacheIndex;g._cacheIndex=v,u[v]=g,u.pop(),i._cacheIndex=null;const b=i._clip.uuid,M=this._actionsByClip,N=M[b],F=N.knownActions,D=F[F.length-1],O=i._byClipCacheIndex;D._byClipCacheIndex=O,F[O]=D,F.pop(),i._byClipCacheIndex=null;const z=N.actionByRoot,B=(i._localRoot||this._root).uuid;delete z[B],F.length===0&&delete M[b],this._removeInactiveBindingsForAction(i)}_removeInactiveBindingsForAction(i){const u=i._propertyBindings;for(let g=0,v=u.length;g!==v;++g){const b=u[g];--b.referenceCount===0&&this._removeInactiveBinding(b)}}_lendAction(i){const u=this._actions,g=i._cacheIndex,v=this._nActiveActions++,b=u[v];i._cacheIndex=v,u[v]=i,b._cacheIndex=g,u[g]=b}_takeBackAction(i){const u=this._actions,g=i._cacheIndex,v=--this._nActiveActions,b=u[v];i._cacheIndex=v,u[v]=i,b._cacheIndex=g,u[g]=b}_addInactiveBinding(i,u,g){const v=this._bindingsByRootAndName,b=this._bindings;let M=v[u];M===void 0&&(M={},v[u]=M),M[g]=i,i._cacheIndex=b.length,b.push(i)}_removeInactiveBinding(i){const u=this._bindings,g=i.binding,v=g.rootNode.uuid,b=g.path,M=this._bindingsByRootAndName,N=M[v],F=u[u.length-1],D=i._cacheIndex;F._cacheIndex=D,u[D]=F,u.pop(),delete N[b],Object.keys(N).length===0&&delete M[v]}_lendBinding(i){const u=this._bindings,g=i._cacheIndex,v=this._nActiveBindings++,b=u[v];i._cacheIndex=v,u[v]=i,b._cacheIndex=g,u[g]=b}_takeBackBinding(i){const u=this._bindings,g=i._cacheIndex,v=--this._nActiveBindings,b=u[v];i._cacheIndex=v,u[v]=i,b._cacheIndex=g,u[g]=b}_lendControlInterpolant(){const i=this._controlInterpolants,u=this._nActiveControlInterpolants++;let g=i[u];return g===void 0&&(g=new bR(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),g.__cacheIndex=u,i[u]=g),g}_takeBackControlInterpolant(i){const u=this._controlInterpolants,g=i.__cacheIndex,v=--this._nActiveControlInterpolants,b=u[v];i.__cacheIndex=v,u[v]=i,b.__cacheIndex=g,u[g]=b}clipAction(i,u,g){const v=u||this._root,b=v.uuid;let M=typeof i=="string"?SN.findByName(v,i):i;const N=M!==null?M.uuid:i,F=this._actionsByClip[N];let D=null;if(g===void 0&&(M!==null?g=M.blendMode:g=_E),F!==void 0){const z=F.actionByRoot[b];if(z!==void 0&&z.blendMode===g)return z;D=F.knownActions[0],M===null&&(M=D._clip)}if(M===null)return null;const O=new oq(this,M,u,g);return this._bindAction(O,D),this._addInactiveAction(O,N,b),O}existingAction(i,u){const g=u||this._root,v=g.uuid,b=typeof i=="string"?SN.findByName(g,i):i,M=b?b.uuid:i,N=this._actionsByClip[M];return N!==void 0&&N.actionByRoot[v]||null}stopAllAction(){const i=this._actions,u=this._nActiveActions;for(let g=u-1;g>=0;--g)i[g].stop();return this}update(i){i*=this.timeScale;const u=this._actions,g=this._nActiveActions,v=this.time+=i,b=Math.sign(i),M=this._accuIndex^=1;for(let D=0;D!==g;++D)u[D]._update(v,i,b,M);const N=this._bindings,F=this._nActiveBindings;for(let D=0;D!==F;++D)N[D].apply(M);return this}setTime(i){this.time=0;for(let u=0;u<this._actions.length;u++)this._actions[u].time=0;return this.update(i)}getRoot(){return this._root}uncacheClip(i){const u=this._actions,g=i.uuid,v=this._actionsByClip,b=v[g];if(b!==void 0){const M=b.knownActions;for(let N=0,F=M.length;N!==F;++N){const D=M[N];this._deactivateAction(D);const O=D._cacheIndex,z=u[u.length-1];D._cacheIndex=null,D._byClipCacheIndex=null,z._cacheIndex=O,u[O]=z,u.pop(),this._removeInactiveBindingsForAction(D)}delete v[g]}}uncacheRoot(i){const u=i.uuid,g=this._actionsByClip;for(const M in g){const N=g[M].actionByRoot,F=N[u];F!==void 0&&(this._deactivateAction(F),this._removeInactiveAction(F))}const v=this._bindingsByRootAndName,b=v[u];if(b!==void 0)for(const M in b){const N=b[M];N.restoreOriginalState(),this._removeInactiveBinding(N)}}uncacheAction(i,u){const g=this.existingAction(i,u);g!==null&&(this._deactivateAction(g),this._removeInactiveAction(g))}}lq.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class uq extends kv{constructor(i,u,g=1){super(i,u),this.meshPerAttribute=g}copy(i){return super.copy(i),this.meshPerAttribute=i.meshPerAttribute,this}clone(i){const u=super.clone(i);return u.meshPerAttribute=this.meshPerAttribute,u}toJSON(i){const u=super.toJSON(i);return u.isInstancedInterleavedBuffer=!0,u.meshPerAttribute=this.meshPerAttribute,u}}uq.prototype.isInstancedInterleavedBuffer=!0;class cq extends ai{constructor(i){super(),this.material=i,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}cq.prototype.isImmediateRenderObject=!0;const Xp=new He,$1=new cr,lE=new cr;class hq extends LE{constructor(i){const u=IR(i),g=new $i,v=[],b=[],M=new rr(0,0,1),N=new rr(0,1,0);for(let D=0;D<u.length;D++){const O=u[D];O.parent&&O.parent.isBone&&(v.push(0,0,0),v.push(0,0,0),b.push(M.r,M.g,M.b),b.push(N.r,N.g,N.b))}g.setAttribute("position",new ua(v,3)),g.setAttribute("color",new ua(b,3));const F=new Nv({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(g,F),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=i,this.bones=u,this.matrix=i.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(i){const u=this.bones,g=this.geometry,v=g.getAttribute("position");lE.copy(this.root.matrixWorld).invert();for(let b=0,M=0;b<u.length;b++){const N=u[b];N.parent&&N.parent.isBone&&($1.multiplyMatrices(lE,N.matrixWorld),Xp.setFromMatrixPosition($1),v.setXYZ(M,Xp.x,Xp.y,Xp.z),$1.multiplyMatrices(lE,N.parent.matrixWorld),Xp.setFromMatrixPosition($1),v.setXYZ(M+1,Xp.x,Xp.y,Xp.z),M+=2)}g.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(i)}}function IR(E){const i=[];E&&E.isBone&&i.push(E);for(let u=0;u<E.children.length;u++)i.push.apply(i,IR(E.children[u]));return i}class dq extends LE{constructor(i=10,u=10,g=4473924,v=8947848){g=new rr(g),v=new rr(v);const b=u/2,M=i/u,N=i/2,F=[],D=[];for(let B=0,W=0,G=-N;B<=u;B++,G+=M){F.push(-N,0,G,N,0,G),F.push(G,0,-N,G,0,N);const K=B===b?g:v;K.toArray(D,W),W+=3,K.toArray(D,W),W+=3,K.toArray(D,W),W+=3,K.toArray(D,W),W+=3}const O=new $i;O.setAttribute("position",new ua(F,3)),O.setAttribute("color",new ua(D,3));const z=new Nv({vertexColors:!0,toneMapped:!1});super(O,z),this.type="GridHelper"}}const pq=new Float32Array(1);new Int32Array(pq.buffer);Bl.create=function(E,i){return console.log("THREE.Curve.create() has been deprecated"),E.prototype=Object.create(Bl.prototype),E.prototype.constructor=E,E.prototype.getPoint=i,E};bE.prototype.fromPoints=function(E){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(E)};dq.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};hq.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};tf.prototype.extractUrlBase=function(E){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Wj.extractUrlBase(E)};tf.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};Nu.prototype.center=function(E){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(E)};Nu.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()};Nu.prototype.isIntersectionBox=function(E){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(E)};Nu.prototype.isIntersectionSphere=function(E){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(E)};Nu.prototype.size=function(E){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(E)};d0.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()};n_.prototype.setFromMatrix=function(E){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(E)};Ma.prototype.flattenToArrayOffset=function(E,i){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(E,i)};Ma.prototype.multiplyVector3=function(E){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),E.applyMatrix3(this)};Ma.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")};Ma.prototype.applyToBufferAttribute=function(E){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),E.applyMatrix3(this)};Ma.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")};Ma.prototype.getInverse=function(E){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(E).invert()};cr.prototype.extractPosition=function(E){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(E)};cr.prototype.flattenToArrayOffset=function(E,i){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(E,i)};cr.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new He().setFromMatrixColumn(this,3)};cr.prototype.setRotationFromQuaternion=function(E){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(E)};cr.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")};cr.prototype.multiplyVector3=function(E){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),E.applyMatrix4(this)};cr.prototype.multiplyVector4=function(E){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),E.applyMatrix4(this)};cr.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")};cr.prototype.rotateAxis=function(E){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),E.transformDirection(this)};cr.prototype.crossVector=function(E){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),E.applyMatrix4(this)};cr.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")};cr.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")};cr.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")};cr.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")};cr.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")};cr.prototype.applyToBufferAttribute=function(E){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),E.applyMatrix4(this)};cr.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")};cr.prototype.makeFrustum=function(E,i,u,g,v,b){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(E,i,g,u,v,b)};cr.prototype.getInverse=function(E){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(E).invert()};Qh.prototype.isIntersectionLine=function(E){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(E)};oo.prototype.multiplyVector3=function(E){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),E.applyQuaternion(this)};oo.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()};p0.prototype.isIntersectionBox=function(E){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(E)};p0.prototype.isIntersectionPlane=function(E){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(E)};p0.prototype.isIntersectionSphere=function(E){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(E)};ks.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()};ks.prototype.barycoordFromPoint=function(E,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(E,i)};ks.prototype.midpoint=function(E){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(E)};ks.prototypenormal=function(E){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(E)};ks.prototype.plane=function(E){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(E)};ks.barycoordFromPoint=function(E,i,u,g,v){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),ks.getBarycoord(E,i,u,g,v)};ks.normal=function(E,i,u,g){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),ks.getNormal(E,i,u,g)};BE.prototype.extractAllPoints=function(E){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(E)};BE.prototype.extrude=function(E){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new g0(this,E)};BE.prototype.makeGeometry=function(E){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new zE(this,E)};xn.prototype.fromAttribute=function(E,i,u){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(E,i,u)};xn.prototype.distanceToManhattan=function(E){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(E)};xn.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};He.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")};He.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")};He.prototype.getPositionFromMatrix=function(E){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(E)};He.prototype.getScaleFromMatrix=function(E){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(E)};He.prototype.getColumnFromMatrix=function(E,i){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(i,E)};He.prototype.applyProjection=function(E){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(E)};He.prototype.fromAttribute=function(E,i,u){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(E,i,u)};He.prototype.distanceToManhattan=function(E){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(E)};He.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};Si.prototype.fromAttribute=function(E,i,u){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(E,i,u)};Si.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};ai.prototype.getChildByName=function(E){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(E)};ai.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")};ai.prototype.translate=function(E,i){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(i,E)};ai.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")};ai.prototype.applyMatrix=function(E){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(E)};Object.defineProperties(ai.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(E){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=E}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Do.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")};Object.defineProperties(Do.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),GH},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});uR.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};Lo.prototype.setLens=function(E,i){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),i!==void 0&&(this.filmGauge=i),this.setFocalLength(E)};Object.defineProperties(kc.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(E){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=E}},shadowCameraLeft:{set:function(E){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=E}},shadowCameraRight:{set:function(E){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=E}},shadowCameraTop:{set:function(E){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=E}},shadowCameraBottom:{set:function(E){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=E}},shadowCameraNear:{set:function(E){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=E}},shadowCameraFar:{set:function(E){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=E}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(E){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=E}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(E){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=E}},shadowMapHeight:{set:function(E){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=E}}});Object.defineProperties(Bs.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===j1},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(j1)}}});Bs.prototype.setDynamic=function(E){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(E===!0?j1:Sv),this};Bs.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Bs.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};$i.prototype.addIndex=function(E){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(E)};$i.prototype.addAttribute=function(E,i){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),!(i&&i.isBufferAttribute)&&!(i&&i.isInterleavedBufferAttribute)?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(E,new Bs(arguments[1],arguments[2]))):E==="index"?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(i),this):this.setAttribute(E,i)};$i.prototype.addDrawCall=function(E,i,u){u!==void 0&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(E,i)};$i.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()};$i.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")};$i.prototype.removeAttribute=function(E){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(E)};$i.prototype.applyMatrix=function(E){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(E)};Object.defineProperties($i.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}});kv.prototype.setDynamic=function(E){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(E===!0?j1:Sv),this};kv.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};g0.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")};g0.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")};g0.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")};aR.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")};Object.defineProperties(Va.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new rr}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(E){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=E===kN}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(E){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=E}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}});Object.defineProperties(Wm.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(E){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=E}}});Mi.prototype.clearTarget=function(E,i,u,g){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(E),this.clear(i,u,g)};Mi.prototype.animate=function(E){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(E)};Mi.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()};Mi.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()};Mi.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision};Mi.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()};Mi.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")};Mi.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")};Mi.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")};Mi.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")};Mi.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")};Mi.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")};Mi.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures};Mi.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")};Mi.prototype.enableScissorTest=function(E){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(E)};Mi.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")};Mi.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")};Mi.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")};Mi.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")};Mi.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")};Mi.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")};Mi.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")};Mi.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")};Mi.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")};Mi.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()};Object.defineProperties(Mi.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(E){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=E}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(E){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=E}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(E){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=E===!0?e_:Po}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}});Object.defineProperties(iR.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});Object.defineProperties(Cc.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(E){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=E}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(E){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=E}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(E){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=E}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(E){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=E}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(E){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=E}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(E){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=E}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(E){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=E}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(E){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=E}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(E){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=E}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(E){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=E}}});Kj.prototype.load=function(E){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const i=this;return new qj().load(E,function(g){i.setBuffer(g)}),this};AE.prototype.updateCubeMap=function(E,i){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(E,i)};AE.prototype.clear=function(E,i,u,g){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(E,i,u,g)};h0.crossOrigin=void 0;h0.loadTexture=function(E,i,u,g){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const v=new SR;v.setCrossOrigin(this.crossOrigin);const b=v.load(E,u,void 0,g);return i&&(b.mapping=i),b};h0.loadTextureCube=function(E,i,u,g){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const v=new Pj;v.setCrossOrigin(this.crossOrigin);const b=v.load(E,u,void 0,g);return i&&(b.mapping=i),b};h0.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};h0.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:IN}}));typeof window!="undefined"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=IN);class Iv extends ed{constructor(i,u,g,v){super(i,u,g,v)}copySampleValue_(i){const u=this.resultBuffer,g=this.sampleValues,v=this.valueSize,b=i*v*3+v;for(let M=0;M!==v;M++)u[M]=g[b+M];return u}}Iv.prototype.beforeStart_=Iv.prototype.copySampleValue_;Iv.prototype.afterEnd_=Iv.prototype.copySampleValue_;Iv.prototype.interpolate_=function(E,i,u,g){const v=this.resultBuffer,b=this.sampleValues,M=this.valueSize,N=M*2,F=M*3,D=g-i,O=(u-i)/D,z=O*O,B=z*O,W=E*F,G=W-F,K=-2*B+3*z,J=B-z,V=1-K,Z=J-z+O;for(let le=0;le!==M;le++){const fe=b[G+le+M],be=b[G+le+N]*D,Me=b[W+le+M],ce=b[W+le]*D;v[le]=V*fe+Z*be+K*Me+J*ce}return v};new oo;const fq=E=>{const i=new SR,u=[];for(let g=0;g<E.length;g++)u.push(new Promise((v,b)=>{i.load(E[g],M=>{v(M)})}));return Promise.all(u)},gi=window.MINDAR.IMAGE.THREE,mq=async()=>{const E=new window.MINDAR.IMAGE.MindARThree({container:document.body,imageTargetSrc:"./assets/targets/business-card.mind"}),{renderer:i,scene:u,camera:g}=E,v=new gi.HemisphereLight(16777215,12303359,1);u.add(v);const[b,M,N,F,D,O,z,B,W]=await fq(["./assets/business-card/business-card.png","./assets/business-card/db-pic.png","./assets/business-card/db-text.png","./assets/business-card/website.png","./assets/business-card/email.png","./assets/business-card/call.png","./assets/business-card/facebook.png","./assets/business-card/instagram.png","./assets/business-card/linked-in.png"]),G=new gi.PlaneGeometry(3,2),K=new gi.MeshBasicMaterial({map:b}),J=new gi.Mesh(G,K),V=new gi.PlaneGeometry(2.9,2.3),Z=new gi.MeshBasicMaterial({map:M,transparent:!0}),le=new gi.Mesh(V,Z),fe=new gi.PlaneGeometry(3,1.75),be=new gi.MeshBasicMaterial({map:N}),Me=new gi.Mesh(fe,be),ce=new gi.CircleGeometry(1,32),We=new gi.MeshBasicMaterial({map:D}),Ke=new gi.MeshBasicMaterial({map:F}),Ye=new gi.MeshBasicMaterial({map:O}),xe=new gi.MeshBasicMaterial({map:z}),ue=new gi.MeshBasicMaterial({map:B}),Se=new gi.MeshBasicMaterial({map:W}),je=new gi.Mesh(ce,We),rt=new gi.Mesh(ce,Ke),et=new gi.Mesh(ce,Ye),ot=new gi.Mesh(ce,xe),Et=new gi.Mesh(ce,ue),tn=new gi.Mesh(ce,Se),ln=new gi.Group;ln.position.set(.68,-.5,0);let Vt=.12;rt.scale.set(Vt,Vt,Vt),je.scale.set(Vt,Vt,Vt),et.scale.set(Vt,Vt,Vt),ot.scale.set(Vt,Vt,Vt),Et.scale.set(Vt,Vt,Vt),tn.scale.set(Vt,Vt,Vt),rt.position.set(0,0,0),je.position.set(.34,0,0),et.position.set(.69,0,0),ot.position.set(0,-.28,0),Et.position.set(.34,-.28,0),tn.position.set(.69,-.28,0),ln.add(rt),ln.add(je),ln.add(et),ln.add(ot),ln.add(Et),ln.add(tn);const En=E.addAnchor(0);En.group.add(J),En.group.add(le),En.group.add(Me),En.group.add(ln),J.scale.set(.33,.33,.33),J.position.set(0,0,.02),Me.scale.set(.33,.33,.33),Me.position.set(0,0,.01),le.scale.set(.33,.33,.33),le.position.set(0,.05,.01),rt.userData.clickable=!0,je.userData.clickable=!0,et.userData.clickable=!0,ot.userData.clickable=!0,Et.userData.clickable=!0,tn.userData.clickable=!0;const Bt=Mn=>{window.open(Mn,"_blank").focus()};document.body.addEventListener("click",Mn=>{const St=Mn.clientX/window.innerWidth*2-1,zn=-1*(Mn.clientY/window.innerHeight*2-1),Bn=new gi.Vector2(St,zn),wn=new gi.Raycaster;wn.setFromCamera(Bn,g);const Nn=wn.intersectObjects(u.children,!0);if(Nn.length>0){let $n=Nn[0].object;for(;$n.parent&&!$n.userData.clickable;)$n=$n.parent;$n.userData.clickable&&($n===ot?Bt("https://facebook.com"):$n===rt?Bt("http://www.davidburbury.co.uk"):$n===je?Bt("mailto:dave.burbury@gmail.com"):$n===et?Bt("tel:+447595660587"):$n===Et?Bt("https://www.instagram.com/davidburbury"):$n===tn&&Bt("https://www.linkedin.com/in/davidburbury/"))}});const sn=new gi.Clock;await E.start(),En.onTargetFound=()=>{i.setAnimationLoop(()=>{sn.getDelta();const Mn=sn.getElapsedTime(),St=Math.min(1.03,-.1+Mn*4);le.position.set(St,.05,.01);const zn=Math.min(.65,0+Mn*3);Me.position.set(0,-zn,.01);const Bn=Vt+.01*Math.sin(Mn*2);[rt,je,et,ot,Et,tn].forEach(wn=>{wn.scale.set(Bn,Bn,Bn)}),i.render(u,g),i.outputEncoding=gi.LinearEncoding})},En.onTargetLost=()=>{i.setAnimationLoop(null),window.location.reload()}};mq();
